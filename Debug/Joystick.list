
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009dc  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008194  08008194  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08008194  08008194  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008194  08008194  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800819c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f24  20000018  080081b4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f3c  080081b4  00021f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019647  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d6a  00000000  00000000  000396cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  0003d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ea  00000000  00000000  0003ec80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a459  00000000  00000000  0003ff6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb3c  00000000  00000000  0005a3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ad8f  00000000  00000000  00076eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006628  00000000  00000000  00111c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001182b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	080077a0 	.word	0x080077a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	080077a0 	.word	0x080077a0

08000150 <getPlayer>:


extern dificultad_t dificultad;


player_t *getPlayer(){
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

	return &Player;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getPlayer+0x10>)
}
 8000156:	4618      	mov	r0, r3
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000034 	.word	0x20000034

08000164 <getAlien>:

alien_t *getAlien(uint8_t fila, uint8_t columna){
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	460a      	mov	r2, r1
 800016e:	71fb      	strb	r3, [r7, #7]
 8000170:	4613      	mov	r3, r2
 8000172:	71bb      	strb	r3, [r7, #6]
	return &Alien[fila][columna];
 8000174:	79f9      	ldrb	r1, [r7, #7]
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	0092      	lsls	r2, r2, #2
 800017c:	441a      	add	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	009b      	lsls	r3, r3, #2
 8000182:	440b      	add	r3, r1
 8000184:	00d9      	lsls	r1, r3, #3
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	1853      	adds	r3, r2, r1
 800018a:	4a03      	ldr	r2, [pc, #12]	; (8000198 <getAlien+0x34>)
 800018c:	4413      	add	r3, r2
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000040 	.word	0x20000040

0800019c <getMovAliens>:

movimiento_aliens_t *getMovAliens(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	return &movimiento_Aliens;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <getMovAliens+0x10>)
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000003c 	.word	0x2000003c

080001b0 <getDisparo>:

disparo_t *getDisparo(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	return &Disparo;
 80001b4:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <getDisparo+0x10>)
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000038 	.word	0x20000038

080001c4 <playerInit>:

void playerInit(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	Player.posicion_X = 64;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <playerInit+0x14>)
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	705a      	strb	r2, [r3, #1]

}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000034 	.word	0x20000034

080001dc <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	6039      	str	r1, [r7, #0]
 80001e6:	71fb      	strb	r3, [r7, #7]

	if(direccion == derecha){
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d10e      	bne.n	800020c <plotPlayer+0x30>

		if(player->posicion_X >= 120){
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	2b77      	cmp	r3, #119	; 0x77
 80001f4:	d903      	bls.n	80001fe <plotPlayer+0x22>
			player->posicion_X = 120;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2278      	movs	r2, #120	; 0x78
 80001fa:	705a      	strb	r2, [r3, #1]
 80001fc:	e017      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X + 4;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	3304      	adds	r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	705a      	strb	r2, [r3, #1]
 800020a:	e010      	b.n	800022e <plotPlayer+0x52>
		}

	}
	else if(direccion == izquierda){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d10d      	bne.n	800022e <plotPlayer+0x52>

		if(player->posicion_X <= 0){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d103      	bne.n	8000222 <plotPlayer+0x46>
			player->posicion_X = 0;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	705a      	strb	r2, [r3, #1]
 8000220:	e005      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X - 4;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	3b04      	subs	r3, #4
 8000228:	b2da      	uxtb	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	705a      	strb	r2, [r3, #1]
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	b218      	sxth	r0, r3
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	2308      	movs	r3, #8
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2308      	movs	r3, #8
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <plotPlayer+0x74>)
 8000240:	2138      	movs	r1, #56	; 0x38
 8000242:	f000 fed1 	bl	8000fe8 <SSD1306_DrawBitmap>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	08007f98 	.word	0x08007f98

08000254 <InvaderInit>:



void InvaderInit(){
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

	movimiento_Aliens.orientacion = mov_derecha;
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <InvaderInit+0xa0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	e03e      	b.n	80002e4 <InvaderInit+0x90>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e035      	b.n	80002d8 <InvaderInit+0x84>
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	461a      	mov	r2, r3
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	441a      	add	r2, r3
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	4413      	add	r3, r2
 8000278:	b2dc      	uxtb	r4, r3
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6f 	bl	8000164 <getAlien>
 8000286:	4603      	mov	r3, r0
 8000288:	f104 020a 	add.w	r2, r4, #10
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	701a      	strb	r2, [r3, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff64 	bl	8000164 <getAlien>
 800029c:	4602      	mov	r2, r0
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	4419      	add	r1, r3
 80002a6:	0049      	lsls	r1, r1, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	7053      	strb	r3, [r2, #1]
			getAlien(y, x)->vivo = true;
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <getAlien>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2201      	movs	r2, #1
 80002be:	709a      	strb	r2, [r3, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff4c 	bl	8000164 <getAlien>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2202      	movs	r2, #2
 80002d0:	711a      	strb	r2, [r3, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b06      	cmp	r3, #6
 80002dc:	d9c6      	bls.n	800026c <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	3301      	adds	r3, #1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d9bd      	bls.n	8000266 <InvaderInit+0x12>
		}
	}

}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	2000003c 	.word	0x2000003c

080002f8 <plotAliens>:

void plotAliens(){
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af02      	add	r7, sp, #8


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80002fe:	f7ff ff4d 	bl	800019c <getMovAliens>
 8000302:	4603      	mov	r3, r0
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4aa9      	ldr	r2, [pc, #676]	; (80005ac <plotAliens+0x2b4>)
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	fbb3 f1f2 	udiv	r1, r3, r2
 800030e:	fb01 f202 	mul.w	r2, r1, r2
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 80a8 	bne.w	800046c <plotAliens+0x174>
			switch(getMovAliens()->orientacion){
 800031c:	f7ff ff3e 	bl	800019c <getMovAliens>
 8000320:	4603      	mov	r3, r0
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <plotAliens+0x36>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d025      	beq.n	8000378 <plotAliens+0x80>
							}
						}

						break;
				default:
					break;
 800032c:	e049      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	e01d      	b.n	8000370 <plotAliens+0x78>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	e014      	b.n	8000364 <plotAliens+0x6c>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 1;
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff0f 	bl	8000164 <getAlien>
 8000346:	4603      	mov	r3, r0
 8000348:	781c      	ldrb	r4, [r3, #0]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff07 	bl	8000164 <getAlien>
 8000356:	4603      	mov	r3, r0
 8000358:	1c62      	adds	r2, r4, #1
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3301      	adds	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	2b06      	cmp	r3, #6
 8000368:	d9e7      	bls.n	800033a <plotAliens+0x42>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	3301      	adds	r3, #1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d9de      	bls.n	8000334 <plotAliens+0x3c>
					break;
 8000376:	e024      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000378:	2300      	movs	r3, #0
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	e01d      	b.n	80003ba <plotAliens+0xc2>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800037e:	2300      	movs	r3, #0
 8000380:	713b      	strb	r3, [r7, #4]
 8000382:	e014      	b.n	80003ae <plotAliens+0xb6>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 1;
 8000384:	793a      	ldrb	r2, [r7, #4]
 8000386:	797b      	ldrb	r3, [r7, #5]
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff feea 	bl	8000164 <getAlien>
 8000390:	4603      	mov	r3, r0
 8000392:	781c      	ldrb	r4, [r3, #0]
 8000394:	793a      	ldrb	r2, [r7, #4]
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee2 	bl	8000164 <getAlien>
 80003a0:	4603      	mov	r3, r0
 80003a2:	1e62      	subs	r2, r4, #1
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	713b      	strb	r3, [r7, #4]
 80003ae:	793b      	ldrb	r3, [r7, #4]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9e7      	bls.n	8000384 <plotAliens+0x8c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	3301      	adds	r3, #1
 80003b8:	717b      	strb	r3, [r7, #5]
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d9de      	bls.n	800037e <plotAliens+0x86>
						break;
 80003c0:	bf00      	nop
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 80003c2:	2106      	movs	r1, #6
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fecd 	bl	8000164 <getAlien>
 80003ca:	4603      	mov	r3, r0
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b72      	cmp	r3, #114	; 0x72
 80003d0:	d904      	bls.n	80003dc <plotAliens+0xe4>

				getMovAliens()->orientacion = mov_izquierda;
 80003d2:	f7ff fee3 	bl	800019c <getMovAliens>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 80003dc:	2100      	movs	r1, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff fec0 	bl	8000164 <getAlien>
 80003e4:	4603      	mov	r3, r0
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10e      	bne.n	800040a <plotAliens+0x112>
				getMovAliens()->orientacion = mov_derecha;
 80003ec:	f7ff fed6 	bl	800019c <getMovAliens>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 80003f6:	f7ff fed1 	bl	800019c <getMovAliens>
 80003fa:	4603      	mov	r3, r0
 80003fc:	789c      	ldrb	r4, [r3, #2]
 80003fe:	f7ff fecd 	bl	800019c <getMovAliens>
 8000402:	4603      	mov	r3, r0
 8000404:	1c62      	adds	r2, r4, #1
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 800040a:	f7ff fec7 	bl	800019c <getMovAliens>
 800040e:	4603      	mov	r3, r0
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	2b0a      	cmp	r3, #10
 8000414:	d12a      	bne.n	800046c <plotAliens+0x174>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	e024      	b.n	8000466 <plotAliens+0x16e>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800041c:	2300      	movs	r3, #0
 800041e:	70bb      	strb	r3, [r7, #2]
 8000420:	e01b      	b.n	800045a <plotAliens+0x162>

						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000422:	78ba      	ldrb	r2, [r7, #2]
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe9b 	bl	8000164 <getAlien>
 800042e:	4603      	mov	r3, r0
 8000430:	785d      	ldrb	r5, [r3, #1]
 8000432:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <plotAliens+0x2b4>)
 8000434:	785c      	ldrb	r4, [r3, #1]
 8000436:	78ba      	ldrb	r2, [r7, #2]
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe91 	bl	8000164 <getAlien>
 8000442:	4603      	mov	r3, r0
 8000444:	192a      	adds	r2, r5, r4
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	705a      	strb	r2, [r3, #1]
						getMovAliens()->conteo_bajada = 0;
 800044a:	f7ff fea7 	bl	800019c <getMovAliens>
 800044e:	4603      	mov	r3, r0
 8000450:	2200      	movs	r2, #0
 8000452:	709a      	strb	r2, [r3, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	3301      	adds	r3, #1
 8000458:	70bb      	strb	r3, [r7, #2]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	2b06      	cmp	r3, #6
 800045e:	d9e0      	bls.n	8000422 <plotAliens+0x12a>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	3301      	adds	r3, #1
 8000464:	70fb      	strb	r3, [r7, #3]
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d9d7      	bls.n	800041c <plotAliens+0x124>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 800046c:	f7ff fe96 	bl	800019c <getMovAliens>
 8000470:	4603      	mov	r3, r0
 8000472:	785c      	ldrb	r4, [r3, #1]
 8000474:	f7ff fe92 	bl	800019c <getMovAliens>
 8000478:	4603      	mov	r3, r0
 800047a:	1c62      	adds	r2, r4, #1
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	705a      	strb	r2, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000480:	2300      	movs	r3, #0
 8000482:	707b      	strb	r3, [r7, #1]
 8000484:	e089      	b.n	800059a <plotAliens+0x2a2>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000486:	2300      	movs	r3, #0
 8000488:	703b      	strb	r3, [r7, #0]
 800048a:	e07f      	b.n	800058c <plotAliens+0x294>

					switch(y){
 800048c:	787b      	ldrb	r3, [r7, #1]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <plotAliens+0x1a0>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d026      	beq.n	80004e4 <plotAliens+0x1ec>
 8000496:	e04b      	b.n	8000530 <plotAliens+0x238>

					case 0:
						if(getAlien(y,x)->vivo == true){
 8000498:	783a      	ldrb	r2, [r7, #0]
 800049a:	787b      	ldrb	r3, [r7, #1]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe60 	bl	8000164 <getAlien>
 80004a4:	4603      	mov	r3, r0
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d167      	bne.n	800057c <plotAliens+0x284>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004ac:	783a      	ldrb	r2, [r7, #0]
 80004ae:	787b      	ldrb	r3, [r7, #1]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe56 	bl	8000164 <getAlien>
 80004b8:	4603      	mov	r3, r0
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b21c      	sxth	r4, r3
 80004be:	783a      	ldrb	r2, [r7, #0]
 80004c0:	787b      	ldrb	r3, [r7, #1]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe4d 	bl	8000164 <getAlien>
 80004ca:	4603      	mov	r3, r0
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b219      	sxth	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2308      	movs	r3, #8
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2310      	movs	r3, #16
 80004da:	4a35      	ldr	r2, [pc, #212]	; (80005b0 <plotAliens+0x2b8>)
 80004dc:	4620      	mov	r0, r4
 80004de:	f000 fd83 	bl	8000fe8 <SSD1306_DrawBitmap>
						}
						break;
 80004e2:	e04b      	b.n	800057c <plotAliens+0x284>
					case 1:
						if(getAlien(y,x)->vivo == true){
 80004e4:	783a      	ldrb	r2, [r7, #0]
 80004e6:	787b      	ldrb	r3, [r7, #1]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe3a 	bl	8000164 <getAlien>
 80004f0:	4603      	mov	r3, r0
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d143      	bne.n	8000580 <plotAliens+0x288>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004f8:	783a      	ldrb	r2, [r7, #0]
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe30 	bl	8000164 <getAlien>
 8000504:	4603      	mov	r3, r0
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b21c      	sxth	r4, r3
 800050a:	783a      	ldrb	r2, [r7, #0]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe27 	bl	8000164 <getAlien>
 8000516:	4603      	mov	r3, r0
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	b219      	sxth	r1, r3
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2308      	movs	r3, #8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2310      	movs	r3, #16
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <plotAliens+0x2b8>)
 8000528:	4620      	mov	r0, r4
 800052a:	f000 fd5d 	bl	8000fe8 <SSD1306_DrawBitmap>
						}
						break;
 800052e:	e027      	b.n	8000580 <plotAliens+0x288>
					default:
						if(getAlien(y,x)->vivo == true){
 8000530:	783a      	ldrb	r2, [r7, #0]
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe14 	bl	8000164 <getAlien>
 800053c:	4603      	mov	r3, r0
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11f      	bne.n	8000584 <plotAliens+0x28c>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000544:	783a      	ldrb	r2, [r7, #0]
 8000546:	787b      	ldrb	r3, [r7, #1]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe0a 	bl	8000164 <getAlien>
 8000550:	4603      	mov	r3, r0
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b21c      	sxth	r4, r3
 8000556:	783a      	ldrb	r2, [r7, #0]
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe01 	bl	8000164 <getAlien>
 8000562:	4603      	mov	r3, r0
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	b219      	sxth	r1, r3
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2308      	movs	r3, #8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <plotAliens+0x2bc>)
 8000574:	4620      	mov	r0, r4
 8000576:	f000 fd37 	bl	8000fe8 <SSD1306_DrawBitmap>
						}
						break;
 800057a:	e003      	b.n	8000584 <plotAliens+0x28c>
						break;
 800057c:	bf00      	nop
 800057e:	e002      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000584:	bf00      	nop
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	703b      	strb	r3, [r7, #0]
 800058c:	783b      	ldrb	r3, [r7, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	f67f af7c 	bls.w	800048c <plotAliens+0x194>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000594:	787b      	ldrb	r3, [r7, #1]
 8000596:	3301      	adds	r3, #1
 8000598:	707b      	strb	r3, [r7, #1]
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	2b02      	cmp	r3, #2
 800059e:	f67f af72 	bls.w	8000486 <plotAliens+0x18e>
					}
			}

		}

}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	200000ac 	.word	0x200000ac
 80005b0:	08007fb0 	.word	0x08007fb0
 80005b4:	08007fc0 	.word	0x08007fc0

080005b8 <disparoInit>:


void disparoInit(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	Disparo.posicion_x = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <disparoInit+0x20>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <disparoInit+0x20>)
 80005c4:	223c      	movs	r2, #60	; 0x3c
 80005c6:	705a      	strb	r2, [r3, #1]
	Disparo.disparo = false;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <disparoInit+0x20>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	709a      	strb	r2, [r3, #2]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000038 	.word	0x20000038

080005dc <disparar>:


void disparar(){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8


			if(getDisparo()->numero_disparos == 1){
 80005e2:	f7ff fde5 	bl	80001b0 <getDisparo>
 80005e6:	4603      	mov	r3, r0
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <disparar+0x2c>
				getDisparo()->disparo = true;
 80005ee:	f7ff fddf 	bl	80001b0 <getDisparo>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2201      	movs	r2, #1
 80005f6:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 80005f8:	f7ff fdaa 	bl	8000150 <getPlayer>
 80005fc:	4604      	mov	r4, r0
 80005fe:	f7ff fdd7 	bl	80001b0 <getDisparo>
 8000602:	4603      	mov	r3, r0
 8000604:	7862      	ldrb	r2, [r4, #1]
 8000606:	701a      	strb	r2, [r3, #0]
			}


			if(getDisparo()->disparo == true){
 8000608:	f7ff fdd2 	bl	80001b0 <getDisparo>
 800060c:	4603      	mov	r3, r0
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d145      	bne.n	80006a0 <disparar+0xc4>
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 3, 1);
 8000614:	f7ff fdcc 	bl	80001b0 <getDisparo>
 8000618:	4603      	mov	r3, r0
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3304      	adds	r3, #4
 8000620:	b29c      	uxth	r4, r3
 8000622:	f7ff fdc5 	bl	80001b0 <getDisparo>
 8000626:	4603      	mov	r3, r0
 8000628:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800062c:	b29d      	uxth	r5, r3
 800062e:	f7ff fdbf 	bl	80001b0 <getDisparo>
 8000632:	4603      	mov	r3, r0
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	3304      	adds	r3, #4
 800063a:	b29e      	uxth	r6, r3
 800063c:	f7ff fdb8 	bl	80001b0 <getDisparo>
 8000640:	4603      	mov	r3, r0
 8000642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3303      	adds	r3, #3
 800064a:	b29b      	uxth	r3, r3
 800064c:	2201      	movs	r2, #1
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	4632      	mov	r2, r6
 8000652:	4629      	mov	r1, r5
 8000654:	4620      	mov	r0, r4
 8000656:	f000 ff52 	bl	80014fe <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800065a:	f7ff fda9 	bl	80001b0 <getDisparo>
 800065e:	4603      	mov	r3, r0
 8000660:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b06      	subs	r3, #6
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	f7ff fda1 	bl	80001b0 <getDisparo>
 800066e:	4603      	mov	r3, r0
 8000670:	b262      	sxtb	r2, r4
 8000672:	705a      	strb	r2, [r3, #1]


				if(getDisparo()->posicion_y <= 0){
 8000674:	f7ff fd9c 	bl	80001b0 <getDisparo>
 8000678:	4603      	mov	r3, r0
 800067a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc0e      	bgt.n	80006a0 <disparar+0xc4>
					//Se reinician los valores del disparo
					getDisparo()->disparo = false;
 8000682:	f7ff fd95 	bl	80001b0 <getDisparo>
 8000686:	4603      	mov	r3, r0
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800068c:	f7ff fd90 	bl	80001b0 <getDisparo>
 8000690:	4603      	mov	r3, r0
 8000692:	223c      	movs	r2, #60	; 0x3c
 8000694:	705a      	strb	r2, [r3, #1]
					getDisparo()->numero_disparos = 0;
 8000696:	f7ff fd8b 	bl	80001b0 <getDisparo>
 800069a:	4603      	mov	r3, r0
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
				}
			}


			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e0c0      	b.n	8000828 <disparar+0x24c>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	e0b6      	b.n	800081a <disparar+0x23e>

					if( (getDisparo()->posicion_x >= getAlien(y,x)->posicion_X) &&  (getDisparo()->posicion_x <= getAlien(y,x)->posicion_X + (TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS) )){
 80006ac:	f7ff fd80 	bl	80001b0 <getDisparo>
 80006b0:	4603      	mov	r3, r0
 80006b2:	781c      	ldrb	r4, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd52 	bl	8000164 <getAlien>
 80006c0:	4603      	mov	r3, r0
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d35b      	bcc.n	8000780 <disparar+0x1a4>
 80006c8:	f7ff fd72 	bl	80001b0 <getDisparo>
 80006cc:	4603      	mov	r3, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461c      	mov	r4, r3
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd43 	bl	8000164 <getAlien>
 80006de:	4603      	mov	r3, r0
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	330d      	adds	r3, #13
 80006e4:	429c      	cmp	r4, r3
 80006e6:	dc4b      	bgt.n	8000780 <disparar+0x1a4>
						if( (getDisparo()->posicion_y >= getAlien(y,x)->posicion_Y) && (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + (TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS)) ){
 80006e8:	f7ff fd62 	bl	80001b0 <getDisparo>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f2:	461c      	mov	r4, r3
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd32 	bl	8000164 <getAlien>
 8000700:	4603      	mov	r3, r0
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	429c      	cmp	r4, r3
 8000706:	db3b      	blt.n	8000780 <disparar+0x1a4>
 8000708:	f7ff fd52 	bl	80001b0 <getDisparo>
 800070c:	4603      	mov	r3, r0
 800070e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000712:	461c      	mov	r4, r3
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd22 	bl	8000164 <getAlien>
 8000720:	4603      	mov	r3, r0
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	330b      	adds	r3, #11
 8000726:	429c      	cmp	r4, r3
 8000728:	dc2a      	bgt.n	8000780 <disparar+0x1a4>

								if(getAlien(y,x)->vivo == true){
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd17 	bl	8000164 <getAlien>
 8000736:	4603      	mov	r3, r0
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d120      	bne.n	8000780 <disparar+0x1a4>
									getAlien(y,x)->vivo = false;
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd0d 	bl	8000164 <getAlien>
 800074a:	4603      	mov	r3, r0
 800074c:	2200      	movs	r2, #0
 800074e:	709a      	strb	r2, [r3, #2]
									getAlien(y,x)->explosion = true;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd04 	bl	8000164 <getAlien>
 800075c:	4603      	mov	r3, r0
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]

									//Se reinician los valores del disparo
									getDisparo()->disparo = false;
 8000762:	f7ff fd25 	bl	80001b0 <getDisparo>
 8000766:	4603      	mov	r3, r0
 8000768:	2200      	movs	r2, #0
 800076a:	709a      	strb	r2, [r3, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800076c:	f7ff fd20 	bl	80001b0 <getDisparo>
 8000770:	4603      	mov	r3, r0
 8000772:	223c      	movs	r2, #60	; 0x3c
 8000774:	705a      	strb	r2, [r3, #1]
									getDisparo()->numero_disparos = 0;
 8000776:	f7ff fd1b 	bl	80001b0 <getDisparo>
 800077a:	4603      	mov	r3, r0
 800077c:	2200      	movs	r2, #0
 800077e:	70da      	strb	r2, [r3, #3]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fcec 	bl	8000164 <getAlien>
 800078c:	4603      	mov	r3, r0
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d13f      	bne.n	8000814 <disparar+0x238>
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fce2 	bl	8000164 <getAlien>
 80007a0:	4603      	mov	r3, r0
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b21c      	sxth	r4, r3
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fcd9 	bl	8000164 <getAlien>
 80007b2:	4603      	mov	r3, r0
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	b219      	sxth	r1, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2308      	movs	r3, #8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2310      	movs	r3, #16
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <disparar+0x260>)
 80007c4:	4620      	mov	r0, r4
 80007c6:	f000 fc0f 	bl	8000fe8 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fcc7 	bl	8000164 <getAlien>
 80007d6:	4603      	mov	r3, r0
 80007d8:	791c      	ldrb	r4, [r3, #4]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcbf 	bl	8000164 <getAlien>
 80007e6:	4603      	mov	r3, r0
 80007e8:	1e62      	subs	r2, r4, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	711a      	strb	r2, [r3, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fcb5 	bl	8000164 <getAlien>
 80007fa:	4603      	mov	r3, r0
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <disparar+0x238>
							getAlien(y,x)->explosion = false;
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fcab 	bl	8000164 <getAlien>
 800080e:	4603      	mov	r3, r0
 8000810:	2200      	movs	r2, #0
 8000812:	70da      	strb	r2, [r3, #3]
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	3301      	adds	r3, #1
 8000818:	71bb      	strb	r3, [r7, #6]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b06      	cmp	r3, #6
 800081e:	f67f af45 	bls.w	80006ac <disparar+0xd0>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	f67f af3b 	bls.w	80006a6 <disparar+0xca>
						}
					}
				}
			}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	bf00      	nop
 800083c:	08007fa0 	.word	0x08007fa0

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 fa92 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f844 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f950 	bl	8000af0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000850:	f000 f89c 	bl	800098c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000854:	f000 f8e8 	bl	8000a28 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000858:	f000 f914 	bl	8000a84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800085c:	f003 ffe8 	bl	8004830 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueJoystPant */
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000860:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <main+0x68>)
 8000862:	2103      	movs	r1, #3
 8000864:	200a      	movs	r0, #10
 8000866:	f004 f921 	bl	8004aac <osMessageQueueNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <main+0x6c>)
 800086e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JoystickTask */
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <main+0x70>)
 8000872:	2100      	movs	r1, #0
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <main+0x74>)
 8000876:	f004 f841 	bl	80048fc <osThreadNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <main+0x78>)
 800087e:	6013      	str	r3, [r2, #0]

  /* creation of PantallaTask */
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <main+0x7c>)
 8000882:	2100      	movs	r1, #0
 8000884:	480e      	ldr	r0, [pc, #56]	; (80008c0 <main+0x80>)
 8000886:	f004 f839 	bl	80048fc <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <main+0x84>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of MemoriaTask */
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <main+0x88>)
 8000892:	2100      	movs	r1, #0
 8000894:	480d      	ldr	r0, [pc, #52]	; (80008cc <main+0x8c>)
 8000896:	f004 f831 	bl	80048fc <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <main+0x90>)
 800089e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008a0:	f003 fff8 	bl	8004894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008a4:	e7fe      	b.n	80008a4 <main+0x64>
 80008a6:	bf00      	nop
 80008a8:	0800803c 	.word	0x0800803c
 80008ac:	20000198 	.word	0x20000198
 80008b0:	08007fd0 	.word	0x08007fd0
 80008b4:	08000c5d 	.word	0x08000c5d
 80008b8:	2000018c 	.word	0x2000018c
 80008bc:	08007ff4 	.word	0x08007ff4
 80008c0:	08000d4d 	.word	0x08000d4d
 80008c4:	20000190 	.word	0x20000190
 80008c8:	08008018 	.word	0x08008018
 80008cc:	08000dc9 	.word	0x08000dc9
 80008d0:	20000194 	.word	0x20000194

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	; 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008de:	2228      	movs	r2, #40	; 0x28
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 ff22 	bl	800772c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000912:	2301      	movs	r3, #1
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000920:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000924:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092a:	4618      	mov	r0, r3
 800092c:	f002 ff06 	bl	800373c <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000936:	f000 fa61 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2302      	movs	r3, #2
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2102      	movs	r1, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f003 f972 	bl	8003c40 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000962:	f000 fa4b 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000966:	2302      	movs	r3, #2
 8000968:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800096a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800096e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fb22 	bl	8003fbc <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800097e:	f000 fa3d 	bl	8000dfc <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_ADC1_Init+0x94>)
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <MX_ADC1_Init+0x98>)
 80009a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009b8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009c6:	2202      	movs	r2, #2
 80009c8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ca:	4815      	ldr	r0, [pc, #84]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009cc:	f001 fa00 	bl	8001dd0 <HAL_ADC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80009d6:	f000 fa11 	bl	8000dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009de:	2301      	movs	r3, #1
 80009e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_ADC1_Init+0x94>)
 80009ec:	f001 fcb4 	bl	8002358 <HAL_ADC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009f6:	f000 fa01 	bl	8000dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4806      	ldr	r0, [pc, #24]	; (8000a20 <MX_ADC1_Init+0x94>)
 8000a08:	f001 fca6 	bl	8002358 <HAL_ADC_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a12:	f000 f9f3 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000b0 	.word	0x200000b0
 8000a24:	40012400 	.word	0x40012400

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f002 f89f 	bl	8002ba8 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 f9c4 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000e0 	.word	0x200000e0
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	00061a80 	.word	0x00061a80

08000a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <MX_SPI1_Init+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab8:	2218      	movs	r2, #24
 8000aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad6:	f003 fbdd 	bl	8004294 <HAL_SPI_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae0:	f000 f98c 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000134 	.word	0x20000134
 8000aec:	40013000 	.word	0x40013000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b04:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a33      	ldr	r2, [pc, #204]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a2d      	ldr	r2, [pc, #180]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b22:	f043 0320 	orr.w	r3, r3, #32
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0320 	and.w	r3, r3, #32
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_GPIO_Init+0xe8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	481c      	ldr	r0, [pc, #112]	; (8000bdc <MX_GPIO_Init+0xec>)
 8000b6c:	f002 f803 	bl	8002b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b76:	481a      	ldr	r0, [pc, #104]	; (8000be0 <MX_GPIO_Init+0xf0>)
 8000b78:	f001 fffd 	bl	8002b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	4811      	ldr	r0, [pc, #68]	; (8000bdc <MX_GPIO_Init+0xec>)
 8000b96:	f001 fe53 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0310 	add.w	r3, r7, #16
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0xf0>)
 8000bae:	f001 fe47 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_GPIO_Init+0xf0>)
 8000bcc:	f001 fe38 	bl	8002840 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	40010800 	.word	0x40010800

08000be4 <config_ADC_canal0>:

/* USER CODE BEGIN 4 */

void config_ADC_canal0(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]

	  sConfig.Channel = ADC_CHANNEL_0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <config_ADC_canal0+0x38>)
 8000c06:	f001 fba7 	bl	8002358 <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <config_ADC_canal0+0x30>
	  {
	    Error_Handler();
 8000c10:	f000 f8f4 	bl	8000dfc <Error_Handler>
	  }
}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200000b0 	.word	0x200000b0

08000c20 <config_ADC_canal1>:

void config_ADC_canal1(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]

	  sConfig.Channel = ADC_CHANNEL_1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <config_ADC_canal1+0x38>)
 8000c42:	f001 fb89 	bl	8002358 <HAL_ADC_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <config_ADC_canal1+0x30>
	  {
	    Error_Handler();
 8000c4c:	f000 f8d6 	bl	8000dfc <Error_Handler>
	  }
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000b0 	.word	0x200000b0

08000c5c <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c64:	f005 fa6e 	bl	8006144 <xTaskGetTickCount>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60bb      	str	r3, [r7, #8]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  config_ADC_canal0();
 8000c6c:	f7ff ffba 	bl	8000be4 <config_ADC_canal0>
	  HAL_ADC_Start(&hadc1);
 8000c70:	4832      	ldr	r0, [pc, #200]	; (8000d3c <entryJoystick+0xe0>)
 8000c72:	f001 f985 	bl	8001f80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c76:	210a      	movs	r1, #10
 8000c78:	4830      	ldr	r0, [pc, #192]	; (8000d3c <entryJoystick+0xe0>)
 8000c7a:	f001 fa5b 	bl	8002134 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000c7e:	482f      	ldr	r0, [pc, #188]	; (8000d3c <entryJoystick+0xe0>)
 8000c80:	f001 fb5e 	bl	8002340 <HAL_ADC_GetValue>
 8000c84:	4603      	mov	r3, r0
 8000c86:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 8000c88:	482c      	ldr	r0, [pc, #176]	; (8000d3c <entryJoystick+0xe0>)
 8000c8a:	f001 fa27 	bl	80020dc <HAL_ADC_Stop>


	  //Joystick eje Y: arriba o abajo.
	  config_ADC_canal1();
 8000c8e:	f7ff ffc7 	bl	8000c20 <config_ADC_canal1>
	  HAL_ADC_Start(&hadc1);
 8000c92:	482a      	ldr	r0, [pc, #168]	; (8000d3c <entryJoystick+0xe0>)
 8000c94:	f001 f974 	bl	8001f80 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c98:	210a      	movs	r1, #10
 8000c9a:	4828      	ldr	r0, [pc, #160]	; (8000d3c <entryJoystick+0xe0>)
 8000c9c:	f001 fa4a 	bl	8002134 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc1);
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <entryJoystick+0xe0>)
 8000ca2:	f001 fb4d 	bl	8002340 <HAL_ADC_GetValue>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	82bb      	strh	r3, [r7, #20]
	  HAL_ADC_Stop(&hadc1);
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <entryJoystick+0xe0>)
 8000cac:	f001 fa16 	bl	80020dc <HAL_ADC_Stop>

	  if(val_x > 2000){
 8000cb0:	8afb      	ldrh	r3, [r7, #22]
 8000cb2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cb6:	d902      	bls.n	8000cbe <entryJoystick+0x62>
		  joystick.x_value = derecha;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	733b      	strb	r3, [r7, #12]
 8000cbc:	e008      	b.n	8000cd0 <entryJoystick+0x74>
	  }
	  else if(val_x < 1600){
 8000cbe:	8afb      	ldrh	r3, [r7, #22]
 8000cc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000cc4:	d202      	bcs.n	8000ccc <entryJoystick+0x70>
		  joystick.x_value = izquierda;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	733b      	strb	r3, [r7, #12]
 8000cca:	e001      	b.n	8000cd0 <entryJoystick+0x74>
	  }
	  else{
		  joystick.x_value = nulo_;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	733b      	strb	r3, [r7, #12]
	  }


	  if(val_y > 2000){
 8000cd0:	8abb      	ldrh	r3, [r7, #20]
 8000cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cd6:	d902      	bls.n	8000cde <entryJoystick+0x82>
		  joystick.y_value = abajo;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	737b      	strb	r3, [r7, #13]
 8000cdc:	e008      	b.n	8000cf0 <entryJoystick+0x94>
	  }
	  else if(val_y < 1600){
 8000cde:	8abb      	ldrh	r3, [r7, #20]
 8000ce0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000ce4:	d202      	bcs.n	8000cec <entryJoystick+0x90>
		  joystick.y_value = arriba;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	737b      	strb	r3, [r7, #13]
 8000cea:	e001      	b.n	8000cf0 <entryJoystick+0x94>
	  }
	  else{
		  joystick.y_value = nulo;
 8000cec:	2302      	movs	r3, #2
 8000cee:	737b      	strb	r3, [r7, #13]
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000cf0:	2104      	movs	r1, #4
 8000cf2:	4813      	ldr	r0, [pc, #76]	; (8000d40 <entryJoystick+0xe4>)
 8000cf4:	f001 ff28 	bl	8002b48 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d102      	bne.n	8000d04 <entryJoystick+0xa8>
		  joystick.boton = true;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	73bb      	strb	r3, [r7, #14]
 8000d02:	e001      	b.n	8000d08 <entryJoystick+0xac>
	  }
	  else{
		  joystick.boton = false;
 8000d04:	2300      	movs	r3, #0
 8000d06:	73bb      	strb	r3, [r7, #14]
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <entryJoystick+0xe8>)
 8000d0a:	6818      	ldr	r0, [r3, #0]
 8000d0c:	f107 010c 	add.w	r1, r7, #12
 8000d10:	2300      	movs	r3, #0
 8000d12:	2200      	movs	r2, #0
 8000d14:	f003 ff50 	bl	8004bb8 <osMessageQueuePut>
 8000d18:	6138      	str	r0, [r7, #16]
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <entryJoystick+0xd0>
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4808      	ldr	r0, [pc, #32]	; (8000d48 <entryJoystick+0xec>)
 8000d28:	f001 ff25 	bl	8002b76 <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	2132      	movs	r1, #50	; 0x32
 8000d32:	4618      	mov	r0, r3
 8000d34:	f005 f842 	bl	8005dbc <vTaskDelayUntil>
  {
 8000d38:	e798      	b.n	8000c6c <entryJoystick+0x10>
 8000d3a:	bf00      	nop
 8000d3c:	200000b0 	.word	0x200000b0
 8000d40:	40010800 	.word	0x40010800
 8000d44:	20000198 	.word	0x20000198
 8000d48:	40011000 	.word	0x40011000

08000d4c <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8000d54:	f000 f9b0 	bl	80010b8 <SSD1306_Init>
	SSD1306_Clear();
 8000d58:	f000 fda0 	bl	800189c <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8000d5c:	f000 fa70 	bl	8001240 <SSD1306_UpdateScreen>

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000d60:	f000 f85c 	bl	8000e1c <menuInit>


	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 1;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <entryPantalla+0x70>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <entryPantalla+0x70>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	705a      	strb	r2, [r3, #1]


  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <entryPantalla+0x74>)
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	f107 0108 	add.w	r1, r7, #8
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f003 ff8f 	bl	8004ca0 <osMessageQueueGet>
 8000d82:	60f8      	str	r0, [r7, #12]

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <entryPantalla+0x4c>
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <entryPantalla+0x78>)
 8000d92:	f001 fef0 	bl	8002b76 <HAL_GPIO_WritePin>
 8000d96:	e00b      	b.n	8000db0 <entryPantalla+0x64>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <entryPantalla+0x78>)
 8000da0:	f001 fee9 	bl	8002b76 <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000da4:	7a3b      	ldrb	r3, [r7, #8]
 8000da6:	7a79      	ldrb	r1, [r7, #9]
 8000da8:	7aba      	ldrb	r2, [r7, #10]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f84a 	bl	8000e44 <menuActualizar>

	}


    SSD1306_UpdateScreen(); // update screen
 8000db0:	f000 fa46 	bl	8001240 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 fa71 	bl	800129c <SSD1306_Fill>
  {
 8000dba:	e7d9      	b.n	8000d70 <entryPantalla+0x24>
 8000dbc:	200000ac 	.word	0x200000ac
 8000dc0:	20000198 	.word	0x20000198
 8000dc4:	40011000 	.word	0x40011000

08000dc8 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryMemoria */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f003 fe3d 	bl	8004a50 <osDelay>
 8000dd6:	e7fb      	b.n	8000dd0 <entryMemoria+0x8>

08000dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dea:	f000 ffd5 	bl	8001d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40000800 	.word	0x40000800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <getMenu>:
#include "menu.h"
#include "invaders.h"

menu_t menu;

menu_t *getMenu(){
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

	return &menu;
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <getMenu+0x10>)
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000019c 	.word	0x2000019c

08000e1c <menuInit>:


void menuInit(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8000e20:	f7ff f9d0 	bl	80001c4 <playerInit>
	InvaderInit();
 8000e24:	f7ff fa16 	bl	8000254 <InvaderInit>
	disparoInit();
 8000e28:	f7ff fbc6 	bl	80005b8 <disparoInit>

	//Se inicializa el cursor de la pantalla principal.
	getMenu()->menuActual = menu_principal;
 8000e2c:	f7ff ffec 	bl	8000e08 <getMenu>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8000e36:	f7ff ffe7 	bl	8000e08 <getMenu>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2226      	movs	r2, #38	; 0x26
 8000e3e:	705a      	strb	r2, [r3, #1]


}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	71bb      	strb	r3, [r7, #6]
 8000e52:	4613      	mov	r3, r2
 8000e54:	717b      	strb	r3, [r7, #5]


	switch(getMenu()->menuActual){
 8000e56:	f7ff ffd7 	bl	8000e08 <getMenu>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	f200 80b1 	bhi.w	8000fc6 <menuActualizar+0x182>
 8000e64:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <menuActualizar+0x28>)
 8000e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6a:	bf00      	nop
 8000e6c:	08000e81 	.word	0x08000e81
 8000e70:	08000f35 	.word	0x08000f35
 8000e74:	08000f83 	.word	0x08000f83
 8000e78:	08000fc7 	.word	0x08000fc7
 8000e7c:	08000fb3 	.word	0x08000fb3

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 8000e80:	2301      	movs	r3, #1
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	2320      	movs	r3, #32
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2340      	movs	r3, #64	; 0x40
 8000e8a:	4a51      	ldr	r2, [pc, #324]	; (8000fd0 <menuActualizar+0x18c>)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2023      	movs	r0, #35	; 0x23
 8000e90:	f000 f8aa 	bl	8000fe8 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 8000e94:	2123      	movs	r1, #35	; 0x23
 8000e96:	202d      	movs	r0, #45	; 0x2d
 8000e98:	f000 fa76 	bl	8001388 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	494d      	ldr	r1, [pc, #308]	; (8000fd4 <menuActualizar+0x190>)
 8000ea0:	484d      	ldr	r0, [pc, #308]	; (8000fd8 <menuActualizar+0x194>)
 8000ea2:	f000 fb07 	bl	80014b4 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8000ea6:	212d      	movs	r1, #45	; 0x2d
 8000ea8:	202d      	movs	r0, #45	; 0x2d
 8000eaa:	f000 fa6d 	bl	8001388 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4948      	ldr	r1, [pc, #288]	; (8000fd4 <menuActualizar+0x190>)
 8000eb2:	484a      	ldr	r0, [pc, #296]	; (8000fdc <menuActualizar+0x198>)
 8000eb4:	f000 fafe 	bl	80014b4 <SSD1306_Puts>


		if(y == arriba){
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d105      	bne.n	8000eca <menuActualizar+0x86>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8000ebe:	f7ff ffa3 	bl	8000e08 <getMenu>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2226      	movs	r2, #38	; 0x26
 8000ec6:	705a      	strb	r2, [r3, #1]
 8000ec8:	e007      	b.n	8000eda <menuActualizar+0x96>
		}
		else if(y == abajo){
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d104      	bne.n	8000eda <menuActualizar+0x96>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 8000ed0:	f7ff ff9a 	bl	8000e08 <getMenu>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2230      	movs	r2, #48	; 0x30
 8000ed8:	705a      	strb	r2, [r3, #1]
		}

		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 8000eda:	f7ff ff95 	bl	8000e08 <getMenu>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	b219      	sxth	r1, r3
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	2027      	movs	r0, #39	; 0x27
 8000eea:	f000 fc03 	bl	80016f4 <SSD1306_DrawCircle>


		switch(boton){
 8000eee:	797b      	ldrb	r3, [r7, #5]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d019      	beq.n	8000f28 <menuActualizar+0xe4>
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d119      	bne.n	8000f2c <menuActualizar+0xe8>
		case true:
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 8000ef8:	f7ff ff86 	bl	8000e08 <getMenu>
 8000efc:	4603      	mov	r3, r0
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	2b26      	cmp	r3, #38	; 0x26
 8000f02:	d105      	bne.n	8000f10 <menuActualizar+0xcc>
				getMenu()->menuActual = juego;
 8000f04:	f7ff ff80 	bl	8000e08 <getMenu>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
			}
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
				getMenu()->menuActual = puntajes;
			}
			break;
 8000f0e:	e00f      	b.n	8000f30 <menuActualizar+0xec>
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8000f10:	f7ff ff7a 	bl	8000e08 <getMenu>
 8000f14:	4603      	mov	r3, r0
 8000f16:	785b      	ldrb	r3, [r3, #1]
 8000f18:	2b30      	cmp	r3, #48	; 0x30
 8000f1a:	d109      	bne.n	8000f30 <menuActualizar+0xec>
				getMenu()->menuActual = puntajes;
 8000f1c:	f7ff ff74 	bl	8000e08 <getMenu>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2202      	movs	r2, #2
 8000f24:	701a      	strb	r2, [r3, #0]
			break;
 8000f26:	e003      	b.n	8000f30 <menuActualizar+0xec>
		case false:
			break;
 8000f28:	bf00      	nop
 8000f2a:	e04d      	b.n	8000fc8 <menuActualizar+0x184>
		default:
			break;
 8000f2c:	bf00      	nop
 8000f2e:	e04b      	b.n	8000fc8 <menuActualizar+0x184>
			break;
 8000f30:	bf00      	nop
		}

		break;
 8000f32:	e049      	b.n	8000fc8 <menuActualizar+0x184>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 8000f34:	f7ff f90c 	bl	8000150 <getPlayer>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f94c 	bl	80001dc <plotPlayer>
		plotAliens();
 8000f44:	f7ff f9d8 	bl	80002f8 <plotAliens>

		disparar();
 8000f48:	f7ff fb48 	bl	80005dc <disparar>


		//Prender led si se apretó el boton
		if(boton == true){
 8000f4c:	797b      	ldrb	r3, [r7, #5]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d110      	bne.n	8000f74 <menuActualizar+0x130>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f58:	4821      	ldr	r0, [pc, #132]	; (8000fe0 <menuActualizar+0x19c>)
 8000f5a:	f001 fe0c 	bl	8002b76 <HAL_GPIO_WritePin>
			//boton_apretado = 1;
			getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 8000f5e:	f7ff f927 	bl	80001b0 <getDisparo>
 8000f62:	4603      	mov	r3, r0
 8000f64:	78dc      	ldrb	r4, [r3, #3]
 8000f66:	f7ff f923 	bl	80001b0 <getDisparo>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	1c62      	adds	r2, r4, #1
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	70da      	strb	r2, [r3, #3]
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		}

		break;
 8000f72:	e029      	b.n	8000fc8 <menuActualizar+0x184>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	4819      	ldr	r0, [pc, #100]	; (8000fe0 <menuActualizar+0x19c>)
 8000f7c:	f001 fdfb 	bl	8002b76 <HAL_GPIO_WritePin>
		break;
 8000f80:	e022      	b.n	8000fc8 <menuActualizar+0x184>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		SSD1306_GotoXY(35, 25);
 8000f82:	2119      	movs	r1, #25
 8000f84:	2023      	movs	r0, #35	; 0x23
 8000f86:	f000 f9ff 	bl	8001388 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4911      	ldr	r1, [pc, #68]	; (8000fd4 <menuActualizar+0x190>)
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <menuActualizar+0x198>)
 8000f90:	f000 fa90 	bl	80014b4 <SSD1306_Puts>


		switch(boton){
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <menuActualizar+0x166>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d107      	bne.n	8000fae <menuActualizar+0x16a>
		case true:
				getMenu()->menuActual = menu_principal;
 8000f9e:	f7ff ff33 	bl	8000e08 <getMenu>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
			break;
 8000fa8:	e002      	b.n	8000fb0 <menuActualizar+0x16c>
		case false:
			break;
 8000faa:	bf00      	nop
 8000fac:	e00c      	b.n	8000fc8 <menuActualizar+0x184>
		default:
			break;
 8000fae:	bf00      	nop
		}
		break;
 8000fb0:	e00a      	b.n	8000fc8 <menuActualizar+0x184>


//-------------------------------------------------------------- GAME OVER -----------------------------------------------------------------------------
	case game_over:

		SSD1306_GotoXY(35, 25);
 8000fb2:	2119      	movs	r1, #25
 8000fb4:	2023      	movs	r0, #35	; 0x23
 8000fb6:	f000 f9e7 	bl	8001388 <SSD1306_GotoXY>
		SSD1306_Puts("GAME OVER", &Font_7x10, 1);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4905      	ldr	r1, [pc, #20]	; (8000fd4 <menuActualizar+0x190>)
 8000fbe:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <menuActualizar+0x1a0>)
 8000fc0:	f000 fa78 	bl	80014b4 <SSD1306_Puts>


		break;
 8000fc4:	e000      	b.n	8000fc8 <menuActualizar+0x184>
	default:
		break;
 8000fc6:	bf00      	nop
	}

}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd90      	pop	{r4, r7, pc}
 8000fd0:	08008054 	.word	0x08008054
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	080077f4 	.word	0x080077f4
 8000fdc:	080077fc 	.word	0x080077fc
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	08007808 	.word	0x08007808

08000fe8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60ba      	str	r2, [r7, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	81fb      	strh	r3, [r7, #14]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	81bb      	strh	r3, [r7, #12]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001002:	3307      	adds	r3, #7
 8001004:	2b00      	cmp	r3, #0
 8001006:	da00      	bge.n	800100a <SSD1306_DrawBitmap+0x22>
 8001008:	3307      	adds	r3, #7
 800100a:	10db      	asrs	r3, r3, #3
 800100c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8001012:	2300      	movs	r3, #0
 8001014:	82bb      	strh	r3, [r7, #20]
 8001016:	e044      	b.n	80010a2 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001018:	2300      	movs	r3, #0
 800101a:	827b      	strh	r3, [r7, #18]
 800101c:	e02f      	b.n	800107e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800101e:	8a7b      	ldrh	r3, [r7, #18]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	e012      	b.n	8001056 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001030:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001034:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001038:	fb03 f202 	mul.w	r2, r3, r2
 800103c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001040:	2b00      	cmp	r3, #0
 8001042:	da00      	bge.n	8001046 <SSD1306_DrawBitmap+0x5e>
 8001044:	3307      	adds	r3, #7
 8001046:	10db      	asrs	r3, r3, #3
 8001048:	b21b      	sxth	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	461a      	mov	r2, r3
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da09      	bge.n	8001072 <SSD1306_DrawBitmap+0x8a>
 800105e:	89fa      	ldrh	r2, [r7, #14]
 8001060:	8a7b      	ldrh	r3, [r7, #18]
 8001062:	4413      	add	r3, r2
 8001064:	b29b      	uxth	r3, r3
 8001066:	89b9      	ldrh	r1, [r7, #12]
 8001068:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f92d 	bl	80012cc <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8001072:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001076:	b29b      	uxth	r3, r3
 8001078:	3301      	adds	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	827b      	strh	r3, [r7, #18]
 800107e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbc9      	blt.n	800101e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 800108a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800108e:	b29b      	uxth	r3, r3
 8001090:	3301      	adds	r3, #1
 8001092:	b29b      	uxth	r3, r3
 8001094:	82bb      	strh	r3, [r7, #20]
 8001096:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800109a:	b29b      	uxth	r3, r3
 800109c:	3301      	adds	r3, #1
 800109e:	b29b      	uxth	r3, r3
 80010a0:	81bb      	strh	r3, [r7, #12]
 80010a2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80010a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbb4      	blt.n	8001018 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80010be:	f000 fbf7 	bl	80018b0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80010c2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010c6:	2201      	movs	r2, #1
 80010c8:	2178      	movs	r1, #120	; 0x78
 80010ca:	485b      	ldr	r0, [pc, #364]	; (8001238 <SSD1306_Init+0x180>)
 80010cc:	f001 ffae 	bl	800302c <HAL_I2C_IsDeviceReady>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e0a9      	b.n	800122e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80010da:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010e0:	e002      	b.n	80010e8 <SSD1306_Init+0x30>
		p--;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f9      	bne.n	80010e2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010ee:	22ae      	movs	r2, #174	; 0xae
 80010f0:	2100      	movs	r1, #0
 80010f2:	2078      	movs	r0, #120	; 0x78
 80010f4:	f000 fc56 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80010f8:	2220      	movs	r2, #32
 80010fa:	2100      	movs	r1, #0
 80010fc:	2078      	movs	r0, #120	; 0x78
 80010fe:	f000 fc51 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001102:	2210      	movs	r2, #16
 8001104:	2100      	movs	r1, #0
 8001106:	2078      	movs	r0, #120	; 0x78
 8001108:	f000 fc4c 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800110c:	22b0      	movs	r2, #176	; 0xb0
 800110e:	2100      	movs	r1, #0
 8001110:	2078      	movs	r0, #120	; 0x78
 8001112:	f000 fc47 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001116:	22c8      	movs	r2, #200	; 0xc8
 8001118:	2100      	movs	r1, #0
 800111a:	2078      	movs	r0, #120	; 0x78
 800111c:	f000 fc42 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f000 fc3d 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800112a:	2210      	movs	r2, #16
 800112c:	2100      	movs	r1, #0
 800112e:	2078      	movs	r0, #120	; 0x78
 8001130:	f000 fc38 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001134:	2240      	movs	r2, #64	; 0x40
 8001136:	2100      	movs	r1, #0
 8001138:	2078      	movs	r0, #120	; 0x78
 800113a:	f000 fc33 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800113e:	2281      	movs	r2, #129	; 0x81
 8001140:	2100      	movs	r1, #0
 8001142:	2078      	movs	r0, #120	; 0x78
 8001144:	f000 fc2e 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001148:	22ff      	movs	r2, #255	; 0xff
 800114a:	2100      	movs	r1, #0
 800114c:	2078      	movs	r0, #120	; 0x78
 800114e:	f000 fc29 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001152:	22a1      	movs	r2, #161	; 0xa1
 8001154:	2100      	movs	r1, #0
 8001156:	2078      	movs	r0, #120	; 0x78
 8001158:	f000 fc24 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800115c:	22a6      	movs	r2, #166	; 0xa6
 800115e:	2100      	movs	r1, #0
 8001160:	2078      	movs	r0, #120	; 0x78
 8001162:	f000 fc1f 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001166:	22a8      	movs	r2, #168	; 0xa8
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	; 0x78
 800116c:	f000 fc1a 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001170:	223f      	movs	r2, #63	; 0x3f
 8001172:	2100      	movs	r1, #0
 8001174:	2078      	movs	r0, #120	; 0x78
 8001176:	f000 fc15 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800117a:	22a4      	movs	r2, #164	; 0xa4
 800117c:	2100      	movs	r1, #0
 800117e:	2078      	movs	r0, #120	; 0x78
 8001180:	f000 fc10 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001184:	22d3      	movs	r2, #211	; 0xd3
 8001186:	2100      	movs	r1, #0
 8001188:	2078      	movs	r0, #120	; 0x78
 800118a:	f000 fc0b 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2078      	movs	r0, #120	; 0x78
 8001194:	f000 fc06 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001198:	22d5      	movs	r2, #213	; 0xd5
 800119a:	2100      	movs	r1, #0
 800119c:	2078      	movs	r0, #120	; 0x78
 800119e:	f000 fc01 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80011a2:	22f0      	movs	r2, #240	; 0xf0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2078      	movs	r0, #120	; 0x78
 80011a8:	f000 fbfc 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011ac:	22d9      	movs	r2, #217	; 0xd9
 80011ae:	2100      	movs	r1, #0
 80011b0:	2078      	movs	r0, #120	; 0x78
 80011b2:	f000 fbf7 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80011b6:	2222      	movs	r2, #34	; 0x22
 80011b8:	2100      	movs	r1, #0
 80011ba:	2078      	movs	r0, #120	; 0x78
 80011bc:	f000 fbf2 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011c0:	22da      	movs	r2, #218	; 0xda
 80011c2:	2100      	movs	r1, #0
 80011c4:	2078      	movs	r0, #120	; 0x78
 80011c6:	f000 fbed 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011ca:	2212      	movs	r2, #18
 80011cc:	2100      	movs	r1, #0
 80011ce:	2078      	movs	r0, #120	; 0x78
 80011d0:	f000 fbe8 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011d4:	22db      	movs	r2, #219	; 0xdb
 80011d6:	2100      	movs	r1, #0
 80011d8:	2078      	movs	r0, #120	; 0x78
 80011da:	f000 fbe3 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011de:	2220      	movs	r2, #32
 80011e0:	2100      	movs	r1, #0
 80011e2:	2078      	movs	r0, #120	; 0x78
 80011e4:	f000 fbde 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011e8:	228d      	movs	r2, #141	; 0x8d
 80011ea:	2100      	movs	r1, #0
 80011ec:	2078      	movs	r0, #120	; 0x78
 80011ee:	f000 fbd9 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011f2:	2214      	movs	r2, #20
 80011f4:	2100      	movs	r1, #0
 80011f6:	2078      	movs	r0, #120	; 0x78
 80011f8:	f000 fbd4 	bl	80019a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011fc:	22af      	movs	r2, #175	; 0xaf
 80011fe:	2100      	movs	r1, #0
 8001200:	2078      	movs	r0, #120	; 0x78
 8001202:	f000 fbcf 	bl	80019a4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001206:	222e      	movs	r2, #46	; 0x2e
 8001208:	2100      	movs	r1, #0
 800120a:	2078      	movs	r0, #120	; 0x78
 800120c:	f000 fbca 	bl	80019a4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001210:	2000      	movs	r0, #0
 8001212:	f000 f843 	bl	800129c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001216:	f000 f813 	bl	8001240 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <SSD1306_Init+0x184>)
 800121c:	2200      	movs	r2, #0
 800121e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SSD1306_Init+0x184>)
 8001222:	2200      	movs	r2, #0
 8001224:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001226:	4b05      	ldr	r3, [pc, #20]	; (800123c <SSD1306_Init+0x184>)
 8001228:	2201      	movs	r2, #1
 800122a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200000e0 	.word	0x200000e0
 800123c:	200005a0 	.word	0x200005a0

08001240 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	e01d      	b.n	8001288 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	3b50      	subs	r3, #80	; 0x50
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	2100      	movs	r1, #0
 8001256:	2078      	movs	r0, #120	; 0x78
 8001258:	f000 fba4 	bl	80019a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2078      	movs	r0, #120	; 0x78
 8001262:	f000 fb9f 	bl	80019a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001266:	2210      	movs	r2, #16
 8001268:	2100      	movs	r1, #0
 800126a:	2078      	movs	r0, #120	; 0x78
 800126c:	f000 fb9a 	bl	80019a4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	01db      	lsls	r3, r3, #7
 8001274:	4a08      	ldr	r2, [pc, #32]	; (8001298 <SSD1306_UpdateScreen+0x58>)
 8001276:	441a      	add	r2, r3
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	2140      	movs	r1, #64	; 0x40
 800127c:	2078      	movs	r0, #120	; 0x78
 800127e:	f000 fb2b 	bl	80018d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3301      	adds	r3, #1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b07      	cmp	r3, #7
 800128c:	d9de      	bls.n	800124c <SSD1306_UpdateScreen+0xc>
	}
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200001a0 	.word	0x200001a0

0800129c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <SSD1306_Fill+0x14>
 80012ac:	2300      	movs	r3, #0
 80012ae:	e000      	b.n	80012b2 <SSD1306_Fill+0x16>
 80012b0:	23ff      	movs	r3, #255	; 0xff
 80012b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b6:	4619      	mov	r1, r3
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <SSD1306_Fill+0x2c>)
 80012ba:	f006 fa37 	bl	800772c <memset>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001a0 	.word	0x200001a0

080012cc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]
 80012d6:	460b      	mov	r3, r1
 80012d8:	80bb      	strh	r3, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	70fb      	strb	r3, [r7, #3]
	if (
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	2b7f      	cmp	r3, #127	; 0x7f
 80012e2:	d848      	bhi.n	8001376 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	2b3f      	cmp	r3, #63	; 0x3f
 80012e8:	d845      	bhi.n	8001376 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <SSD1306_DrawPixel+0xb4>)
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d006      	beq.n	8001300 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	bf0c      	ite	eq
 80012f8:	2301      	moveq	r3, #1
 80012fa:	2300      	movne	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d11a      	bne.n	800133c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001306:	88fa      	ldrh	r2, [r7, #6]
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	08db      	lsrs	r3, r3, #3
 800130c:	b298      	uxth	r0, r3
 800130e:	4603      	mov	r3, r0
 8001310:	01db      	lsls	r3, r3, #7
 8001312:	4413      	add	r3, r2
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <SSD1306_DrawPixel+0xb8>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	b25a      	sxtb	r2, r3
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	b25b      	sxtb	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	b259      	sxtb	r1, r3
 800132c:	88fa      	ldrh	r2, [r7, #6]
 800132e:	4603      	mov	r3, r0
 8001330:	01db      	lsls	r3, r3, #7
 8001332:	4413      	add	r3, r2
 8001334:	b2c9      	uxtb	r1, r1
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <SSD1306_DrawPixel+0xb8>)
 8001338:	54d1      	strb	r1, [r2, r3]
 800133a:	e01d      	b.n	8001378 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	b298      	uxth	r0, r3
 8001344:	4603      	mov	r3, r0
 8001346:	01db      	lsls	r3, r3, #7
 8001348:	4413      	add	r3, r2
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <SSD1306_DrawPixel+0xb8>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	b25a      	sxtb	r2, r3
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	2101      	movs	r1, #1
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	b25b      	sxtb	r3, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	b25b      	sxtb	r3, r3
 8001362:	4013      	ands	r3, r2
 8001364:	b259      	sxtb	r1, r3
 8001366:	88fa      	ldrh	r2, [r7, #6]
 8001368:	4603      	mov	r3, r0
 800136a:	01db      	lsls	r3, r3, #7
 800136c:	4413      	add	r3, r2
 800136e:	b2c9      	uxtb	r1, r1
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <SSD1306_DrawPixel+0xb8>)
 8001372:	54d1      	strb	r1, [r2, r3]
 8001374:	e000      	b.n	8001378 <SSD1306_DrawPixel+0xac>
		return;
 8001376:	bf00      	nop
	}
}
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	200005a0 	.word	0x200005a0
 8001384:	200001a0 	.word	0x200001a0

08001388 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	80fb      	strh	r3, [r7, #6]
 8001394:	4613      	mov	r3, r2
 8001396:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001398:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SSD1306_GotoXY+0x28>)
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <SSD1306_GotoXY+0x28>)
 80013a0:	88bb      	ldrh	r3, [r7, #4]
 80013a2:	8053      	strh	r3, [r2, #2]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	200005a0 	.word	0x200005a0

080013b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	6039      	str	r1, [r7, #0]
 80013be:	71fb      	strb	r3, [r7, #7]
 80013c0:	4613      	mov	r3, r2
 80013c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013c4:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <SSD1306_Putc+0xfc>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4413      	add	r3, r2
	if (
 80013d0:	2b7f      	cmp	r3, #127	; 0x7f
 80013d2:	dc07      	bgt.n	80013e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <SSD1306_Putc+0xfc>)
 80013d6:	885b      	ldrh	r3, [r3, #2]
 80013d8:	461a      	mov	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013e0:	2b3f      	cmp	r3, #63	; 0x3f
 80013e2:	dd01      	ble.n	80013e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	e05e      	b.n	80014a6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e04b      	b.n	8001486 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	3b20      	subs	r3, #32
 80013f6:	6839      	ldr	r1, [r7, #0]
 80013f8:	7849      	ldrb	r1, [r1, #1]
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	440b      	add	r3, r1
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4413      	add	r3, r2
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	e030      	b.n	8001474 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d010      	beq.n	8001444 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <SSD1306_Putc+0xfc>)
 8001424:	881a      	ldrh	r2, [r3, #0]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	b29b      	uxth	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b298      	uxth	r0, r3
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <SSD1306_Putc+0xfc>)
 8001430:	885a      	ldrh	r2, [r3, #2]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4413      	add	r3, r2
 8001438:	b29b      	uxth	r3, r3
 800143a:	79ba      	ldrb	r2, [r7, #6]
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff ff45 	bl	80012cc <SSD1306_DrawPixel>
 8001442:	e014      	b.n	800146e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <SSD1306_Putc+0xfc>)
 8001446:	881a      	ldrh	r2, [r3, #0]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	b29b      	uxth	r3, r3
 800144c:	4413      	add	r3, r2
 800144e:	b298      	uxth	r0, r3
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <SSD1306_Putc+0xfc>)
 8001452:	885a      	ldrh	r2, [r3, #2]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b299      	uxth	r1, r3
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	f7ff ff2f 	bl	80012cc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	3301      	adds	r3, #1
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4293      	cmp	r3, r2
 800147e:	d3c8      	bcc.n	8001412 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	785b      	ldrb	r3, [r3, #1]
 800148a:	461a      	mov	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4293      	cmp	r3, r2
 8001490:	d3ad      	bcc.n	80013ee <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <SSD1306_Putc+0xfc>)
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4413      	add	r3, r2
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <SSD1306_Putc+0xfc>)
 80014a2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80014a4:	79fb      	ldrb	r3, [r7, #7]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200005a0 	.word	0x200005a0

080014b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	4613      	mov	r3, r2
 80014c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014c2:	e012      	b.n	80014ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff71 	bl	80013b4 <SSD1306_Putc>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d002      	beq.n	80014e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	e008      	b.n	80014f6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e8      	bne.n	80014c4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	781b      	ldrb	r3, [r3, #0]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80014fe:	b590      	push	{r4, r7, lr}
 8001500:	b087      	sub	sp, #28
 8001502:	af00      	add	r7, sp, #0
 8001504:	4604      	mov	r4, r0
 8001506:	4608      	mov	r0, r1
 8001508:	4611      	mov	r1, r2
 800150a:	461a      	mov	r2, r3
 800150c:	4623      	mov	r3, r4
 800150e:	80fb      	strh	r3, [r7, #6]
 8001510:	4603      	mov	r3, r0
 8001512:	80bb      	strh	r3, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d901      	bls.n	8001526 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001522:	237f      	movs	r3, #127	; 0x7f
 8001524:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	d901      	bls.n	8001530 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800152c:	237f      	movs	r3, #127	; 0x7f
 800152e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001530:	88bb      	ldrh	r3, [r7, #4]
 8001532:	2b3f      	cmp	r3, #63	; 0x3f
 8001534:	d901      	bls.n	800153a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001536:	233f      	movs	r3, #63	; 0x3f
 8001538:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800153a:	883b      	ldrh	r3, [r7, #0]
 800153c:	2b3f      	cmp	r3, #63	; 0x3f
 800153e:	d901      	bls.n	8001544 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001540:	233f      	movs	r3, #63	; 0x3f
 8001542:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001544:	88fa      	ldrh	r2, [r7, #6]
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	429a      	cmp	r2, r3
 800154a:	d205      	bcs.n	8001558 <SSD1306_DrawLine+0x5a>
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b29b      	uxth	r3, r3
 8001554:	b21b      	sxth	r3, r3
 8001556:	e004      	b.n	8001562 <SSD1306_DrawLine+0x64>
 8001558:	88fa      	ldrh	r2, [r7, #6]
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	b21b      	sxth	r3, r3
 8001562:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001564:	88ba      	ldrh	r2, [r7, #4]
 8001566:	883b      	ldrh	r3, [r7, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	d205      	bcs.n	8001578 <SSD1306_DrawLine+0x7a>
 800156c:	883a      	ldrh	r2, [r7, #0]
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	b21b      	sxth	r3, r3
 8001576:	e004      	b.n	8001582 <SSD1306_DrawLine+0x84>
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	883b      	ldrh	r3, [r7, #0]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	b29b      	uxth	r3, r3
 8001580:	b21b      	sxth	r3, r3
 8001582:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001584:	88fa      	ldrh	r2, [r7, #6]
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	429a      	cmp	r2, r3
 800158a:	d201      	bcs.n	8001590 <SSD1306_DrawLine+0x92>
 800158c:	2301      	movs	r3, #1
 800158e:	e001      	b.n	8001594 <SSD1306_DrawLine+0x96>
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001596:	88ba      	ldrh	r2, [r7, #4]
 8001598:	883b      	ldrh	r3, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d201      	bcs.n	80015a2 <SSD1306_DrawLine+0xa4>
 800159e:	2301      	movs	r3, #1
 80015a0:	e001      	b.n	80015a6 <SSD1306_DrawLine+0xa8>
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80015a8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80015ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dd06      	ble.n	80015c2 <SSD1306_DrawLine+0xc4>
 80015b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015b8:	0fda      	lsrs	r2, r3, #31
 80015ba:	4413      	add	r3, r2
 80015bc:	105b      	asrs	r3, r3, #1
 80015be:	b21b      	sxth	r3, r3
 80015c0:	e006      	b.n	80015d0 <SSD1306_DrawLine+0xd2>
 80015c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015c6:	0fda      	lsrs	r2, r3, #31
 80015c8:	4413      	add	r3, r2
 80015ca:	105b      	asrs	r3, r3, #1
 80015cc:	425b      	negs	r3, r3
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80015d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d129      	bne.n	800162e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80015da:	883a      	ldrh	r2, [r7, #0]
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d205      	bcs.n	80015ee <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80015e2:	883b      	ldrh	r3, [r7, #0]
 80015e4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80015ea:	893b      	ldrh	r3, [r7, #8]
 80015ec:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d205      	bcs.n	8001602 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80015fe:	893b      	ldrh	r3, [r7, #8]
 8001600:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	82bb      	strh	r3, [r7, #20]
 8001606:	e00c      	b.n	8001622 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001608:	8ab9      	ldrh	r1, [r7, #20]
 800160a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe5b 	bl	80012cc <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001616:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800161a:	b29b      	uxth	r3, r3
 800161c:	3301      	adds	r3, #1
 800161e:	b29b      	uxth	r3, r3
 8001620:	82bb      	strh	r3, [r7, #20]
 8001622:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001626:	883b      	ldrh	r3, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	dded      	ble.n	8001608 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 800162c:	e05f      	b.n	80016ee <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800162e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d129      	bne.n	800168a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001636:	883a      	ldrh	r2, [r7, #0]
 8001638:	88bb      	ldrh	r3, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d205      	bcs.n	800164a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800163e:	883b      	ldrh	r3, [r7, #0]
 8001640:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001646:	893b      	ldrh	r3, [r7, #8]
 8001648:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	429a      	cmp	r2, r3
 8001650:	d205      	bcs.n	800165e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800165a:	893b      	ldrh	r3, [r7, #8]
 800165c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	82bb      	strh	r3, [r7, #20]
 8001662:	e00c      	b.n	800167e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001664:	8abb      	ldrh	r3, [r7, #20]
 8001666:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800166a:	88b9      	ldrh	r1, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe2d 	bl	80012cc <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001672:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001676:	b29b      	uxth	r3, r3
 8001678:	3301      	adds	r3, #1
 800167a:	b29b      	uxth	r3, r3
 800167c:	82bb      	strh	r3, [r7, #20]
 800167e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	429a      	cmp	r2, r3
 8001686:	dded      	ble.n	8001664 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001688:	e031      	b.n	80016ee <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800168a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800168e:	88b9      	ldrh	r1, [r7, #4]
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fe1a 	bl	80012cc <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	429a      	cmp	r2, r3
 800169e:	d103      	bne.n	80016a8 <SSD1306_DrawLine+0x1aa>
 80016a0:	88ba      	ldrh	r2, [r7, #4]
 80016a2:	883b      	ldrh	r3, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d021      	beq.n	80016ec <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80016a8:	8afb      	ldrh	r3, [r7, #22]
 80016aa:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80016ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80016b4:	425b      	negs	r3, r3
 80016b6:	429a      	cmp	r2, r3
 80016b8:	dd08      	ble.n	80016cc <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80016ba:	8afa      	ldrh	r2, [r7, #22]
 80016bc:	8a3b      	ldrh	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80016c4:	89fa      	ldrh	r2, [r7, #14]
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4413      	add	r3, r2
 80016ca:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80016cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dad8      	bge.n	800168a <SSD1306_DrawLine+0x18c>
			err += dx;
 80016d8:	8afa      	ldrh	r2, [r7, #22]
 80016da:	8a7b      	ldrh	r3, [r7, #18]
 80016dc:	4413      	add	r3, r2
 80016de:	b29b      	uxth	r3, r3
 80016e0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80016e2:	89ba      	ldrh	r2, [r7, #12]
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80016ea:	e7ce      	b.n	800168a <SSD1306_DrawLine+0x18c>
			break;
 80016ec:	bf00      	nop
		} 
	}
}
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}

080016f4 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4623      	mov	r3, r4
 8001704:	80fb      	strh	r3, [r7, #6]
 8001706:	4603      	mov	r3, r0
 8001708:	80bb      	strh	r3, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	807b      	strh	r3, [r7, #2]
 800170e:	4613      	mov	r3, r2
 8001710:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001712:	887b      	ldrh	r3, [r7, #2]
 8001714:	f1c3 0301 	rsb	r3, r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800171c:	2301      	movs	r3, #1
 800171e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	461a      	mov	r2, r3
 8001724:	03d2      	lsls	r2, r2, #15
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001736:	88f8      	ldrh	r0, [r7, #6]
 8001738:	88ba      	ldrh	r2, [r7, #4]
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	787a      	ldrb	r2, [r7, #1]
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fdc2 	bl	80012cc <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001748:	88f8      	ldrh	r0, [r7, #6]
 800174a:	88ba      	ldrh	r2, [r7, #4]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b29b      	uxth	r3, r3
 8001752:	787a      	ldrb	r2, [r7, #1]
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fdb9 	bl	80012cc <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800175a:	88fa      	ldrh	r2, [r7, #6]
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	4413      	add	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	88b9      	ldrh	r1, [r7, #4]
 8001764:	787a      	ldrb	r2, [r7, #1]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fdb0 	bl	80012cc <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800176c:	88fa      	ldrh	r2, [r7, #6]
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	b29b      	uxth	r3, r3
 8001774:	88b9      	ldrh	r1, [r7, #4]
 8001776:	787a      	ldrb	r2, [r7, #1]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fda7 	bl	80012cc <SSD1306_DrawPixel>

    while (x < y) {
 800177e:	e081      	b.n	8001884 <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001780:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0e      	blt.n	80017a6 <SSD1306_DrawCircle+0xb2>
            y--;
 8001788:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800178c:	b29b      	uxth	r3, r3
 800178e:	3b01      	subs	r3, #1
 8001790:	b29b      	uxth	r3, r3
 8001792:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001794:	8a7b      	ldrh	r3, [r7, #18]
 8001796:	3302      	adds	r3, #2
 8001798:	b29b      	uxth	r3, r3
 800179a:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800179c:	8afa      	ldrh	r2, [r7, #22]
 800179e:	8a7b      	ldrh	r3, [r7, #18]
 80017a0:	4413      	add	r3, r2
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80017a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	3301      	adds	r3, #1
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80017b2:	8abb      	ldrh	r3, [r7, #20]
 80017b4:	3302      	adds	r3, #2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80017ba:	8afa      	ldrh	r2, [r7, #22]
 80017bc:	8abb      	ldrh	r3, [r7, #20]
 80017be:	4413      	add	r3, r2
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	8a3b      	ldrh	r3, [r7, #16]
 80017c8:	4413      	add	r3, r2
 80017ca:	b298      	uxth	r0, r3
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	4413      	add	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	787a      	ldrb	r2, [r7, #1]
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fd78 	bl	80012cc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 80017dc:	88fa      	ldrh	r2, [r7, #6]
 80017de:	8a3b      	ldrh	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	b298      	uxth	r0, r3
 80017e4:	88ba      	ldrh	r2, [r7, #4]
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	4413      	add	r3, r2
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	787a      	ldrb	r2, [r7, #1]
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff fd6c 	bl	80012cc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 80017f4:	88fa      	ldrh	r2, [r7, #6]
 80017f6:	8a3b      	ldrh	r3, [r7, #16]
 80017f8:	4413      	add	r3, r2
 80017fa:	b298      	uxth	r0, r3
 80017fc:	88ba      	ldrh	r2, [r7, #4]
 80017fe:	89fb      	ldrh	r3, [r7, #14]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	787a      	ldrb	r2, [r7, #1]
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff fd60 	bl	80012cc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800180c:	88fa      	ldrh	r2, [r7, #6]
 800180e:	8a3b      	ldrh	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b298      	uxth	r0, r3
 8001814:	88ba      	ldrh	r2, [r7, #4]
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	787a      	ldrb	r2, [r7, #1]
 800181e:	4619      	mov	r1, r3
 8001820:	f7ff fd54 	bl	80012cc <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001824:	88fa      	ldrh	r2, [r7, #6]
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	4413      	add	r3, r2
 800182a:	b298      	uxth	r0, r3
 800182c:	88ba      	ldrh	r2, [r7, #4]
 800182e:	8a3b      	ldrh	r3, [r7, #16]
 8001830:	4413      	add	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	787a      	ldrb	r2, [r7, #1]
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff fd48 	bl	80012cc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800183c:	88fa      	ldrh	r2, [r7, #6]
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	b298      	uxth	r0, r3
 8001844:	88ba      	ldrh	r2, [r7, #4]
 8001846:	8a3b      	ldrh	r3, [r7, #16]
 8001848:	4413      	add	r3, r2
 800184a:	b29b      	uxth	r3, r3
 800184c:	787a      	ldrb	r2, [r7, #1]
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff fd3c 	bl	80012cc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	4413      	add	r3, r2
 800185a:	b298      	uxth	r0, r3
 800185c:	88ba      	ldrh	r2, [r7, #4]
 800185e:	8a3b      	ldrh	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	b29b      	uxth	r3, r3
 8001864:	787a      	ldrb	r2, [r7, #1]
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff fd30 	bl	80012cc <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	b298      	uxth	r0, r3
 8001874:	88ba      	ldrh	r2, [r7, #4]
 8001876:	8a3b      	ldrh	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	787a      	ldrb	r2, [r7, #1]
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff fd24 	bl	80012cc <SSD1306_DrawPixel>
    while (x < y) {
 8001884:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001888:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800188c:	429a      	cmp	r2, r3
 800188e:	f6ff af77 	blt.w	8001780 <SSD1306_DrawCircle+0x8c>
    }
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	371c      	adds	r7, #28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}

0800189c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fcfb 	bl	800129c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80018a6:	f7ff fccb 	bl	8001240 <SSD1306_UpdateScreen>
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <ssd1306_I2C_Init+0x24>)
 80018b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018ba:	e002      	b.n	80018c2 <ssd1306_I2C_Init+0x12>
		p--;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f9      	bne.n	80018bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	0003d090 	.word	0x0003d090

080018d8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b0c7      	sub	sp, #284	; 0x11c
 80018dc:	af02      	add	r7, sp, #8
 80018de:	4604      	mov	r4, r0
 80018e0:	4608      	mov	r0, r1
 80018e2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80018e6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80018ea:	600a      	str	r2, [r1, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80018f6:	4622      	mov	r2, r4
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80018fe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001902:	4602      	mov	r2, r0
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800190a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800190e:	460a      	mov	r2, r1
 8001910:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001912:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001916:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800191a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800191e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001922:	7812      	ldrb	r2, [r2, #0]
 8001924:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800192c:	e015      	b.n	800195a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800192e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001932:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001936:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	441a      	add	r2, r3
 800193e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001942:	3301      	adds	r3, #1
 8001944:	7811      	ldrb	r1, [r2, #0]
 8001946:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800194a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800194e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001950:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001954:	3301      	adds	r3, #1
 8001956:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800195a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800195e:	b29b      	uxth	r3, r3
 8001960:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001964:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001968:	8812      	ldrh	r2, [r2, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d8df      	bhi.n	800192e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800196e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001972:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b299      	uxth	r1, r3
 800197a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800197e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	b29b      	uxth	r3, r3
 8001988:	f107 020c 	add.w	r2, r7, #12
 800198c:	200a      	movs	r0, #10
 800198e:	9000      	str	r0, [sp, #0]
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001992:	f001 fa4d 	bl	8002e30 <HAL_I2C_Master_Transmit>
}
 8001996:	bf00      	nop
 8001998:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	200000e0 	.word	0x200000e0

080019a4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	460b      	mov	r3, r1
 80019b0:	71bb      	strb	r3, [r7, #6]
 80019b2:	4613      	mov	r3, r2
 80019b4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019b6:	79bb      	ldrb	r3, [r7, #6]
 80019b8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019ba:	797b      	ldrb	r3, [r7, #5]
 80019bc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	b299      	uxth	r1, r3
 80019c2:	f107 020c 	add.w	r2, r7, #12
 80019c6:	230a      	movs	r3, #10
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2302      	movs	r3, #2
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <ssd1306_I2C_Write+0x38>)
 80019ce:	f001 fa2f 	bl	8002e30 <HAL_I2C_Master_Transmit>
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200000e0 	.word	0x200000e0

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_MspInit+0x68>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_MspInit+0x68>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6193      	str	r3, [r2, #24]
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_MspInit+0x68>)
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_MspInit+0x68>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_MspInit+0x68>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_MspInit+0x68>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	210f      	movs	r1, #15
 8001a1a:	f06f 0001 	mvn.w	r0, #1
 8001a1e:	f000 fee4 	bl	80027ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_MspInit+0x6c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_MspInit+0x6c>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000

08001a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_ADC_MspInit+0x6c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d121      	bne.n	8001ab4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_ADC_MspInit+0x70>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <HAL_ADC_MspInit+0x70>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_ADC_MspInit+0x70>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_ADC_MspInit+0x70>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_ADC_MspInit+0x70>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6193      	str	r3, [r2, #24]
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_ADC_MspInit+0x70>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001aa0:	230b      	movs	r3, #11
 8001aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_ADC_MspInit+0x74>)
 8001ab0:	f000 fec6 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40012400 	.word	0x40012400
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010800 	.word	0x40010800

08001ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <HAL_I2C_MspInit+0x70>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d123      	bne.n	8001b30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae8:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	6193      	str	r3, [r2, #24]
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b00:	23c0      	movs	r3, #192	; 0xc0
 8001b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b04:	2312      	movs	r3, #18
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	480b      	ldr	r0, [pc, #44]	; (8001b40 <HAL_I2C_MspInit+0x78>)
 8001b14:	f000 fe94 	bl	8002840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b22:	61d3      	str	r3, [r2, #28]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_I2C_MspInit+0x74>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010c00 	.word	0x40010c00

08001b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_SPI_MspInit+0x88>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d12f      	bne.n	8001bc4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a19      	ldr	r2, [pc, #100]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_SPI_MspInit+0x8c>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b94:	23a0      	movs	r3, #160	; 0xa0
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <HAL_SPI_MspInit+0x90>)
 8001ba8:	f000 fe4a 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bac:	2340      	movs	r3, #64	; 0x40
 8001bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <HAL_SPI_MspInit+0x90>)
 8001bc0:	f000 fe3e 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40013000 	.word	0x40013000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010800 	.word	0x40010800

08001bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_InitTick+0xe8>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a33      	ldr	r2, [pc, #204]	; (8001cc0 <HAL_InitTick+0xe8>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_InitTick+0xe8>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c06:	f107 0210 	add.w	r2, r7, #16
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 f985 	bl	8003f20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d103      	bne.n	8001c28 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c20:	f002 f956 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8001c24:	6378      	str	r0, [r7, #52]	; 0x34
 8001c26:	e004      	b.n	8001c32 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c28:	f002 f952 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_InitTick+0xec>)
 8001c36:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3a:	0c9b      	lsrs	r3, r3, #18
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c42:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_InitTick+0xf4>)
 8001c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c4c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001c66:	4818      	ldr	r0, [pc, #96]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c68:	f002 fb98 	bl	800439c <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d11b      	bne.n	8001cb2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001c7a:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <HAL_InitTick+0xf0>)
 8001c7c:	f002 fbe6 	bl	800444c <HAL_TIM_Base_Start_IT>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d111      	bne.n	8001cb2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c8e:	201e      	movs	r0, #30
 8001c90:	f000 fdc7 	bl	8002822 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b0f      	cmp	r3, #15
 8001c98:	d808      	bhi.n	8001cac <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	201e      	movs	r0, #30
 8001ca0:	f000 fda3 	bl	80027ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <HAL_InitTick+0xf8>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e002      	b.n	8001cb2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3738      	adds	r7, #56	; 0x38
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	431bde83 	.word	0x431bde83
 8001cc8:	200005a8 	.word	0x200005a8
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	2000000c 	.word	0x2000000c

08001cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <NMI_Handler+0x4>

08001cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler+0x4>

08001ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <MemManage_Handler+0x4>

08001ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <BusFault_Handler+0x4>

08001cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <UsageFault_Handler+0x4>

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
	...

08001d00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <TIM4_IRQHandler+0x10>)
 8001d06:	f002 fbf3 	bl	80044f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200005a8 	.word	0x200005a8

08001d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8001d20:	f7ff fff8 	bl	8001d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d24:	480b      	ldr	r0, [pc, #44]	; (8001d54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d26:	490c      	ldr	r1, [pc, #48]	; (8001d58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d2c:	e002      	b.n	8001d34 <LoopCopyDataInit>

08001d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d32:	3304      	adds	r3, #4

08001d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d38:	d3f9      	bcc.n	8001d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d3c:	4c09      	ldr	r4, [pc, #36]	; (8001d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d40:	e001      	b.n	8001d46 <LoopFillZerobss>

08001d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d44:	3204      	adds	r2, #4

08001d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d48:	d3fb      	bcc.n	8001d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4a:	f005 fcf7 	bl	800773c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4e:	f7fe fd77 	bl	8000840 <main>
  bx lr
 8001d52:	4770      	bx	lr
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d58:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001d5c:	0800819c 	.word	0x0800819c
  ldr r2, =_sbss
 8001d60:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001d64:	20001f3c 	.word	0x20001f3c

08001d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC1_2_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_Init+0x28>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_Init+0x28>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	f000 fd29 	bl	80027d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d82:	200f      	movs	r0, #15
 8001d84:	f7ff ff28 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d88:	f7ff fe2a 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_IncTick+0x1c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x20>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <HAL_IncTick+0x20>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	20000010 	.word	0x20000010
 8001db8:	200005f0 	.word	0x200005f0

08001dbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <HAL_GetTick+0x10>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	200005f0 	.word	0x200005f0

08001dd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0be      	b.n	8001f70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe1e 	bl	8001a50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fbf1 	bl	80025fc <ADC_ConversionStop_Disable>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f040 8099 	bne.w	8001f5e <HAL_ADC_Init+0x18e>
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 8095 	bne.w	8001f5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e3c:	f023 0302 	bic.w	r3, r3, #2
 8001e40:	f043 0202 	orr.w	r2, r3, #2
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7b1b      	ldrb	r3, [r3, #12]
 8001e56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e68:	d003      	beq.n	8001e72 <HAL_ADC_Init+0xa2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_ADC_Init+0xa8>
 8001e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e76:	e000      	b.n	8001e7a <HAL_ADC_Init+0xaa>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7d1b      	ldrb	r3, [r3, #20]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d119      	bne.n	8001ebc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7b1b      	ldrb	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	035a      	lsls	r2, r3, #13
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e00b      	b.n	8001ebc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_ADC_Init+0x1a8>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6812      	ldr	r2, [r2, #0]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eec:	d003      	beq.n	8001ef6 <HAL_ADC_Init+0x126>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d104      	bne.n	8001f00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	051b      	lsls	r3, r3, #20
 8001efe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_ADC_Init+0x1ac>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d10b      	bne.n	8001f3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f3a:	e018      	b.n	8001f6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	f023 0312 	bic.w	r3, r3, #18
 8001f44:	f043 0210 	orr.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f5c:	e007      	b.n	8001f6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	ffe1f7fd 	.word	0xffe1f7fd
 8001f7c:	ff1f0efe 	.word	0xff1f0efe

08001f80 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_Start+0x1a>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e098      	b.n	80020cc <HAL_ADC_Start+0x14c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fad0 	bl	8002548 <ADC_Enable>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 8087 	bne.w	80020c2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a41      	ldr	r2, [pc, #260]	; (80020d4 <HAL_ADC_Start+0x154>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d105      	bne.n	8001fde <HAL_ADC_Start+0x5e>
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_ADC_Start+0x158>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d026      	beq.n	8002046 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002000:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002008:	e01d      	b.n	8002046 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <HAL_ADC_Start+0x158>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d004      	beq.n	800202a <HAL_ADC_Start+0xaa>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <HAL_ADC_Start+0x154>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10d      	bne.n	8002046 <HAL_ADC_Start+0xc6>
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_ADC_Start+0x158>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002056:	f023 0206 	bic.w	r2, r3, #6
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c
 800205e:	e002      	b.n	8002066 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0202 	mvn.w	r2, #2
 8002076:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002082:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002086:	d113      	bne.n	80020b0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_ADC_Start+0x154>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d105      	bne.n	800209e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_ADC_Start+0x158>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80020ac:	609a      	str	r2, [r3, #8]
 80020ae:	e00c      	b.n	80020ca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e003      	b.n	80020ca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40012800 	.word	0x40012800
 80020d8:	40012400 	.word	0x40012400

080020dc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_Stop+0x1a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e01a      	b.n	800212c <HAL_ADC_Stop+0x50>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa7c 	bl	80025fc <ADC_ConversionStop_Disable>
 8002104:	4603      	mov	r3, r0
 8002106:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002116:	f023 0301 	bic.w	r3, r3, #1
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800214a:	f7ff fe37 	bl	8001dbc <HAL_GetTick>
 800214e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00b      	beq.n	8002176 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0d3      	b.n	800231e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d131      	bne.n	80021e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800218e:	2b00      	cmp	r3, #0
 8002190:	d12a      	bne.n	80021e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002192:	e021      	b.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d01d      	beq.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d007      	beq.n	80021b2 <HAL_ADC_PollForConversion+0x7e>
 80021a2:	f7ff fe0b 	bl	8001dbc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d212      	bcs.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f043 0204 	orr.w	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0a2      	b.n	800231e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0d6      	beq.n	8002194 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80021e6:	e070      	b.n	80022ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021e8:	4b4f      	ldr	r3, [pc, #316]	; (8002328 <HAL_ADC_PollForConversion+0x1f4>)
 80021ea:	681c      	ldr	r4, [r3, #0]
 80021ec:	2002      	movs	r0, #2
 80021ee:	f001 ff9b 	bl	8004128 <HAL_RCCEx_GetPeriphCLKFreq>
 80021f2:	4603      	mov	r3, r0
 80021f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	4b4b      	ldr	r3, [pc, #300]	; (800232c <HAL_ADC_PollForConversion+0x1f8>)
 8002200:	400b      	ands	r3, r1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_ADC_PollForConversion+0x104>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68d9      	ldr	r1, [r3, #12]
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <HAL_ADC_PollForConversion+0x1fc>)
 800220e:	400b      	ands	r3, r1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d111      	bne.n	8002238 <HAL_ADC_PollForConversion+0x104>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6919      	ldr	r1, [r3, #16]
 800221a:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_ADC_PollForConversion+0x200>)
 800221c:	400b      	ands	r3, r1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d108      	bne.n	8002234 <HAL_ADC_PollForConversion+0x100>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68d9      	ldr	r1, [r3, #12]
 8002228:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_ADC_PollForConversion+0x204>)
 800222a:	400b      	ands	r3, r1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_ADC_PollForConversion+0x100>
 8002230:	2314      	movs	r3, #20
 8002232:	e020      	b.n	8002276 <HAL_ADC_PollForConversion+0x142>
 8002234:	2329      	movs	r3, #41	; 0x29
 8002236:	e01e      	b.n	8002276 <HAL_ADC_PollForConversion+0x142>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6919      	ldr	r1, [r3, #16]
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_ADC_PollForConversion+0x200>)
 8002240:	400b      	ands	r3, r1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_ADC_PollForConversion+0x120>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68d9      	ldr	r1, [r3, #12]
 800224c:	4b3a      	ldr	r3, [pc, #232]	; (8002338 <HAL_ADC_PollForConversion+0x204>)
 800224e:	400b      	ands	r3, r1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00d      	beq.n	8002270 <HAL_ADC_PollForConversion+0x13c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_ADC_PollForConversion+0x208>)
 800225c:	400b      	ands	r3, r1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <HAL_ADC_PollForConversion+0x140>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68d9      	ldr	r1, [r3, #12]
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_ADC_PollForConversion+0x208>)
 800226a:	400b      	ands	r3, r1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_PollForConversion+0x140>
 8002270:	2354      	movs	r3, #84	; 0x54
 8002272:	e000      	b.n	8002276 <HAL_ADC_PollForConversion+0x142>
 8002274:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800227c:	e021      	b.n	80022c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d01a      	beq.n	80022bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_ADC_PollForConversion+0x168>
 800228c:	f7ff fd96 	bl	8001dbc <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d20f      	bcs.n	80022bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d90b      	bls.n	80022bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e030      	b.n	800231e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d8d9      	bhi.n	800227e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f06f 0212 	mvn.w	r2, #18
 80022d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022ee:	d115      	bne.n	800231c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	371c      	adds	r7, #28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd90      	pop	{r4, r7, pc}
 8002326:	bf00      	nop
 8002328:	20000008 	.word	0x20000008
 800232c:	24924924 	.word	0x24924924
 8002330:	00924924 	.word	0x00924924
 8002334:	12492492 	.word	0x12492492
 8002338:	00492492 	.word	0x00492492
 800233c:	00249249 	.word	0x00249249

08002340 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x20>
 8002374:	2302      	movs	r3, #2
 8002376:	e0dc      	b.n	8002532 <HAL_ADC_ConfigChannel+0x1da>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b06      	cmp	r3, #6
 8002386:	d81c      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	3b05      	subs	r3, #5
 800239a:	221f      	movs	r2, #31
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	4019      	ands	r1, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b05      	subs	r3, #5
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
 80023c0:	e03c      	b.n	800243c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d81c      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	3b23      	subs	r3, #35	; 0x23
 80023dc:	221f      	movs	r2, #31
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	4019      	ands	r1, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b23      	subs	r3, #35	; 0x23
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	631a      	str	r2, [r3, #48]	; 0x30
 8002402:	e01b      	b.n	800243c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b41      	subs	r3, #65	; 0x41
 8002416:	221f      	movs	r2, #31
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	4019      	ands	r1, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	3b41      	subs	r3, #65	; 0x41
 8002430:	fa00 f203 	lsl.w	r2, r0, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b09      	cmp	r3, #9
 8002442:	d91c      	bls.n	800247e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68d9      	ldr	r1, [r3, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	4019      	ands	r1, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6898      	ldr	r0, [r3, #8]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	3b1e      	subs	r3, #30
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	e019      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6919      	ldr	r1, [r3, #16]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	2207      	movs	r2, #7
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	4019      	ands	r1, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6898      	ldr	r0, [r3, #8]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	fa00 f203 	lsl.w	r2, r0, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b10      	cmp	r3, #16
 80024b8:	d003      	beq.n	80024c2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024be:	2b11      	cmp	r3, #17
 80024c0:	d132      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_ADC_ConfigChannel+0x1e4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d125      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d126      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d11a      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_ADC_ConfigChannel+0x1e8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a13      	ldr	r2, [pc, #76]	; (8002544 <HAL_ADC_ConfigChannel+0x1ec>)
 80024f8:	fba2 2303 	umull	r2, r3, r2, r3
 80024fc:	0c9a      	lsrs	r2, r3, #18
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002508:	e002      	b.n	8002510 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	3b01      	subs	r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f9      	bne.n	800250a <HAL_ADC_ConfigChannel+0x1b2>
 8002516:	e007      	b.n	8002528 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002530:	7bfb      	ldrb	r3, [r7, #15]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40012400 	.word	0x40012400
 8002540:	20000008 	.word	0x20000008
 8002544:	431bde83 	.word	0x431bde83

08002548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d040      	beq.n	80025e8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <ADC_Enable+0xac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1f      	ldr	r2, [pc, #124]	; (80025f8 <ADC_Enable+0xb0>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002584:	e002      	b.n	800258c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002592:	f7ff fc13 	bl	8001dbc <HAL_GetTick>
 8002596:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002598:	e01f      	b.n	80025da <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800259a:	f7ff fc0f 	bl	8001dbc <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d918      	bls.n	80025da <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d011      	beq.n	80025da <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e007      	b.n	80025ea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d1d8      	bne.n	800259a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000008 	.word	0x20000008
 80025f8:	431bde83 	.word	0x431bde83

080025fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d12e      	bne.n	8002674 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002626:	f7ff fbc9 	bl	8001dbc <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800262c:	e01b      	b.n	8002666 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800262e:	f7ff fbc5 	bl	8001dbc <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d914      	bls.n	8002666 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10d      	bne.n	8002666 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e007      	b.n	8002676 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b01      	cmp	r3, #1
 8002672:	d0dc      	beq.n	800262e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4906      	ldr	r1, [pc, #24]	; (8002718 <__NVIC_EnableIRQ+0x34>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff4f 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fc:	f7ff ff64 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6978      	ldr	r0, [r7, #20]
 8002808:	f7ff ffb2 	bl	8002770 <NVIC_EncodePriority>
 800280c:	4602      	mov	r2, r0
 800280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff81 	bl	800271c <__NVIC_SetPriority>
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff57 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b08b      	sub	sp, #44	; 0x2c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002852:	e169      	b.n	8002b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002854:	2201      	movs	r2, #1
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8158 	bne.w	8002b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a9a      	ldr	r2, [pc, #616]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 800287c:	4a98      	ldr	r2, [pc, #608]	; (8002ae0 <HAL_GPIO_Init+0x2a0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d875      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 8002882:	4a98      	ldr	r2, [pc, #608]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d058      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002888:	4a96      	ldr	r2, [pc, #600]	; (8002ae4 <HAL_GPIO_Init+0x2a4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d86f      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800288e:	4a96      	ldr	r2, [pc, #600]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d052      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 8002894:	4a94      	ldr	r2, [pc, #592]	; (8002ae8 <HAL_GPIO_Init+0x2a8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d869      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 800289a:	4a94      	ldr	r2, [pc, #592]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04c      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028a0:	4a92      	ldr	r2, [pc, #584]	; (8002aec <HAL_GPIO_Init+0x2ac>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d863      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028a6:	4a92      	ldr	r2, [pc, #584]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d046      	beq.n	800293a <HAL_GPIO_Init+0xfa>
 80028ac:	4a90      	ldr	r2, [pc, #576]	; (8002af0 <HAL_GPIO_Init+0x2b0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d85d      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d82a      	bhi.n	800290c <HAL_GPIO_Init+0xcc>
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d859      	bhi.n	800296e <HAL_GPIO_Init+0x12e>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <HAL_GPIO_Init+0x80>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	0800293b 	.word	0x0800293b
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002927 	.word	0x08002927
 80028cc:	08002969 	.word	0x08002969
 80028d0:	0800296f 	.word	0x0800296f
 80028d4:	0800296f 	.word	0x0800296f
 80028d8:	0800296f 	.word	0x0800296f
 80028dc:	0800296f 	.word	0x0800296f
 80028e0:	0800296f 	.word	0x0800296f
 80028e4:	0800296f 	.word	0x0800296f
 80028e8:	0800296f 	.word	0x0800296f
 80028ec:	0800296f 	.word	0x0800296f
 80028f0:	0800296f 	.word	0x0800296f
 80028f4:	0800296f 	.word	0x0800296f
 80028f8:	0800296f 	.word	0x0800296f
 80028fc:	0800296f 	.word	0x0800296f
 8002900:	0800296f 	.word	0x0800296f
 8002904:	0800291d 	.word	0x0800291d
 8002908:	08002931 	.word	0x08002931
 800290c:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <HAL_GPIO_Init+0x2b4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002912:	e02c      	b.n	800296e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	623b      	str	r3, [r7, #32]
          break;
 800291a:	e029      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	3304      	adds	r3, #4
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e024      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	3308      	adds	r3, #8
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e01f      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	330c      	adds	r3, #12
 8002936:	623b      	str	r3, [r7, #32]
          break;
 8002938:	e01a      	b.n	8002970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002942:	2304      	movs	r3, #4
 8002944:	623b      	str	r3, [r7, #32]
          break;
 8002946:	e013      	b.n	8002970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002950:	2308      	movs	r3, #8
 8002952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	611a      	str	r2, [r3, #16]
          break;
 800295a:	e009      	b.n	8002970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800295c:	2308      	movs	r3, #8
 800295e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	615a      	str	r2, [r3, #20]
          break;
 8002966:	e003      	b.n	8002970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002968:	2300      	movs	r3, #0
 800296a:	623b      	str	r3, [r7, #32]
          break;
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x130>
          break;
 800296e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2bff      	cmp	r3, #255	; 0xff
 8002974:	d801      	bhi.n	800297a <HAL_GPIO_Init+0x13a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	e001      	b.n	800297e <HAL_GPIO_Init+0x13e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2bff      	cmp	r3, #255	; 0xff
 8002984:	d802      	bhi.n	800298c <HAL_GPIO_Init+0x14c>
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	e002      	b.n	8002992 <HAL_GPIO_Init+0x152>
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	3b08      	subs	r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	210f      	movs	r1, #15
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	401a      	ands	r2, r3
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	431a      	orrs	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80b1 	beq.w	8002b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029c0:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_GPIO_Init+0x2b8>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029d8:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	3302      	adds	r3, #2
 80029e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	220f      	movs	r2, #15
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_GPIO_Init+0x2c0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d013      	beq.n	8002a2c <HAL_GPIO_Init+0x1ec>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a3f      	ldr	r2, [pc, #252]	; (8002b04 <HAL_GPIO_Init+0x2c4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00d      	beq.n	8002a28 <HAL_GPIO_Init+0x1e8>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a3e      	ldr	r2, [pc, #248]	; (8002b08 <HAL_GPIO_Init+0x2c8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d007      	beq.n	8002a24 <HAL_GPIO_Init+0x1e4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <HAL_GPIO_Init+0x2cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d101      	bne.n	8002a20 <HAL_GPIO_Init+0x1e0>
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a20:	2304      	movs	r3, #4
 8002a22:	e004      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e002      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_GPIO_Init+0x1ee>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	f002 0203 	and.w	r2, r2, #3
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	4093      	lsls	r3, r2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a3e:	492f      	ldr	r1, [pc, #188]	; (8002afc <HAL_GPIO_Init+0x2bc>)
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	492c      	ldr	r1, [pc, #176]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a66:	4b2a      	ldr	r3, [pc, #168]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4928      	ldr	r1, [pc, #160]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	4922      	ldr	r1, [pc, #136]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a8e:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	491e      	ldr	r1, [pc, #120]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4918      	ldr	r1, [pc, #96]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4914      	ldr	r1, [pc, #80]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d021      	beq.n	8002b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e021      	b.n	8002b22 <HAL_GPIO_Init+0x2e2>
 8002ade:	bf00      	nop
 8002ae0:	10320000 	.word	0x10320000
 8002ae4:	10310000 	.word	0x10310000
 8002ae8:	10220000 	.word	0x10220000
 8002aec:	10210000 	.word	0x10210000
 8002af0:	10120000 	.word	0x10120000
 8002af4:	10110000 	.word	0x10110000
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40010800 	.word	0x40010800
 8002b04:	40010c00 	.word	0x40010c00
 8002b08:	40011000 	.word	0x40011000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4909      	ldr	r1, [pc, #36]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	3301      	adds	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f ae8e 	bne.w	8002854 <HAL_GPIO_Init+0x14>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	372c      	adds	r7, #44	; 0x2c
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40010400 	.word	0x40010400

08002b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	460b      	mov	r3, r1
 8002b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	887b      	ldrh	r3, [r7, #2]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e001      	b.n	8002b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	460b      	mov	r3, r1
 8002b80:	807b      	strh	r3, [r7, #2]
 8002b82:	4613      	mov	r3, r2
 8002b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b86:	787b      	ldrb	r3, [r7, #1]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b92:	e003      	b.n	8002b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	041a      	lsls	r2, r3, #16
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	611a      	str	r2, [r3, #16]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e12b      	b.n	8002e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe ff7a 	bl	8001ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c0c:	f001 f960 	bl	8003ed0 <HAL_RCC_GetPCLK1Freq>
 8002c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a81      	ldr	r2, [pc, #516]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d807      	bhi.n	8002c2c <HAL_I2C_Init+0x84>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <HAL_I2C_Init+0x278>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	e006      	b.n	8002c3a <HAL_I2C_Init+0x92>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a7d      	ldr	r2, [pc, #500]	; (8002e24 <HAL_I2C_Init+0x27c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0e7      	b.n	8002e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4a78      	ldr	r2, [pc, #480]	; (8002e28 <HAL_I2C_Init+0x280>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0c9b      	lsrs	r3, r3, #18
 8002c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a6a      	ldr	r2, [pc, #424]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <HAL_I2C_Init+0xd4>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	e009      	b.n	8002c90 <HAL_I2C_Init+0xe8>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	4a69      	ldr	r2, [pc, #420]	; (8002e2c <HAL_I2C_Init+0x284>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	099b      	lsrs	r3, r3, #6
 8002c8e:	3301      	adds	r3, #1
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6812      	ldr	r2, [r2, #0]
 8002c94:	430b      	orrs	r3, r1
 8002c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	495c      	ldr	r1, [pc, #368]	; (8002e1c <HAL_I2C_Init+0x274>)
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d819      	bhi.n	8002ce4 <HAL_I2C_Init+0x13c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e59      	subs	r1, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cbe:	1c59      	adds	r1, r3, #1
 8002cc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cc4:	400b      	ands	r3, r1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_I2C_Init+0x138>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1e59      	subs	r1, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cde:	e051      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e04f      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d111      	bne.n	8002d10 <HAL_I2C_Init+0x168>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1e58      	subs	r0, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	440b      	add	r3, r1
 8002cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf0c      	ite	eq
 8002d08:	2301      	moveq	r3, #1
 8002d0a:	2300      	movne	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e012      	b.n	8002d36 <HAL_I2C_Init+0x18e>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1e58      	subs	r0, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	0099      	lsls	r1, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Init+0x196>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e022      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10e      	bne.n	8002d64 <HAL_I2C_Init+0x1bc>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1e58      	subs	r0, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	440b      	add	r3, r1
 8002d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Init+0x1dc>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1e58      	subs	r0, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	0099      	lsls	r1, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	6809      	ldr	r1, [r1, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6911      	ldr	r1, [r2, #16]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	4311      	orrs	r1, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	000186a0 	.word	0x000186a0
 8002e20:	001e847f 	.word	0x001e847f
 8002e24:	003d08ff 	.word	0x003d08ff
 8002e28:	431bde83 	.word	0x431bde83
 8002e2c:	10624dd3 	.word	0x10624dd3

08002e30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	817b      	strh	r3, [r7, #10]
 8002e40:	4613      	mov	r3, r2
 8002e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7fe ffba 	bl	8001dbc <HAL_GetTick>
 8002e48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	f040 80e0 	bne.w	8003018 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4970      	ldr	r1, [pc, #448]	; (8003024 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa92 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0d3      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_I2C_Master_Transmit+0x50>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e0cc      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d007      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2221      	movs	r2, #33	; 0x21
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a50      	ldr	r2, [pc, #320]	; (8003028 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	6a3a      	ldr	r2, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9ca 	bl	8003288 <I2C_MasterRequestWrite>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e08d      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f14:	e066      	b.n	8002fe4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	6a39      	ldr	r1, [r7, #32]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fb50 	bl	80035c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00d      	beq.n	8002f42 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d107      	bne.n	8002f3e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e06b      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	781a      	ldrb	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_I2C_Master_Transmit+0x188>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d017      	beq.n	8002fb8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	781a      	ldrb	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	6a39      	ldr	r1, [r7, #32]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fb47 	bl	8003650 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fde:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e01a      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d194      	bne.n	8002f16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	00100002 	.word	0x00100002
 8003028:	ffff0000 	.word	0xffff0000

0800302c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	460b      	mov	r3, r1
 800303a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7fe febe 	bl	8001dbc <HAL_GetTick>
 8003040:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 8111 	bne.w	8003276 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2319      	movs	r3, #25
 800305a:	2201      	movs	r2, #1
 800305c:	4988      	ldr	r1, [pc, #544]	; (8003280 <HAL_I2C_IsDeviceReady+0x254>)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f994 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	e104      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_I2C_IsDeviceReady+0x50>
 8003078:	2302      	movs	r3, #2
 800307a:	e0fd      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x24c>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b01      	cmp	r3, #1
 8003090:	d007      	beq.n	80030a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2224      	movs	r2, #36	; 0x24
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a70      	ldr	r2, [pc, #448]	; (8003284 <HAL_I2C_IsDeviceReady+0x258>)
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2200      	movs	r2, #0
 80030de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f952 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00d      	beq.n	800310a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fc:	d103      	bne.n	8003106 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e0b6      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800310a:	897b      	ldrh	r3, [r7, #10]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003118:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800311a:	f7fe fe4f 	bl	8001dbc <HAL_GetTick>
 800311e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800314e:	e025      	b.n	800319c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003150:	f7fe fe34 	bl	8001dbc <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	429a      	cmp	r2, r3
 800315e:	d302      	bcc.n	8003166 <HAL_I2C_IsDeviceReady+0x13a>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	22a0      	movs	r2, #160	; 0xa0
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2ba0      	cmp	r3, #160	; 0xa0
 80031a6:	d005      	beq.n	80031b4 <HAL_I2C_IsDeviceReady+0x188>
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <HAL_I2C_IsDeviceReady+0x188>
 80031ae:	7dbb      	ldrb	r3, [r7, #22]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0cd      	beq.n	8003150 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d129      	bne.n	800321e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2319      	movs	r3, #25
 80031f6:	2201      	movs	r2, #1
 80031f8:	4921      	ldr	r1, [pc, #132]	; (8003280 <HAL_I2C_IsDeviceReady+0x254>)
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f8c6 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e036      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e02c      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003236:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2319      	movs	r3, #25
 800323e:	2201      	movs	r2, #1
 8003240:	490f      	ldr	r1, [pc, #60]	; (8003280 <HAL_I2C_IsDeviceReady+0x254>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f8a2 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e012      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	3301      	adds	r3, #1
 8003256:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	f4ff af32 	bcc.w	80030c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	00100002 	.word	0x00100002
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	460b      	mov	r3, r1
 8003296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d006      	beq.n	80032b2 <I2C_MasterRequestWrite+0x2a>
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d003      	beq.n	80032b2 <I2C_MasterRequestWrite+0x2a>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b0:	d108      	bne.n	80032c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e00b      	b.n	80032dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	2b12      	cmp	r3, #18
 80032ca:	d107      	bne.n	80032dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f84f 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	d103      	bne.n	800330c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e035      	b.n	800337c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003318:	d108      	bne.n	800332c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331a:	897b      	ldrh	r3, [r7, #10]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003328:	611a      	str	r2, [r3, #16]
 800332a:	e01b      	b.n	8003364 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800332c:	897b      	ldrh	r3, [r7, #10]
 800332e:	11db      	asrs	r3, r3, #7
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f003 0306 	and.w	r3, r3, #6
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f063 030f 	orn	r3, r3, #15
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	490e      	ldr	r1, [pc, #56]	; (8003384 <I2C_MasterRequestWrite+0xfc>)
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f898 	bl	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e010      	b.n	800337c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <I2C_MasterRequestWrite+0x100>)
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f888 	bl	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	00010008 	.word	0x00010008
 8003388:	00010002 	.word	0x00010002

0800338c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339c:	e048      	b.n	8003430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d044      	beq.n	8003430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a6:	f7fe fd09 	bl	8001dbc <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d302      	bcc.n	80033bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d139      	bne.n	8003430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	0c1b      	lsrs	r3, r3, #16
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10d      	bne.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	e00c      	b.n	80033fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	43da      	mvns	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	4013      	ands	r3, r2
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d116      	bne.n	8003430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e023      	b.n	8003478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	0c1b      	lsrs	r3, r3, #16
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b01      	cmp	r3, #1
 8003438:	d10d      	bne.n	8003456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	43da      	mvns	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4013      	ands	r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	bf0c      	ite	eq
 800344c:	2301      	moveq	r3, #1
 800344e:	2300      	movne	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	e00c      	b.n	8003470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	43da      	mvns	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	429a      	cmp	r2, r3
 8003474:	d093      	beq.n	800339e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800348e:	e071      	b.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d123      	bne.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e067      	b.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d041      	beq.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fe fc64 	bl	8001dbc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d136      	bne.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10c      	bne.n	800352a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	e00b      	b.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	43da      	mvns	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d016      	beq.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e021      	b.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b01      	cmp	r3, #1
 800357c:	d10c      	bne.n	8003598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	43da      	mvns	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e00b      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f af6d 	bne.w	8003490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035cc:	e034      	b.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f886 	bl	80036e0 <I2C_IsAcknowledgeFailed>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e034      	b.n	8003648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e4:	d028      	beq.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7fe fbe9 	bl	8001dbc <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d11d      	bne.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d016      	beq.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e007      	b.n	8003648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d1c3      	bne.n	80035ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800365c:	e034      	b.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f83e 	bl	80036e0 <I2C_IsAcknowledgeFailed>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e034      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d028      	beq.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fe fba1 	bl	8001dbc <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d11d      	bne.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d016      	beq.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e007      	b.n	80036d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d1c3      	bne.n	800365e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f6:	d11b      	bne.n	8003730 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003700:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0204 	orr.w	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e272      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8087 	beq.w	800386a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800375c:	4b92      	ldr	r3, [pc, #584]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b04      	cmp	r3, #4
 8003766:	d00c      	beq.n	8003782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003768:	4b8f      	ldr	r3, [pc, #572]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 030c 	and.w	r3, r3, #12
 8003770:	2b08      	cmp	r3, #8
 8003772:	d112      	bne.n	800379a <HAL_RCC_OscConfig+0x5e>
 8003774:	4b8c      	ldr	r3, [pc, #560]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d10b      	bne.n	800379a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003782:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06c      	beq.n	8003868 <HAL_RCC_OscConfig+0x12c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d168      	bne.n	8003868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e24c      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x76>
 80037a4:	4b80      	ldr	r3, [pc, #512]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7f      	ldr	r2, [pc, #508]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	e02e      	b.n	8003810 <HAL_RCC_OscConfig+0xd4>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x98>
 80037ba:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b78      	ldr	r3, [pc, #480]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a77      	ldr	r2, [pc, #476]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e01d      	b.n	8003810 <HAL_RCC_OscConfig+0xd4>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0xbc>
 80037de:	4b72      	ldr	r3, [pc, #456]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a71      	ldr	r2, [pc, #452]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	4b6f      	ldr	r3, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6e      	ldr	r2, [pc, #440]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0xd4>
 80037f8:	4b6b      	ldr	r3, [pc, #428]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a6a      	ldr	r2, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b68      	ldr	r3, [pc, #416]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800380a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800380e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d013      	beq.n	8003840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7fe fad0 	bl	8001dbc <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003820:	f7fe facc 	bl	8001dbc <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e200      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	4b5d      	ldr	r3, [pc, #372]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0f0      	beq.n	8003820 <HAL_RCC_OscConfig+0xe4>
 800383e:	e014      	b.n	800386a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fabc 	bl	8001dbc <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe fab8 	bl	8001dbc <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e1ec      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	4b53      	ldr	r3, [pc, #332]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x10c>
 8003866:	e000      	b.n	800386a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d063      	beq.n	800393e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003876:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 030c 	and.w	r3, r3, #12
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00b      	beq.n	800389a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003882:	4b49      	ldr	r3, [pc, #292]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b08      	cmp	r3, #8
 800388c:	d11c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x18c>
 800388e:	4b46      	ldr	r3, [pc, #280]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d005      	beq.n	80038b2 <HAL_RCC_OscConfig+0x176>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1c0      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b2:	4b3d      	ldr	r3, [pc, #244]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4939      	ldr	r1, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c6:	e03a      	b.n	800393e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <HAL_RCC_OscConfig+0x270>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fe fa71 	bl	8001dbc <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038de:	f7fe fa6d 	bl	8001dbc <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e1a1      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	4927      	ldr	r1, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]
 8003910:	e015      	b.n	800393e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b26      	ldr	r3, [pc, #152]	; (80039ac <HAL_RCC_OscConfig+0x270>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fa50 	bl	8001dbc <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003920:	f7fe fa4c 	bl	8001dbc <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e180      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d03a      	beq.n	80039c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d019      	beq.n	8003986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_RCC_OscConfig+0x274>)
 8003954:	2201      	movs	r2, #1
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7fe fa30 	bl	8001dbc <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003960:	f7fe fa2c 	bl	8001dbc <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e160      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCC_OscConfig+0x26c>)
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800397e:	2001      	movs	r0, #1
 8003980:	f000 fafe 	bl	8003f80 <RCC_Delay>
 8003984:	e01c      	b.n	80039c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_RCC_OscConfig+0x274>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398c:	f7fe fa16 	bl	8001dbc <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003992:	e00f      	b.n	80039b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7fe fa12 	bl	8001dbc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d908      	bls.n	80039b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e146      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000
 80039ac:	42420000 	.word	0x42420000
 80039b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e9      	bne.n	8003994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80a6 	beq.w	8003b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d2:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10d      	bne.n	80039fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4a87      	ldr	r2, [pc, #540]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e8:	61d3      	str	r3, [r2, #28]
 80039ea:	4b85      	ldr	r3, [pc, #532]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f2:	60bb      	str	r3, [r7, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fa:	4b82      	ldr	r3, [pc, #520]	; (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d118      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a06:	4b7f      	ldr	r3, [pc, #508]	; (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7e      	ldr	r2, [pc, #504]	; (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fe f9d3 	bl	8001dbc <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fe f9cf 	bl	8001dbc <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	; 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e103      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b75      	ldr	r3, [pc, #468]	; (8003c04 <HAL_RCC_OscConfig+0x4c8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f0      	beq.n	8003a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x312>
 8003a40:	4b6f      	ldr	r3, [pc, #444]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4a6e      	ldr	r2, [pc, #440]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6213      	str	r3, [r2, #32]
 8003a4c:	e02d      	b.n	8003aaa <HAL_RCC_OscConfig+0x36e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x334>
 8003a56:	4b6a      	ldr	r3, [pc, #424]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4a69      	ldr	r2, [pc, #420]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4a66      	ldr	r2, [pc, #408]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	f023 0304 	bic.w	r3, r3, #4
 8003a6c:	6213      	str	r3, [r2, #32]
 8003a6e:	e01c      	b.n	8003aaa <HAL_RCC_OscConfig+0x36e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x356>
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a60      	ldr	r2, [pc, #384]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	6213      	str	r3, [r2, #32]
 8003a84:	4b5e      	ldr	r3, [pc, #376]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4a5d      	ldr	r2, [pc, #372]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6213      	str	r3, [r2, #32]
 8003a90:	e00b      	b.n	8003aaa <HAL_RCC_OscConfig+0x36e>
 8003a92:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	6213      	str	r3, [r2, #32]
 8003a9e:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	f023 0304 	bic.w	r3, r3, #4
 8003aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d015      	beq.n	8003ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe f983 	bl	8001dbc <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fe f97f 	bl	8001dbc <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0b1      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ee      	beq.n	8003aba <HAL_RCC_OscConfig+0x37e>
 8003adc:	e014      	b.n	8003b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe f96d 	bl	8001dbc <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae4:	e00a      	b.n	8003afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7fe f969 	bl	8001dbc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e09b      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1ee      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8087 	beq.w	8003c32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d061      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d146      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b38:	4b33      	ldr	r3, [pc, #204]	; (8003c08 <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3e:	f7fe f93d 	bl	8001dbc <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fe f939 	bl	8001dbc <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e06d      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f0      	bne.n	8003b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d108      	bne.n	8003b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4921      	ldr	r1, [pc, #132]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a19      	ldr	r1, [r3, #32]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	430b      	orrs	r3, r1
 8003b92:	491b      	ldr	r1, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <HAL_RCC_OscConfig+0x4cc>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fe f90d 	bl	8001dbc <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fe f909 	bl	8001dbc <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e03d      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x46a>
 8003bc4:	e035      	b.n	8003c32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe f8f6 	bl	8001dbc <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe f8f2 	bl	8001dbc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e026      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x498>
 8003bf2:	e01e      	b.n	8003c32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e019      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
 8003c08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HAL_RCC_OscConfig+0x500>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000

08003c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0d0      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c54:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d910      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c62:	4b67      	ldr	r3, [pc, #412]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 0207 	bic.w	r2, r3, #7
 8003c6a:	4965      	ldr	r1, [pc, #404]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c72:	4b63      	ldr	r3, [pc, #396]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0b8      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c9c:	4b59      	ldr	r3, [pc, #356]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ca6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cb4:	4b53      	ldr	r3, [pc, #332]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4a52      	ldr	r2, [pc, #328]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003cbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc0:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	494d      	ldr	r1, [pc, #308]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d040      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d115      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e07f      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfe:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e073      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e06b      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f023 0203 	bic.w	r2, r3, #3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4936      	ldr	r1, [pc, #216]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d30:	f7fe f844 	bl	8001dbc <HAL_GetTick>
 8003d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d38:	f7fe f840 	bl	8001dbc <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e053      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d4e:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 020c 	and.w	r2, r3, #12
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d1eb      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d60:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d210      	bcs.n	8003d90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	4922      	ldr	r1, [pc, #136]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b20      	ldr	r3, [pc, #128]	; (8003e00 <HAL_RCC_ClockConfig+0x1c0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e032      	b.n	8003df6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d9c:	4b19      	ldr	r3, [pc, #100]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4916      	ldr	r1, [pc, #88]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	490e      	ldr	r1, [pc, #56]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dce:	f000 f821 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	490a      	ldr	r1, [pc, #40]	; (8003e08 <HAL_RCC_ClockConfig+0x1c8>)
 8003de0:	5ccb      	ldrb	r3, [r1, r3]
 8003de2:	fa22 f303 	lsr.w	r3, r2, r3
 8003de6:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <HAL_RCC_ClockConfig+0x1cc>)
 8003de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x1d0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fd fef2 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40021000 	.word	0x40021000
 8003e08:	08008154 	.word	0x08008154
 8003e0c:	20000008 	.word	0x20000008
 8003e10:	2000000c 	.word	0x2000000c

08003e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x30>
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d003      	beq.n	8003e4a <HAL_RCC_GetSysClockFreq+0x36>
 8003e42:	e027      	b.n	8003e94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_RCC_GetSysClockFreq+0x98>)
 8003e46:	613b      	str	r3, [r7, #16]
      break;
 8003e48:	e027      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0c9b      	lsrs	r3, r3, #18
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e54:	5cd3      	ldrb	r3, [r2, r3]
 8003e56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d010      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	0c5b      	lsrs	r3, r3, #17
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <HAL_RCC_GetSysClockFreq+0x98>)
 8003e76:	fb03 f202 	mul.w	r2, r3, r2
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e004      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	613b      	str	r3, [r7, #16]
      break;
 8003e92:	e002      	b.n	8003e9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <HAL_RCC_GetSysClockFreq+0x98>)
 8003e96:	613b      	str	r3, [r7, #16]
      break;
 8003e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e9a:	693b      	ldr	r3, [r7, #16]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	007a1200 	.word	0x007a1200
 8003eb0:	0800816c 	.word	0x0800816c
 8003eb4:	0800817c 	.word	0x0800817c
 8003eb8:	003d0900 	.word	0x003d0900

08003ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec0:	4b02      	ldr	r3, [pc, #8]	; (8003ecc <HAL_RCC_GetHCLKFreq+0x10>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr
 8003ecc:	20000008 	.word	0x20000008

08003ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ed4:	f7ff fff2 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	4903      	ldr	r1, [pc, #12]	; (8003ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee6:	5ccb      	ldrb	r3, [r1, r3]
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	08008164 	.word	0x08008164

08003ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003efc:	f7ff ffde 	bl	8003ebc <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	0adb      	lsrs	r3, r3, #11
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4903      	ldr	r1, [pc, #12]	; (8003f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	08008164 	.word	0x08008164

08003f20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f30:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RCC_GetClockConfig+0x58>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 0203 	and.w	r2, r3, #3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <HAL_RCC_GetClockConfig+0x58>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_GetClockConfig+0x58>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f54:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_RCC_GetClockConfig+0x58>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f62:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCC_GetClockConfig+0x5c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0207 	and.w	r2, r3, #7
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40022000 	.word	0x40022000

08003f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <RCC_Delay+0x34>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <RCC_Delay+0x38>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0a5b      	lsrs	r3, r3, #9
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f9c:	bf00      	nop
  }
  while (Delay --);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	60fa      	str	r2, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f9      	bne.n	8003f9c <RCC_Delay+0x1c>
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	20000008 	.word	0x20000008
 8003fb8:	10624dd3 	.word	0x10624dd3

08003fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d07d      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fdc:	4b4f      	ldr	r3, [pc, #316]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10d      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b4c      	ldr	r3, [pc, #304]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4a4b      	ldr	r2, [pc, #300]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	61d3      	str	r3, [r2, #28]
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004004:	4b46      	ldr	r3, [pc, #280]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d118      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004010:	4b43      	ldr	r3, [pc, #268]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a42      	ldr	r2, [pc, #264]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401c:	f7fd fece 	bl	8001dbc <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	e008      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004024:	f7fd feca 	bl	8001dbc <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b64      	cmp	r3, #100	; 0x64
 8004030:	d901      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e06d      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02e      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	429a      	cmp	r2, r3
 800405e:	d027      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004060:	4b2e      	ldr	r3, [pc, #184]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004068:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800406a:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800406c:	2201      	movs	r2, #1
 800406e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004070:	4b2c      	ldr	r3, [pc, #176]	; (8004124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004076:	4a29      	ldr	r2, [pc, #164]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d014      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fd fe99 	bl	8001dbc <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd fe95 	bl	8001dbc <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e036      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ee      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040b0:	4b1a      	ldr	r3, [pc, #104]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4917      	ldr	r1, [pc, #92]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d105      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	490b      	ldr	r1, [pc, #44]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	40007000 	.word	0x40007000
 8004124:	42420440 	.word	0x42420440

08004128 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	2300      	movs	r3, #0
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	2300      	movs	r3, #0
 800413a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b10      	cmp	r3, #16
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b10      	cmp	r3, #16
 800414e:	f200 808a 	bhi.w	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d045      	beq.n	80041e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d075      	beq.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800415e:	e082      	b.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004160:	4b46      	ldr	r3, [pc, #280]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004166:	4b45      	ldr	r3, [pc, #276]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d07b      	beq.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	4a41      	ldr	r2, [pc, #260]	; (8004280 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800417c:	5cd3      	ldrb	r3, [r2, r3]
 800417e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d015      	beq.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800418a:	4b3c      	ldr	r3, [pc, #240]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	0c5b      	lsrs	r3, r3, #17
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	4a3b      	ldr	r2, [pc, #236]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004196:	5cd3      	ldrb	r3, [r2, r3]
 8004198:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80041a4:	4a38      	ldr	r2, [pc, #224]	; (8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	e004      	b.n	80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	4a34      	ldr	r2, [pc, #208]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80041c0:	4b2e      	ldr	r3, [pc, #184]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041cc:	d102      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	61bb      	str	r3, [r7, #24]
      break;
 80041d2:	e04a      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4a2d      	ldr	r2, [pc, #180]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	61bb      	str	r3, [r7, #24]
      break;
 80041e2:	e042      	b.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041f4:	d108      	bne.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004204:	61bb      	str	r3, [r7, #24]
 8004206:	e01f      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004212:	d109      	bne.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004220:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e00f      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	d11c      	bne.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d016      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004240:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004244:	61bb      	str	r3, [r7, #24]
      break;
 8004246:	e012      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004248:	e011      	b.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800424a:	f7ff fe55 	bl	8003ef8 <HAL_RCC_GetPCLK2Freq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	0b9b      	lsrs	r3, r3, #14
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	3301      	adds	r3, #1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004262:	61bb      	str	r3, [r7, #24]
      break;
 8004264:	e004      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004266:	bf00      	nop
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800426e:	bf00      	nop
    }
  }
  return (frequency);
 8004270:	69bb      	ldr	r3, [r7, #24]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000
 8004280:	08008180 	.word	0x08008180
 8004284:	08008190 	.word	0x08008190
 8004288:	007a1200 	.word	0x007a1200
 800428c:	003d0900 	.word	0x003d0900
 8004290:	aaaaaaab 	.word	0xaaaaaaab

08004294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e076      	b.n	8004394 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d009      	beq.n	80042cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
 80042be:	e005      	b.n	80042cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd fc2c 	bl	8001b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	ea42 0103 	orr.w	r1, r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	0c1a      	lsrs	r2, r3, #16
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f002 0204 	and.w	r2, r2, #4
 8004372:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004382:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e041      	b.n	8004432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f839 	bl	800443a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3304      	adds	r3, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 f9b4 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d001      	beq.n	8004464 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e03a      	b.n	80044da <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <HAL_TIM_Base_Start_IT+0x98>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00e      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x58>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448e:	d009      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x58>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIM_Base_Start_IT+0x58>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_TIM_Base_Start_IT+0xa0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2b06      	cmp	r3, #6
 80044b4:	d010      	beq.n	80044d8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0201 	orr.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c6:	e007      	b.n	80044d8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40000400 	.word	0x40000400
 80044ec:	40000800 	.word	0x40000800

080044f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0202 	mvn.w	r2, #2
 800451c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f8ed 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8e0 	bl	8004700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8ef 	bl	8004724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b04      	cmp	r3, #4
 8004558:	d122      	bne.n	80045a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d11b      	bne.n	80045a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0204 	mvn.w	r2, #4
 8004570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f8c3 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 800458c:	e005      	b.n	800459a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f8b6 	bl	8004700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f8c5 	bl	8004724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d122      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d11b      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0208 	mvn.w	r2, #8
 80045c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2204      	movs	r2, #4
 80045ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f899 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 80045e0:	e005      	b.n	80045ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f88c 	bl	8004700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f89b 	bl	8004724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d122      	bne.n	8004648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b10      	cmp	r3, #16
 800460e:	d11b      	bne.n	8004648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0210 	mvn.w	r2, #16
 8004618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2208      	movs	r2, #8
 800461e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f86f 	bl	8004712 <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f862 	bl	8004700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f871 	bl	8004724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b01      	cmp	r3, #1
 8004654:	d10e      	bne.n	8004674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b01      	cmp	r3, #1
 8004662:	d107      	bne.n	8004674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0201 	mvn.w	r2, #1
 800466c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fc fbb2 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d10e      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d107      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8bf 	bl	800481e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d10e      	bne.n	80046cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d107      	bne.n	80046cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f835 	bl	8004736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d10e      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d107      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0220 	mvn.w	r2, #32
 80046f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f88a 	bl	800480c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a29      	ldr	r2, [pc, #164]	; (8004800 <TIM_Base_SetConfig+0xb8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0x30>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0x30>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a26      	ldr	r2, [pc, #152]	; (8004804 <TIM_Base_SetConfig+0xbc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0x30>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a25      	ldr	r2, [pc, #148]	; (8004808 <TIM_Base_SetConfig+0xc0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d108      	bne.n	800478a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <TIM_Base_SetConfig+0xb8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <TIM_Base_SetConfig+0xbc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x62>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a18      	ldr	r2, [pc, #96]	; (8004808 <TIM_Base_SetConfig+0xc0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a07      	ldr	r2, [pc, #28]	; (8004800 <TIM_Base_SetConfig+0xb8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d103      	bne.n	80047f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	615a      	str	r2, [r3, #20]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800

0800480c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004836:	f3ef 8305 	mrs	r3, IPSR
 800483a:	60bb      	str	r3, [r7, #8]
  return(result);
 800483c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10f      	bne.n	8004862 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004842:	f3ef 8310 	mrs	r3, PRIMASK
 8004846:	607b      	str	r3, [r7, #4]
  return(result);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <osKernelInitialize+0x32>
 800484e:	4b10      	ldr	r3, [pc, #64]	; (8004890 <osKernelInitialize+0x60>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d109      	bne.n	800486a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004856:	f3ef 8311 	mrs	r3, BASEPRI
 800485a:	603b      	str	r3, [r7, #0]
  return(result);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004862:	f06f 0305 	mvn.w	r3, #5
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e00c      	b.n	8004884 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <osKernelInitialize+0x60>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004872:	4b07      	ldr	r3, [pc, #28]	; (8004890 <osKernelInitialize+0x60>)
 8004874:	2201      	movs	r2, #1
 8004876:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e002      	b.n	8004884 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004884:	68fb      	ldr	r3, [r7, #12]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	200005f4 	.word	0x200005f4

08004894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800489a:	f3ef 8305 	mrs	r3, IPSR
 800489e:	60bb      	str	r3, [r7, #8]
  return(result);
 80048a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10f      	bne.n	80048c6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a6:	f3ef 8310 	mrs	r3, PRIMASK
 80048aa:	607b      	str	r3, [r7, #4]
  return(result);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <osKernelStart+0x32>
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <osKernelStart+0x64>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d109      	bne.n	80048ce <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ba:	f3ef 8311 	mrs	r3, BASEPRI
 80048be:	603b      	str	r3, [r7, #0]
  return(result);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <osKernelStart+0x3a>
    stat = osErrorISR;
 80048c6:	f06f 0305 	mvn.w	r3, #5
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e00e      	b.n	80048ec <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <osKernelStart+0x64>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80048d6:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <osKernelStart+0x64>)
 80048d8:	2202      	movs	r2, #2
 80048da:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80048dc:	f001 fb20 	bl	8005f20 <vTaskStartScheduler>
      stat = osOK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e002      	b.n	80048ec <osKernelStart+0x58>
    } else {
      stat = osError;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048ec:	68fb      	ldr	r3, [r7, #12]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200005f4 	.word	0x200005f4

080048fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b092      	sub	sp, #72	; 0x48
 8004900:	af04      	add	r7, sp, #16
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800490c:	f3ef 8305 	mrs	r3, IPSR
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 8094 	bne.w	8004a42 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800491a:	f3ef 8310 	mrs	r3, PRIMASK
 800491e:	623b      	str	r3, [r7, #32]
  return(result);
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 808d 	bne.w	8004a42 <osThreadNew+0x146>
 8004928:	4b48      	ldr	r3, [pc, #288]	; (8004a4c <osThreadNew+0x150>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d106      	bne.n	800493e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004930:	f3ef 8311 	mrs	r3, BASEPRI
 8004934:	61fb      	str	r3, [r7, #28]
  return(result);
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 8082 	bne.w	8004a42 <osThreadNew+0x146>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d07e      	beq.n	8004a42 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004948:	2318      	movs	r3, #24
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800494c:	2300      	movs	r3, #0
 800494e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004950:	f107 031b 	add.w	r3, r7, #27
 8004954:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d045      	beq.n	80049ee <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <osThreadNew+0x74>
        name = attr->name;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <osThreadNew+0x9a>
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b38      	cmp	r3, #56	; 0x38
 8004988:	d805      	bhi.n	8004996 <osThreadNew+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <osThreadNew+0x9e>
        return (NULL);
 8004996:	2300      	movs	r3, #0
 8004998:	e054      	b.n	8004a44 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	089b      	lsrs	r3, r3, #2
 80049a8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00e      	beq.n	80049d0 <osThreadNew+0xd4>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b5b      	cmp	r3, #91	; 0x5b
 80049b8:	d90a      	bls.n	80049d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d006      	beq.n	80049d0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <osThreadNew+0xd4>
        mem = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ce:	e010      	b.n	80049f2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10c      	bne.n	80049f2 <osThreadNew+0xf6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d108      	bne.n	80049f2 <osThreadNew+0xf6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <osThreadNew+0xf6>
          mem = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80049ec:	e001      	b.n	80049f2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80049f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d110      	bne.n	8004a1a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a00:	9202      	str	r2, [sp, #8]
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f001 f83c 	bl	8005a8c <xTaskCreateStatic>
 8004a14:	4603      	mov	r3, r0
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e013      	b.n	8004a42 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d110      	bne.n	8004a42 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f001 f886 	bl	8005b44 <xTaskCreate>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d001      	beq.n	8004a42 <osThreadNew+0x146>
          hTask = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a42:	697b      	ldr	r3, [r7, #20]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3738      	adds	r7, #56	; 0x38
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200005f4 	.word	0x200005f4

08004a50 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a58:	f3ef 8305 	mrs	r3, IPSR
 8004a5c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a5e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10f      	bne.n	8004a84 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a64:	f3ef 8310 	mrs	r3, PRIMASK
 8004a68:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <osDelay+0x34>
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <osDelay+0x58>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d109      	bne.n	8004a8c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a78:	f3ef 8311 	mrs	r3, BASEPRI
 8004a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <osDelay+0x3c>
    stat = osErrorISR;
 8004a84:	f06f 0305 	mvn.w	r3, #5
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e007      	b.n	8004a9c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 fa0e 	bl	8005eb8 <vTaskDelay>
    }
  }

  return (stat);
 8004a9c:	697b      	ldr	r3, [r7, #20]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200005f4 	.word	0x200005f4

08004aac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abc:	f3ef 8305 	mrs	r3, IPSR
 8004ac0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ac2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d16f      	bne.n	8004ba8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	617b      	str	r3, [r7, #20]
  return(result);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d169      	bne.n	8004ba8 <osMessageQueueNew+0xfc>
 8004ad4:	4b37      	ldr	r3, [pc, #220]	; (8004bb4 <osMessageQueueNew+0x108>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d105      	bne.n	8004ae8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004adc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae0:	613b      	str	r3, [r7, #16]
  return(result);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d15f      	bne.n	8004ba8 <osMessageQueueNew+0xfc>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d05c      	beq.n	8004ba8 <osMessageQueueNew+0xfc>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d059      	beq.n	8004ba8 <osMessageQueueNew+0xfc>
    mem = -1;
 8004af4:	f04f 33ff 	mov.w	r3, #4294967295
 8004af8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d029      	beq.n	8004b54 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <osMessageQueueNew+0x82>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8004b0e:	d90e      	bls.n	8004b2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <osMessageQueueNew+0x82>
        mem = 1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	623b      	str	r3, [r7, #32]
 8004b2c:	e014      	b.n	8004b58 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d110      	bne.n	8004b58 <osMessageQueueNew+0xac>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10c      	bne.n	8004b58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <osMessageQueueNew+0xac>
          mem = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	623b      	str	r3, [r7, #32]
 8004b52:	e001      	b.n	8004b58 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d10b      	bne.n	8004b76 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	2100      	movs	r1, #0
 8004b68:	9100      	str	r1, [sp, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fa53 	bl	8005018 <xQueueGenericCreateStatic>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24
 8004b74:	e008      	b.n	8004b88 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fac0 	bl	8005106 <xQueueGenericCreate>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d003      	beq.n	8004b9c <osMessageQueueNew+0xf0>
        name = attr->name;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e001      	b.n	8004ba0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004ba0:	69f9      	ldr	r1, [r7, #28]
 8004ba2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ba4:	f000 ff16 	bl	80059d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3728      	adds	r7, #40	; 0x28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200005f4 	.word	0x200005f4

08004bb8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd0:	f3ef 8305 	mrs	r3, IPSR
 8004bd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004bd6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10f      	bne.n	8004bfc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bdc:	f3ef 8310 	mrs	r3, PRIMASK
 8004be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <osMessageQueuePut+0x44>
 8004be8:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <osMessageQueuePut+0xe0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d12e      	bne.n	8004c4e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d028      	beq.n	8004c4e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d005      	beq.n	8004c0e <osMessageQueuePut+0x56>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <osMessageQueuePut+0x56>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004c0e:	f06f 0303 	mvn.w	r3, #3
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c14:	e039      	b.n	8004c8a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c1a:	f107 0210 	add.w	r2, r7, #16
 8004c1e:	2300      	movs	r3, #0
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	6a38      	ldr	r0, [r7, #32]
 8004c24:	f000 fbce 	bl	80053c4 <xQueueGenericSendFromISR>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d003      	beq.n	8004c36 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004c2e:	f06f 0302 	mvn.w	r3, #2
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c34:	e029      	b.n	8004c8a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d026      	beq.n	8004c8a <osMessageQueuePut+0xd2>
 8004c3c:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <osMessageQueuePut+0xe4>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c4c:	e01d      	b.n	8004c8a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <osMessageQueuePut+0xa2>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d103      	bne.n	8004c62 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004c5a:	f06f 0303 	mvn.w	r3, #3
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	e014      	b.n	8004c8c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c62:	2300      	movs	r3, #0
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	6a38      	ldr	r0, [r7, #32]
 8004c6a:	f000 faad 	bl	80051c8 <xQueueGenericSend>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d00b      	beq.n	8004c8c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004c7a:	f06f 0301 	mvn.w	r3, #1
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c80:	e004      	b.n	8004c8c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004c82:	f06f 0302 	mvn.w	r3, #2
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
 8004c88:	e000      	b.n	8004c8c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c8a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3728      	adds	r7, #40	; 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200005f4 	.word	0x200005f4
 8004c9c:	e000ed04 	.word	0xe000ed04

08004ca0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	; 0x28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cb6:	f3ef 8305 	mrs	r3, IPSR
 8004cba:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cbc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <osMessageQueueGet+0x42>
 8004cce:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <osMessageQueueGet+0xdc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d12e      	bne.n	8004d34 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cda:	617b      	str	r3, [r7, #20]
  return(result);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d028      	beq.n	8004d34 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <osMessageQueueGet+0x54>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <osMessageQueueGet+0x54>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004cf4:	f06f 0303 	mvn.w	r3, #3
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cfa:	e038      	b.n	8004d6e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004d00:	f107 0310 	add.w	r3, r7, #16
 8004d04:	461a      	mov	r2, r3
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	6a38      	ldr	r0, [r7, #32]
 8004d0a:	f000 fcd3 	bl	80056b4 <xQueueReceiveFromISR>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d003      	beq.n	8004d1c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004d14:	f06f 0302 	mvn.w	r3, #2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d1a:	e028      	b.n	8004d6e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d025      	beq.n	8004d6e <osMessageQueueGet+0xce>
 8004d22:	4b17      	ldr	r3, [pc, #92]	; (8004d80 <osMessageQueueGet+0xe0>)
 8004d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d32:	e01c      	b.n	8004d6e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <osMessageQueueGet+0xa0>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004d40:	f06f 0303 	mvn.w	r3, #3
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	e013      	b.n	8004d70 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	6a38      	ldr	r0, [r7, #32]
 8004d4e:	f000 fbd1 	bl	80054f4 <xQueueReceive>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d00b      	beq.n	8004d70 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004d5e:	f06f 0301 	mvn.w	r3, #1
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
 8004d64:	e004      	b.n	8004d70 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004d66:	f06f 0302 	mvn.w	r3, #2
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	e000      	b.n	8004d70 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200005f4 	.word	0x200005f4
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a06      	ldr	r2, [pc, #24]	; (8004dac <vApplicationGetIdleTaskMemory+0x28>)
 8004d94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2280      	movs	r2, #128	; 0x80
 8004da0:	601a      	str	r2, [r3, #0]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	200005f8 	.word	0x200005f8
 8004db0:	20000654 	.word	0x20000654

08004db4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a07      	ldr	r2, [pc, #28]	; (8004de0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004dc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <vApplicationGetTimerTaskMemory+0x30>)
 8004dca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dd2:	601a      	str	r2, [r3, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000854 	.word	0x20000854
 8004de4:	200008b0 	.word	0x200008b0

08004de8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f103 0208 	add.w	r2, r3, #8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f103 0208 	add.w	r2, r3, #8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f103 0208 	add.w	r2, r3, #8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr

08004e3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	601a      	str	r2, [r3, #0]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d103      	bne.n	8004ea4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e00c      	b.n	8004ebe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e002      	b.n	8004eb2 <vListInsert+0x2e>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d2f6      	bcs.n	8004eac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6892      	ldr	r2, [r2, #8]
 8004f0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6852      	ldr	r2, [r2, #4]
 8004f14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d103      	bne.n	8004f28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
	...

08004f48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f72:	f002 f903 	bl	800717c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	68f9      	ldr	r1, [r7, #12]
 8004fa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	22ff      	movs	r2, #255	; 0xff
 8004fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d114      	bne.n	8004ff2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01a      	beq.n	8005006 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3310      	adds	r3, #16
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f001 fa2d 	bl	8006434 <xTaskRemoveFromEventList>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d012      	beq.n	8005006 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <xQueueGenericReset+0xcc>)
 8004fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	e009      	b.n	8005006 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fef6 	bl	8004de8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3324      	adds	r3, #36	; 0x24
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fef1 	bl	8004de8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005006:	f002 f8e9 	bl	80071dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800500a:	2301      	movs	r3, #1
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08e      	sub	sp, #56	; 0x38
 800501c:	af02      	add	r7, sp, #8
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10a      	bne.n	800505e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	627b      	str	r3, [r7, #36]	; 0x24
}
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <xQueueGenericCreateStatic+0x52>
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <xQueueGenericCreateStatic+0x56>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <xQueueGenericCreateStatic+0x58>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10a      	bne.n	800508a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	623b      	str	r3, [r7, #32]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <xQueueGenericCreateStatic+0x7e>
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <xQueueGenericCreateStatic+0x82>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <xQueueGenericCreateStatic+0x84>
 800509a:	2300      	movs	r3, #0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	61fb      	str	r3, [r7, #28]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050b6:	2350      	movs	r3, #80	; 0x50
 80050b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b50      	cmp	r3, #80	; 0x50
 80050be:	d00a      	beq.n	80050d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61bb      	str	r3, [r7, #24]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00d      	beq.n	80050fc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050e8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ee:	9300      	str	r3, [sp, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f843 	bl	8005182 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80050fe:	4618      	mov	r0, r3
 8005100:	3730      	adds	r7, #48	; 0x30
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005106:	b580      	push	{r7, lr}
 8005108:	b08a      	sub	sp, #40	; 0x28
 800510a:	af02      	add	r7, sp, #8
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	4613      	mov	r3, r2
 8005112:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <xQueueGenericCreate+0x2a>
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	613b      	str	r3, [r7, #16]
}
 800512c:	bf00      	nop
 800512e:	e7fe      	b.n	800512e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	e004      	b.n	8005146 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	fb02 f303 	mul.w	r3, r2, r3
 8005144:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3350      	adds	r3, #80	; 0x50
 800514a:	4618      	mov	r0, r3
 800514c:	f002 f916 	bl	800737c <pvPortMalloc>
 8005150:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00f      	beq.n	8005178 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	3350      	adds	r3, #80	; 0x50
 800515c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005166:	79fa      	ldrb	r2, [r7, #7]
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	4613      	mov	r3, r2
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f805 	bl	8005182 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005178:	69bb      	ldr	r3, [r7, #24]
	}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	60f8      	str	r0, [r7, #12]
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d103      	bne.n	800519e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	e002      	b.n	80051a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051b0:	2101      	movs	r1, #1
 80051b2:	69b8      	ldr	r0, [r7, #24]
 80051b4:	f7ff fec8 	bl	8004f48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	78fa      	ldrb	r2, [r7, #3]
 80051bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051c0:	bf00      	nop
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051d6:	2300      	movs	r3, #0
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <xQueueGenericSend+0x32>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <xQueueGenericSend+0x40>
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <xQueueGenericSend+0x44>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <xQueueGenericSend+0x46>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <xQueueGenericSend+0x60>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d103      	bne.n	8005236 <xQueueGenericSend+0x6e>
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <xQueueGenericSend+0x72>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueGenericSend+0x74>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueGenericSend+0x8e>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	623b      	str	r3, [r7, #32]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005256:	f001 faaf 	bl	80067b8 <xTaskGetSchedulerState>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <xQueueGenericSend+0x9e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueGenericSend+0xa2>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueGenericSend+0xa4>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericSend+0xbe>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61fb      	str	r3, [r7, #28]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005286:	f001 ff79 	bl	800717c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800528e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <xQueueGenericSend+0xd4>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d129      	bne.n	80052f0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	68b9      	ldr	r1, [r7, #8]
 80052a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052a2:	f000 fa87 	bl	80057b4 <prvCopyDataToQueue>
 80052a6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d010      	beq.n	80052d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 f8bd 	bl	8006434 <xTaskRemoveFromEventList>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d013      	beq.n	80052e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052c0:	4b3f      	ldr	r3, [pc, #252]	; (80053c0 <xQueueGenericSend+0x1f8>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	e00a      	b.n	80052e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052d8:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <xQueueGenericSend+0x1f8>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052e8:	f001 ff78 	bl	80071dc <vPortExitCritical>
				return pdPASS;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e063      	b.n	80053b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052f6:	f001 ff71 	bl	80071dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e05c      	b.n	80053b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005304:	f107 0314 	add.w	r3, r7, #20
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f8f7 	bl	80064fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800530e:	2301      	movs	r3, #1
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005312:	f001 ff63 	bl	80071dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005316:	f000 fe69 	bl	8005fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800531a:	f001 ff2f 	bl	800717c <vPortEnterCritical>
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005324:	b25b      	sxtb	r3, r3
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532a:	d103      	bne.n	8005334 <xQueueGenericSend+0x16c>
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d103      	bne.n	800534a <xQueueGenericSend+0x182>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534a:	f001 ff47 	bl	80071dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800534e:	1d3a      	adds	r2, r7, #4
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f001 f8e6 	bl	8006528 <xTaskCheckForTimeOut>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d124      	bne.n	80053ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005364:	f000 fb1e 	bl	80059a4 <prvIsQueueFull>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	3310      	adds	r3, #16
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4611      	mov	r1, r2
 8005376:	4618      	mov	r0, r3
 8005378:	f001 f80c 	bl	8006394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800537c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537e:	f000 faa9 	bl	80058d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005382:	f000 fe41 	bl	8006008 <xTaskResumeAll>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	f47f af7c 	bne.w	8005286 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <xQueueGenericSend+0x1f8>)
 8005390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	e772      	b.n	8005286 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a2:	f000 fa97 	bl	80058d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053a6:	f000 fe2f 	bl	8006008 <xTaskResumeAll>
 80053aa:	e76c      	b.n	8005286 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ae:	f000 fa91 	bl	80058d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053b2:	f000 fe29 	bl	8006008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053b6:	2300      	movs	r3, #0
		}
	}
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3738      	adds	r7, #56	; 0x38
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08e      	sub	sp, #56	; 0x38
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	607a      	str	r2, [r7, #4]
 80053d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053ee:	bf00      	nop
 80053f0:	e7fe      	b.n	80053f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <xQueueGenericSendFromISR+0x3c>
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <xQueueGenericSendFromISR+0x40>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <xQueueGenericSendFromISR+0x42>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	623b      	str	r3, [r7, #32]
}
 800541c:	bf00      	nop
 800541e:	e7fe      	b.n	800541e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d103      	bne.n	800542e <xQueueGenericSendFromISR+0x6a>
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <xQueueGenericSendFromISR+0x6e>
 800542e:	2301      	movs	r3, #1
 8005430:	e000      	b.n	8005434 <xQueueGenericSendFromISR+0x70>
 8005432:	2300      	movs	r3, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	61fb      	str	r3, [r7, #28]
}
 800544a:	bf00      	nop
 800544c:	e7fe      	b.n	800544c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800544e:	f001 ff57 	bl	8007300 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005452:	f3ef 8211 	mrs	r2, BASEPRI
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	61ba      	str	r2, [r7, #24]
 8005468:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800546a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <xQueueGenericSendFromISR+0xbc>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d12c      	bne.n	80054da <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005490:	f000 f990 	bl	80057b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005494:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d112      	bne.n	80054c4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	3324      	adds	r3, #36	; 0x24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 ffc2 	bl	8006434 <xTaskRemoveFromEventList>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00e      	beq.n	80054d4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e007      	b.n	80054d4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054c8:	3301      	adds	r3, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	b25a      	sxtb	r2, r3
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054d4:	2301      	movs	r3, #1
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80054d8:	e001      	b.n	80054de <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	; 0x34
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3738      	adds	r7, #56	; 0x38
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08c      	sub	sp, #48	; 0x30
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005500:	2300      	movs	r3, #0
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <xQueueReceive+0x30>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	623b      	str	r3, [r7, #32]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <xQueueReceive+0x3e>
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <xQueueReceive+0x42>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <xQueueReceive+0x44>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <xQueueReceive+0x5e>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	61fb      	str	r3, [r7, #28]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005552:	f001 f931 	bl	80067b8 <xTaskGetSchedulerState>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <xQueueReceive+0x6e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <xQueueReceive+0x72>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <xQueueReceive+0x74>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10a      	bne.n	8005582 <xQueueReceive+0x8e>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	61bb      	str	r3, [r7, #24]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005582:	f001 fdfb 	bl	800717c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01f      	beq.n	80055d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005596:	f000 f977 	bl	8005888 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	1e5a      	subs	r2, r3, #1
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00f      	beq.n	80055ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	3310      	adds	r3, #16
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 ff40 	bl	8006434 <xTaskRemoveFromEventList>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055ba:	4b3d      	ldr	r3, [pc, #244]	; (80056b0 <xQueueReceive+0x1bc>)
 80055bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055ca:	f001 fe07 	bl	80071dc <vPortExitCritical>
				return pdPASS;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e069      	b.n	80056a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d8:	f001 fe00 	bl	80071dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055dc:	2300      	movs	r3, #0
 80055de:	e062      	b.n	80056a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e6:	f107 0310 	add.w	r3, r7, #16
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 ff86 	bl	80064fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055f4:	f001 fdf2 	bl	80071dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f8:	f000 fcf8 	bl	8005fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055fc:	f001 fdbe 	bl	800717c <vPortEnterCritical>
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005606:	b25b      	sxtb	r3, r3
 8005608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560c:	d103      	bne.n	8005616 <xQueueReceive+0x122>
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800561c:	b25b      	sxtb	r3, r3
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d103      	bne.n	800562c <xQueueReceive+0x138>
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800562c:	f001 fdd6 	bl	80071dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005630:	1d3a      	adds	r2, r7, #4
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 ff75 	bl	8006528 <xTaskCheckForTimeOut>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d123      	bne.n	800568c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005646:	f000 f997 	bl	8005978 <prvIsQueueEmpty>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d017      	beq.n	8005680 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	3324      	adds	r3, #36	; 0x24
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fe9b 	bl	8006394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800565e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005660:	f000 f938 	bl	80058d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005664:	f000 fcd0 	bl	8006008 <xTaskResumeAll>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d189      	bne.n	8005582 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800566e:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <xQueueReceive+0x1bc>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	e780      	b.n	8005582 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005682:	f000 f927 	bl	80058d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005686:	f000 fcbf 	bl	8006008 <xTaskResumeAll>
 800568a:	e77a      	b.n	8005582 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800568c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568e:	f000 f921 	bl	80058d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005692:	f000 fcb9 	bl	8006008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005698:	f000 f96e 	bl	8005978 <prvIsQueueEmpty>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f43f af6f 	beq.w	8005582 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3730      	adds	r7, #48	; 0x30
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08e      	sub	sp, #56	; 0x38
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	623b      	str	r3, [r7, #32]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueReceiveFromISR+0x3a>
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <xQueueReceiveFromISR+0x3e>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <xQueueReceiveFromISR+0x40>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10a      	bne.n	800570e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	61fb      	str	r3, [r7, #28]
}
 800570a:	bf00      	nop
 800570c:	e7fe      	b.n	800570c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800570e:	f001 fdf7 	bl	8007300 <vPortValidateInterruptPriority>
	__asm volatile
 8005712:	f3ef 8211 	mrs	r2, BASEPRI
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	61ba      	str	r2, [r7, #24]
 8005728:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800572a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d02f      	beq.n	800579a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005748:	f000 f89e 	bl	8005888 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d112      	bne.n	8005784 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d016      	beq.n	8005794 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	3310      	adds	r3, #16
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fe62 	bl	8006434 <xTaskRemoveFromEventList>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00e      	beq.n	8005794 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e007      	b.n	8005794 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005788:	3301      	adds	r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	b25a      	sxtb	r2, r3
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005794:	2301      	movs	r3, #1
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	e001      	b.n	800579e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f383 8811 	msr	BASEPRI, r3
}
 80057a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3738      	adds	r7, #56	; 0x38
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10d      	bne.n	80057ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d14d      	bne.n	8005876 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 f808 	bl	80067f4 <xTaskPriorityDisinherit>
 80057e4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	605a      	str	r2, [r3, #4]
 80057ec:	e043      	b.n	8005876 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d119      	bne.n	8005828 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6898      	ldr	r0, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	461a      	mov	r2, r3
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	f001 ffc0 	bl	8007784 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	441a      	add	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	d32b      	bcc.n	8005876 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	609a      	str	r2, [r3, #8]
 8005826:	e026      	b.n	8005876 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68d8      	ldr	r0, [r3, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	461a      	mov	r2, r3
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	f001 ffa6 	bl	8007784 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	425b      	negs	r3, r3
 8005842:	441a      	add	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d207      	bcs.n	8005864 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	425b      	negs	r3, r3
 800585e:	441a      	add	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b02      	cmp	r3, #2
 8005868:	d105      	bne.n	8005876 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	3b01      	subs	r3, #1
 8005874:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800587e:	697b      	ldr	r3, [r7, #20]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	441a      	add	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d303      	bcc.n	80058bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68d9      	ldr	r1, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	461a      	mov	r2, r3
 80058c6:	6838      	ldr	r0, [r7, #0]
 80058c8:	f001 ff5c 	bl	8007784 <memcpy>
	}
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058dc:	f001 fc4e 	bl	800717c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058e8:	e011      	b.n	800590e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d012      	beq.n	8005918 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3324      	adds	r3, #36	; 0x24
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fd9c 	bl	8006434 <xTaskRemoveFromEventList>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005902:	f000 fe73 	bl	80065ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	3b01      	subs	r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800590e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005912:	2b00      	cmp	r3, #0
 8005914:	dce9      	bgt.n	80058ea <prvUnlockQueue+0x16>
 8005916:	e000      	b.n	800591a <prvUnlockQueue+0x46>
					break;
 8005918:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005922:	f001 fc5b 	bl	80071dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005926:	f001 fc29 	bl	800717c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005930:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005932:	e011      	b.n	8005958 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d012      	beq.n	8005962 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3310      	adds	r3, #16
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fd77 	bl	8006434 <xTaskRemoveFromEventList>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800594c:	f000 fe4e 	bl	80065ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	3b01      	subs	r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800595c:	2b00      	cmp	r3, #0
 800595e:	dce9      	bgt.n	8005934 <prvUnlockQueue+0x60>
 8005960:	e000      	b.n	8005964 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005962:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	22ff      	movs	r2, #255	; 0xff
 8005968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800596c:	f001 fc36 	bl	80071dc <vPortExitCritical>
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005980:	f001 fbfc 	bl	800717c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	e001      	b.n	8005996 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005996:	f001 fc21 	bl	80071dc <vPortExitCritical>

	return xReturn;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059ac:	f001 fbe6 	bl	800717c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d102      	bne.n	80059c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e001      	b.n	80059c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059c6:	f001 fc09 	bl	80071dc <vPortExitCritical>

	return xReturn;
 80059ca:	68fb      	ldr	r3, [r7, #12]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e014      	b.n	8005a0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059e4:	4a0e      	ldr	r2, [pc, #56]	; (8005a20 <vQueueAddToRegistry+0x4c>)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10b      	bne.n	8005a08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059f0:	490b      	ldr	r1, [pc, #44]	; (8005a20 <vQueueAddToRegistry+0x4c>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059fa:	4a09      	ldr	r2, [pc, #36]	; (8005a20 <vQueueAddToRegistry+0x4c>)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a06:	e006      	b.n	8005a16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b07      	cmp	r3, #7
 8005a12:	d9e7      	bls.n	80059e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr
 8005a20:	20000cb0 	.word	0x20000cb0

08005a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a34:	f001 fba2 	bl	800717c <vPortEnterCritical>
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d103      	bne.n	8005a4e <vQueueWaitForMessageRestricted+0x2a>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d103      	bne.n	8005a64 <vQueueWaitForMessageRestricted+0x40>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a64:	f001 fbba 	bl	80071dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3324      	adds	r3, #36	; 0x24
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fcaf 	bl	80063dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f7ff ff28 	bl	80058d4 <prvUnlockQueue>
	}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08e      	sub	sp, #56	; 0x38
 8005a90:	af04      	add	r7, sp, #16
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10a      	bne.n	8005ab6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	623b      	str	r3, [r7, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	e7fe      	b.n	8005ab4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xTaskCreateStatic+0x46>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	61fb      	str	r3, [r7, #28]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ad2:	235c      	movs	r3, #92	; 0x5c
 8005ad4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b5c      	cmp	r3, #92	; 0x5c
 8005ada:	d00a      	beq.n	8005af2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	61bb      	str	r3, [r7, #24]
}
 8005aee:	bf00      	nop
 8005af0:	e7fe      	b.n	8005af0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01e      	beq.n	8005b36 <xTaskCreateStatic+0xaa>
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01b      	beq.n	8005b36 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b10:	2300      	movs	r3, #0
 8005b12:	9303      	str	r3, [sp, #12]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	9302      	str	r3, [sp, #8]
 8005b18:	f107 0314 	add.w	r3, r7, #20
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f850 	bl	8005bce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b30:	f000 f8d4 	bl	8005cdc <prvAddNewTaskToReadyList>
 8005b34:	e001      	b.n	8005b3a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b3a:	697b      	ldr	r3, [r7, #20]
	}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3728      	adds	r7, #40	; 0x28
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08c      	sub	sp, #48	; 0x30
 8005b48:	af04      	add	r7, sp, #16
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fc0f 	bl	800737c <pvPortMalloc>
 8005b5e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00e      	beq.n	8005b84 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005b66:	205c      	movs	r0, #92	; 0x5c
 8005b68:	f001 fc08 	bl	800737c <pvPortMalloc>
 8005b6c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
 8005b7a:	e005      	b.n	8005b88 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b7c:	6978      	ldr	r0, [r7, #20]
 8005b7e:	f001 fcc1 	bl	8007504 <vPortFree>
 8005b82:	e001      	b.n	8005b88 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d017      	beq.n	8005bbe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9303      	str	r3, [sp, #12]
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	9302      	str	r3, [sp, #8]
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f80e 	bl	8005bce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bb2:	69f8      	ldr	r0, [r7, #28]
 8005bb4:	f000 f892 	bl	8005cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e002      	b.n	8005bc4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
	}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3720      	adds	r7, #32
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b088      	sub	sp, #32
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
 8005bda:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	461a      	mov	r2, r3
 8005be6:	21a5      	movs	r1, #165	; 0xa5
 8005be8:	f001 fda0 	bl	800772c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f023 0307 	bic.w	r3, r3, #7
 8005c04:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	617b      	str	r3, [r7, #20]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e012      	b.n	8005c52 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	7819      	ldrb	r1, [r3, #0]
 8005c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	3334      	adds	r3, #52	; 0x34
 8005c3c:	460a      	mov	r2, r1
 8005c3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	4413      	add	r3, r2
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d006      	beq.n	8005c5a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b0f      	cmp	r3, #15
 8005c56:	d9e9      	bls.n	8005c2c <prvInitialiseNewTask+0x5e>
 8005c58:	e000      	b.n	8005c5c <prvInitialiseNewTask+0x8e>
		{
			break;
 8005c5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	2b37      	cmp	r3, #55	; 0x37
 8005c68:	d901      	bls.n	8005c6e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c6a:	2337      	movs	r3, #55	; 0x37
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	3304      	adds	r3, #4
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff f8ce 	bl	8004e26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	3318      	adds	r3, #24
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff f8c9 	bl	8004e26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2200      	movs	r2, #0
 8005cae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cb8:	683a      	ldr	r2, [r7, #0]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	69b8      	ldr	r0, [r7, #24]
 8005cbe:	f001 f96d 	bl	8006f9c <pxPortInitialiseStack>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd4:	bf00      	nop
 8005cd6:	3720      	adds	r7, #32
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ce4:	f001 fa4a 	bl	800717c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ce8:	4b2d      	ldr	r3, [pc, #180]	; (8005da0 <prvAddNewTaskToReadyList+0xc4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <prvAddNewTaskToReadyList+0xc4>)
 8005cf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cf2:	4b2c      	ldr	r3, [pc, #176]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cfa:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d00:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <prvAddNewTaskToReadyList+0xc4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d110      	bne.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d08:	f000 fc94 	bl	8006634 <prvInitialiseTaskLists>
 8005d0c:	e00d      	b.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d0e:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <prvAddNewTaskToReadyList+0xcc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d802      	bhi.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d24:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d2a:	4b20      	ldr	r3, [pc, #128]	; (8005dac <prvAddNewTaskToReadyList+0xd0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <prvAddNewTaskToReadyList+0xd0>)
 8005d32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <prvAddNewTaskToReadyList+0xd0>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <prvAddNewTaskToReadyList+0xd4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <prvAddNewTaskToReadyList+0x74>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <prvAddNewTaskToReadyList+0xd4>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <prvAddNewTaskToReadyList+0xd8>)
 8005d5e:	441a      	add	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f7ff f869 	bl	8004e3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d6c:	f001 fa36 	bl	80071dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <prvAddNewTaskToReadyList+0xcc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00e      	beq.n	8005d96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d207      	bcs.n	8005d96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <prvAddNewTaskToReadyList+0xdc>)
 8005d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200011c4 	.word	0x200011c4
 8005da4:	20000cf0 	.word	0x20000cf0
 8005da8:	200011d0 	.word	0x200011d0
 8005dac:	200011e0 	.word	0x200011e0
 8005db0:	200011cc 	.word	0x200011cc
 8005db4:	20000cf4 	.word	0x20000cf4
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	617b      	str	r3, [r7, #20]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <vTaskDelayUntil+0x46>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	613b      	str	r3, [r7, #16]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005e02:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <vTaskDelayUntil+0xf0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <vTaskDelayUntil+0x64>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	60fb      	str	r3, [r7, #12]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005e20:	f000 f8e4 	bl	8005fec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005e24:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <vTaskDelayUntil+0xf4>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4413      	add	r3, r2
 8005e32:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a3a      	ldr	r2, [r7, #32]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d20b      	bcs.n	8005e56 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d211      	bcs.n	8005e6c <vTaskDelayUntil+0xb0>
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d90d      	bls.n	8005e6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	e00a      	b.n	8005e6c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d303      	bcc.n	8005e68 <vTaskDelayUntil+0xac>
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d901      	bls.n	8005e6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2100      	movs	r1, #0
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fd25 	bl	80068d0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005e86:	f000 f8bf 	bl	8006008 <xTaskResumeAll>
 8005e8a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d107      	bne.n	8005ea2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <vTaskDelayUntil+0xf8>)
 8005e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ea2:	bf00      	nop
 8005ea4:	3728      	adds	r7, #40	; 0x28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200011ec 	.word	0x200011ec
 8005eb0:	200011c8 	.word	0x200011c8
 8005eb4:	e000ed04 	.word	0xe000ed04

08005eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d017      	beq.n	8005efa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005eca:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <vTaskDelay+0x60>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <vTaskDelay+0x30>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	60bb      	str	r3, [r7, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ee8:	f000 f880 	bl	8005fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005eec:	2100      	movs	r1, #0
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fcee 	bl	80068d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ef4:	f000 f888 	bl	8006008 <xTaskResumeAll>
 8005ef8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <vTaskDelay+0x64>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	200011ec 	.word	0x200011ec
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08a      	sub	sp, #40	; 0x28
 8005f24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f2e:	463a      	mov	r2, r7
 8005f30:	1d39      	adds	r1, r7, #4
 8005f32:	f107 0308 	add.w	r3, r7, #8
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe ff24 	bl	8004d84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	9202      	str	r2, [sp, #8]
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	460a      	mov	r2, r1
 8005f4e:	4921      	ldr	r1, [pc, #132]	; (8005fd4 <vTaskStartScheduler+0xb4>)
 8005f50:	4821      	ldr	r0, [pc, #132]	; (8005fd8 <vTaskStartScheduler+0xb8>)
 8005f52:	f7ff fd9b 	bl	8005a8c <xTaskCreateStatic>
 8005f56:	4603      	mov	r3, r0
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <vTaskStartScheduler+0xbc>)
 8005f5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f5c:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <vTaskStartScheduler+0xbc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f64:	2301      	movs	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	e001      	b.n	8005f6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d102      	bne.n	8005f7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f74:	f000 fd00 	bl	8006978 <xTimerCreateTimerTask>
 8005f78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d116      	bne.n	8005fae <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	613b      	str	r3, [r7, #16]
}
 8005f92:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f94:	4b12      	ldr	r3, [pc, #72]	; (8005fe0 <vTaskStartScheduler+0xc0>)
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <vTaskStartScheduler+0xc4>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <vTaskStartScheduler+0xc8>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fa8:	f001 f876 	bl	8007098 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fac:	e00e      	b.n	8005fcc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d10a      	bne.n	8005fcc <vTaskStartScheduler+0xac>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60fb      	str	r3, [r7, #12]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <vTaskStartScheduler+0xaa>
}
 8005fcc:	bf00      	nop
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	08007814 	.word	0x08007814
 8005fd8:	08006605 	.word	0x08006605
 8005fdc:	200011e8 	.word	0x200011e8
 8005fe0:	200011e4 	.word	0x200011e4
 8005fe4:	200011d0 	.word	0x200011d0
 8005fe8:	200011c8 	.word	0x200011c8

08005fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005ff0:	4b04      	ldr	r3, [pc, #16]	; (8006004 <vTaskSuspendAll+0x18>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	4a03      	ldr	r2, [pc, #12]	; (8006004 <vTaskSuspendAll+0x18>)
 8005ff8:	6013      	str	r3, [r2, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	200011ec 	.word	0x200011ec

08006008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006012:	2300      	movs	r3, #0
 8006014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006016:	4b42      	ldr	r3, [pc, #264]	; (8006120 <xTaskResumeAll+0x118>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <xTaskResumeAll+0x2c>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	603b      	str	r3, [r7, #0]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006034:	f001 f8a2 	bl	800717c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006038:	4b39      	ldr	r3, [pc, #228]	; (8006120 <xTaskResumeAll+0x118>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3b01      	subs	r3, #1
 800603e:	4a38      	ldr	r2, [pc, #224]	; (8006120 <xTaskResumeAll+0x118>)
 8006040:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <xTaskResumeAll+0x118>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d162      	bne.n	8006110 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800604a:	4b36      	ldr	r3, [pc, #216]	; (8006124 <xTaskResumeAll+0x11c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d05e      	beq.n	8006110 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006052:	e02f      	b.n	80060b4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006054:	4b34      	ldr	r3, [pc, #208]	; (8006128 <xTaskResumeAll+0x120>)
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3318      	adds	r3, #24
 8006060:	4618      	mov	r0, r3
 8006062:	f7fe ff47 	bl	8004ef4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3304      	adds	r3, #4
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe ff42 	bl	8004ef4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006074:	4b2d      	ldr	r3, [pc, #180]	; (800612c <xTaskResumeAll+0x124>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d903      	bls.n	8006084 <xTaskResumeAll+0x7c>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4a2a      	ldr	r2, [pc, #168]	; (800612c <xTaskResumeAll+0x124>)
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4a27      	ldr	r2, [pc, #156]	; (8006130 <xTaskResumeAll+0x128>)
 8006092:	441a      	add	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fecf 	bl	8004e3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	4b23      	ldr	r3, [pc, #140]	; (8006134 <xTaskResumeAll+0x12c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80060ae:	4b22      	ldr	r3, [pc, #136]	; (8006138 <xTaskResumeAll+0x130>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060b4:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <xTaskResumeAll+0x120>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1cb      	bne.n	8006054 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060c2:	f000 fb55 	bl	8006770 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060c6:	4b1d      	ldr	r3, [pc, #116]	; (800613c <xTaskResumeAll+0x134>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d010      	beq.n	80060f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060d2:	f000 f845 	bl	8006160 <xTaskIncrementTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80060dc:	4b16      	ldr	r3, [pc, #88]	; (8006138 <xTaskResumeAll+0x130>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f1      	bne.n	80060d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <xTaskResumeAll+0x134>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060f4:	4b10      	ldr	r3, [pc, #64]	; (8006138 <xTaskResumeAll+0x130>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060fc:	2301      	movs	r3, #1
 80060fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <xTaskResumeAll+0x138>)
 8006102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006110:	f001 f864 	bl	80071dc <vPortExitCritical>

	return xAlreadyYielded;
 8006114:	68bb      	ldr	r3, [r7, #8]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200011ec 	.word	0x200011ec
 8006124:	200011c4 	.word	0x200011c4
 8006128:	20001184 	.word	0x20001184
 800612c:	200011cc 	.word	0x200011cc
 8006130:	20000cf4 	.word	0x20000cf4
 8006134:	20000cf0 	.word	0x20000cf0
 8006138:	200011d8 	.word	0x200011d8
 800613c:	200011d4 	.word	0x200011d4
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800614a:	4b04      	ldr	r3, [pc, #16]	; (800615c <xTaskGetTickCount+0x18>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006150:	687b      	ldr	r3, [r7, #4]
}
 8006152:	4618      	mov	r0, r3
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	200011c8 	.word	0x200011c8

08006160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800616a:	4b51      	ldr	r3, [pc, #324]	; (80062b0 <xTaskIncrementTick+0x150>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 808e 	bne.w	8006290 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006174:	4b4f      	ldr	r3, [pc, #316]	; (80062b4 <xTaskIncrementTick+0x154>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800617c:	4a4d      	ldr	r2, [pc, #308]	; (80062b4 <xTaskIncrementTick+0x154>)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d120      	bne.n	80061ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006188:	4b4b      	ldr	r3, [pc, #300]	; (80062b8 <xTaskIncrementTick+0x158>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	603b      	str	r3, [r7, #0]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <xTaskIncrementTick+0x46>
 80061a8:	4b43      	ldr	r3, [pc, #268]	; (80062b8 <xTaskIncrementTick+0x158>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	4b43      	ldr	r3, [pc, #268]	; (80062bc <xTaskIncrementTick+0x15c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a41      	ldr	r2, [pc, #260]	; (80062b8 <xTaskIncrementTick+0x158>)
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4a41      	ldr	r2, [pc, #260]	; (80062bc <xTaskIncrementTick+0x15c>)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	4b40      	ldr	r3, [pc, #256]	; (80062c0 <xTaskIncrementTick+0x160>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3301      	adds	r3, #1
 80061c2:	4a3f      	ldr	r2, [pc, #252]	; (80062c0 <xTaskIncrementTick+0x160>)
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	f000 fad3 	bl	8006770 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061ca:	4b3e      	ldr	r3, [pc, #248]	; (80062c4 <xTaskIncrementTick+0x164>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d34e      	bcc.n	8006272 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d4:	4b38      	ldr	r3, [pc, #224]	; (80062b8 <xTaskIncrementTick+0x158>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <xTaskIncrementTick+0x82>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xTaskIncrementTick+0x84>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e8:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <xTaskIncrementTick+0x164>)
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295
 80061ee:	601a      	str	r2, [r3, #0]
					break;
 80061f0:	e03f      	b.n	8006272 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061f2:	4b31      	ldr	r3, [pc, #196]	; (80062b8 <xTaskIncrementTick+0x158>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d203      	bcs.n	8006212 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800620a:	4a2e      	ldr	r2, [pc, #184]	; (80062c4 <xTaskIncrementTick+0x164>)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6013      	str	r3, [r2, #0]
						break;
 8006210:	e02f      	b.n	8006272 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	3304      	adds	r3, #4
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe fe6c 	bl	8004ef4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	3318      	adds	r3, #24
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fe63 	bl	8004ef4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006232:	4b25      	ldr	r3, [pc, #148]	; (80062c8 <xTaskIncrementTick+0x168>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d903      	bls.n	8006242 <xTaskIncrementTick+0xe2>
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <xTaskIncrementTick+0x168>)
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <xTaskIncrementTick+0x16c>)
 8006250:	441a      	add	r2, r3
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7fe fdf0 	bl	8004e3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <xTaskIncrementTick+0x170>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	429a      	cmp	r2, r3
 800626a:	d3b3      	bcc.n	80061d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800626c:	2301      	movs	r3, #1
 800626e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006270:	e7b0      	b.n	80061d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006272:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <xTaskIncrementTick+0x170>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006278:	4914      	ldr	r1, [pc, #80]	; (80062cc <xTaskIncrementTick+0x16c>)
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d907      	bls.n	800629a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800628a:	2301      	movs	r3, #1
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e004      	b.n	800629a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <xTaskIncrementTick+0x174>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3301      	adds	r3, #1
 8006296:	4a0f      	ldr	r2, [pc, #60]	; (80062d4 <xTaskIncrementTick+0x174>)
 8006298:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800629a:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <xTaskIncrementTick+0x178>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80062a2:	2301      	movs	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062a6:	697b      	ldr	r3, [r7, #20]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	200011ec 	.word	0x200011ec
 80062b4:	200011c8 	.word	0x200011c8
 80062b8:	2000117c 	.word	0x2000117c
 80062bc:	20001180 	.word	0x20001180
 80062c0:	200011dc 	.word	0x200011dc
 80062c4:	200011e4 	.word	0x200011e4
 80062c8:	200011cc 	.word	0x200011cc
 80062cc:	20000cf4 	.word	0x20000cf4
 80062d0:	20000cf0 	.word	0x20000cf0
 80062d4:	200011d4 	.word	0x200011d4
 80062d8:	200011d8 	.word	0x200011d8

080062dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062e2:	4b27      	ldr	r3, [pc, #156]	; (8006380 <vTaskSwitchContext+0xa4>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062ea:	4b26      	ldr	r3, [pc, #152]	; (8006384 <vTaskSwitchContext+0xa8>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062f0:	e041      	b.n	8006376 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80062f2:	4b24      	ldr	r3, [pc, #144]	; (8006384 <vTaskSwitchContext+0xa8>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80062f8:	4b23      	ldr	r3, [pc, #140]	; (8006388 <vTaskSwitchContext+0xac>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e010      	b.n	8006322 <vTaskSwitchContext+0x46>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10a      	bne.n	800631c <vTaskSwitchContext+0x40>
	__asm volatile
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	607b      	str	r3, [r7, #4]
}
 8006318:	bf00      	nop
 800631a:	e7fe      	b.n	800631a <vTaskSwitchContext+0x3e>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3b01      	subs	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	491a      	ldr	r1, [pc, #104]	; (800638c <vTaskSwitchContext+0xb0>)
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0e4      	beq.n	8006300 <vTaskSwitchContext+0x24>
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4a12      	ldr	r2, [pc, #72]	; (800638c <vTaskSwitchContext+0xb0>)
 8006342:	4413      	add	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	605a      	str	r2, [r3, #4]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	3308      	adds	r3, #8
 8006358:	429a      	cmp	r2, r3
 800635a:	d104      	bne.n	8006366 <vTaskSwitchContext+0x8a>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4a08      	ldr	r2, [pc, #32]	; (8006390 <vTaskSwitchContext+0xb4>)
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	4a05      	ldr	r2, [pc, #20]	; (8006388 <vTaskSwitchContext+0xac>)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6013      	str	r3, [r2, #0]
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr
 8006380:	200011ec 	.word	0x200011ec
 8006384:	200011d8 	.word	0x200011d8
 8006388:	200011cc 	.word	0x200011cc
 800638c:	20000cf4 	.word	0x20000cf4
 8006390:	20000cf0 	.word	0x20000cf0

08006394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10a      	bne.n	80063ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60fb      	str	r3, [r7, #12]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <vTaskPlaceOnEventList+0x44>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3318      	adds	r3, #24
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fe fd5e 	bl	8004e84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063c8:	2101      	movs	r1, #1
 80063ca:	6838      	ldr	r0, [r7, #0]
 80063cc:	f000 fa80 	bl	80068d0 <prvAddCurrentTaskToDelayedList>
}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000cf0 	.word	0x20000cf0

080063dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	617b      	str	r3, [r7, #20]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006404:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <vTaskPlaceOnEventListRestricted+0x54>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3318      	adds	r3, #24
 800640a:	4619      	mov	r1, r3
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7fe fd16 	bl	8004e3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006418:	f04f 33ff 	mov.w	r3, #4294967295
 800641c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	68b8      	ldr	r0, [r7, #8]
 8006422:	f000 fa55 	bl	80068d0 <prvAddCurrentTaskToDelayedList>
	}
 8006426:	bf00      	nop
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000cf0 	.word	0x20000cf0

08006434 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60fb      	str	r3, [r7, #12]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe fd45 	bl	8004ef4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646a:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <xTaskRemoveFromEventList+0xb0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11d      	bne.n	80064ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	3304      	adds	r3, #4
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fd3c 	bl	8004ef4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006480:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <xTaskRemoveFromEventList+0xb4>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d903      	bls.n	8006490 <xTaskRemoveFromEventList+0x5c>
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <xTaskRemoveFromEventList+0xb4>)
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	4a13      	ldr	r2, [pc, #76]	; (80064ec <xTaskRemoveFromEventList+0xb8>)
 800649e:	441a      	add	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4619      	mov	r1, r3
 80064a6:	4610      	mov	r0, r2
 80064a8:	f7fe fcc9 	bl	8004e3e <vListInsertEnd>
 80064ac:	e005      	b.n	80064ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	3318      	adds	r3, #24
 80064b2:	4619      	mov	r1, r3
 80064b4:	480e      	ldr	r0, [pc, #56]	; (80064f0 <xTaskRemoveFromEventList+0xbc>)
 80064b6:	f7fe fcc2 	bl	8004e3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <xTaskRemoveFromEventList+0xc0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d905      	bls.n	80064d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064c8:	2301      	movs	r3, #1
 80064ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064cc:	4b0a      	ldr	r3, [pc, #40]	; (80064f8 <xTaskRemoveFromEventList+0xc4>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e001      	b.n	80064d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80064d8:	697b      	ldr	r3, [r7, #20]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200011ec 	.word	0x200011ec
 80064e8:	200011cc 	.word	0x200011cc
 80064ec:	20000cf4 	.word	0x20000cf4
 80064f0:	20001184 	.word	0x20001184
 80064f4:	20000cf0 	.word	0x20000cf0
 80064f8:	200011d8 	.word	0x200011d8

080064fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006504:	4b06      	ldr	r3, [pc, #24]	; (8006520 <vTaskInternalSetTimeOutState+0x24>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <vTaskInternalSetTimeOutState+0x28>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	605a      	str	r2, [r3, #4]
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	200011dc 	.word	0x200011dc
 8006524:	200011c8 	.word	0x200011c8

08006528 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	613b      	str	r3, [r7, #16]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	60fb      	str	r3, [r7, #12]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800656a:	f000 fe07 	bl	800717c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800656e:	4b1d      	ldr	r3, [pc, #116]	; (80065e4 <xTaskCheckForTimeOut+0xbc>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006586:	d102      	bne.n	800658e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006588:	2300      	movs	r3, #0
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e023      	b.n	80065d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xTaskCheckForTimeOut+0xc0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d007      	beq.n	80065aa <xTaskCheckForTimeOut+0x82>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d302      	bcc.n	80065aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	e015      	b.n	80065d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d20b      	bcs.n	80065cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff9b 	bl	80064fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
 80065ca:	e004      	b.n	80065d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065d2:	2301      	movs	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065d6:	f000 fe01 	bl	80071dc <vPortExitCritical>

	return xReturn;
 80065da:	69fb      	ldr	r3, [r7, #28]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200011c8 	.word	0x200011c8
 80065e8:	200011dc 	.word	0x200011dc

080065ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065f0:	4b03      	ldr	r3, [pc, #12]	; (8006600 <vTaskMissedYield+0x14>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
}
 80065f6:	bf00      	nop
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	200011d8 	.word	0x200011d8

08006604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800660c:	f000 f852 	bl	80066b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <prvIdleTask+0x28>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d9f9      	bls.n	800660c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006618:	4b05      	ldr	r3, [pc, #20]	; (8006630 <prvIdleTask+0x2c>)
 800661a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800661e:	601a      	str	r2, [r3, #0]
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006628:	e7f0      	b.n	800660c <prvIdleTask+0x8>
 800662a:	bf00      	nop
 800662c:	20000cf4 	.word	0x20000cf4
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	e00c      	b.n	800665a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4a12      	ldr	r2, [pc, #72]	; (8006694 <prvInitialiseTaskLists+0x60>)
 800664c:	4413      	add	r3, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f7fe fbca 	bl	8004de8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3301      	adds	r3, #1
 8006658:	607b      	str	r3, [r7, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b37      	cmp	r3, #55	; 0x37
 800665e:	d9ef      	bls.n	8006640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006660:	480d      	ldr	r0, [pc, #52]	; (8006698 <prvInitialiseTaskLists+0x64>)
 8006662:	f7fe fbc1 	bl	8004de8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006666:	480d      	ldr	r0, [pc, #52]	; (800669c <prvInitialiseTaskLists+0x68>)
 8006668:	f7fe fbbe 	bl	8004de8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800666c:	480c      	ldr	r0, [pc, #48]	; (80066a0 <prvInitialiseTaskLists+0x6c>)
 800666e:	f7fe fbbb 	bl	8004de8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006672:	480c      	ldr	r0, [pc, #48]	; (80066a4 <prvInitialiseTaskLists+0x70>)
 8006674:	f7fe fbb8 	bl	8004de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006678:	480b      	ldr	r0, [pc, #44]	; (80066a8 <prvInitialiseTaskLists+0x74>)
 800667a:	f7fe fbb5 	bl	8004de8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800667e:	4b0b      	ldr	r3, [pc, #44]	; (80066ac <prvInitialiseTaskLists+0x78>)
 8006680:	4a05      	ldr	r2, [pc, #20]	; (8006698 <prvInitialiseTaskLists+0x64>)
 8006682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <prvInitialiseTaskLists+0x7c>)
 8006686:	4a05      	ldr	r2, [pc, #20]	; (800669c <prvInitialiseTaskLists+0x68>)
 8006688:	601a      	str	r2, [r3, #0]
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000cf4 	.word	0x20000cf4
 8006698:	20001154 	.word	0x20001154
 800669c:	20001168 	.word	0x20001168
 80066a0:	20001184 	.word	0x20001184
 80066a4:	20001198 	.word	0x20001198
 80066a8:	200011b0 	.word	0x200011b0
 80066ac:	2000117c 	.word	0x2000117c
 80066b0:	20001180 	.word	0x20001180

080066b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ba:	e019      	b.n	80066f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066bc:	f000 fd5e 	bl	800717c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066c0:	4b10      	ldr	r3, [pc, #64]	; (8006704 <prvCheckTasksWaitingTermination+0x50>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe fc11 	bl	8004ef4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066d2:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <prvCheckTasksWaitingTermination+0x54>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	4a0b      	ldr	r2, [pc, #44]	; (8006708 <prvCheckTasksWaitingTermination+0x54>)
 80066da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066dc:	4b0b      	ldr	r3, [pc, #44]	; (800670c <prvCheckTasksWaitingTermination+0x58>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	4a0a      	ldr	r2, [pc, #40]	; (800670c <prvCheckTasksWaitingTermination+0x58>)
 80066e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066e6:	f000 fd79 	bl	80071dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f810 	bl	8006710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <prvCheckTasksWaitingTermination+0x58>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e1      	bne.n	80066bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20001198 	.word	0x20001198
 8006708:	200011c4 	.word	0x200011c4
 800670c:	200011ac 	.word	0x200011ac

08006710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800671e:	2b00      	cmp	r3, #0
 8006720:	d108      	bne.n	8006734 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	4618      	mov	r0, r3
 8006728:	f000 feec 	bl	8007504 <vPortFree>
				vPortFree( pxTCB );
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fee9 	bl	8007504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006732:	e018      	b.n	8006766 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800673a:	2b01      	cmp	r3, #1
 800673c:	d103      	bne.n	8006746 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fee0 	bl	8007504 <vPortFree>
	}
 8006744:	e00f      	b.n	8006766 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800674c:	2b02      	cmp	r3, #2
 800674e:	d00a      	beq.n	8006766 <prvDeleteTCB+0x56>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	60fb      	str	r3, [r7, #12]
}
 8006762:	bf00      	nop
 8006764:	e7fe      	b.n	8006764 <prvDeleteTCB+0x54>
	}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006776:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <prvResetNextTaskUnblockTime+0x40>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <prvResetNextTaskUnblockTime+0x14>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <prvResetNextTaskUnblockTime+0x16>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800678a:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <prvResetNextTaskUnblockTime+0x44>)
 800678c:	f04f 32ff 	mov.w	r2, #4294967295
 8006790:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006792:	e008      	b.n	80067a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <prvResetNextTaskUnblockTime+0x40>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	4a04      	ldr	r2, [pc, #16]	; (80067b4 <prvResetNextTaskUnblockTime+0x44>)
 80067a4:	6013      	str	r3, [r2, #0]
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bc80      	pop	{r7}
 80067ae:	4770      	bx	lr
 80067b0:	2000117c 	.word	0x2000117c
 80067b4:	200011e4 	.word	0x200011e4

080067b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067be:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <xTaskGetSchedulerState+0x34>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d102      	bne.n	80067cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067c6:	2301      	movs	r3, #1
 80067c8:	607b      	str	r3, [r7, #4]
 80067ca:	e008      	b.n	80067de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067cc:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <xTaskGetSchedulerState+0x38>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067d4:	2302      	movs	r3, #2
 80067d6:	607b      	str	r3, [r7, #4]
 80067d8:	e001      	b.n	80067de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067da:	2300      	movs	r3, #0
 80067dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067de:	687b      	ldr	r3, [r7, #4]
	}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	200011d0 	.word	0x200011d0
 80067f0:	200011ec 	.word	0x200011ec

080067f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d056      	beq.n	80068b8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800680a:	4b2e      	ldr	r3, [pc, #184]	; (80068c4 <xTaskPriorityDisinherit+0xd0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	429a      	cmp	r2, r3
 8006812:	d00a      	beq.n	800682a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60fb      	str	r3, [r7, #12]
}
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60bb      	str	r3, [r7, #8]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	1e5a      	subs	r2, r3, #1
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685a:	429a      	cmp	r2, r3
 800685c:	d02c      	beq.n	80068b8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	2b00      	cmp	r3, #0
 8006864:	d128      	bne.n	80068b8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	3304      	adds	r3, #4
 800686a:	4618      	mov	r0, r3
 800686c:	f7fe fb42 	bl	8004ef4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <xTaskPriorityDisinherit+0xd4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d903      	bls.n	8006898 <xTaskPriorityDisinherit+0xa4>
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	4a0c      	ldr	r2, [pc, #48]	; (80068c8 <xTaskPriorityDisinherit+0xd4>)
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	4613      	mov	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4a09      	ldr	r2, [pc, #36]	; (80068cc <xTaskPriorityDisinherit+0xd8>)
 80068a6:	441a      	add	r2, r3
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe fac5 	bl	8004e3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068b8:	697b      	ldr	r3, [r7, #20]
	}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000cf0 	.word	0x20000cf0
 80068c8:	200011cc 	.word	0x200011cc
 80068cc:	20000cf4 	.word	0x20000cf4

080068d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068da:	4b21      	ldr	r3, [pc, #132]	; (8006960 <prvAddCurrentTaskToDelayedList+0x90>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068e0:	4b20      	ldr	r3, [pc, #128]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fb04 	bl	8004ef4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d10a      	bne.n	800690a <prvAddCurrentTaskToDelayedList+0x3a>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4819      	ldr	r0, [pc, #100]	; (8006968 <prvAddCurrentTaskToDelayedList+0x98>)
 8006904:	f7fe fa9b 	bl	8004e3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006908:	e026      	b.n	8006958 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4413      	add	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	d209      	bcs.n	8006936 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3304      	adds	r3, #4
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7fe faa8 	bl	8004e84 <vListInsert>
}
 8006934:	e010      	b.n	8006958 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <prvAddCurrentTaskToDelayedList+0x94>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3304      	adds	r3, #4
 8006940:	4619      	mov	r1, r3
 8006942:	4610      	mov	r0, r2
 8006944:	f7fe fa9e 	bl	8004e84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <prvAddCurrentTaskToDelayedList+0xa4>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d202      	bcs.n	8006958 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006952:	4a08      	ldr	r2, [pc, #32]	; (8006974 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6013      	str	r3, [r2, #0]
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	200011c8 	.word	0x200011c8
 8006964:	20000cf0 	.word	0x20000cf0
 8006968:	200011b0 	.word	0x200011b0
 800696c:	20001180 	.word	0x20001180
 8006970:	2000117c 	.word	0x2000117c
 8006974:	200011e4 	.word	0x200011e4

08006978 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006982:	f000 facb 	bl	8006f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006986:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <xTimerCreateTimerTask+0x80>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d021      	beq.n	80069d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006996:	1d3a      	adds	r2, r7, #4
 8006998:	f107 0108 	add.w	r1, r7, #8
 800699c:	f107 030c 	add.w	r3, r7, #12
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fa07 	bl	8004db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	9202      	str	r2, [sp, #8]
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	2302      	movs	r3, #2
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	460a      	mov	r2, r1
 80069b8:	4910      	ldr	r1, [pc, #64]	; (80069fc <xTimerCreateTimerTask+0x84>)
 80069ba:	4811      	ldr	r0, [pc, #68]	; (8006a00 <xTimerCreateTimerTask+0x88>)
 80069bc:	f7ff f866 	bl	8005a8c <xTaskCreateStatic>
 80069c0:	4603      	mov	r3, r0
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <xTimerCreateTimerTask+0x8c>)
 80069c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069c6:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <xTimerCreateTimerTask+0x8c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069ce:	2301      	movs	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	613b      	str	r3, [r7, #16]
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20001220 	.word	0x20001220
 80069fc:	0800781c 	.word	0x0800781c
 8006a00:	08006b25 	.word	0x08006b25
 8006a04:	20001224 	.word	0x20001224

08006a08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	623b      	str	r3, [r7, #32]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02a      	beq.n	8006a94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b05      	cmp	r3, #5
 8006a4e:	dc18      	bgt.n	8006a82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a50:	f7ff feb2 	bl	80067b8 <xTaskGetSchedulerState>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d109      	bne.n	8006a6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f107 0110 	add.w	r1, r7, #16
 8006a62:	2300      	movs	r3, #0
 8006a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a66:	f7fe fbaf 	bl	80051c8 <xQueueGenericSend>
 8006a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8006a6c:	e012      	b.n	8006a94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	f107 0110 	add.w	r1, r7, #16
 8006a76:	2300      	movs	r3, #0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f7fe fba5 	bl	80051c8 <xQueueGenericSend>
 8006a7e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a80:	e008      	b.n	8006a94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a82:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <xTimerGenericCommand+0x98>)
 8006a84:	6818      	ldr	r0, [r3, #0]
 8006a86:	f107 0110 	add.w	r1, r7, #16
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	f7fe fc99 	bl	80053c4 <xQueueGenericSendFromISR>
 8006a92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3728      	adds	r7, #40	; 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20001220 	.word	0x20001220

08006aa4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <prvProcessExpiredTimer+0x7c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fe fa19 	bl	8004ef4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d122      	bne.n	8006b10 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	18d1      	adds	r1, r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f000 f8c8 	bl	8006c6c <prvInsertTimerInActiveList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d016      	beq.n	8006b10 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	2100      	movs	r1, #0
 8006aec:	6978      	ldr	r0, [r7, #20]
 8006aee:	f7ff ff8b 	bl	8006a08 <xTimerGenericCommand>
 8006af2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	60fb      	str	r3, [r7, #12]
}
 8006b0c:	bf00      	nop
 8006b0e:	e7fe      	b.n	8006b0e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	6978      	ldr	r0, [r7, #20]
 8006b16:	4798      	blx	r3
}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	20001218 	.word	0x20001218

08006b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f857 	bl	8006be4 <prvGetNextExpireTime>
 8006b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f803 	bl	8006b48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b42:	f000 f8d5 	bl	8006cf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b46:	e7f1      	b.n	8006b2c <prvTimerTask+0x8>

08006b48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b52:	f7ff fa4b 	bl	8005fec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b56:	f107 0308 	add.w	r3, r7, #8
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 f866 	bl	8006c2c <prvSampleTimeNow>
 8006b60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d130      	bne.n	8006bca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10a      	bne.n	8006b84 <prvProcessTimerOrBlockTask+0x3c>
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d806      	bhi.n	8006b84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b76:	f7ff fa47 	bl	8006008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ff91 	bl	8006aa4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b82:	e024      	b.n	8006bce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d008      	beq.n	8006b9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b8a:	4b13      	ldr	r3, [pc, #76]	; (8006bd8 <prvProcessTimerOrBlockTask+0x90>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <prvProcessTimerOrBlockTask+0x94>)
 8006b9e:	6818      	ldr	r0, [r3, #0]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f7fe ff3b 	bl	8005a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bae:	f7ff fa2b 	bl	8006008 <xTaskResumeAll>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <prvProcessTimerOrBlockTask+0x98>)
 8006bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	f3bf 8f6f 	isb	sy
}
 8006bc8:	e001      	b.n	8006bce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006bca:	f7ff fa1d 	bl	8006008 <xTaskResumeAll>
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	2000121c 	.word	0x2000121c
 8006bdc:	20001220 	.word	0x20001220
 8006be0:	e000ed04 	.word	0xe000ed04

08006be4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <prvGetNextExpireTime+0x44>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d105      	bne.n	8006c16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <prvGetNextExpireTime+0x44>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	e001      	b.n	8006c1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20001218 	.word	0x20001218

08006c2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c34:	f7ff fa86 	bl	8006144 <xTaskGetTickCount>
 8006c38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c3a:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <prvSampleTimeNow+0x3c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d205      	bcs.n	8006c50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c44:	f000 f908 	bl	8006e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e002      	b.n	8006c56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c56:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <prvSampleTimeNow+0x3c>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20001228 	.word	0x20001228

08006c6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
 8006c78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	68ba      	ldr	r2, [r7, #8]
 8006c82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d812      	bhi.n	8006cb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d302      	bcc.n	8006ca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e01b      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006ca6:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <prvInsertTimerInActiveList+0x7c>)
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3304      	adds	r3, #4
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f7fe f8e7 	bl	8004e84 <vListInsert>
 8006cb6:	e012      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d206      	bcs.n	8006cce <prvInsertTimerInActiveList+0x62>
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d302      	bcc.n	8006cce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e007      	b.n	8006cde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <prvInsertTimerInActiveList+0x80>)
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f7fe f8d3 	bl	8004e84 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cde:	697b      	ldr	r3, [r7, #20]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	2000121c 	.word	0x2000121c
 8006cec:	20001218 	.word	0x20001218

08006cf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08e      	sub	sp, #56	; 0x38
 8006cf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cf6:	e09d      	b.n	8006e34 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da18      	bge.n	8006d30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	3304      	adds	r3, #4
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	61fb      	str	r3, [r7, #28]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d26:	6850      	ldr	r0, [r2, #4]
 8006d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d2a:	6892      	ldr	r2, [r2, #8]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	db7e      	blt.n	8006e34 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	3304      	adds	r3, #4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe f8d4 	bl	8004ef4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d4c:	463b      	mov	r3, r7
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff ff6c 	bl	8006c2c <prvSampleTimeNow>
 8006d54:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b09      	cmp	r3, #9
 8006d5a:	d86a      	bhi.n	8006e32 <prvProcessReceivedCommands+0x142>
 8006d5c:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <prvProcessReceivedCommands+0x74>)
 8006d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d62:	bf00      	nop
 8006d64:	08006d8d 	.word	0x08006d8d
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d8d 	.word	0x08006d8d
 8006d70:	08006e35 	.word	0x08006e35
 8006d74:	08006de9 	.word	0x08006de9
 8006d78:	08006e21 	.word	0x08006e21
 8006d7c:	08006d8d 	.word	0x08006d8d
 8006d80:	08006d8d 	.word	0x08006d8d
 8006d84:	08006e35 	.word	0x08006e35
 8006d88:	08006de9 	.word	0x08006de9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	18d1      	adds	r1, r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9a:	f7ff ff67 	bl	8006c6c <prvInsertTimerInActiveList>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d047      	beq.n	8006e34 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006daa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	69db      	ldr	r3, [r3, #28]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d13f      	bne.n	8006e34 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	441a      	add	r2, r3
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc6:	f7ff fe1f 	bl	8006a08 <xTimerGenericCommand>
 8006dca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d130      	bne.n	8006e34 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	61bb      	str	r3, [r7, #24]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	617b      	str	r3, [r7, #20]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	18d1      	adds	r1, r2, r3
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1a:	f7ff ff27 	bl	8006c6c <prvInsertTimerInActiveList>
					break;
 8006e1e:	e009      	b.n	8006e34 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e2c:	f000 fb6a 	bl	8007504 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e30:	e000      	b.n	8006e34 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006e32:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e34:	4b07      	ldr	r3, [pc, #28]	; (8006e54 <prvProcessReceivedCommands+0x164>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	1d39      	adds	r1, r7, #4
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe fb59 	bl	80054f4 <xQueueReceive>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f47f af57 	bne.w	8006cf8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	3730      	adds	r7, #48	; 0x30
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20001220 	.word	0x20001220

08006e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e5e:	e045      	b.n	8006eec <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e60:	4b2c      	ldr	r3, [pc, #176]	; (8006f14 <prvSwitchTimerLists+0xbc>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <prvSwitchTimerLists+0xbc>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe f83b 	bl	8004ef4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d12e      	bne.n	8006eec <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4413      	add	r3, r2
 8006e96:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d90e      	bls.n	8006ebe <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006eac:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <prvSwitchTimerLists+0xbc>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7fd ffe4 	bl	8004e84 <vListInsert>
 8006ebc:	e016      	b.n	8006eec <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f7ff fd9d 	bl	8006a08 <xTimerGenericCommand>
 8006ece:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10a      	bne.n	8006eec <prvSwitchTimerLists+0x94>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	603b      	str	r3, [r7, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	e7fe      	b.n	8006eea <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eec:	4b09      	ldr	r3, [pc, #36]	; (8006f14 <prvSwitchTimerLists+0xbc>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1b4      	bne.n	8006e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <prvSwitchTimerLists+0xbc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a04      	ldr	r2, [pc, #16]	; (8006f14 <prvSwitchTimerLists+0xbc>)
 8006f02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f04:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <prvSwitchTimerLists+0xc0>)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	6013      	str	r3, [r2, #0]
}
 8006f0a:	bf00      	nop
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20001218 	.word	0x20001218
 8006f18:	2000121c 	.word	0x2000121c

08006f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f22:	f000 f92b 	bl	800717c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f26:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d120      	bne.n	8006f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f2e:	4814      	ldr	r0, [pc, #80]	; (8006f80 <prvCheckForValidListAndQueue+0x64>)
 8006f30:	f7fd ff5a 	bl	8004de8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f34:	4813      	ldr	r0, [pc, #76]	; (8006f84 <prvCheckForValidListAndQueue+0x68>)
 8006f36:	f7fd ff57 	bl	8004de8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <prvCheckForValidListAndQueue+0x6c>)
 8006f3c:	4a10      	ldr	r2, [pc, #64]	; (8006f80 <prvCheckForValidListAndQueue+0x64>)
 8006f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <prvCheckForValidListAndQueue+0x70>)
 8006f42:	4a10      	ldr	r2, [pc, #64]	; (8006f84 <prvCheckForValidListAndQueue+0x68>)
 8006f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f46:	2300      	movs	r3, #0
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <prvCheckForValidListAndQueue+0x74>)
 8006f4c:	4a11      	ldr	r2, [pc, #68]	; (8006f94 <prvCheckForValidListAndQueue+0x78>)
 8006f4e:	2110      	movs	r1, #16
 8006f50:	200a      	movs	r0, #10
 8006f52:	f7fe f861 	bl	8005018 <xQueueGenericCreateStatic>
 8006f56:	4603      	mov	r3, r0
 8006f58:	4a08      	ldr	r2, [pc, #32]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f5c:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f64:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <prvCheckForValidListAndQueue+0x60>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	490b      	ldr	r1, [pc, #44]	; (8006f98 <prvCheckForValidListAndQueue+0x7c>)
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fd32 	bl	80059d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f70:	f000 f934 	bl	80071dc <vPortExitCritical>
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20001220 	.word	0x20001220
 8006f80:	200011f0 	.word	0x200011f0
 8006f84:	20001204 	.word	0x20001204
 8006f88:	20001218 	.word	0x20001218
 8006f8c:	2000121c 	.word	0x2000121c
 8006f90:	200012cc 	.word	0x200012cc
 8006f94:	2000122c 	.word	0x2000122c
 8006f98:	08007824 	.word	0x08007824

08006f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3b04      	subs	r3, #4
 8006fac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f023 0201 	bic.w	r2, r3, #1
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b04      	subs	r3, #4
 8006fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <pxPortInitialiseStack+0x54>)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3b14      	subs	r3, #20
 8006fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3b20      	subs	r3, #32
 8006fe2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr
 8006ff0:	08006ff5 	.word	0x08006ff5

08006ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <prvTaskExitError+0x54>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007006:	d00a      	beq.n	800701e <prvTaskExitError+0x2a>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	60fb      	str	r3, [r7, #12]
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <prvTaskExitError+0x28>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60bb      	str	r3, [r7, #8]
}
 8007030:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007032:	bf00      	nop
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0fc      	beq.n	8007034 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	bc80      	pop	{r7}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	20000014 	.word	0x20000014
 800704c:	00000000 	.word	0x00000000

08007050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007050:	4b07      	ldr	r3, [pc, #28]	; (8007070 <pxCurrentTCBConst2>)
 8007052:	6819      	ldr	r1, [r3, #0]
 8007054:	6808      	ldr	r0, [r1, #0]
 8007056:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800705a:	f380 8809 	msr	PSP, r0
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f04f 0000 	mov.w	r0, #0
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	f04e 0e0d 	orr.w	lr, lr, #13
 800706e:	4770      	bx	lr

08007070 <pxCurrentTCBConst2>:
 8007070:	20000cf0 	.word	0x20000cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007074:	bf00      	nop
 8007076:	bf00      	nop

08007078 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007078:	4806      	ldr	r0, [pc, #24]	; (8007094 <prvPortStartFirstTask+0x1c>)
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	6800      	ldr	r0, [r0, #0]
 800707e:	f380 8808 	msr	MSP, r0
 8007082:	b662      	cpsie	i
 8007084:	b661      	cpsie	f
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	df00      	svc	0
 8007090:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007092:	bf00      	nop
 8007094:	e000ed08 	.word	0xe000ed08

08007098 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800709e:	4b32      	ldr	r3, [pc, #200]	; (8007168 <xPortStartScheduler+0xd0>)
 80070a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <xPortStartScheduler+0xd4>)
 80070c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070c6:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <xPortStartScheduler+0xd8>)
 80070c8:	2207      	movs	r2, #7
 80070ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070cc:	e009      	b.n	80070e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80070ce:	4b28      	ldr	r3, [pc, #160]	; (8007170 <xPortStartScheduler+0xd8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	4a26      	ldr	r2, [pc, #152]	; (8007170 <xPortStartScheduler+0xd8>)
 80070d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070d8:	78fb      	ldrb	r3, [r7, #3]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070e2:	78fb      	ldrb	r3, [r7, #3]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ea:	2b80      	cmp	r3, #128	; 0x80
 80070ec:	d0ef      	beq.n	80070ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070ee:	4b20      	ldr	r3, [pc, #128]	; (8007170 <xPortStartScheduler+0xd8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f1c3 0307 	rsb	r3, r3, #7
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d00a      	beq.n	8007110 <xPortStartScheduler+0x78>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	60bb      	str	r3, [r7, #8]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007110:	4b17      	ldr	r3, [pc, #92]	; (8007170 <xPortStartScheduler+0xd8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	4a16      	ldr	r2, [pc, #88]	; (8007170 <xPortStartScheduler+0xd8>)
 8007118:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800711a:	4b15      	ldr	r3, [pc, #84]	; (8007170 <xPortStartScheduler+0xd8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007122:	4a13      	ldr	r2, [pc, #76]	; (8007170 <xPortStartScheduler+0xd8>)
 8007124:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800712e:	4b11      	ldr	r3, [pc, #68]	; (8007174 <xPortStartScheduler+0xdc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a10      	ldr	r2, [pc, #64]	; (8007174 <xPortStartScheduler+0xdc>)
 8007134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800713a:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <xPortStartScheduler+0xdc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a0d      	ldr	r2, [pc, #52]	; (8007174 <xPortStartScheduler+0xdc>)
 8007140:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007144:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007146:	f000 f8b9 	bl	80072bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800714a:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <xPortStartScheduler+0xe0>)
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007150:	f7ff ff92 	bl	8007078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007154:	f7ff f8c2 	bl	80062dc <vTaskSwitchContext>
	prvTaskExitError();
 8007158:	f7ff ff4c 	bl	8006ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	e000e400 	.word	0xe000e400
 800716c:	2000131c 	.word	0x2000131c
 8007170:	20001320 	.word	0x20001320
 8007174:	e000ed20 	.word	0xe000ed20
 8007178:	20000014 	.word	0x20000014

0800717c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	607b      	str	r3, [r7, #4]
}
 8007194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007196:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <vPortEnterCritical+0x58>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3301      	adds	r3, #1
 800719c:	4a0d      	ldr	r2, [pc, #52]	; (80071d4 <vPortEnterCritical+0x58>)
 800719e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071a0:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <vPortEnterCritical+0x58>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d10f      	bne.n	80071c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071a8:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <vPortEnterCritical+0x5c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	603b      	str	r3, [r7, #0]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vPortEnterCritical+0x4a>
	}
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20000014 	.word	0x20000014
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <vPortExitCritical+0x4c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <vPortExitCritical+0x24>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	607b      	str	r3, [r7, #4]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007200:	4b09      	ldr	r3, [pc, #36]	; (8007228 <vPortExitCritical+0x4c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3b01      	subs	r3, #1
 8007206:	4a08      	ldr	r2, [pc, #32]	; (8007228 <vPortExitCritical+0x4c>)
 8007208:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800720a:	4b07      	ldr	r3, [pc, #28]	; (8007228 <vPortExitCritical+0x4c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d105      	bne.n	800721e <vPortExitCritical+0x42>
 8007212:	2300      	movs	r3, #0
 8007214:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	f383 8811 	msr	BASEPRI, r3
}
 800721c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr
 8007228:	20000014 	.word	0x20000014
 800722c:	00000000 	.word	0x00000000

08007230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007230:	f3ef 8009 	mrs	r0, PSP
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <pxCurrentTCBConst>)
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007240:	6010      	str	r0, [r2, #0]
 8007242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800724a:	f380 8811 	msr	BASEPRI, r0
 800724e:	f7ff f845 	bl	80062dc <vTaskSwitchContext>
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f380 8811 	msr	BASEPRI, r0
 800725a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800725e:	6819      	ldr	r1, [r3, #0]
 8007260:	6808      	ldr	r0, [r1, #0]
 8007262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007266:	f380 8809 	msr	PSP, r0
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	4770      	bx	lr

08007270 <pxCurrentTCBConst>:
 8007270:	20000cf0 	.word	0x20000cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007292:	f7fe ff65 	bl	8006160 <xTaskIncrementTick>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <SysTick_Handler+0x40>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	2300      	movs	r3, #0
 80072a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f383 8811 	msr	BASEPRI, r3
}
 80072ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072c0:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <vPortSetupTimerInterrupt+0x30>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072c6:	4b0a      	ldr	r3, [pc, #40]	; (80072f0 <vPortSetupTimerInterrupt+0x34>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072cc:	4b09      	ldr	r3, [pc, #36]	; (80072f4 <vPortSetupTimerInterrupt+0x38>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a09      	ldr	r2, [pc, #36]	; (80072f8 <vPortSetupTimerInterrupt+0x3c>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	099b      	lsrs	r3, r3, #6
 80072d8:	4a08      	ldr	r2, [pc, #32]	; (80072fc <vPortSetupTimerInterrupt+0x40>)
 80072da:	3b01      	subs	r3, #1
 80072dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <vPortSetupTimerInterrupt+0x30>)
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr
 80072ec:	e000e010 	.word	0xe000e010
 80072f0:	e000e018 	.word	0xe000e018
 80072f4:	20000008 	.word	0x20000008
 80072f8:	10624dd3 	.word	0x10624dd3
 80072fc:	e000e014 	.word	0xe000e014

08007300 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007306:	f3ef 8305 	mrs	r3, IPSR
 800730a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d914      	bls.n	800733c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007312:	4a16      	ldr	r2, [pc, #88]	; (800736c <vPortValidateInterruptPriority+0x6c>)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800731c:	4b14      	ldr	r3, [pc, #80]	; (8007370 <vPortValidateInterruptPriority+0x70>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	7afa      	ldrb	r2, [r7, #11]
 8007322:	429a      	cmp	r2, r3
 8007324:	d20a      	bcs.n	800733c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	607b      	str	r3, [r7, #4]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800733c:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <vPortValidateInterruptPriority+0x74>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007344:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <vPortValidateInterruptPriority+0x78>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d90a      	bls.n	8007362 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	603b      	str	r3, [r7, #0]
}
 800735e:	bf00      	nop
 8007360:	e7fe      	b.n	8007360 <vPortValidateInterruptPriority+0x60>
	}
 8007362:	bf00      	nop
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	e000e3f0 	.word	0xe000e3f0
 8007370:	2000131c 	.word	0x2000131c
 8007374:	e000ed0c 	.word	0xe000ed0c
 8007378:	20001320 	.word	0x20001320

0800737c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007384:	2300      	movs	r3, #0
 8007386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007388:	f7fe fe30 	bl	8005fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800738c:	4b58      	ldr	r3, [pc, #352]	; (80074f0 <pvPortMalloc+0x174>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007394:	f000 f910 	bl	80075b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007398:	4b56      	ldr	r3, [pc, #344]	; (80074f4 <pvPortMalloc+0x178>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4013      	ands	r3, r2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 808e 	bne.w	80074c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01d      	beq.n	80073e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073ac:	2208      	movs	r2, #8
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d014      	beq.n	80073e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f023 0307 	bic.w	r3, r3, #7
 80073c4:	3308      	adds	r3, #8
 80073c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <pvPortMalloc+0x6c>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	617b      	str	r3, [r7, #20]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d069      	beq.n	80074c2 <pvPortMalloc+0x146>
 80073ee:	4b42      	ldr	r3, [pc, #264]	; (80074f8 <pvPortMalloc+0x17c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d864      	bhi.n	80074c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073f8:	4b40      	ldr	r3, [pc, #256]	; (80074fc <pvPortMalloc+0x180>)
 80073fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073fc:	4b3f      	ldr	r3, [pc, #252]	; (80074fc <pvPortMalloc+0x180>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007402:	e004      	b.n	800740e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	429a      	cmp	r2, r3
 8007416:	d903      	bls.n	8007420 <pvPortMalloc+0xa4>
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1f1      	bne.n	8007404 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007420:	4b33      	ldr	r3, [pc, #204]	; (80074f0 <pvPortMalloc+0x174>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007426:	429a      	cmp	r2, r3
 8007428:	d04b      	beq.n	80074c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2208      	movs	r2, #8
 8007430:	4413      	add	r3, r2
 8007432:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	2308      	movs	r3, #8
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	429a      	cmp	r2, r3
 800744a:	d91f      	bls.n	800748c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800744c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4413      	add	r3, r2
 8007452:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <pvPortMalloc+0xf8>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	613b      	str	r3, [r7, #16]
}
 8007470:	bf00      	nop
 8007472:	e7fe      	b.n	8007472 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	1ad2      	subs	r2, r2, r3
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007486:	69b8      	ldr	r0, [r7, #24]
 8007488:	f000 f8f8 	bl	800767c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800748c:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <pvPortMalloc+0x17c>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <pvPortMalloc+0x17c>)
 8007498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800749a:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <pvPortMalloc+0x17c>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b18      	ldr	r3, [pc, #96]	; (8007500 <pvPortMalloc+0x184>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d203      	bcs.n	80074ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <pvPortMalloc+0x17c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a15      	ldr	r2, [pc, #84]	; (8007500 <pvPortMalloc+0x184>)
 80074ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <pvPortMalloc+0x178>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074c2:	f7fe fda1 	bl	8006008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <pvPortMalloc+0x16a>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60fb      	str	r3, [r7, #12]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <pvPortMalloc+0x168>
	return pvReturn;
 80074e6:	69fb      	ldr	r3, [r7, #28]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	; 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20001f2c 	.word	0x20001f2c
 80074f4:	20001f38 	.word	0x20001f38
 80074f8:	20001f30 	.word	0x20001f30
 80074fc:	20001f24 	.word	0x20001f24
 8007500:	20001f34 	.word	0x20001f34

08007504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d048      	beq.n	80075a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007516:	2308      	movs	r3, #8
 8007518:	425b      	negs	r3, r3
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	4413      	add	r3, r2
 800751e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	4b21      	ldr	r3, [pc, #132]	; (80075b0 <vPortFree+0xac>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4013      	ands	r3, r2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10a      	bne.n	8007548 <vPortFree+0x44>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60fb      	str	r3, [r7, #12]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00a      	beq.n	8007566 <vPortFree+0x62>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60bb      	str	r3, [r7, #8]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <vPortFree+0xac>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4013      	ands	r3, r2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d019      	beq.n	80075a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d115      	bne.n	80075a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <vPortFree+0xac>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	43db      	mvns	r3, r3
 8007586:	401a      	ands	r2, r3
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800758c:	f7fe fd2e 	bl	8005fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	4b07      	ldr	r3, [pc, #28]	; (80075b4 <vPortFree+0xb0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4413      	add	r3, r2
 800759a:	4a06      	ldr	r2, [pc, #24]	; (80075b4 <vPortFree+0xb0>)
 800759c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800759e:	6938      	ldr	r0, [r7, #16]
 80075a0:	f000 f86c 	bl	800767c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075a4:	f7fe fd30 	bl	8006008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075a8:	bf00      	nop
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20001f38 	.word	0x20001f38
 80075b4:	20001f30 	.word	0x20001f30

080075b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80075c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c4:	4b27      	ldr	r3, [pc, #156]	; (8007664 <prvHeapInit+0xac>)
 80075c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00c      	beq.n	80075ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3307      	adds	r3, #7
 80075d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0307 	bic.w	r3, r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	4a1f      	ldr	r2, [pc, #124]	; (8007664 <prvHeapInit+0xac>)
 80075e8:	4413      	add	r3, r2
 80075ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075f0:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <prvHeapInit+0xb0>)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f6:	4b1c      	ldr	r3, [pc, #112]	; (8007668 <prvHeapInit+0xb0>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	4413      	add	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007604:	2208      	movs	r2, #8
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0307 	bic.w	r3, r3, #7
 8007612:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a15      	ldr	r2, [pc, #84]	; (800766c <prvHeapInit+0xb4>)
 8007618:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800761a:	4b14      	ldr	r3, [pc, #80]	; (800766c <prvHeapInit+0xb4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <prvHeapInit+0xb4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	1ad2      	subs	r2, r2, r3
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <prvHeapInit+0xb4>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	4a0a      	ldr	r2, [pc, #40]	; (8007670 <prvHeapInit+0xb8>)
 8007646:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a09      	ldr	r2, [pc, #36]	; (8007674 <prvHeapInit+0xbc>)
 800764e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007650:	4b09      	ldr	r3, [pc, #36]	; (8007678 <prvHeapInit+0xc0>)
 8007652:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007656:	601a      	str	r2, [r3, #0]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20001324 	.word	0x20001324
 8007668:	20001f24 	.word	0x20001f24
 800766c:	20001f2c 	.word	0x20001f2c
 8007670:	20001f34 	.word	0x20001f34
 8007674:	20001f30 	.word	0x20001f30
 8007678:	20001f38 	.word	0x20001f38

0800767c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007684:	4b27      	ldr	r3, [pc, #156]	; (8007724 <prvInsertBlockIntoFreeList+0xa8>)
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e002      	b.n	8007690 <prvInsertBlockIntoFreeList+0x14>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d8f7      	bhi.n	800768a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	4413      	add	r3, r2
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d108      	bne.n	80076be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	441a      	add	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d118      	bne.n	8007704 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b14      	ldr	r3, [pc, #80]	; (8007728 <prvInsertBlockIntoFreeList+0xac>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d00d      	beq.n	80076fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	441a      	add	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]
 80076f8:	e008      	b.n	800770c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076fa:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <prvInsertBlockIntoFreeList+0xac>)
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	e003      	b.n	800770c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	429a      	cmp	r2, r3
 8007712:	d002      	beq.n	800771a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	20001f24 	.word	0x20001f24
 8007728:	20001f2c 	.word	0x20001f2c

0800772c <memset>:
 800772c:	4603      	mov	r3, r0
 800772e:	4402      	add	r2, r0
 8007730:	4293      	cmp	r3, r2
 8007732:	d100      	bne.n	8007736 <memset+0xa>
 8007734:	4770      	bx	lr
 8007736:	f803 1b01 	strb.w	r1, [r3], #1
 800773a:	e7f9      	b.n	8007730 <memset+0x4>

0800773c <__libc_init_array>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	2600      	movs	r6, #0
 8007740:	4d0c      	ldr	r5, [pc, #48]	; (8007774 <__libc_init_array+0x38>)
 8007742:	4c0d      	ldr	r4, [pc, #52]	; (8007778 <__libc_init_array+0x3c>)
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	42a6      	cmp	r6, r4
 800774a:	d109      	bne.n	8007760 <__libc_init_array+0x24>
 800774c:	f000 f828 	bl	80077a0 <_init>
 8007750:	2600      	movs	r6, #0
 8007752:	4d0a      	ldr	r5, [pc, #40]	; (800777c <__libc_init_array+0x40>)
 8007754:	4c0a      	ldr	r4, [pc, #40]	; (8007780 <__libc_init_array+0x44>)
 8007756:	1b64      	subs	r4, r4, r5
 8007758:	10a4      	asrs	r4, r4, #2
 800775a:	42a6      	cmp	r6, r4
 800775c:	d105      	bne.n	800776a <__libc_init_array+0x2e>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	f855 3b04 	ldr.w	r3, [r5], #4
 8007764:	4798      	blx	r3
 8007766:	3601      	adds	r6, #1
 8007768:	e7ee      	b.n	8007748 <__libc_init_array+0xc>
 800776a:	f855 3b04 	ldr.w	r3, [r5], #4
 800776e:	4798      	blx	r3
 8007770:	3601      	adds	r6, #1
 8007772:	e7f2      	b.n	800775a <__libc_init_array+0x1e>
 8007774:	08008194 	.word	0x08008194
 8007778:	08008194 	.word	0x08008194
 800777c:	08008194 	.word	0x08008194
 8007780:	08008198 	.word	0x08008198

08007784 <memcpy>:
 8007784:	440a      	add	r2, r1
 8007786:	4291      	cmp	r1, r2
 8007788:	f100 33ff 	add.w	r3, r0, #4294967295
 800778c:	d100      	bne.n	8007790 <memcpy+0xc>
 800778e:	4770      	bx	lr
 8007790:	b510      	push	{r4, lr}
 8007792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007796:	4291      	cmp	r1, r2
 8007798:	f803 4f01 	strb.w	r4, [r3, #1]!
 800779c:	d1f9      	bne.n	8007792 <memcpy+0xe>
 800779e:	bd10      	pop	{r4, pc}

080077a0 <_init>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	bf00      	nop
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr

080077ac <_fini>:
 80077ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ae:	bf00      	nop
 80077b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b2:	bc08      	pop	{r3}
 80077b4:	469e      	mov	lr, r3
 80077b6:	4770      	bx	lr
