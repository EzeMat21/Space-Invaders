
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e04  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b7c  08009b7c  00020914  2**0
                  CONTENTS
  4 .ARM          00000000  08009b7c  08009b7c  00020914  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b7c  08009b7c  00020914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b80  08009b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000914  20000000  08009b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002558  20000914  0800a498  00020914  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e6c  0800a498  00022e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020914  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002093d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000282f7  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053e9  00000000  00000000  00048c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000130cb  00000000  00000000  0004e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018b0  00000000  00000000  00061130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016e5  00000000  00000000  000629e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001beec  00000000  00000000  000640c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000297f2  00000000  00000000  0007ffb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e0a5  00000000  00000000  000a97a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052f8  00000000  00000000  00147848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014cb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000914 	.word	0x20000914
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d60 	.word	0x08008d60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000918 	.word	0x20000918
 800014c:	08008d60 	.word	0x08008d60

08000150 <getPlayer>:


player_t *getPlayer(){

	return &Player;
}
 8000150:	4800      	ldr	r0, [pc, #0]	; (8000154 <getPlayer+0x4>)
 8000152:	4770      	bx	lr
 8000154:	200009a4 	.word	0x200009a4

08000158 <getDisparo>:
	return &movimiento_Aliens;
}

disparo_t *getDisparo(){
	return &Disparo;
}
 8000158:	4800      	ldr	r0, [pc, #0]	; (800015c <getDisparo+0x4>)
 800015a:	4770      	bx	lr
 800015c:	2000099c 	.word	0x2000099c

08000160 <getDisparoAliens>:

disparo_t *getDisparoAliens(){
	return &Disparo_Aliens;
}
 8000160:	4800      	ldr	r0, [pc, #0]	; (8000164 <getDisparoAliens+0x4>)
 8000162:	4770      	bx	lr
 8000164:	200009a0 	.word	0x200009a0

08000168 <getDificultad>:

dificultad_t *getDificultad(){

	return &dificultad;
}
 8000168:	4800      	ldr	r0, [pc, #0]	; (800016c <getDificultad+0x4>)
 800016a:	4770      	bx	lr
 800016c:	200009ac 	.word	0x200009ac

08000170 <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 8000170:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 8000172:	f002 f839 	bl	80021e8 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000176:	2000      	movs	r0, #0
 8000178:	f001 fcfe 	bl	8001b78 <SSD1306_Fill>
}
 800017c:	bd08      	pop	{r3, pc}
	...

08000180 <playerInit>:


void playerInit(){

	getPlayer()->posicion_X = 64;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <playerInit+0x18>)
 8000182:	2240      	movs	r2, #64	; 0x40
 8000184:	701a      	strb	r2, [r3, #0]
	getPlayer()->vivo = true;
 8000186:	2201      	movs	r2, #1
 8000188:	705a      	strb	r2, [r3, #1]
	getPlayer()->puntaje = 900;
 800018a:	f44f 7161 	mov.w	r1, #900	; 0x384
 800018e:	8099      	strh	r1, [r3, #4]
	getPlayer()->vidas = 3;
 8000190:	2103      	movs	r1, #3
 8000192:	7099      	strb	r1, [r3, #2]
	getPlayer()->nivel = 1;
 8000194:	719a      	strb	r2, [r3, #6]
}
 8000196:	4770      	bx	lr
 8000198:	200009a4 	.word	0x200009a4

0800019c <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 800019c:	b500      	push	{lr}
 800019e:	b083      	sub	sp, #12
 80001a0:	468c      	mov	ip, r1

	if(getPlayer()->vivo == true){
 80001a2:	4b16      	ldr	r3, [pc, #88]	; (80001fc <plotPlayer+0x60>)
 80001a4:	785b      	ldrb	r3, [r3, #1]
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d11d      	bne.n	80001e6 <plotPlayer+0x4a>

		if(direccion == derecha){
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d00e      	beq.n	80001cc <plotPlayer+0x30>
			else{
				player->posicion_X = player->posicion_X + 4;
			}

		}
		else if(direccion == izquierda){
 80001ae:	2803      	cmp	r0, #3
 80001b0:	d013      	beq.n	80001da <plotPlayer+0x3e>
			else{
				player->posicion_X = player->posicion_X - 4;
			}
		}

		SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 80001b2:	2301      	movs	r3, #1
 80001b4:	9301      	str	r3, [sp, #4]
 80001b6:	2308      	movs	r3, #8
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	4a11      	ldr	r2, [pc, #68]	; (8000200 <plotPlayer+0x64>)
 80001bc:	2138      	movs	r1, #56	; 0x38
 80001be:	f89c 0000 	ldrb.w	r0, [ip]
 80001c2:	f001 fd11 	bl	8001be8 <SSD1306_DrawBitmap>

		SSD1306_DrawBitmap(player->posicion_X, 56, nave_explotada, 8,8,1);
	}


}
 80001c6:	b003      	add	sp, #12
 80001c8:	f85d fb04 	ldr.w	pc, [sp], #4
			if(player->posicion_X >= 120){
 80001cc:	780b      	ldrb	r3, [r1, #0]
 80001ce:	2b77      	cmp	r3, #119	; 0x77
				player->posicion_X = 120;
 80001d0:	bf8c      	ite	hi
 80001d2:	2378      	movhi	r3, #120	; 0x78
				player->posicion_X = player->posicion_X + 4;
 80001d4:	3304      	addls	r3, #4
 80001d6:	700b      	strb	r3, [r1, #0]
 80001d8:	e7eb      	b.n	80001b2 <plotPlayer+0x16>
			if(player->posicion_X <= 0){
 80001da:	780b      	ldrb	r3, [r1, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d0e8      	beq.n	80001b2 <plotPlayer+0x16>
				player->posicion_X = player->posicion_X - 4;
 80001e0:	3b04      	subs	r3, #4
 80001e2:	700b      	strb	r3, [r1, #0]
 80001e4:	e7e5      	b.n	80001b2 <plotPlayer+0x16>
		SSD1306_DrawBitmap(player->posicion_X, 56, nave_explotada, 8,8,1);
 80001e6:	2301      	movs	r3, #1
 80001e8:	9301      	str	r3, [sp, #4]
 80001ea:	2308      	movs	r3, #8
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	4a05      	ldr	r2, [pc, #20]	; (8000204 <plotPlayer+0x68>)
 80001f0:	2138      	movs	r1, #56	; 0x38
 80001f2:	f89c 0000 	ldrb.w	r0, [ip]
 80001f6:	f001 fcf7 	bl	8001be8 <SSD1306_DrawBitmap>
}
 80001fa:	e7e4      	b.n	80001c6 <plotPlayer+0x2a>
 80001fc:	200009a4 	.word	0x200009a4
 8000200:	08009558 	.word	0x08009558
 8000204:	08009560 	.word	0x08009560

08000208 <InvaderInit>:



void InvaderInit(){
 8000208:	b510      	push	{r4, lr}

	getMovAliens()->orientacion = mov_derecha;
 800020a:	4b0f      	ldr	r3, [pc, #60]	; (8000248 <InvaderInit+0x40>)
 800020c:	2100      	movs	r1, #0
 800020e:	7019      	strb	r1, [r3, #0]
	getMovAliens()->alien_columna_derecha = NUM_ALIEN_COLUMNA - 1;
 8000210:	2206      	movs	r2, #6
 8000212:	715a      	strb	r2, [r3, #5]
	getMovAliens()->alien_columna_izquierda = 0;
 8000214:	7119      	strb	r1, [r3, #4]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000216:	4c0d      	ldr	r4, [pc, #52]	; (800024c <InvaderInit+0x44>)
void InvaderInit(){
 8000218:	f04f 0e0a 	mov.w	lr, #10
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
			getAlien(y, x)->vivo = true;
 800021c:	f04f 0c01 	mov.w	ip, #1
			getAlien(y, x)->conteo_explosion = 2;
 8000220:	2002      	movs	r0, #2
void InvaderInit(){
 8000222:	4622      	mov	r2, r4
 8000224:	4673      	mov	r3, lr
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 8000226:	7013      	strb	r3, [r2, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000228:	7051      	strb	r1, [r2, #1]
			getAlien(y, x)->vivo = true;
 800022a:	f882 c002 	strb.w	ip, [r2, #2]
			getAlien(y, x)->conteo_explosion = 2;
 800022e:	7110      	strb	r0, [r2, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000230:	330d      	adds	r3, #13
 8000232:	b2db      	uxtb	r3, r3
 8000234:	3205      	adds	r2, #5
 8000236:	2b65      	cmp	r3, #101	; 0x65
 8000238:	d1f5      	bne.n	8000226 <InvaderInit+0x1e>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800023a:	3423      	adds	r4, #35	; 0x23
 800023c:	310b      	adds	r1, #11
 800023e:	b2c9      	uxtb	r1, r1
 8000240:	2921      	cmp	r1, #33	; 0x21
 8000242:	d1ee      	bne.n	8000222 <InvaderInit+0x1a>
		}
	}

}
 8000244:	bd10      	pop	{r4, pc}
 8000246:	bf00      	nop
 8000248:	200009b0 	.word	0x200009b0
 800024c:	20000930 	.word	0x20000930

08000250 <plotAliens>:

void plotAliens(){
 8000250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000254:	b085      	sub	sp, #20

	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 8000256:	4b91      	ldr	r3, [pc, #580]	; (800049c <plotAliens+0x24c>)
 8000258:	7859      	ldrb	r1, [r3, #1]
 800025a:	4b91      	ldr	r3, [pc, #580]	; (80004a0 <plotAliens+0x250>)
 800025c:	781a      	ldrb	r2, [r3, #0]
 800025e:	fbb1 f3f2 	udiv	r3, r1, r2
 8000262:	fb02 1313 	mls	r3, r2, r3, r1
 8000266:	f013 0fff 	tst.w	r3, #255	; 0xff
 800026a:	d13f      	bne.n	80002ec <plotAliens+0x9c>
		/*getMovAliens()->animacion = getMovAliens()->animacion + 1;
		if(getMovAliens()->animacion >= 8){
			getMovAliens()->animacion = 0;
		}*/

		getMovAliens()->animacion = !getMovAliens()->animacion;
 800026c:	4a8b      	ldr	r2, [pc, #556]	; (800049c <plotAliens+0x24c>)
 800026e:	78d3      	ldrb	r3, [r2, #3]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	095b      	lsrs	r3, r3, #5
 8000276:	70d3      	strb	r3, [r2, #3]

			switch(getMovAliens()->orientacion){
 8000278:	7813      	ldrb	r3, [r2, #0]
 800027a:	b18b      	cbz	r3, 80002a0 <plotAliens+0x50>
 800027c:	2b01      	cmp	r3, #1
 800027e:	d11e      	bne.n	80002be <plotAliens+0x6e>
 8000280:	4c88      	ldr	r4, [pc, #544]	; (80004a4 <plotAliens+0x254>)
 8000282:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8000286:	348c      	adds	r4, #140	; 0x8c
					break;

				case mov_izquierda:

						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000288:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23

								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 2;
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	3a02      	subs	r2, #2
 8000290:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000294:	4283      	cmp	r3, r0
 8000296:	d1f9      	bne.n	800028c <plotAliens+0x3c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000298:	3023      	adds	r0, #35	; 0x23
 800029a:	42a0      	cmp	r0, r4
 800029c:	d1f4      	bne.n	8000288 <plotAliens+0x38>
 800029e:	e00e      	b.n	80002be <plotAliens+0x6e>
 80002a0:	4c80      	ldr	r4, [pc, #512]	; (80004a4 <plotAliens+0x254>)
 80002a2:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80002a6:	348c      	adds	r4, #140	; 0x8c
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002a8:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 2;
 80002ac:	781a      	ldrb	r2, [r3, #0]
 80002ae:	3202      	adds	r2, #2
 80002b0:	f803 2b05 	strb.w	r2, [r3], #5
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d1f9      	bne.n	80002ac <plotAliens+0x5c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002b8:	3023      	adds	r0, #35	; 0x23
 80002ba:	42a0      	cmp	r0, r4
 80002bc:	d1f4      	bne.n	80002a8 <plotAliens+0x58>
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,getMovAliens()->alien_columna_derecha)->posicion_X + TAMANO_ALIEN_BOTTOM) >= 127){
 80002be:	4b77      	ldr	r3, [pc, #476]	; (800049c <plotAliens+0x24c>)
	return &Alien[fila][columna];
 80002c0:	795b      	ldrb	r3, [r3, #5]
			if( (getAlien(0,getMovAliens()->alien_columna_derecha)->posicion_X + TAMANO_ALIEN_BOTTOM) >= 127){
 80002c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80002c6:	4a77      	ldr	r2, [pc, #476]	; (80004a4 <plotAliens+0x254>)
 80002c8:	56d3      	ldrsb	r3, [r2, r3]
 80002ca:	2b72      	cmp	r3, #114	; 0x72
 80002cc:	dd02      	ble.n	80002d4 <plotAliens+0x84>

				getMovAliens()->orientacion = mov_izquierda;
 80002ce:	4b73      	ldr	r3, [pc, #460]	; (800049c <plotAliens+0x24c>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]
			}


			if( (getAlien(0,getMovAliens()->alien_columna_izquierda)->posicion_X) <= 0){
 80002d4:	4b71      	ldr	r3, [pc, #452]	; (800049c <plotAliens+0x24c>)
	return &Alien[fila][columna];
 80002d6:	791b      	ldrb	r3, [r3, #4]
			if( (getAlien(0,getMovAliens()->alien_columna_izquierda)->posicion_X) <= 0){
 80002d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80002dc:	4a71      	ldr	r2, [pc, #452]	; (80004a4 <plotAliens+0x254>)
 80002de:	56d3      	ldrsb	r3, [r2, r3]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	dd11      	ble.n	8000308 <plotAliens+0xb8>
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 80002e4:	4b6d      	ldr	r3, [pc, #436]	; (800049c <plotAliens+0x24c>)
 80002e6:	789b      	ldrb	r3, [r3, #2]
 80002e8:	2b0a      	cmp	r3, #10
 80002ea:	d014      	beq.n	8000316 <plotAliens+0xc6>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002ec:	3101      	adds	r1, #1
 80002ee:	4b6b      	ldr	r3, [pc, #428]	; (800049c <plotAliens+0x24c>)
 80002f0:	7059      	strb	r1, [r3, #1]
	uint8_t conteo_columna_derecha = 0;
	uint8_t conteo_columna_izquierda = 0;

	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002f2:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80004a4 <plotAliens+0x254>
	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 80002f6:	46da      	mov	sl, fp
 80002f8:	f04f 0800 	mov.w	r8, #0
	uint8_t conteo_columna_izquierda = 0;
 80002fc:	f8cd 800c 	str.w	r8, [sp, #12]
	uint8_t conteo_columna_derecha = 0;
 8000300:	f8cd 8008 	str.w	r8, [sp, #8]

			if(getMovAliens()->alien_columna_derecha != getMovAliens()->alien_columna_izquierda){
 8000304:	4699      	mov	r9, r3
 8000306:	e097      	b.n	8000438 <plotAliens+0x1e8>
				getMovAliens()->orientacion = mov_derecha;
 8000308:	4b64      	ldr	r3, [pc, #400]	; (800049c <plotAliens+0x24c>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 800030e:	789a      	ldrb	r2, [r3, #2]
 8000310:	3201      	adds	r2, #1
 8000312:	709a      	strb	r2, [r3, #2]
 8000314:	e7e6      	b.n	80002e4 <plotAliens+0x94>
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000316:	4b62      	ldr	r3, [pc, #392]	; (80004a0 <plotAliens+0x250>)
 8000318:	785c      	ldrb	r4, [r3, #1]
 800031a:	4d62      	ldr	r5, [pc, #392]	; (80004a4 <plotAliens+0x254>)
 800031c:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8000320:	358c      	adds	r5, #140	; 0x8c
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000322:	f1a0 0323 	sub.w	r3, r0, #35	; 0x23
						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000326:	785a      	ldrb	r2, [r3, #1]
 8000328:	4422      	add	r2, r4
 800032a:	705a      	strb	r2, [r3, #1]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800032c:	3305      	adds	r3, #5
 800032e:	4283      	cmp	r3, r0
 8000330:	d1f9      	bne.n	8000326 <plotAliens+0xd6>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000332:	3023      	adds	r0, #35	; 0x23
 8000334:	42a8      	cmp	r0, r5
 8000336:	d1f4      	bne.n	8000322 <plotAliens+0xd2>
 8000338:	4b58      	ldr	r3, [pc, #352]	; (800049c <plotAliens+0x24c>)
 800033a:	2200      	movs	r2, #0
 800033c:	709a      	strb	r2, [r3, #2]
 800033e:	e7d5      	b.n	80002ec <plotAliens+0x9c>

				if(getAlien(y,getMovAliens()->alien_columna_derecha)->vivo == false){
					conteo_columna_derecha++;
				}

				else if(getAlien(y,getMovAliens()->alien_columna_izquierda)->vivo == false){
 8000340:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8000344:	eb08 0288 	add.w	r2, r8, r8, lsl #2
 8000348:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800034c:	4413      	add	r3, r2
 800034e:	4a55      	ldr	r2, [pc, #340]	; (80004a4 <plotAliens+0x254>)
 8000350:	4413      	add	r3, r2
 8000352:	789b      	ldrb	r3, [r3, #2]
 8000354:	2b00      	cmp	r3, #0
 8000356:	f040 8088 	bne.w	800046a <plotAliens+0x21a>
					conteo_columna_izquierda++;
 800035a:	9b03      	ldr	r3, [sp, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	b2db      	uxtb	r3, r3
 8000360:	9303      	str	r3, [sp, #12]
 8000362:	e082      	b.n	800046a <plotAliens+0x21a>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){

					switch(y){

					case 0:
						if(getAlien(y,x)->vivo == true){
 8000364:	78a3      	ldrb	r3, [r4, #2]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d01a      	beq.n	80003a0 <plotAliens+0x150>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800036a:	3405      	adds	r4, #5
 800036c:	3505      	adds	r5, #5
 800036e:	42a7      	cmp	r7, r4
 8000370:	d05b      	beq.n	800042a <plotAliens+0x1da>
					switch(y){
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0f6      	beq.n	8000364 <plotAliens+0x114>
 8000376:	2e01      	cmp	r6, #1
 8000378:	d02b      	beq.n	80003d2 <plotAliens+0x182>
								//getMovAliens()->animacion = true;
							}
						}
						break;
					default:
						if(getAlien(y,x)->vivo == true){
 800037a:	78ab      	ldrb	r3, [r5, #2]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d1f4      	bne.n	800036a <plotAliens+0x11a>
							if(getMovAliens()->animacion == true ){
 8000380:	f899 3003 	ldrb.w	r3, [r9, #3]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d045      	beq.n	8000414 <plotAliens+0x1c4>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
							}
							else{
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx2,16,8,1);
 8000388:	2301      	movs	r3, #1
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	2308      	movs	r3, #8
 800038e:	9300      	str	r3, [sp, #0]
 8000390:	2310      	movs	r3, #16
 8000392:	4a45      	ldr	r2, [pc, #276]	; (80004a8 <plotAliens+0x258>)
 8000394:	7869      	ldrb	r1, [r5, #1]
 8000396:	f995 0000 	ldrsb.w	r0, [r5]
 800039a:	f001 fc25 	bl	8001be8 <SSD1306_DrawBitmap>
 800039e:	e7e4      	b.n	800036a <plotAliens+0x11a>
							if(getMovAliens()->animacion == true ){
 80003a0:	f899 3003 	ldrb.w	r3, [r9, #3]
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d00a      	beq.n	80003be <plotAliens+0x16e>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx2,8,8,1);
 80003a8:	2301      	movs	r3, #1
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	2308      	movs	r3, #8
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	4a3e      	ldr	r2, [pc, #248]	; (80004ac <plotAliens+0x25c>)
 80003b2:	7861      	ldrb	r1, [r4, #1]
 80003b4:	f994 0000 	ldrsb.w	r0, [r4]
 80003b8:	f001 fc16 	bl	8001be8 <SSD1306_DrawBitmap>
 80003bc:	e7d5      	b.n	800036a <plotAliens+0x11a>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderTopGfx,8,8,1);
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	2308      	movs	r3, #8
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	4a3a      	ldr	r2, [pc, #232]	; (80004b0 <plotAliens+0x260>)
 80003c6:	7861      	ldrb	r1, [r4, #1]
 80003c8:	f994 0000 	ldrsb.w	r0, [r4]
 80003cc:	f001 fc0c 	bl	8001be8 <SSD1306_DrawBitmap>
 80003d0:	e7cb      	b.n	800036a <plotAliens+0x11a>
						if(getAlien(y,x)->vivo == true){
 80003d2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d1c7      	bne.n	800036a <plotAliens+0x11a>
							if(getMovAliens()->animacion == true ){
 80003da:	f899 3003 	ldrb.w	r3, [r9, #3]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d00c      	beq.n	80003fc <plotAliens+0x1ac>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx2,16,8,1);
 80003e2:	2301      	movs	r3, #1
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	2308      	movs	r3, #8
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	2310      	movs	r3, #16
 80003ec:	4a31      	ldr	r2, [pc, #196]	; (80004b4 <plotAliens+0x264>)
 80003ee:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80003f2:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 80003f6:	f001 fbf7 	bl	8001be8 <SSD1306_DrawBitmap>
 80003fa:	e7b6      	b.n	800036a <plotAliens+0x11a>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80003fc:	9301      	str	r3, [sp, #4]
 80003fe:	2308      	movs	r3, #8
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2310      	movs	r3, #16
 8000404:	4a2c      	ldr	r2, [pc, #176]	; (80004b8 <plotAliens+0x268>)
 8000406:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800040a:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
 800040e:	f001 fbeb 	bl	8001be8 <SSD1306_DrawBitmap>
 8000412:	e7aa      	b.n	800036a <plotAliens+0x11a>
								SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	2308      	movs	r3, #8
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2310      	movs	r3, #16
 800041c:	4a27      	ldr	r2, [pc, #156]	; (80004bc <plotAliens+0x26c>)
 800041e:	7869      	ldrb	r1, [r5, #1]
 8000420:	f995 0000 	ldrsb.w	r0, [r5]
 8000424:	f001 fbe0 	bl	8001be8 <SSD1306_DrawBitmap>
 8000428:	e79f      	b.n	800036a <plotAliens+0x11a>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800042a:	f108 0801 	add.w	r8, r8, #1
 800042e:	f10a 0a23 	add.w	sl, sl, #35	; 0x23
 8000432:	f1b8 0f03 	cmp.w	r8, #3
 8000436:	d01d      	beq.n	8000474 <plotAliens+0x224>
 8000438:	fa5f f688 	uxtb.w	r6, r8
			if(getMovAliens()->alien_columna_derecha != getMovAliens()->alien_columna_izquierda){
 800043c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8000440:	f899 2004 	ldrb.w	r2, [r9, #4]
 8000444:	4293      	cmp	r3, r2
 8000446:	d010      	beq.n	800046a <plotAliens+0x21a>
				if(getAlien(y,getMovAliens()->alien_columna_derecha)->vivo == false){
 8000448:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800044c:	eb08 0188 	add.w	r1, r8, r8, lsl #2
 8000450:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000454:	440b      	add	r3, r1
 8000456:	4913      	ldr	r1, [pc, #76]	; (80004a4 <plotAliens+0x254>)
 8000458:	440b      	add	r3, r1
 800045a:	789b      	ldrb	r3, [r3, #2]
 800045c:	2b00      	cmp	r3, #0
 800045e:	f47f af6f 	bne.w	8000340 <plotAliens+0xf0>
					conteo_columna_derecha++;
 8000462:	9b02      	ldr	r3, [sp, #8]
 8000464:	3301      	adds	r3, #1
 8000466:	b2db      	uxtb	r3, r3
 8000468:	9302      	str	r3, [sp, #8]
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800046a:	f10b 0723 	add.w	r7, fp, #35	; 0x23
	uint8_t conteo_columna_derecha = 0;
 800046e:	4655      	mov	r5, sl
 8000470:	465c      	mov	r4, fp
 8000472:	e77e      	b.n	8000372 <plotAliens+0x122>

		}

		uint8_t debug1, debug2;

		if(conteo_columna_derecha == 3){
 8000474:	9b02      	ldr	r3, [sp, #8]
 8000476:	2b03      	cmp	r3, #3
 8000478:	d005      	beq.n	8000486 <plotAliens+0x236>
			getMovAliens()->alien_columna_derecha= getMovAliens()->alien_columna_derecha - 1;

		}

		if(conteo_columna_izquierda == 3){
 800047a:	9b03      	ldr	r3, [sp, #12]
 800047c:	2b03      	cmp	r3, #3
 800047e:	d007      	beq.n	8000490 <plotAliens+0x240>
			debug1 = getMovAliens()->alien_columna_derecha;
			debug2 = getMovAliens()->alien_columna_izquierda;
		}


}
 8000480:	b005      	add	sp, #20
 8000482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			getMovAliens()->alien_columna_derecha= getMovAliens()->alien_columna_derecha - 1;
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <plotAliens+0x24c>)
 8000488:	7953      	ldrb	r3, [r2, #5]
 800048a:	3b01      	subs	r3, #1
 800048c:	7153      	strb	r3, [r2, #5]
 800048e:	e7f4      	b.n	800047a <plotAliens+0x22a>
			getMovAliens()->alien_columna_izquierda= getMovAliens()->alien_columna_izquierda + 1;
 8000490:	4a02      	ldr	r2, [pc, #8]	; (800049c <plotAliens+0x24c>)
 8000492:	7913      	ldrb	r3, [r2, #4]
 8000494:	3301      	adds	r3, #1
 8000496:	7113      	strb	r3, [r2, #4]
}
 8000498:	e7f2      	b.n	8000480 <plotAliens+0x230>
 800049a:	bf00      	nop
 800049c:	200009b0 	.word	0x200009b0
 80004a0:	200009ac 	.word	0x200009ac
 80004a4:	20000930 	.word	0x20000930
 80004a8:	08009508 	.word	0x08009508
 80004ac:	08009540 	.word	0x08009540
 80004b0:	08009538 	.word	0x08009538
 80004b4:	08009528 	.word	0x08009528
 80004b8:	08009518 	.word	0x08009518
 80004bc:	080094f8 	.word	0x080094f8

080004c0 <disparoInit>:


void disparoInit(){

	//Inicializacion del disparo del Player
	getDisparo()->posicion_x = 0;
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <disparoInit+0x18>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	701a      	strb	r2, [r3, #0]
	getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 80004c6:	2132      	movs	r1, #50	; 0x32
 80004c8:	7059      	strb	r1, [r3, #1]
	getDisparo()->disparo = false;
 80004ca:	709a      	strb	r2, [r3, #2]
	getDisparo()->numero_disparos = 0;
 80004cc:	70da      	strb	r2, [r3, #3]

	//Inicializacion del Disparo de los Aliens
	getDisparoAliens()->numero_disparos = 21;
 80004ce:	4b03      	ldr	r3, [pc, #12]	; (80004dc <disparoInit+0x1c>)
 80004d0:	2215      	movs	r2, #21
 80004d2:	70da      	strb	r2, [r3, #3]
}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	2000099c 	.word	0x2000099c
 80004dc:	200009a0 	.word	0x200009a0

080004e0 <disparar>:


void disparar(){
 80004e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004e4:	b083      	sub	sp, #12


			if(getDisparo()->numero_disparos == 1){
 80004e6:	4b5a      	ldr	r3, [pc, #360]	; (8000650 <disparar+0x170>)
 80004e8:	78db      	ldrb	r3, [r3, #3]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d00e      	beq.n	800050c <disparar+0x2c>
				getDisparo()->disparo = true;
				getDisparo()->posicion_x = getPlayer()->posicion_X;
			}


			if(getDisparo()->disparo == true){
 80004ee:	4b58      	ldr	r3, [pc, #352]	; (8000650 <disparar+0x170>)
 80004f0:	789b      	ldrb	r3, [r3, #2]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d010      	beq.n	8000518 <disparar+0x38>
			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){

				uint8_t tamano_alien = TAMANO_ALIEN_TOP;

				switch(y){
 80004f6:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8000654 <disparar+0x174>
 80004fa:	f04f 0800 	mov.w	r8, #0
				uint8_t tamano_alien = TAMANO_ALIEN_TOP;
 80004fe:	2708      	movs	r7, #8

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){

					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 8000500:	4e53      	ldr	r6, [pc, #332]	; (8000650 <disparar+0x170>)
									getDisparo()->numero_disparos = 0;


									//Conteo de la cantidad de aliens eliminados (esto para la funcion disparoAliens())
									//getDisparoAliens()->numero_disparos se interpretará como aliens eliminados.
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 8000502:	f8df b154 	ldr.w	fp, [pc, #340]	; 8000658 <disparar+0x178>
									switch(y){
									case 0:
										getPlayer()->puntaje = (getPlayer()->puntaje) + (PUNTAJE_ALIEN_TOP*(getPlayer()->nivel));
										break;
									case 1:
										getPlayer()->puntaje = (getPlayer()->puntaje) + (PUNTAJE_ALIEN_MIDDLE*(getPlayer()->nivel));
 8000506:	f8df a154 	ldr.w	sl, [pc, #340]	; 800065c <disparar+0x17c>
 800050a:	e09b      	b.n	8000644 <disparar+0x164>
				getDisparo()->disparo = true;
 800050c:	4b50      	ldr	r3, [pc, #320]	; (8000650 <disparar+0x170>)
 800050e:	2201      	movs	r2, #1
 8000510:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 8000512:	4a52      	ldr	r2, [pc, #328]	; (800065c <disparar+0x17c>)
 8000514:	7812      	ldrb	r2, [r2, #0]
 8000516:	701a      	strb	r2, [r3, #0]
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 2, 1);
 8000518:	4c4d      	ldr	r4, [pc, #308]	; (8000650 <disparar+0x170>)
 800051a:	7820      	ldrb	r0, [r4, #0]
 800051c:	3004      	adds	r0, #4
 800051e:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8000522:	b289      	uxth	r1, r1
 8000524:	1c8b      	adds	r3, r1, #2
 8000526:	2201      	movs	r2, #1
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	4602      	mov	r2, r0
 800052e:	f001 fc0c 	bl	8001d4a <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 8000532:	7863      	ldrb	r3, [r4, #1]
 8000534:	3b04      	subs	r3, #4
 8000536:	b25b      	sxtb	r3, r3
 8000538:	7063      	strb	r3, [r4, #1]
				if(getDisparo()->posicion_y <= 0){
 800053a:	2b00      	cmp	r3, #0
 800053c:	dcdb      	bgt.n	80004f6 <disparar+0x16>
					getDisparo()->disparo = false;
 800053e:	2200      	movs	r2, #0
 8000540:	70a2      	strb	r2, [r4, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 8000542:	2132      	movs	r1, #50	; 0x32
 8000544:	7061      	strb	r1, [r4, #1]
					getDisparo()->numero_disparos = 0;
 8000546:	70e2      	strb	r2, [r4, #3]
 8000548:	e7d5      	b.n	80004f6 <disparar+0x16>
				switch(y){
 800054a:	270b      	movs	r7, #11
 800054c:	e078      	b.n	8000640 <disparar+0x160>
										getPlayer()->puntaje = (getPlayer()->puntaje) + (PUNTAJE_ALIEN_TOP*(getPlayer()->nivel));
 800054e:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8000552:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000556:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800055a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800055e:	f8aa 3004 	strh.w	r3, [sl, #4]
										break;
 8000562:	e04e      	b.n	8000602 <disparar+0x122>
										getPlayer()->puntaje = (getPlayer()->puntaje) + (PUNTAJE_ALIEN_MIDDLE*(getPlayer()->nivel));
 8000564:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8000568:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800056c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8000570:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000574:	f8aa 3004 	strh.w	r3, [sl, #4]
										break;
 8000578:	e043      	b.n	8000602 <disparar+0x122>
									case 2:
										getPlayer()->puntaje = (getPlayer()->puntaje) + (PUNTAJE_ALIEN_BOTTOM*(getPlayer()->nivel));
 800057a:	f89a 3006 	ldrb.w	r3, [sl, #6]
 800057e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000582:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8000586:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800058a:	f8aa 3004 	strh.w	r3, [sl, #4]
										break;
 800058e:	e038      	b.n	8000602 <disparar+0x122>
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
 8000590:	78eb      	ldrb	r3, [r5, #3]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d035      	beq.n	8000602 <disparar+0x122>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000596:	3405      	adds	r4, #5
 8000598:	454c      	cmp	r4, r9
 800059a:	d042      	beq.n	8000622 <disparar+0x142>
					if( (getDisparo()->posicion_x + 1 >= getAlien(y,x)->posicion_X) &  (getDisparo()->posicion_x + 1 <= (getAlien(y,x)->posicion_X + tamano_alien)) & ((getDisparo()->posicion_y) >= getAlien(y,x)->posicion_Y) & (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + tamano_alien)){
 800059c:	7832      	ldrb	r2, [r6, #0]
 800059e:	4625      	mov	r5, r4
 80005a0:	f994 0000 	ldrsb.w	r0, [r4]
 80005a4:	f996 c001 	ldrsb.w	ip, [r6, #1]
 80005a8:	7861      	ldrb	r1, [r4, #1]
 80005aa:	1c53      	adds	r3, r2, #1
 80005ac:	4283      	cmp	r3, r0
 80005ae:	bfa8      	it	ge
 80005b0:	458c      	cmpge	ip, r1
 80005b2:	bfac      	ite	ge
 80005b4:	2301      	movge	r3, #1
 80005b6:	2300      	movlt	r3, #0
 80005b8:	eb00 0e07 	add.w	lr, r0, r7
 80005bc:	4572      	cmp	r2, lr
 80005be:	bfac      	ite	ge
 80005c0:	2300      	movge	r3, #0
 80005c2:	f003 0301 	andlt.w	r3, r3, #1
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0e2      	beq.n	8000590 <disparar+0xb0>
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	459c      	cmp	ip, r3
 80005ce:	dcdf      	bgt.n	8000590 <disparar+0xb0>
								if(getAlien(y,x)->vivo == true){
 80005d0:	78a3      	ldrb	r3, [r4, #2]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d1dc      	bne.n	8000590 <disparar+0xb0>
									getAlien(y,x)->vivo = false;
 80005d6:	2300      	movs	r3, #0
 80005d8:	70a3      	strb	r3, [r4, #2]
									getAlien(y,x)->explosion = true;
 80005da:	2201      	movs	r2, #1
 80005dc:	70e2      	strb	r2, [r4, #3]
									getDisparo()->disparo = false;
 80005de:	70b3      	strb	r3, [r6, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	7072      	strb	r2, [r6, #1]
									getDisparo()->numero_disparos = 0;
 80005e4:	70f3      	strb	r3, [r6, #3]
									getDisparoAliens()->numero_disparos = getDisparoAliens()->numero_disparos - 1;
 80005e6:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	f88b 3003 	strb.w	r3, [fp, #3]
									switch(y){
 80005f0:	f1b8 0f01 	cmp.w	r8, #1
 80005f4:	d0b6      	beq.n	8000564 <disparar+0x84>
 80005f6:	f1b8 0f02 	cmp.w	r8, #2
 80005fa:	d0be      	beq.n	800057a <disparar+0x9a>
 80005fc:	f1b8 0f00 	cmp.w	r8, #0
 8000600:	d0a5      	beq.n	800054e <disparar+0x6e>
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000602:	2301      	movs	r3, #1
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2308      	movs	r3, #8
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2310      	movs	r3, #16
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <disparar+0x180>)
 800060e:	f001 faeb 	bl	8001be8 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 8000612:	792b      	ldrb	r3, [r5, #4]
 8000614:	3b01      	subs	r3, #1
 8000616:	b2db      	uxtb	r3, r3
 8000618:	712b      	strb	r3, [r5, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1bb      	bne.n	8000596 <disparar+0xb6>
							getAlien(y,x)->explosion = false;
 800061e:	70eb      	strb	r3, [r5, #3]
 8000620:	e7b9      	b.n	8000596 <disparar+0xb6>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000622:	f108 0801 	add.w	r8, r8, #1
 8000626:	fa5f f888 	uxtb.w	r8, r8
 800062a:	f1b8 0f03 	cmp.w	r8, #3
 800062e:	d00c      	beq.n	800064a <disparar+0x16a>
				switch(y){
 8000630:	f1b8 0f01 	cmp.w	r8, #1
 8000634:	d089      	beq.n	800054a <disparar+0x6a>
					tamano_alien = TAMANO_ALIEN_BOTTOM;
 8000636:	f1b8 0f02 	cmp.w	r8, #2
 800063a:	bf14      	ite	ne
 800063c:	2708      	movne	r7, #8
 800063e:	270c      	moveq	r7, #12
 8000640:	f109 0923 	add.w	r9, r9, #35	; 0x23
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000644:	f1a9 0423 	sub.w	r4, r9, #35	; 0x23
 8000648:	e7a8      	b.n	800059c <disparar+0xbc>
						}
					}
				}
			}
}
 800064a:	b003      	add	sp, #12
 800064c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000650:	2000099c 	.word	0x2000099c
 8000654:	20000953 	.word	0x20000953
 8000658:	200009a0 	.word	0x200009a0
 800065c:	200009a4 	.word	0x200009a4
 8000660:	08009548 	.word	0x08009548

08000664 <disparoAliens>:


void disparoAliens(){


	if(getDisparoAliens()->numero_disparos != 0){	//Si no hay aliens vivos.
 8000664:	4b39      	ldr	r3, [pc, #228]	; (800074c <disparoAliens+0xe8>)
 8000666:	78db      	ldrb	r3, [r3, #3]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d06e      	beq.n	800074a <disparoAliens+0xe6>
void disparoAliens(){
 800066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066e:	b083      	sub	sp, #12

				if(getDisparoAliens()->disparo == true){
 8000670:	4b36      	ldr	r3, [pc, #216]	; (800074c <disparoAliens+0xe8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d044      	beq.n	8000702 <disparoAliens+0x9e>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000678:	4f35      	ldr	r7, [pc, #212]	; (8000750 <disparoAliens+0xec>)
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 800067a:	4e36      	ldr	r6, [pc, #216]	; (8000754 <disparoAliens+0xf0>)

						if(getAlien(fila, columna)->vivo == true){
 800067c:	4d36      	ldr	r5, [pc, #216]	; (8000758 <disparoAliens+0xf4>)
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 800067e:	f007 fb29 	bl	8007cd4 <rand>
 8000682:	4604      	mov	r4, r0
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 8000684:	f007 fb26 	bl	8007cd4 <rand>
						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000688:	fb87 1204 	smull	r1, r2, r7, r4
 800068c:	eba2 72e4 	sub.w	r2, r2, r4, asr #31
 8000690:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000694:	1aa4      	subs	r4, r4, r2
 8000696:	b2e4      	uxtb	r4, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 8000698:	fb86 2100 	smull	r2, r1, r6, r0
 800069c:	4401      	add	r1, r0
 800069e:	17c2      	asrs	r2, r0, #31
 80006a0:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80006a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80006a8:	1a83      	subs	r3, r0, r2
 80006aa:	b2db      	uxtb	r3, r3
						if(getAlien(fila, columna)->vivo == true){
 80006ac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80006b0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80006b4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80006b8:	440a      	add	r2, r1
 80006ba:	442a      	add	r2, r5
 80006bc:	7892      	ldrb	r2, [r2, #2]
 80006be:	2a01      	cmp	r2, #1
 80006c0:	d1dd      	bne.n	800067e <disparoAliens+0x1a>
							flag = true;
							getDisparoAliens()->disparo = true;
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <disparoAliens+0xe8>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	7091      	strb	r1, [r2, #2]

							getDisparoAliens()->posicion_x = getAlien(fila, columna)->posicion_X + (TAMANO_ALIEN/2);
 80006c8:	4923      	ldr	r1, [pc, #140]	; (8000758 <disparoAliens+0xf4>)
 80006ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006ce:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80006d2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80006d6:	4423      	add	r3, r4
 80006d8:	18c8      	adds	r0, r1, r3
 80006da:	5ccb      	ldrb	r3, [r1, r3]
 80006dc:	3304      	adds	r3, #4
 80006de:	7013      	strb	r3, [r2, #0]
							getDisparoAliens()->posicion_y = getAlien(fila, columna)->posicion_Y + (TAMANO_ALIEN/2);
 80006e0:	7843      	ldrb	r3, [r0, #1]
 80006e2:	3304      	adds	r3, #4
 80006e4:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(getDisparoAliens()->posicion_x, getDisparoAliens()->posicion_y, AlienBombGfx, 2, 4, 1);
 80006e6:	4819      	ldr	r0, [pc, #100]	; (800074c <disparoAliens+0xe8>)
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	2304      	movs	r3, #4
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2302      	movs	r3, #2
 80006f2:	4a1a      	ldr	r2, [pc, #104]	; (800075c <disparoAliens+0xf8>)
 80006f4:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80006f8:	7800      	ldrb	r0, [r0, #0]
 80006fa:	f001 fa75 	bl	8001be8 <SSD1306_DrawBitmap>

	}

}
 80006fe:	b003      	add	sp, #12
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
					getDisparoAliens()->posicion_y = getDisparoAliens()->posicion_y + dificultad.velocidad_disparo_aliens;
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <disparoAliens+0xe8>)
 8000704:	7853      	ldrb	r3, [r2, #1]
 8000706:	4916      	ldr	r1, [pc, #88]	; (8000760 <disparoAliens+0xfc>)
 8000708:	7889      	ldrb	r1, [r1, #2]
 800070a:	440b      	add	r3, r1
 800070c:	b25b      	sxtb	r3, r3
 800070e:	7053      	strb	r3, [r2, #1]
					if( (getDisparoAliens()->posicion_x + 1 >= getPlayer()->posicion_X) &  (getDisparoAliens()->posicion_x + 1 <= getPlayer()->posicion_X + 6) ){
 8000710:	7811      	ldrb	r1, [r2, #0]
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <disparoAliens+0x100>)
 8000714:	7812      	ldrb	r2, [r2, #0]
 8000716:	1c48      	adds	r0, r1, #1
 8000718:	4290      	cmp	r0, r2
 800071a:	db10      	blt.n	800073e <disparoAliens+0xda>
 800071c:	3205      	adds	r2, #5
 800071e:	4291      	cmp	r1, r2
 8000720:	dc0d      	bgt.n	800073e <disparoAliens+0xda>
						getDisparoAliens()->disparo = false;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <disparoAliens+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	709a      	strb	r2, [r3, #2]
						getPlayer()->vidas = getPlayer()->vidas - 1;
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <disparoAliens+0x100>)
 800072a:	7893      	ldrb	r3, [r2, #2]
 800072c:	3b01      	subs	r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	7093      	strb	r3, [r2, #2]
						if(getPlayer()->vidas == 0){
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1d7      	bne.n	80006e6 <disparoAliens+0x82>
							getPlayer()->vivo = false;
 8000736:	4613      	mov	r3, r2
 8000738:	2200      	movs	r2, #0
 800073a:	705a      	strb	r2, [r3, #1]
 800073c:	e7d3      	b.n	80006e6 <disparoAliens+0x82>
					else if(getDisparoAliens()->posicion_y >= 60){
 800073e:	2b3b      	cmp	r3, #59	; 0x3b
 8000740:	ddd1      	ble.n	80006e6 <disparoAliens+0x82>
						getDisparoAliens()->disparo = false;
 8000742:	4b02      	ldr	r3, [pc, #8]	; (800074c <disparoAliens+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	709a      	strb	r2, [r3, #2]
 8000748:	e7cd      	b.n	80006e6 <disparoAliens+0x82>
 800074a:	4770      	bx	lr
 800074c:	200009a0 	.word	0x200009a0
 8000750:	55555556 	.word	0x55555556
 8000754:	92492493 	.word	0x92492493
 8000758:	20000930 	.word	0x20000930
 800075c:	080094e4 	.word	0x080094e4
 8000760:	200009ac 	.word	0x200009ac
 8000764:	200009a4 	.word	0x200009a4

08000768 <plotBases>:


void plotBases(){
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	b082      	sub	sp, #8

	SSD1306_DrawBitmap(16, 45, BaseGfx, 16, 8, 1);
 800076c:	4c0e      	ldr	r4, [pc, #56]	; (80007a8 <plotBases+0x40>)
 800076e:	2601      	movs	r6, #1
 8000770:	9601      	str	r6, [sp, #4]
 8000772:	2508      	movs	r5, #8
 8000774:	9500      	str	r5, [sp, #0]
 8000776:	2310      	movs	r3, #16
 8000778:	4622      	mov	r2, r4
 800077a:	212d      	movs	r1, #45	; 0x2d
 800077c:	4618      	mov	r0, r3
 800077e:	f001 fa33 	bl	8001be8 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(56, 45, BaseGfx, 16, 8, 1);
 8000782:	9601      	str	r6, [sp, #4]
 8000784:	9500      	str	r5, [sp, #0]
 8000786:	2310      	movs	r3, #16
 8000788:	4622      	mov	r2, r4
 800078a:	212d      	movs	r1, #45	; 0x2d
 800078c:	2038      	movs	r0, #56	; 0x38
 800078e:	f001 fa2b 	bl	8001be8 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(96, 45, BaseGfx, 16, 8, 1);
 8000792:	9601      	str	r6, [sp, #4]
 8000794:	9500      	str	r5, [sp, #0]
 8000796:	2310      	movs	r3, #16
 8000798:	4622      	mov	r2, r4
 800079a:	212d      	movs	r1, #45	; 0x2d
 800079c:	2060      	movs	r0, #96	; 0x60
 800079e:	f001 fa23 	bl	8001be8 <SSD1306_DrawBitmap>

}
 80007a2:	b002      	add	sp, #8
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	bf00      	nop
 80007a8:	080094e8 	.word	0x080094e8

080007ac <AumentoNivel>:

void AumentoNivel(){

	//Incremento de la dificultad (Aumento de la velocidad de los aliens y la velocidad de disparo)
	//Se aumenta la dificultad.
	getDificultad()->velocidad_horizontal = 6;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <AumentoNivel+0x20>)
 80007ae:	2206      	movs	r2, #6
 80007b0:	701a      	strb	r2, [r3, #0]
	getDificultad()->velocidad_bajada = 2;
 80007b2:	2202      	movs	r2, #2
 80007b4:	705a      	strb	r2, [r3, #1]
	getDificultad()->velocidad_disparo_aliens = 3;
 80007b6:	2203      	movs	r2, #3
 80007b8:	709a      	strb	r2, [r3, #2]


	//Se Reinicializa el Player.
	getPlayer()->posicion_X = 64;
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <AumentoNivel+0x24>)
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	701a      	strb	r2, [r3, #0]
	getPlayer()->vivo = true;
 80007c0:	2201      	movs	r2, #1
 80007c2:	705a      	strb	r2, [r3, #1]
	getPlayer()->nivel = getPlayer()->nivel + 1;
 80007c4:	799a      	ldrb	r2, [r3, #6]
 80007c6:	3201      	adds	r2, #1
 80007c8:	719a      	strb	r2, [r3, #6]

}
 80007ca:	4770      	bx	lr
 80007cc:	200009ac 	.word	0x200009ac
 80007d0:	200009a4 	.word	0x200009a4

080007d4 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 80007d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007d8:	b083      	sub	sp, #12

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80007da:	f006 f9c7 	bl	8006b6c <xTaskGetTickCount>
 80007de:	9000      	str	r0, [sp, #0]

  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  HAL_ADC_Start(&hadc1);
 80007e0:	4d2c      	ldr	r5, [pc, #176]	; (8000894 <entryJoystick+0xc0>)
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 80007e2:	4e2d      	ldr	r6, [pc, #180]	; (8000898 <entryJoystick+0xc4>)
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007e4:	4f2d      	ldr	r7, [pc, #180]	; (800089c <entryJoystick+0xc8>)
 80007e6:	e01f      	b.n	8000828 <entryJoystick+0x54>
 80007e8:	2302      	movs	r3, #2
 80007ea:	e045      	b.n	8000878 <entryJoystick+0xa4>
 80007ec:	2401      	movs	r4, #1
		  joystick.y_value = abajo;
 80007ee:	f88d 4005 	strb.w	r4, [sp, #5]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 80007f2:	2104      	movs	r1, #4
 80007f4:	4630      	mov	r0, r6
 80007f6:	f002 fcc3 	bl	8003180 <HAL_GPIO_ReadPin>
 80007fa:	fab0 f080 	clz	r0, r0
 80007fe:	0940      	lsrs	r0, r0, #5
 8000800:	f88d 0006 	strb.w	r0, [sp, #6]
	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000804:	2300      	movs	r3, #0
 8000806:	461a      	mov	r2, r3
 8000808:	a901      	add	r1, sp, #4
 800080a:	4825      	ldr	r0, [pc, #148]	; (80008a0 <entryJoystick+0xcc>)
 800080c:	6800      	ldr	r0, [r0, #0]
 800080e:	f005 f809 	bl	8005824 <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000812:	b128      	cbz	r0, 8000820 <entryJoystick+0x4c>
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081a:	4638      	mov	r0, r7
 800081c:	f002 fcb6 	bl	800318c <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000820:	2132      	movs	r1, #50	; 0x32
 8000822:	4668      	mov	r0, sp
 8000824:	f006 fac4 	bl	8006db0 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 8000828:	4628      	mov	r0, r5
 800082a:	f002 f9d7 	bl	8002bdc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 800082e:	210a      	movs	r1, #10
 8000830:	4628      	mov	r0, r5
 8000832:	f002 f81d 	bl	8002870 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000836:	4628      	mov	r0, r5
 8000838:	f002 f8dc 	bl	80029f4 <HAL_ADC_GetValue>
 800083c:	fa1f f980 	uxth.w	r9, r0
	  HAL_ADC_Stop(&hadc1);
 8000840:	4628      	mov	r0, r5
 8000842:	f002 faf3 	bl	8002e2c <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 8000846:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80008a4 <entryJoystick+0xd0>
 800084a:	4640      	mov	r0, r8
 800084c:	f002 f9c6 	bl	8002bdc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000850:	210a      	movs	r1, #10
 8000852:	4640      	mov	r0, r8
 8000854:	f002 f80c 	bl	8002870 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000858:	4640      	mov	r0, r8
 800085a:	f002 f8cb 	bl	80029f4 <HAL_ADC_GetValue>
 800085e:	b284      	uxth	r4, r0
	  HAL_ADC_Stop(&hadc2);
 8000860:	4640      	mov	r0, r8
 8000862:	f002 fae3 	bl	8002e2c <HAL_ADC_Stop>
	  if(val_x > 2200){
 8000866:	f640 0398 	movw	r3, #2200	; 0x898
 800086a:	4599      	cmp	r9, r3
 800086c:	d8bc      	bhi.n	80007e8 <entryJoystick+0x14>
	  else if(val_x < 1600){
 800086e:	f5b9 6fc8 	cmp.w	r9, #1600	; 0x640
 8000872:	bf2c      	ite	cs
 8000874:	2304      	movcs	r3, #4
 8000876:	2303      	movcc	r3, #3
		  joystick.x_value = derecha;
 8000878:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > 2200){
 800087c:	f640 0398 	movw	r3, #2200	; 0x898
 8000880:	429c      	cmp	r4, r3
 8000882:	d8b3      	bhi.n	80007ec <entryJoystick+0x18>
	  else if(val_y < 1600){
 8000884:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 8000888:	bf34      	ite	cc
 800088a:	2400      	movcc	r4, #0
 800088c:	2401      	movcs	r4, #1
 800088e:	00a4      	lsls	r4, r4, #2
 8000890:	e7ad      	b.n	80007ee <entryJoystick+0x1a>
 8000892:	bf00      	nop
 8000894:	200009cc 	.word	0x200009cc
 8000898:	40010800 	.word	0x40010800
 800089c:	40011000 	.word	0x40011000
 80008a0:	20000b80 	.word	0x20000b80
 80008a4:	200009fc 	.word	0x200009fc

080008a8 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 80008a8:	b530      	push	{r4, r5, lr}
 80008aa:	b083      	sub	sp, #12

	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 80008ac:	f000 fd4a 	bl	8001344 <menuInit>


  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 80008b0:	4d11      	ldr	r5, [pc, #68]	; (80008f8 <entryPantalla+0x50>)

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 80008b2:	4c12      	ldr	r4, [pc, #72]	; (80008fc <entryPantalla+0x54>)
 80008b4:	e005      	b.n	80008c2 <entryPantalla+0x1a>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4620      	mov	r0, r4
 80008be:	f002 fc65 	bl	800318c <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	2200      	movs	r2, #0
 80008c8:	a901      	add	r1, sp, #4
 80008ca:	6828      	ldr	r0, [r5, #0]
 80008cc:	f004 fffa 	bl	80058c4 <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 80008d0:	2800      	cmp	r0, #0
 80008d2:	d1f0      	bne.n	80008b6 <entryPantalla+0xe>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008da:	4620      	mov	r0, r4
 80008dc:	f002 fc56 	bl	800318c <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 80008e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80008e4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80008e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80008ec:	f000 fd82 	bl	80013f4 <menuActualizar>
		actualizarPantalla();
 80008f0:	f7ff fc3e 	bl	8000170 <actualizarPantalla>
 80008f4:	e7e5      	b.n	80008c2 <entryPantalla+0x1a>
 80008f6:	bf00      	nop
 80008f8:	20000b80 	.word	0x20000b80
 80008fc:	40011000 	.word	0x40011000

08000900 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );

	uint8_t permutaciones;

	//Se leen los datos desde la memoria.
	memoriaInit();
 8000902:	f000 fbe3 	bl	80010cc <memoriaInit>

  /* Infinite loop */
  for(;;)
  {
	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 8000906:	4e0a      	ldr	r6, [pc, #40]	; (8000930 <entryMemoria+0x30>)
 8000908:	f04f 35ff 	mov.w	r5, #4294967295

				permutaciones = Ordenamiento_Puntajes();
				//writeNuevosPuntajes(permutaciones);

	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 800090c:	4f09      	ldr	r7, [pc, #36]	; (8000934 <entryMemoria+0x34>)
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 800090e:	2400      	movs	r4, #0
 8000910:	462b      	mov	r3, r5
 8000912:	4622      	mov	r2, r4
 8000914:	2101      	movs	r1, #1
 8000916:	6830      	ldr	r0, [r6, #0]
 8000918:	f004 fd9c 	bl	8005454 <osEventFlagsWait>
	      if (flags == NOTIFICATION_VALUE)
 800091c:	2801      	cmp	r0, #1
 800091e:	d1f7      	bne.n	8000910 <entryMemoria+0x10>
				permutaciones = Ordenamiento_Puntajes();
 8000920:	f000 fca2 	bl	8001268 <Ordenamiento_Puntajes>
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 8000924:	2102      	movs	r1, #2
 8000926:	6838      	ldr	r0, [r7, #0]
 8000928:	f004 fd56 	bl	80053d8 <osEventFlagsSet>
 800092c:	e7ef      	b.n	800090e <entryMemoria+0xe>
 800092e:	bf00      	nop
 8000930:	20000b74 	.word	0x20000b74
 8000934:	20000b78 	.word	0x20000b78

08000938 <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 8000938:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN entrySonido */

  /* Infinite loop */
  for(;;)
  {
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 800093a:	4c20      	ldr	r4, [pc, #128]	; (80009bc <entrySonido+0x84>)
 800093c:	4e20      	ldr	r6, [pc, #128]	; (80009c0 <entrySonido+0x88>)

	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.

	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800093e:	4d21      	ldr	r5, [pc, #132]	; (80009c4 <entrySonido+0x8c>)
 8000940:	e005      	b.n	800094e <entrySonido+0x16>
	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000942:	2200      	movs	r2, #0
 8000944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000948:	4628      	mov	r0, r5
 800094a:	f002 fc1f 	bl	800318c <HAL_GPIO_WritePin>
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	2200      	movs	r2, #0
 8000954:	4621      	mov	r1, r4
 8000956:	6830      	ldr	r0, [r6, #0]
 8000958:	f004 ffb4 	bl	80058c4 <osMessageQueueGet>
	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 800095c:	2800      	cmp	r0, #0
 800095e:	d1f0      	bne.n	8000942 <entrySonido+0xa>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	4628      	mov	r0, r5
 8000968:	f002 fc10 	bl	800318c <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800096c:	2100      	movs	r1, #0
 800096e:	4816      	ldr	r0, [pc, #88]	; (80009c8 <entrySonido+0x90>)
 8000970:	f004 fbe0 	bl	8005134 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <entrySonido+0x94>)
 8000976:	f004 f88b 	bl	8004a90 <HAL_TIM_Base_Stop_IT>

			//musica = musica_;

		  switch(musica){
 800097a:	7823      	ldrb	r3, [r4, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d018      	beq.n	80009b2 <entrySonido+0x7a>
 8000980:	2b02      	cmp	r3, #2
 8000982:	d008      	beq.n	8000996 <entrySonido+0x5e>
 8000984:	b18b      	cbz	r3, 80009aa <entrySonido+0x72>
		  default:
			  break;

		  }

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000986:	2100      	movs	r1, #0
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <entrySonido+0x90>)
 800098a:	f004 fb6f 	bl	800506c <HAL_TIM_PWM_Start>
		  HAL_TIM_Base_Start_IT(&htim3);
 800098e:	480f      	ldr	r0, [pc, #60]	; (80009cc <entrySonido+0x94>)
 8000990:	f004 f84a 	bl	8004a28 <HAL_TIM_Base_Start_IT>
 8000994:	e7db      	b.n	800094e <entrySonido+0x16>
				tonos = f622;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <entrySonido+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
				conteo_musica = VECES_622HZ;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <entrySonido+0x9c>)
 800099e:	22aa      	movs	r2, #170	; 0xaa
 80009a0:	701a      	strb	r2, [r3, #0]
				puntero_musica = tono_622hz;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <entrySonido+0xa0>)
 80009a4:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <entrySonido+0xa4>)
 80009a6:	601a      	str	r2, [r3, #0]
			  break;
 80009a8:	e7ed      	b.n	8000986 <entrySonido+0x4e>
			  puntero_musica = audio_disparo;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <entrySonido+0xa0>)
 80009ac:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <entrySonido+0xa8>)
 80009ae:	601a      	str	r2, [r3, #0]
			  break;
 80009b0:	e7e9      	b.n	8000986 <entrySonido+0x4e>
			  puntero_musica = audio_explosion;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <entrySonido+0xa0>)
 80009b4:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <entrySonido+0xac>)
 80009b6:	601a      	str	r2, [r3, #0]
			  break;
 80009b8:	e7e5      	b.n	8000986 <entrySonido+0x4e>
 80009ba:	bf00      	nop
 80009bc:	20000b68 	.word	0x20000b68
 80009c0:	20000b84 	.word	0x20000b84
 80009c4:	40011000 	.word	0x40011000
 80009c8:	20000ad8 	.word	0x20000ad8
 80009cc:	20000b20 	.word	0x20000b20
 80009d0:	20000b88 	.word	0x20000b88
 80009d4:	200009c8 	.word	0x200009c8
 80009d8:	20000b7c 	.word	0x20000b7c
 80009dc:	20000540 	.word	0x20000540
 80009e0:	20000024 	.word	0x20000024
 80009e4:	200002a0 	.word	0x200002a0

080009e8 <SystemClock_Config>:
{
 80009e8:	b500      	push	{lr}
 80009ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ec:	2300      	movs	r3, #0
 80009ee:	930c      	str	r3, [sp, #48]	; 0x30
 80009f0:	930d      	str	r3, [sp, #52]	; 0x34
 80009f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80009f4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f6:	9305      	str	r3, [sp, #20]
 80009f8:	9306      	str	r3, [sp, #24]
 80009fa:	9307      	str	r3, [sp, #28]
 80009fc:	9308      	str	r3, [sp, #32]
 80009fe:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	9302      	str	r3, [sp, #8]
 8000a04:	9303      	str	r3, [sp, #12]
 8000a06:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a08:	2201      	movs	r2, #1
 8000a0a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a10:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a14:	2202      	movs	r2, #2
 8000a16:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a18:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a1e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	a80a      	add	r0, sp, #40	; 0x28
 8000a22:	f002 ff75 	bl	8003910 <HAL_RCC_OscConfig>
 8000a26:	b9c8      	cbnz	r0, 8000a5c <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a28:	230f      	movs	r3, #15
 8000a2a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a38:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3c:	a805      	add	r0, sp, #20
 8000a3e:	f003 f9a7 	bl	8003d90 <HAL_RCC_ClockConfig>
 8000a42:	b968      	cbnz	r0, 8000a60 <SystemClock_Config+0x78>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a44:	2302      	movs	r3, #2
 8000a46:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a4c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4e:	a801      	add	r0, sp, #4
 8000a50:	f003 fa94 	bl	8003f7c <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	b930      	cbnz	r0, 8000a64 <SystemClock_Config+0x7c>
}
 8000a56:	b015      	add	sp, #84	; 0x54
 8000a58:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <SystemClock_Config+0x76>
 8000a60:	b672      	cpsid	i
 8000a62:	e7fe      	b.n	8000a62 <SystemClock_Config+0x7a>
 8000a64:	b672      	cpsid	i
 8000a66:	e7fe      	b.n	8000a66 <SystemClock_Config+0x7e>

08000a68 <main>:
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8000a6c:	f001 fec8 	bl	8002800 <HAL_Init>
  SystemClock_Config();
 8000a70:	f7ff ffba 	bl	80009e8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	2400      	movs	r4, #0
 8000a76:	940b      	str	r4, [sp, #44]	; 0x2c
 8000a78:	940c      	str	r4, [sp, #48]	; 0x30
 8000a7a:	940d      	str	r4, [sp, #52]	; 0x34
 8000a7c:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4ba8      	ldr	r3, [pc, #672]	; (8000d20 <main+0x2b8>)
 8000a80:	699a      	ldr	r2, [r3, #24]
 8000a82:	f042 0210 	orr.w	r2, r2, #16
 8000a86:	619a      	str	r2, [r3, #24]
 8000a88:	699a      	ldr	r2, [r3, #24]
 8000a8a:	f002 0210 	and.w	r2, r2, #16
 8000a8e:	9201      	str	r2, [sp, #4]
 8000a90:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	699a      	ldr	r2, [r3, #24]
 8000a94:	f042 0220 	orr.w	r2, r2, #32
 8000a98:	619a      	str	r2, [r3, #24]
 8000a9a:	699a      	ldr	r2, [r3, #24]
 8000a9c:	f002 0220 	and.w	r2, r2, #32
 8000aa0:	9202      	str	r2, [sp, #8]
 8000aa2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa4:	699a      	ldr	r2, [r3, #24]
 8000aa6:	f042 0204 	orr.w	r2, r2, #4
 8000aaa:	619a      	str	r2, [r3, #24]
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	f002 0204 	and.w	r2, r2, #4
 8000ab2:	9203      	str	r2, [sp, #12]
 8000ab4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	699a      	ldr	r2, [r3, #24]
 8000ab8:	f042 0208 	orr.w	r2, r2, #8
 8000abc:	619a      	str	r2, [r3, #24]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0308 	and.w	r3, r3, #8
 8000ac4:	9304      	str	r3, [sp, #16]
 8000ac6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ac8:	f8df 9258 	ldr.w	r9, [pc, #600]	; 8000d24 <main+0x2bc>
 8000acc:	4622      	mov	r2, r4
 8000ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad2:	4648      	mov	r0, r9
 8000ad4:	f002 fb5a 	bl	800318c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ad8:	f8df 824c 	ldr.w	r8, [pc, #588]	; 8000d28 <main+0x2c0>
 8000adc:	4622      	mov	r2, r4
 8000ade:	f24c 0120 	movw	r1, #49184	; 0xc020
 8000ae2:	4640      	mov	r0, r8
 8000ae4:	f002 fb52 	bl	800318c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000ae8:	4e90      	ldr	r6, [pc, #576]	; (8000d2c <main+0x2c4>)
 8000aea:	4622      	mov	r2, r4
 8000aec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000af0:	4630      	mov	r0, r6
 8000af2:	f002 fb4b 	bl	800318c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afa:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2501      	movs	r5, #1
 8000afe:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2702      	movs	r7, #2
 8000b04:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	a90b      	add	r1, sp, #44	; 0x2c
 8000b08:	4648      	mov	r0, r9
 8000b0a:	f002 f9ff 	bl	8002f0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b14:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	a90b      	add	r1, sp, #44	; 0x2c
 8000b18:	4630      	mov	r0, r6
 8000b1a:	f002 f9f7 	bl	8002f0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8000b1e:	f24c 0320 	movw	r3, #49184	; 0xc020
 8000b22:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	a90b      	add	r1, sp, #44	; 0x2c
 8000b2c:	4640      	mov	r0, r8
 8000b2e:	f002 f9ed 	bl	8002f0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000b32:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b36:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	a90b      	add	r1, sp, #44	; 0x2c
 8000b40:	4630      	mov	r0, r6
 8000b42:	f002 f9e3 	bl	8002f0c <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	940b      	str	r4, [sp, #44]	; 0x2c
 8000b48:	940c      	str	r4, [sp, #48]	; 0x30
 8000b4a:	940d      	str	r4, [sp, #52]	; 0x34
  hadc1.Instance = ADC1;
 8000b4c:	4878      	ldr	r0, [pc, #480]	; (8000d30 <main+0x2c8>)
 8000b4e:	4b79      	ldr	r3, [pc, #484]	; (8000d34 <main+0x2cc>)
 8000b50:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b52:	6084      	str	r4, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b54:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b56:	7504      	strb	r4, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b58:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000b5c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b5e:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b60:	6105      	str	r5, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b62:	f002 f8df 	bl	8002d24 <HAL_ADC_Init>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	f040 8139 	bne.w	8000dde <main+0x376>
  sConfig.Channel = ADC_CHANNEL_3;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b74:	2300      	movs	r3, #0
 8000b76:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b78:	a90b      	add	r1, sp, #44	; 0x2c
 8000b7a:	486d      	ldr	r0, [pc, #436]	; (8000d30 <main+0x2c8>)
 8000b7c:	f001 ff3e 	bl	80029fc <HAL_ADC_ConfigChannel>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	f040 812e 	bne.w	8000de2 <main+0x37a>
  hi2c1.Instance = I2C1;
 8000b86:	486c      	ldr	r0, [pc, #432]	; (8000d38 <main+0x2d0>)
 8000b88:	4b6c      	ldr	r3, [pc, #432]	; (8000d3c <main+0x2d4>)
 8000b8a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b8c:	4b6c      	ldr	r3, [pc, #432]	; (8000d40 <main+0x2d8>)
 8000b8e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b90:	2300      	movs	r3, #0
 8000b92:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b94:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b9a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ba2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba4:	f002 fc18 	bl	80033d8 <HAL_I2C_Init>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	f040 811c 	bne.w	8000de6 <main+0x37e>
  hspi1.Instance = SPI1;
 8000bae:	4865      	ldr	r0, [pc, #404]	; (8000d44 <main+0x2dc>)
 8000bb0:	4b65      	ldr	r3, [pc, #404]	; (8000d48 <main+0x2e0>)
 8000bb2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bb4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000bb8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbe:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd8:	f003 fb83 	bl	80042e2 <HAL_SPI_Init>
 8000bdc:	2800      	cmp	r0, #0
 8000bde:	f040 8104 	bne.w	8000dea <main+0x382>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	2300      	movs	r3, #0
 8000be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000be6:	930c      	str	r3, [sp, #48]	; 0x30
 8000be8:	930d      	str	r3, [sp, #52]	; 0x34
  hadc2.Instance = ADC2;
 8000bea:	4858      	ldr	r0, [pc, #352]	; (8000d4c <main+0x2e4>)
 8000bec:	4a58      	ldr	r2, [pc, #352]	; (8000d50 <main+0x2e8>)
 8000bee:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf0:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bf2:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bfa:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfc:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c02:	f002 f88f 	bl	8002d24 <HAL_ADC_Init>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	f040 80f1 	bne.w	8000dee <main+0x386>
  sConfig.Channel = ADC_CHANNEL_1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c10:	930c      	str	r3, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c12:	2300      	movs	r3, #0
 8000c14:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c16:	a90b      	add	r1, sp, #44	; 0x2c
 8000c18:	484c      	ldr	r0, [pc, #304]	; (8000d4c <main+0x2e4>)
 8000c1a:	f001 feef 	bl	80029fc <HAL_ADC_ConfigChannel>
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	f040 80e7 	bne.w	8000df2 <main+0x38a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c24:	2300      	movs	r3, #0
 8000c26:	9307      	str	r3, [sp, #28]
 8000c28:	9308      	str	r3, [sp, #32]
 8000c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c2c:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2e:	9305      	str	r3, [sp, #20]
 8000c30:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8000c34:	930c      	str	r3, [sp, #48]	; 0x30
 8000c36:	930d      	str	r3, [sp, #52]	; 0x34
 8000c38:	930e      	str	r3, [sp, #56]	; 0x38
 8000c3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000c3c:	9310      	str	r3, [sp, #64]	; 0x40
 8000c3e:	9311      	str	r3, [sp, #68]	; 0x44
  htim2.Instance = TIM2;
 8000c40:	4844      	ldr	r0, [pc, #272]	; (8000d54 <main+0x2ec>)
 8000c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c46:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1-1;
 8000c48:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 255-1;
 8000c4c:	22fe      	movs	r2, #254	; 0xfe
 8000c4e:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c50:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c52:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c54:	f004 f846 	bl	8004ce4 <HAL_TIM_Base_Init>
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	f040 80cc 	bne.w	8000df6 <main+0x38e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c64:	a907      	add	r1, sp, #28
 8000c66:	483b      	ldr	r0, [pc, #236]	; (8000d54 <main+0x2ec>)
 8000c68:	f004 f93c 	bl	8004ee4 <HAL_TIM_ConfigClockSource>
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	f040 80c4 	bne.w	8000dfa <main+0x392>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c72:	4838      	ldr	r0, [pc, #224]	; (8000d54 <main+0x2ec>)
 8000c74:	f004 f862 	bl	8004d3c <HAL_TIM_PWM_Init>
 8000c78:	2800      	cmp	r0, #0
 8000c7a:	f040 80c0 	bne.w	8000dfe <main+0x396>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c84:	a905      	add	r1, sp, #20
 8000c86:	4833      	ldr	r0, [pc, #204]	; (8000d54 <main+0x2ec>)
 8000c88:	f004 fa96 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8c:	2800      	cmp	r0, #0
 8000c8e:	f040 80b8 	bne.w	8000e02 <main+0x39a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c92:	2360      	movs	r3, #96	; 0x60
 8000c94:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000c96:	2200      	movs	r2, #0
 8000c98:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9a:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9c:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	a90b      	add	r1, sp, #44	; 0x2c
 8000ca0:	482c      	ldr	r0, [pc, #176]	; (8000d54 <main+0x2ec>)
 8000ca2:	f004 f8a5 	bl	8004df0 <HAL_TIM_PWM_ConfigChannel>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	f040 80ad 	bne.w	8000e06 <main+0x39e>
  HAL_TIM_MspPostInit(&htim2);
 8000cac:	4829      	ldr	r0, [pc, #164]	; (8000d54 <main+0x2ec>)
 8000cae:	f001 fc93 	bl	80025d8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cb6:	930c      	str	r3, [sp, #48]	; 0x30
 8000cb8:	930d      	str	r3, [sp, #52]	; 0x34
 8000cba:	930e      	str	r3, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	9307      	str	r3, [sp, #28]
 8000cbe:	9308      	str	r3, [sp, #32]
  htim3.Instance = TIM3;
 8000cc0:	4825      	ldr	r0, [pc, #148]	; (8000d58 <main+0x2f0>)
 8000cc2:	4a26      	ldr	r2, [pc, #152]	; (8000d5c <main+0x2f4>)
 8000cc4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 8000cc6:	2247      	movs	r2, #71	; 0x47
 8000cc8:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 125-1;
 8000ccc:	227c      	movs	r2, #124	; 0x7c
 8000cce:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cd4:	f004 f806 	bl	8004ce4 <HAL_TIM_Base_Init>
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	f040 8096 	bne.w	8000e0a <main+0x3a2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce4:	a90b      	add	r1, sp, #44	; 0x2c
 8000ce6:	481c      	ldr	r0, [pc, #112]	; (8000d58 <main+0x2f0>)
 8000ce8:	f004 f8fc 	bl	8004ee4 <HAL_TIM_ConfigClockSource>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	f040 808e 	bne.w	8000e0e <main+0x3a6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf6:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf8:	a907      	add	r1, sp, #28
 8000cfa:	4817      	ldr	r0, [pc, #92]	; (8000d58 <main+0x2f0>)
 8000cfc:	f004 fa5c 	bl	80051b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	f040 8086 	bne.w	8000e12 <main+0x3aa>
  osKernelInitialize();
 8000d06:	f004 fa8d 	bl	8005224 <osKernelInitialize>
  myMutexPuntajeHandle = osMutexNew(&myMutexPuntaje_attributes);
 8000d0a:	4815      	ldr	r0, [pc, #84]	; (8000d60 <main+0x2f8>)
 8000d0c:	f004 fbec 	bl	80054e8 <osMutexNew>
 8000d10:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <main+0x2fc>)
 8000d12:	6018      	str	r0, [r3, #0]
  mySem01Handle = osSemaphoreNew(1, 1, &mySem01_attributes);
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <main+0x300>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	4608      	mov	r0, r1
 8000d1a:	f004 fcb3 	bl	8005684 <osSemaphoreNew>
 8000d1e:	e025      	b.n	8000d6c <main+0x304>
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	40010800 	.word	0x40010800
 8000d30:	200009cc 	.word	0x200009cc
 8000d34:	40012400 	.word	0x40012400
 8000d38:	20000a2c 	.word	0x20000a2c
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	00061a80 	.word	0x00061a80
 8000d44:	20000a80 	.word	0x20000a80
 8000d48:	40013000 	.word	0x40013000
 8000d4c:	200009fc 	.word	0x200009fc
 8000d50:	40012800 	.word	0x40012800
 8000d54:	20000ad8 	.word	0x20000ad8
 8000d58:	20000b20 	.word	0x20000b20
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	08009668 	.word	0x08009668
 8000d64:	20000b6c 	.word	0x20000b6c
 8000d68:	08009678 	.word	0x08009678
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <main+0x3b0>)
 8000d6e:	6018      	str	r0, [r3, #0]
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000d70:	4a2a      	ldr	r2, [pc, #168]	; (8000e1c <main+0x3b4>)
 8000d72:	2103      	movs	r1, #3
 8000d74:	200a      	movs	r0, #10
 8000d76:	f004 fcf9 	bl	800576c <osMessageQueueNew>
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <main+0x3b8>)
 8000d7c:	6018      	str	r0, [r3, #0]
  queueSonidoMenuHandle = osMessageQueueNew (10, sizeof(musica_t), &queueSonidoMenu_attributes);
 8000d7e:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <main+0x3bc>)
 8000d80:	2101      	movs	r1, #1
 8000d82:	200a      	movs	r0, #10
 8000d84:	f004 fcf2 	bl	800576c <osMessageQueueNew>
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <main+0x3c0>)
 8000d8a:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <main+0x3c4>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4827      	ldr	r0, [pc, #156]	; (8000e30 <main+0x3c8>)
 8000d92:	f004 fa93 	bl	80052bc <osThreadNew>
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <main+0x3cc>)
 8000d98:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000d9a:	4a27      	ldr	r2, [pc, #156]	; (8000e38 <main+0x3d0>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4827      	ldr	r0, [pc, #156]	; (8000e3c <main+0x3d4>)
 8000da0:	f004 fa8c 	bl	80052bc <osThreadNew>
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <main+0x3d8>)
 8000da6:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <main+0x3dc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4826      	ldr	r0, [pc, #152]	; (8000e48 <main+0x3e0>)
 8000dae:	f004 fa85 	bl	80052bc <osThreadNew>
 8000db2:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <main+0x3e4>)
 8000db4:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 8000db6:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <main+0x3e8>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	4826      	ldr	r0, [pc, #152]	; (8000e54 <main+0x3ec>)
 8000dbc:	f004 fa7e 	bl	80052bc <osThreadNew>
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <main+0x3f0>)
 8000dc2:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f004 fadf 	bl	8005388 <osEventFlagsNew>
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <main+0x3f4>)
 8000dcc:	6018      	str	r0, [r3, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f004 fada 	bl	8005388 <osEventFlagsNew>
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <main+0x3f8>)
 8000dd6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000dd8:	f004 fa48 	bl	800526c <osKernelStart>
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x374>
 8000dde:	b672      	cpsid	i
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <main+0x378>
 8000de2:	b672      	cpsid	i
 8000de4:	e7fe      	b.n	8000de4 <main+0x37c>
 8000de6:	b672      	cpsid	i
 8000de8:	e7fe      	b.n	8000de8 <main+0x380>
 8000dea:	b672      	cpsid	i
 8000dec:	e7fe      	b.n	8000dec <main+0x384>
 8000dee:	b672      	cpsid	i
 8000df0:	e7fe      	b.n	8000df0 <main+0x388>
 8000df2:	b672      	cpsid	i
 8000df4:	e7fe      	b.n	8000df4 <main+0x38c>
 8000df6:	b672      	cpsid	i
 8000df8:	e7fe      	b.n	8000df8 <main+0x390>
 8000dfa:	b672      	cpsid	i
 8000dfc:	e7fe      	b.n	8000dfc <main+0x394>
 8000dfe:	b672      	cpsid	i
 8000e00:	e7fe      	b.n	8000e00 <main+0x398>
 8000e02:	b672      	cpsid	i
 8000e04:	e7fe      	b.n	8000e04 <main+0x39c>
 8000e06:	b672      	cpsid	i
 8000e08:	e7fe      	b.n	8000e08 <main+0x3a0>
 8000e0a:	b672      	cpsid	i
 8000e0c:	e7fe      	b.n	8000e0c <main+0x3a4>
 8000e0e:	b672      	cpsid	i
 8000e10:	e7fe      	b.n	8000e10 <main+0x3a8>
 8000e12:	b672      	cpsid	i
 8000e14:	e7fe      	b.n	8000e14 <main+0x3ac>
 8000e16:	bf00      	nop
 8000e18:	20000b70 	.word	0x20000b70
 8000e1c:	08009688 	.word	0x08009688
 8000e20:	20000b80 	.word	0x20000b80
 8000e24:	080096a0 	.word	0x080096a0
 8000e28:	20000b84 	.word	0x20000b84
 8000e2c:	080095d8 	.word	0x080095d8
 8000e30:	080007d5 	.word	0x080007d5
 8000e34:	200009b8 	.word	0x200009b8
 8000e38:	08009620 	.word	0x08009620
 8000e3c:	080008a9 	.word	0x080008a9
 8000e40:	200009c0 	.word	0x200009c0
 8000e44:	080095fc 	.word	0x080095fc
 8000e48:	08000901 	.word	0x08000901
 8000e4c:	200009bc 	.word	0x200009bc
 8000e50:	08009644 	.word	0x08009644
 8000e54:	08000939 	.word	0x08000939
 8000e58:	200009c4 	.word	0x200009c4
 8000e5c:	20000b74 	.word	0x20000b74
 8000e60:	20000b78 	.word	0x20000b78

08000e64 <HAL_TIM_PeriodElapsedCallback>:
{
 8000e64:	b510      	push	{r4, lr}
 8000e66:	4604      	mov	r4, r0
  if (htim->Instance == TIM4) {
 8000e68:	6802      	ldr	r2, [r0, #0]
 8000e6a:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d004      	beq.n	8000e7a <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM3) {
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d003      	beq.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8000e78:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000e7a:	f001 fcd3 	bl	8002824 <HAL_IncTick>
 8000e7e:	e7f7      	b.n	8000e70 <HAL_TIM_PeriodElapsedCallback+0xc>
		TIM2->CCR1 = *puntero_musica >> 1;
 8000e80:	495a      	ldr	r1, [pc, #360]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e82:	680b      	ldr	r3, [r1, #0]
 8000e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e88:	0852      	lsrs	r2, r2, #1
 8000e8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e8e:	6342      	str	r2, [r0, #52]	; 0x34
		puntero_musica++;
 8000e90:	600b      	str	r3, [r1, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e96:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8000e9a:	f002 f97d 	bl	8003198 <HAL_GPIO_TogglePin>
		switch(musica){
 8000e9e:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	f000 808e 	beq.w	8000fc4 <HAL_TIM_PeriodElapsedCallback+0x160>
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d00f      	beq.n	8000ecc <HAL_TIM_PeriodElapsedCallback+0x68>
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e3      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_disparo){
 8000eb0:	4b4e      	ldr	r3, [pc, #312]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b4f      	ldr	r3, [pc, #316]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d1dd      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	484e      	ldr	r0, [pc, #312]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ec0:	f004 f938 	bl	8005134 <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000ec4:	484d      	ldr	r0, [pc, #308]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ec6:	f003 fde3 	bl	8004a90 <HAL_TIM_Base_Stop_IT>
 8000eca:	e7d5      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
								switch(tonos){
 8000ecc:	4b4c      	ldr	r3, [pc, #304]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d02e      	beq.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0xce>
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d048      	beq.n	8000f6a <HAL_TIM_PeriodElapsedCallback+0x106>
 8000ed8:	b17b      	cbz	r3, 8000efa <HAL_TIM_PeriodElapsedCallback+0x96>
									if(puntero_musica == puntero_musica_final_tonos){
 8000eda:	4a44      	ldr	r2, [pc, #272]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000edc:	6811      	ldr	r1, [r2, #0]
 8000ede:	4a49      	ldr	r2, [pc, #292]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d05e      	beq.n	8000fa4 <HAL_TIM_PeriodElapsedCallback+0x140>
									if(conteo_musica == 0){
 8000ee6:	4a48      	ldr	r2, [pc, #288]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d1c4      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
										switch(tonos){
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d8c2      	bhi.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ef2:	e8df f003 	tbb	[pc, r3]
 8000ef6:	280c      	.short	0x280c
 8000ef8:	5f45      	.short	0x5f45
									if(puntero_musica == puntero_musica_final_f622){
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b43      	ldr	r3, [pc, #268]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d00d      	beq.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0xbe>
									if(conteo_musica == 0){
 8000f06:	4b40      	ldr	r3, [pc, #256]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1b4      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_587hz;
 8000f0e:	4b37      	ldr	r3, [pc, #220]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f10:	4a3f      	ldr	r2, [pc, #252]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f12:	601a      	str	r2, [r3, #0]
											tonos = f587;
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_587HZ;
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f1c:	22a0      	movs	r2, #160	; 0xa0
 8000f1e:	701a      	strb	r2, [r3, #0]
											break;
 8000f20:	e7aa      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_622hz;
 8000f22:	4b32      	ldr	r3, [pc, #200]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f24:	4a3b      	ldr	r2, [pc, #236]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f26:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f28:	4a37      	ldr	r2, [pc, #220]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f2a:	7813      	ldrb	r3, [r2, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	7013      	strb	r3, [r2, #0]
 8000f30:	e7e9      	b.n	8000f06 <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f587){
 8000f32:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d00d      	beq.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0xf6>
									if(conteo_musica == 0){
 8000f3e:	4b32      	ldr	r3, [pc, #200]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d198      	bne.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_554hz;
 8000f46:	4b29      	ldr	r3, [pc, #164]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f48:	4a34      	ldr	r2, [pc, #208]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f4a:	601a      	str	r2, [r3, #0]
											tonos = f554;
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_554HZ;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f54:	2296      	movs	r2, #150	; 0x96
 8000f56:	701a      	strb	r2, [r3, #0]
											break;
 8000f58:	e78e      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_587hz;
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f5c:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f5e:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f62:	7813      	ldrb	r3, [r2, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	7013      	strb	r3, [r2, #0]
 8000f68:	e7e9      	b.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0xda>
									if(puntero_musica == puntero_musica_final_f554){
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d00e      	beq.n	8000f94 <HAL_TIM_PeriodElapsedCallback+0x130>
									if(conteo_musica == 0){
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f af7c 	bne.w	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tonos_variables;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f82:	4a28      	ldr	r2, [pc, #160]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000f84:	601a      	str	r2, [r3, #0]
											tonos = variables;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f88:	2203      	movs	r2, #3
 8000f8a:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_TONOS_VARIABLES;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f8e:	220a      	movs	r2, #10
 8000f90:	701a      	strb	r2, [r3, #0]
											break;
 8000f92:	e771      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_554hz;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000f96:	4a21      	ldr	r2, [pc, #132]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000f98:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f9a:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f9c:	7813      	ldrb	r3, [r2, #0]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	7013      	strb	r3, [r2, #0]
 8000fa2:	e7e8      	b.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x112>
											puntero_musica = tonos_variables;
 8000fa4:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fa6:	491f      	ldr	r1, [pc, #124]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000fa8:	6011      	str	r1, [r2, #0]
											conteo_musica--;
 8000faa:	4917      	ldr	r1, [pc, #92]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fac:	780a      	ldrb	r2, [r1, #0]
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	700a      	strb	r2, [r1, #0]
 8000fb2:	e798      	b.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x82>
											HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fb8:	f004 f8bc 	bl	8005134 <HAL_TIM_PWM_Stop>
											HAL_TIM_Base_Stop_IT(&htim3);
 8000fbc:	480f      	ldr	r0, [pc, #60]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000fbe:	f003 fd67 	bl	8004a90 <HAL_TIM_Base_Stop_IT>
											break;
 8000fc2:	e759      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_explosion){
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f47f af53 	bne.w	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000fd6:	f004 f8ad 	bl	8005134 <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000fda:	4808      	ldr	r0, [pc, #32]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000fdc:	f003 fd58 	bl	8004a90 <HAL_TIM_Base_Stop_IT>
}
 8000fe0:	e74a      	b.n	8000e78 <HAL_TIM_PeriodElapsedCallback+0x14>
 8000fe2:	bf00      	nop
 8000fe4:	40000800 	.word	0x40000800
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	20000b7c 	.word	0x20000b7c
 8000ff0:	20000b68 	.word	0x20000b68
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000ad8 	.word	0x20000ad8
 8000ffc:	20000b20 	.word	0x20000b20
 8001000:	20000b88 	.word	0x20000b88
 8001004:	2000001c 	.word	0x2000001c
 8001008:	200009c8 	.word	0x200009c8
 800100c:	20000018 	.word	0x20000018
 8001010:	20000530 	.word	0x20000530
 8001014:	20000540 	.word	0x20000540
 8001018:	20000014 	.word	0x20000014
 800101c:	20000520 	.word	0x20000520
 8001020:	20000010 	.word	0x20000010
 8001024:	20000550 	.word	0x20000550
 8001028:	2000000c 	.word	0x2000000c

0800102c <getPuntajes>:

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
}
 800102c:	4b01      	ldr	r3, [pc, #4]	; (8001034 <getPuntajes+0x8>)
 800102e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001032:	4770      	bx	lr
 8001034:	20000b8c 	.word	0x20000b8c

08001038 <Read_all>:


	return ((dato_leido[0]<<1) + (dato_leido[1]>>7));
}

void Read_all(uint16_t address, uint16_t tamano, uint8_t *buffer){
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	b083      	sub	sp, #12
 800103c:	4606      	mov	r6, r0
 800103e:	460d      	mov	r5, r1
 8001040:	4614      	mov	r4, r2


	uint8_t dato_actual, dato_anterior;


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2120      	movs	r1, #32
 8001046:	481f      	ldr	r0, [pc, #124]	; (80010c4 <Read_all+0x8c>)
 8001048:	f002 f8a0 	bl	800318c <HAL_GPIO_WritePin>

	uint8_t comando[2] = { ((uint16_t)READ<<3) + (address>>8 & 0xFF), address & 0xFF};
 800104c:	0a33      	lsrs	r3, r6, #8
 800104e:	3330      	adds	r3, #48	; 0x30
 8001050:	f88d 3004 	strb.w	r3, [sp, #4]
 8001054:	f88d 6005 	strb.w	r6, [sp, #5]
	HAL_SPI_Transmit(&hspi1, comando, 2, 100);
 8001058:	4e1b      	ldr	r6, [pc, #108]	; (80010c8 <Read_all+0x90>)
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	2202      	movs	r2, #2
 800105e:	a901      	add	r1, sp, #4
 8001060:	4630      	mov	r0, r6
 8001062:	f003 f999 	bl	8004398 <HAL_SPI_Transmit>

	HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f001 fbee 	bl	8002848 <HAL_Delay>

	HAL_SPI_Receive(&hspi1, &dato_anterior, 1, HAL_MAX_DELAY);
 800106c:	f04f 33ff 	mov.w	r3, #4294967295
 8001070:	2201      	movs	r2, #1
 8001072:	f10d 0106 	add.w	r1, sp, #6
 8001076:	4630      	mov	r0, r6
 8001078:	f003 fb90 	bl	800479c <HAL_SPI_Receive>


	for(uint16_t i=0; i< tamano; i++){
 800107c:	b1bd      	cbz	r5, 80010ae <Read_all+0x76>
 800107e:	4425      	add	r5, r4

		HAL_SPI_Receive(&hspi1, &dato_actual, 1, HAL_MAX_DELAY);
 8001080:	4637      	mov	r7, r6
 8001082:	f04f 36ff 	mov.w	r6, #4294967295
 8001086:	4633      	mov	r3, r6
 8001088:	2201      	movs	r2, #1
 800108a:	f10d 0107 	add.w	r1, sp, #7
 800108e:	4638      	mov	r0, r7
 8001090:	f003 fb84 	bl	800479c <HAL_SPI_Receive>
		*buffer = (dato_anterior<<1) + (dato_actual>>7);
 8001094:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001098:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800109c:	09d3      	lsrs	r3, r2, #7
 800109e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80010a2:	f804 3b01 	strb.w	r3, [r4], #1
		buffer++;
		dato_anterior = dato_actual;
 80010a6:	f88d 2006 	strb.w	r2, [sp, #6]
	for(uint16_t i=0; i< tamano; i++){
 80010aa:	42ac      	cmp	r4, r5
 80010ac:	d1eb      	bne.n	8001086 <Read_all+0x4e>
		//HAL_Delay(1);
	}

	HAL_Delay(10);
 80010ae:	200a      	movs	r0, #10
 80010b0:	f001 fbca 	bl	8002848 <HAL_Delay>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2120      	movs	r1, #32
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <Read_all+0x8c>)
 80010ba:	f002 f867 	bl	800318c <HAL_GPIO_WritePin>

}
 80010be:	b003      	add	sp, #12
 80010c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	20000a80 	.word	0x20000a80

080010cc <memoriaInit>:



void memoriaInit(){
 80010cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d0:	b08d      	sub	sp, #52	; 0x34
 80010d2:	2700      	movs	r7, #0


		char buff_nombre[7];
		strcpy(buff_nombre, "      ");
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <memoriaInit+0x194>)
 80010d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010da:	900a      	str	r0, [sp, #40]	; 0x28
 80010dc:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80010e0:	0c09      	lsrs	r1, r1, #16
 80010e2:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
		uint8_t puntaje_msb;

		uint8_t buffer[TAMANO_TOTAL_PUNTAJES];


		Read_all(address, TAMANO_TOTAL_PUNTAJES, buffer);
 80010e6:	466a      	mov	r2, sp
 80010e8:	2128      	movs	r1, #40	; 0x28
 80010ea:	4638      	mov	r0, r7
 80010ec:	f7ff ffa4 	bl	8001038 <Read_all>
 80010f0:	466e      	mov	r6, sp
 80010f2:	2401      	movs	r4, #1
 80010f4:	463d      	mov	r5, r7
		uint8_t permiso = true;
 80010f6:	46a4      	mov	ip, r4
		uint8_t j = 0;
 80010f8:	4638      	mov	r0, r7
				puntaje_lsb = buffer[i];

				switch(i){

				case 7:
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80010fa:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8001264 <memoriaInit+0x198>
						else if((i>=32 && i<38)){
							strcpy(getPuntajes(4)->nombre, buff_nombre);
						}

						j = 0;
						strcpy(buff_nombre, "      ");
 80010fe:	f8df a160 	ldr.w	sl, [pc, #352]	; 8001260 <memoriaInit+0x194>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8001102:	f108 0b20 	add.w	fp, r8, #32
 8001106:	e006      	b.n	8001116 <memoriaInit+0x4a>
				puntaje_msb = buffer[i];
 8001108:	7837      	ldrb	r7, [r6, #0]
					}
				}
			}
			i++;

		}while(i != 40);
 800110a:	2c28      	cmp	r4, #40	; 0x28
 800110c:	d06f      	beq.n	80011ee <memoriaInit+0x122>
 800110e:	3501      	adds	r5, #1
 8001110:	3401      	adds	r4, #1
 8001112:	b2e4      	uxtb	r4, r4
 8001114:	3601      	adds	r6, #1
 8001116:	b2eb      	uxtb	r3, r5
			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 8001118:	2b06      	cmp	r3, #6
 800111a:	d0f5      	beq.n	8001108 <memoriaInit+0x3c>
 800111c:	2b07      	cmp	r3, #7
 800111e:	f000 8096 	beq.w	800124e <memoriaInit+0x182>
 8001122:	f1a3 020e 	sub.w	r2, r3, #14
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	2a19      	cmp	r2, #25
 800112a:	d80a      	bhi.n	8001142 <memoriaInit+0x76>
 800112c:	f1a3 010e 	sub.w	r1, r3, #14
 8001130:	b2c9      	uxtb	r1, r1
 8001132:	2201      	movs	r2, #1
 8001134:	408a      	lsls	r2, r1
 8001136:	f012 3f02 	tst.w	r2, #33686018	; 0x2020202
 800113a:	d12e      	bne.n	800119a <memoriaInit+0xce>
 800113c:	f012 3f01 	tst.w	r2, #16843009	; 0x1010101
 8001140:	d1e2      	bne.n	8001108 <memoriaInit+0x3c>
				if( (buff_nombre[j] != '\0') && permiso==true){
 8001142:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8001146:	446a      	add	r2, sp
 8001148:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 800114c:	2a00      	cmp	r2, #0
 800114e:	d0dc      	beq.n	800110a <memoriaInit+0x3e>
 8001150:	f1bc 0f01 	cmp.w	ip, #1
 8001154:	d1d9      	bne.n	800110a <memoriaInit+0x3e>
					buff_nombre[j]  = buffer[i];;
 8001156:	f896 9000 	ldrb.w	r9, [r6]
 800115a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800115e:	eb0d 0102 	add.w	r1, sp, r2
 8001162:	f801 9c08 	strb.w	r9, [r1, #-8]
					if(buff_nombre[j] == '\0'){
 8001166:	f1b9 0f00 	cmp.w	r9, #0
 800116a:	d169      	bne.n	8001240 <memoriaInit+0x174>
						if((i>=0 && i<6)){
 800116c:	2b25      	cmp	r3, #37	; 0x25
 800116e:	d845      	bhi.n	80011fc <memoriaInit+0x130>
 8001170:	e8df f003 	tbb	[pc, r3]
 8001174:	40404040 	.word	0x40404040
 8001178:	44444040 	.word	0x44444040
 800117c:	4f4f4f4f 	.word	0x4f4f4f4f
 8001180:	44444f4f 	.word	0x44444f4f
 8001184:	55555555 	.word	0x55555555
 8001188:	44445555 	.word	0x44445555
 800118c:	5b5b5b5b 	.word	0x5b5b5b5b
 8001190:	44445b5b 	.word	0x44445b5b
 8001194:	61616161 	.word	0x61616161
 8001198:	6161      	.short	0x6161
				puntaje_lsb = buffer[i];
 800119a:	7832      	ldrb	r2, [r6, #0]
				switch(i){
 800119c:	3b07      	subs	r3, #7
 800119e:	2b20      	cmp	r3, #32
 80011a0:	d851      	bhi.n	8001246 <memoriaInit+0x17a>
 80011a2:	e8df f003 	tbb	[pc, r3]
 80011a6:	5055      	.short	0x5055
 80011a8:	50505050 	.word	0x50505050
 80011ac:	50115050 	.word	0x50115050
 80011b0:	50505050 	.word	0x50505050
 80011b4:	50165050 	.word	0x50165050
 80011b8:	50505050 	.word	0x50505050
 80011bc:	501b5050 	.word	0x501b5050
 80011c0:	50505050 	.word	0x50505050
 80011c4:	5050      	.short	0x5050
 80011c6:	20          	.byte	0x20
 80011c7:	00          	.byte	0x00
					getPuntajes(1)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80011c8:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 80011cc:	f8a8 200e 	strh.w	r2, [r8, #14]
					break;
 80011d0:	e042      	b.n	8001258 <memoriaInit+0x18c>
					getPuntajes(2)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80011d2:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 80011d6:	f8a8 2016 	strh.w	r2, [r8, #22]
					break;
 80011da:	e03d      	b.n	8001258 <memoriaInit+0x18c>
					getPuntajes(3)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80011dc:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 80011e0:	f8a8 201e 	strh.w	r2, [r8, #30]
					break;
 80011e4:	e038      	b.n	8001258 <memoriaInit+0x18c>
					getPuntajes(4)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80011e6:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <memoriaInit+0x198>)
 80011ec:	84da      	strh	r2, [r3, #38]	; 0x26


}
 80011ee:	b00d      	add	sp, #52	; 0x34
 80011f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							strcpy(getPuntajes(0)->nombre, buff_nombre);
 80011f4:	a90a      	add	r1, sp, #40	; 0x28
 80011f6:	4640      	mov	r0, r8
 80011f8:	f006 ff6d 	bl	80080d6 <strcpy>
						strcpy(buff_nombre, "      ");
 80011fc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8001200:	900a      	str	r0, [sp, #40]	; 0x28
 8001202:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8001206:	0c09      	lsrs	r1, r1, #16
 8001208:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
						permiso = false;
 800120c:	46cc      	mov	ip, r9
						j = 0;
 800120e:	4648      	mov	r0, r9
 8001210:	e77b      	b.n	800110a <memoriaInit+0x3e>
							strcpy(getPuntajes(1)->nombre, buff_nombre);
 8001212:	a90a      	add	r1, sp, #40	; 0x28
 8001214:	f108 0008 	add.w	r0, r8, #8
 8001218:	f006 ff5d 	bl	80080d6 <strcpy>
 800121c:	e7ee      	b.n	80011fc <memoriaInit+0x130>
							strcpy(getPuntajes(2)->nombre, buff_nombre);
 800121e:	a90a      	add	r1, sp, #40	; 0x28
 8001220:	f108 0010 	add.w	r0, r8, #16
 8001224:	f006 ff57 	bl	80080d6 <strcpy>
 8001228:	e7e8      	b.n	80011fc <memoriaInit+0x130>
							strcpy(getPuntajes(3)->nombre, buff_nombre);
 800122a:	a90a      	add	r1, sp, #40	; 0x28
 800122c:	f108 0018 	add.w	r0, r8, #24
 8001230:	f006 ff51 	bl	80080d6 <strcpy>
 8001234:	e7e2      	b.n	80011fc <memoriaInit+0x130>
							strcpy(getPuntajes(4)->nombre, buff_nombre);
 8001236:	a90a      	add	r1, sp, #40	; 0x28
 8001238:	4658      	mov	r0, fp
 800123a:	f006 ff4c 	bl	80080d6 <strcpy>
 800123e:	e7dd      	b.n	80011fc <memoriaInit+0x130>
						j++;
 8001240:	3001      	adds	r0, #1
 8001242:	b2c0      	uxtb	r0, r0
 8001244:	e761      	b.n	800110a <memoriaInit+0x3e>
				switch(i){
 8001246:	2700      	movs	r7, #0
 8001248:	f04f 0c01 	mov.w	ip, #1
 800124c:	e75d      	b.n	800110a <memoriaInit+0x3e>
				puntaje_lsb = buffer[i];
 800124e:	7832      	ldrb	r2, [r6, #0]
					getPuntajes(0)->puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001250:	eb02 2207 	add.w	r2, r2, r7, lsl #8
 8001254:	f8a8 2006 	strh.w	r2, [r8, #6]
						j = 0;
 8001258:	2700      	movs	r7, #0
 800125a:	f04f 0c01 	mov.w	ip, #1
 800125e:	e756      	b.n	800110e <memoriaInit+0x42>
 8001260:	080096b8 	.word	0x080096b8
 8001264:	20000b8c 	.word	0x20000b8c

08001268 <Ordenamiento_Puntajes>:
}


//Hay que corregir el ordenamiento de puntajes.

uint8_t Ordenamiento_Puntajes(){
 8001268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800126c:	b091      	sub	sp, #68	; 0x44
	uint8_t indice_subvector = 1;
	uint16_t auxiliar;


	//Copio los nombres y los puntajes porque voy a reescribir getPuntajes()
	for(uint8_t i=0;i<5;i++){
 800126e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001340 <Ordenamiento_Puntajes+0xd8>
 8001272:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8001276:	ad05      	add	r5, sp, #20
 8001278:	f109 0728 	add.w	r7, r9, #40	; 0x28
uint8_t Ordenamiento_Puntajes(){
 800127c:	4656      	mov	r6, sl
 800127e:	464c      	mov	r4, r9

		vector[i] = getPuntajes(i)->puntaje;
 8001280:	88e3      	ldrh	r3, [r4, #6]
 8001282:	f826 3b02 	strh.w	r3, [r6], #2
		strcpy(buff_nombre[i], getPuntajes(i)->nombre);
 8001286:	4621      	mov	r1, r4
 8001288:	4628      	mov	r0, r5
 800128a:	f006 ff24 	bl	80080d6 <strcpy>
	for(uint8_t i=0;i<5;i++){
 800128e:	3408      	adds	r4, #8
 8001290:	3506      	adds	r5, #6
 8001292:	42bc      	cmp	r4, r7
 8001294:	d1f4      	bne.n	8001280 <Ordenamiento_Puntajes+0x18>
 8001296:	2502      	movs	r5, #2
 8001298:	2401      	movs	r4, #1
	uint8_t permutaciones = 0;
 800129a:	f04f 0800 	mov.w	r8, #0
 800129e:	e015      	b.n	80012cc <Ordenamiento_Puntajes+0x64>
	}

	//Ordenamiento de mayor a menor xd.
	do{

			for(uint8_t j=indice_subvector; j > 0; j--){
 80012a0:	3b01      	subs	r3, #1
 80012a2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80012a6:	d00b      	beq.n	80012c0 <Ordenamiento_Puntajes+0x58>

					if(vector[j] > vector[j-1]){
 80012a8:	8810      	ldrh	r0, [r2, #0]
 80012aa:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
 80012ae:	4288      	cmp	r0, r1
 80012b0:	d9f6      	bls.n	80012a0 <Ordenamiento_Puntajes+0x38>

						auxiliar = vector[j-1];
						vector[j-1] = vector[j];
 80012b2:	8010      	strh	r0, [r2, #0]
						vector[j] = auxiliar;
 80012b4:	8051      	strh	r1, [r2, #2]

						permutaciones++;
 80012b6:	f108 0801 	add.w	r8, r8, #1
 80012ba:	fa5f f888 	uxtb.w	r8, r8
 80012be:	e7ef      	b.n	80012a0 <Ordenamiento_Puntajes+0x38>

			}

		indice_subvector++;

	}while(indice_subvector != 5);
 80012c0:	2d05      	cmp	r5, #5
 80012c2:	d00d      	beq.n	80012e0 <Ordenamiento_Puntajes+0x78>
 80012c4:	3401      	adds	r4, #1
 80012c6:	b2e4      	uxtb	r4, r4
 80012c8:	3501      	adds	r5, #1
 80012ca:	b2ed      	uxtb	r5, r5
			for(uint8_t j=indice_subvector; j > 0; j--){
 80012cc:	2c00      	cmp	r4, #0
 80012ce:	d0f9      	beq.n	80012c4 <Ordenamiento_Puntajes+0x5c>
 80012d0:	ab0d      	add	r3, sp, #52	; 0x34
 80012d2:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 80012d6:	4623      	mov	r3, r4
 80012d8:	e7e6      	b.n	80012a8 <Ordenamiento_Puntajes+0x40>
	return &Puntajes[indice];
 80012da:	462c      	mov	r4, r5
 80012dc:	2600      	movs	r6, #0
 80012de:	e013      	b.n	8001308 <Ordenamiento_Puntajes+0xa0>
 80012e0:	f10a 0b0a 	add.w	fp, sl, #10
		finalizado = true;

			uint8_t j=0;
			do{

				if(getPuntajes(j)->puntaje == vector[k]){
 80012e4:	4d16      	ldr	r5, [pc, #88]	; (8001340 <Ordenamiento_Puntajes+0xd8>)
			uint8_t j=0;
 80012e6:	9301      	str	r3, [sp, #4]
				if(getPuntajes(j)->puntaje == vector[k]){
 80012e8:	f83a 7b02 	ldrh.w	r7, [sl], #2
 80012ec:	88eb      	ldrh	r3, [r5, #6]
 80012ee:	42bb      	cmp	r3, r7
 80012f0:	d0f3      	beq.n	80012da <Ordenamiento_Puntajes+0x72>
			uint8_t j=0;
 80012f2:	9c01      	ldr	r4, [sp, #4]

					getPuntajes(j)->puntaje = getPuntajes(k)->puntaje;
					getPuntajes(k)->puntaje = vector[k];
					finalizado = false;
				}
				j++;
 80012f4:	3401      	adds	r4, #1
 80012f6:	b2e4      	uxtb	r4, r4
	return &Puntajes[indice];
 80012f8:	4626      	mov	r6, r4
				if(getPuntajes(j)->puntaje == vector[k]){
 80012fa:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80012fe:	88db      	ldrh	r3, [r3, #6]
 8001300:	42bb      	cmp	r3, r7
 8001302:	d1f7      	bne.n	80012f4 <Ordenamiento_Puntajes+0x8c>
	return &Puntajes[indice];
 8001304:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
					strcpy(buff_aux, getPuntajes(k)->nombre);
 8001308:	4649      	mov	r1, r9
 800130a:	a803      	add	r0, sp, #12
 800130c:	f006 fee3 	bl	80080d6 <strcpy>
					strcpy(getPuntajes(k)->nombre, getPuntajes(j)->nombre);
 8001310:	4621      	mov	r1, r4
 8001312:	4648      	mov	r0, r9
 8001314:	f006 fedf 	bl	80080d6 <strcpy>
					strcpy(getPuntajes(j)->nombre, buff_aux);
 8001318:	a903      	add	r1, sp, #12
 800131a:	4620      	mov	r0, r4
 800131c:	f006 fedb 	bl	80080d6 <strcpy>
					getPuntajes(j)->puntaje = getPuntajes(k)->puntaje;
 8001320:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 8001324:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 8001328:	80f3      	strh	r3, [r6, #6]
					getPuntajes(k)->puntaje = vector[k];
 800132a:	f8a9 7006 	strh.w	r7, [r9, #6]
	for(uint8_t k=0;k<5;k++){
 800132e:	f109 0908 	add.w	r9, r9, #8
 8001332:	45da      	cmp	sl, fp
 8001334:	d1d8      	bne.n	80012e8 <Ordenamiento_Puntajes+0x80>
	}


	return permutaciones;

}
 8001336:	4640      	mov	r0, r8
 8001338:	b011      	add	sp, #68	; 0x44
 800133a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800133e:	bf00      	nop
 8001340:	20000b8c 	.word	0x20000b8c

08001344 <menuInit>:

	return &menu;
}


void menuInit(){
 8001344:	b508      	push	{r3, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8001346:	f000 ff7d 	bl	8002244 <SSD1306_Init>
	SSD1306_Clear();
 800134a:	f000 ff73 	bl	8002234 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 800134e:	f000 ff4b 	bl	80021e8 <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001352:	f7fe ff15 	bl	8000180 <playerInit>
	InvaderInit();
 8001356:	f7fe ff57 	bl	8000208 <InvaderInit>
	disparoInit();
 800135a:	f7ff f8b1 	bl	80004c0 <disparoInit>

	//Se inicializan las dificultades
	getDificultad()->velocidad_horizontal = 8;
 800135e:	f7fe ff03 	bl	8000168 <getDificultad>
 8001362:	2308      	movs	r3, #8
 8001364:	7003      	strb	r3, [r0, #0]
	getDificultad()->velocidad_bajada = 1;
 8001366:	f7fe feff 	bl	8000168 <getDificultad>
 800136a:	2301      	movs	r3, #1
 800136c:	7043      	strb	r3, [r0, #1]
	getDificultad()->velocidad_disparo_aliens = 3;
 800136e:	f7fe fefb 	bl	8000168 <getDificultad>
 8001372:	2303      	movs	r3, #3
 8001374:	7083      	strb	r3, [r0, #2]


	//Se inicializa el cursor de la pantalla principal.
	getMenu()->menuActual =  progresion_niveles;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <menuInit+0x50>)
 8001378:	2202      	movs	r2, #2
 800137a:	701a      	strb	r2, [r3, #0]
	//getMenu()->menuActual = menu_principal;
	//getMenu()->menuActual = juego;
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 800137c:	2226      	movs	r2, #38	; 0x26
 800137e:	705a      	strb	r2, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001380:	2209      	movs	r2, #9
 8001382:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001384:	221b      	movs	r2, #27
 8001386:	715a      	strb	r2, [r3, #5]
	getMenu()->GuardarNombre.indice = 0;
 8001388:	2200      	movs	r2, #0
 800138a:	731a      	strb	r2, [r3, #12]



	//Para las variables de juego
	getMenu()->juego.flag = 0;
 800138c:	f883 2020 	strb.w	r2, [r3, #32]


}
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	20000bb4 	.word	0x20000bb4

08001398 <menuReset>:
	}

}


void menuReset(){
 8001398:	b508      	push	{r3, lr}

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 800139a:	f7fe fef1 	bl	8000180 <playerInit>
	InvaderInit();
 800139e:	f7fe ff33 	bl	8000208 <InvaderInit>
	disparoInit();
 80013a2:	f7ff f88d 	bl	80004c0 <disparoInit>

	//Se reinician las dificultades al nivel 1
	getDificultad()->velocidad_horizontal = 8;
 80013a6:	f7fe fedf 	bl	8000168 <getDificultad>
 80013aa:	2308      	movs	r3, #8
 80013ac:	7003      	strb	r3, [r0, #0]
	getDificultad()->velocidad_bajada = 1;
 80013ae:	f7fe fedb 	bl	8000168 <getDificultad>
 80013b2:	2301      	movs	r3, #1
 80013b4:	7043      	strb	r3, [r0, #1]
	getDificultad()->velocidad_disparo_aliens = 3;
 80013b6:	f7fe fed7 	bl	8000168 <getDificultad>
 80013ba:	2303      	movs	r3, #3
 80013bc:	7083      	strb	r3, [r0, #2]


	//Para las variables de juego
	getMenu()->juego.flag = 0;
 80013be:	4b03      	ldr	r3, [pc, #12]	; (80013cc <menuReset+0x34>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2020 	strb.w	r2, [r3, #32]

	//Se inicializa el cursor de la pantalla principal.
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 80013c6:	2226      	movs	r2, #38	; 0x26
 80013c8:	705a      	strb	r2, [r3, #1]

}
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	20000bb4 	.word	0x20000bb4

080013d0 <GuardarNombreReset>:


void GuardarNombreReset(){

	//Se inicializa el cursor de la pantalla Guardado de nombre
	getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <GuardarNombreReset+0x1c>)
 80013d2:	2209      	movs	r2, #9
 80013d4:	711a      	strb	r2, [r3, #4]
	getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 80013d6:	221b      	movs	r2, #27
 80013d8:	715a      	strb	r2, [r3, #5]
	getMenu()->GuardarNombre.indice = 0;
 80013da:	2200      	movs	r2, #0
 80013dc:	731a      	strb	r2, [r3, #12]
	strcpy(getMenu()->GuardarNombre.nombre,"     ");
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <GuardarNombreReset+0x20>)
 80013e0:	6810      	ldr	r0, [r2, #0]
 80013e2:	f8c3 0006 	str.w	r0, [r3, #6]
 80013e6:	8892      	ldrh	r2, [r2, #4]
 80013e8:	815a      	strh	r2, [r3, #10]

}
 80013ea:	4770      	bx	lr
 80013ec:	20000bb4 	.word	0x20000bb4
 80013f0:	080096c0 	.word	0x080096c0

080013f4 <menuActualizar>:
void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 80013f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f8:	b08d      	sub	sp, #52	; 0x34
 80013fa:	9003      	str	r0, [sp, #12]
 80013fc:	460d      	mov	r5, r1
 80013fe:	4616      	mov	r6, r2
	switch(getMenu()->menuActual){
 8001400:	4bb6      	ldr	r3, [pc, #728]	; (80016dc <menuActualizar+0x2e8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b05      	cmp	r3, #5
 8001406:	f200 822a 	bhi.w	800185e <menuActualizar+0x46a>
 800140a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800140e:	0006      	.short	0x0006
 8001410:	00d30046 	.word	0x00d30046
 8001414:	017b0124 	.word	0x017b0124
 8001418:	034c      	.short	0x034c
		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 800141a:	2401      	movs	r4, #1
 800141c:	9401      	str	r4, [sp, #4]
 800141e:	2320      	movs	r3, #32
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2340      	movs	r3, #64	; 0x40
 8001424:	4aae      	ldr	r2, [pc, #696]	; (80016e0 <menuActualizar+0x2ec>)
 8001426:	2100      	movs	r1, #0
 8001428:	2023      	movs	r0, #35	; 0x23
 800142a:	f000 fbdd 	bl	8001be8 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(45, 35);
 800142e:	2123      	movs	r1, #35	; 0x23
 8001430:	202d      	movs	r0, #45	; 0x2d
 8001432:	f000 fc25 	bl	8001c80 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 8001436:	4fab      	ldr	r7, [pc, #684]	; (80016e4 <menuActualizar+0x2f0>)
 8001438:	4622      	mov	r2, r4
 800143a:	4639      	mov	r1, r7
 800143c:	48aa      	ldr	r0, [pc, #680]	; (80016e8 <menuActualizar+0x2f4>)
 800143e:	f000 fc71 	bl	8001d24 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8001442:	212d      	movs	r1, #45	; 0x2d
 8001444:	4608      	mov	r0, r1
 8001446:	f000 fc1b 	bl	8001c80 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800144a:	4622      	mov	r2, r4
 800144c:	4639      	mov	r1, r7
 800144e:	48a7      	ldr	r0, [pc, #668]	; (80016ec <menuActualizar+0x2f8>)
 8001450:	f000 fc68 	bl	8001d24 <SSD1306_Puts>
		if(y == arriba){
 8001454:	b9bd      	cbnz	r5, 8001486 <menuActualizar+0x92>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001456:	4ba1      	ldr	r3, [pc, #644]	; (80016dc <menuActualizar+0x2e8>)
 8001458:	2226      	movs	r2, #38	; 0x26
 800145a:	705a      	strb	r2, [r3, #1]
		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 800145c:	2301      	movs	r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	499e      	ldr	r1, [pc, #632]	; (80016dc <menuActualizar+0x2e8>)
 8001462:	7849      	ldrb	r1, [r1, #1]
 8001464:	2027      	movs	r0, #39	; 0x27
 8001466:	f000 fd5d 	bl	8001f24 <SSD1306_DrawCircle>
		switch(boton){
 800146a:	2e01      	cmp	r6, #1
 800146c:	f040 81f7 	bne.w	800185e <menuActualizar+0x46a>
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 8001470:	4b9a      	ldr	r3, [pc, #616]	; (80016dc <menuActualizar+0x2e8>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b26      	cmp	r3, #38	; 0x26
 8001476:	d00c      	beq.n	8001492 <menuActualizar+0x9e>
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8001478:	2b30      	cmp	r3, #48	; 0x30
 800147a:	f040 81f0 	bne.w	800185e <menuActualizar+0x46a>
			    getMenu()->menuActual = puntajes;
 800147e:	4b97      	ldr	r3, [pc, #604]	; (80016dc <menuActualizar+0x2e8>)
 8001480:	2203      	movs	r2, #3
 8001482:	701a      	strb	r2, [r3, #0]
 8001484:	e1eb      	b.n	800185e <menuActualizar+0x46a>
		else if(y == abajo){
 8001486:	2d01      	cmp	r5, #1
 8001488:	d1e8      	bne.n	800145c <menuActualizar+0x68>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 800148a:	4b94      	ldr	r3, [pc, #592]	; (80016dc <menuActualizar+0x2e8>)
 800148c:	2230      	movs	r2, #48	; 0x30
 800148e:	705a      	strb	r2, [r3, #1]
 8001490:	e7e4      	b.n	800145c <menuActualizar+0x68>
				getMenu()->menuActual = juego;
 8001492:	4b92      	ldr	r3, [pc, #584]	; (80016dc <menuActualizar+0x2e8>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e1e1      	b.n	800185e <menuActualizar+0x46a>
		uint8_t numero_aliens = getDisparoAliens()->numero_disparos;
 800149a:	f7fe fe61 	bl	8000160 <getDisparoAliens>
 800149e:	78c5      	ldrb	r5, [r0, #3]
		plotBases();
 80014a0:	f7ff f962 	bl	8000768 <plotBases>
		plotPlayer(x, getPlayer());
 80014a4:	f7fe fe54 	bl	8000150 <getPlayer>
 80014a8:	4601      	mov	r1, r0
 80014aa:	9803      	ldr	r0, [sp, #12]
 80014ac:	f7fe fe76 	bl	800019c <plotPlayer>
		plotAliens();
 80014b0:	f7fe fece 	bl	8000250 <plotAliens>
		disparoAliens();
 80014b4:	f7ff f8d6 	bl	8000664 <disparoAliens>
		TickType_t Tiempo_Actual = xTaskGetTickCount();
 80014b8:	f005 fb58 	bl	8006b6c <xTaskGetTickCount>
 80014bc:	4604      	mov	r4, r0
		if(getMenu()->juego.flag == 0){
 80014be:	4b87      	ldr	r3, [pc, #540]	; (80016dc <menuActualizar+0x2e8>)
 80014c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c4:	b1db      	cbz	r3, 80014fe <menuActualizar+0x10a>
		if(Tiempo_Actual - getMenu()->juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 80014c6:	4b85      	ldr	r3, [pc, #532]	; (80016dc <menuActualizar+0x2e8>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	1ae4      	subs	r4, r4, r3
 80014cc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 80014d0:	d902      	bls.n	80014d8 <menuActualizar+0xe4>
			getMenu()->menuActual = game_over;
 80014d2:	4b82      	ldr	r3, [pc, #520]	; (80016dc <menuActualizar+0x2e8>)
 80014d4:	2205      	movs	r2, #5
 80014d6:	701a      	strb	r2, [r3, #0]
		if(boton == true && getPlayer()->vivo == true ){
 80014d8:	2e01      	cmp	r6, #1
 80014da:	d031      	beq.n	8001540 <menuActualizar+0x14c>
		disparar();
 80014dc:	f7ff f800 	bl	80004e0 <disparar>
		if(getDisparoAliens()->numero_disparos != numero_aliens && getPlayer()->vivo == true){
 80014e0:	f7fe fe3e 	bl	8000160 <getDisparoAliens>
 80014e4:	78c3      	ldrb	r3, [r0, #3]
 80014e6:	42ab      	cmp	r3, r5
 80014e8:	d14d      	bne.n	8001586 <menuActualizar+0x192>
		if( getDisparoAliens()->numero_disparos == 0){
 80014ea:	f7fe fe39 	bl	8000160 <getDisparoAliens>
 80014ee:	78c3      	ldrb	r3, [r0, #3]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f040 81b4 	bne.w	800185e <menuActualizar+0x46a>
			getMenu()->menuActual = progresion_niveles;
 80014f6:	4b79      	ldr	r3, [pc, #484]	; (80016dc <menuActualizar+0x2e8>)
 80014f8:	2202      	movs	r2, #2
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	e1af      	b.n	800185e <menuActualizar+0x46a>
			if(getPlayer()->vivo == false){
 80014fe:	f7fe fe27 	bl	8000150 <getPlayer>
 8001502:	7843      	ldrb	r3, [r0, #1]
 8001504:	b113      	cbz	r3, 800150c <menuActualizar+0x118>
				getMenu()->juego.retrasoJuego_GameOver = Tiempo_Actual;
 8001506:	4b75      	ldr	r3, [pc, #468]	; (80016dc <menuActualizar+0x2e8>)
 8001508:	61dc      	str	r4, [r3, #28]
		if(Tiempo_Actual - getMenu()->juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 800150a:	e7e5      	b.n	80014d8 <menuActualizar+0xe4>
				getMenu()->juego.retrasoJuego_GameOver = xTaskGetTickCount();
 800150c:	f005 fb2e 	bl	8006b6c <xTaskGetTickCount>
 8001510:	4b72      	ldr	r3, [pc, #456]	; (80016dc <menuActualizar+0x2e8>)
 8001512:	61d8      	str	r0, [r3, #28]
				getMenu()->juego.flag = 1;
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2020 	strb.w	r2, [r3, #32]
				musica_t musica_ = gameover_;
 800151a:	2302      	movs	r3, #2
 800151c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
				osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001520:	2300      	movs	r3, #0
 8001522:	461a      	mov	r2, r3
 8001524:	a909      	add	r1, sp, #36	; 0x24
 8001526:	4872      	ldr	r0, [pc, #456]	; (80016f0 <menuActualizar+0x2fc>)
 8001528:	6800      	ldr	r0, [r0, #0]
 800152a:	f004 f97b 	bl	8005824 <osMessageQueuePut>
				if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800152e:	2800      	cmp	r0, #0
 8001530:	d0c9      	beq.n	80014c6 <menuActualizar+0xd2>
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001538:	486e      	ldr	r0, [pc, #440]	; (80016f4 <menuActualizar+0x300>)
 800153a:	f001 fe27 	bl	800318c <HAL_GPIO_WritePin>
 800153e:	e7c2      	b.n	80014c6 <menuActualizar+0xd2>
		if(boton == true && getPlayer()->vivo == true ){
 8001540:	f7fe fe06 	bl	8000150 <getPlayer>
 8001544:	7843      	ldrb	r3, [r0, #1]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d1c8      	bne.n	80014dc <menuActualizar+0xe8>
				getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 800154a:	f7fe fe05 	bl	8000158 <getDisparo>
 800154e:	78c4      	ldrb	r4, [r0, #3]
 8001550:	f7fe fe02 	bl	8000158 <getDisparo>
 8001554:	3401      	adds	r4, #1
 8001556:	70c4      	strb	r4, [r0, #3]
				if(getDisparo()->numero_disparos == 1){
 8001558:	f7fe fdfe 	bl	8000158 <getDisparo>
 800155c:	78c3      	ldrb	r3, [r0, #3]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d1bc      	bne.n	80014dc <menuActualizar+0xe8>
					musica_t musica_ = disparo_;
 8001562:	2200      	movs	r2, #0
 8001564:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
					osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001568:	4613      	mov	r3, r2
 800156a:	a909      	add	r1, sp, #36	; 0x24
 800156c:	4860      	ldr	r0, [pc, #384]	; (80016f0 <menuActualizar+0x2fc>)
 800156e:	6800      	ldr	r0, [r0, #0]
 8001570:	f004 f958 	bl	8005824 <osMessageQueuePut>
					if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001574:	2800      	cmp	r0, #0
 8001576:	d0b1      	beq.n	80014dc <menuActualizar+0xe8>
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800157e:	485d      	ldr	r0, [pc, #372]	; (80016f4 <menuActualizar+0x300>)
 8001580:	f001 fe04 	bl	800318c <HAL_GPIO_WritePin>
 8001584:	e7aa      	b.n	80014dc <menuActualizar+0xe8>
		if(getDisparoAliens()->numero_disparos != numero_aliens && getPlayer()->vivo == true){
 8001586:	f7fe fde3 	bl	8000150 <getPlayer>
 800158a:	7843      	ldrb	r3, [r0, #1]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d1ac      	bne.n	80014ea <menuActualizar+0xf6>
			musica_t musica_ = explosion_;
 8001590:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001594:	2300      	movs	r3, #0
 8001596:	461a      	mov	r2, r3
 8001598:	a909      	add	r1, sp, #36	; 0x24
 800159a:	4855      	ldr	r0, [pc, #340]	; (80016f0 <menuActualizar+0x2fc>)
 800159c:	6800      	ldr	r0, [r0, #0]
 800159e:	f004 f941 	bl	8005824 <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d0a1      	beq.n	80014ea <menuActualizar+0xf6>
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ac:	4851      	ldr	r0, [pc, #324]	; (80016f4 <menuActualizar+0x300>)
 80015ae:	f001 fded 	bl	800318c <HAL_GPIO_WritePin>
 80015b2:	e79a      	b.n	80014ea <menuActualizar+0xf6>
		SSD1306_GotoXY(25, 15);
 80015b4:	210f      	movs	r1, #15
 80015b6:	2019      	movs	r0, #25
 80015b8:	f000 fb62 	bl	8001c80 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE: ", &Font_7x10, 1);
 80015bc:	4c49      	ldr	r4, [pc, #292]	; (80016e4 <menuActualizar+0x2f0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	4621      	mov	r1, r4
 80015c2:	484d      	ldr	r0, [pc, #308]	; (80016f8 <menuActualizar+0x304>)
 80015c4:	f000 fbae 	bl	8001d24 <SSD1306_Puts>
		SSD1306_GotoXY(25, 35);
 80015c8:	2123      	movs	r1, #35	; 0x23
 80015ca:	2019      	movs	r0, #25
 80015cc:	f000 fb58 	bl	8001c80 <SSD1306_GotoXY>
		SSD1306_Puts("VIDAS", &Font_7x10, 1);
 80015d0:	2201      	movs	r2, #1
 80015d2:	4621      	mov	r1, r4
 80015d4:	4849      	ldr	r0, [pc, #292]	; (80016fc <menuActualizar+0x308>)
 80015d6:	f000 fba5 	bl	8001d24 <SSD1306_Puts>
		SSD1306_DrawBitmap(65, 34, vida, 8, 8, 1);
 80015da:	2601      	movs	r6, #1
 80015dc:	9601      	str	r6, [sp, #4]
 80015de:	2308      	movs	r3, #8
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4a47      	ldr	r2, [pc, #284]	; (8001700 <menuActualizar+0x30c>)
 80015e4:	2122      	movs	r1, #34	; 0x22
 80015e6:	2041      	movs	r0, #65	; 0x41
 80015e8:	f000 fafe 	bl	8001be8 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(74, 34);
 80015ec:	2122      	movs	r1, #34	; 0x22
 80015ee:	204a      	movs	r0, #74	; 0x4a
 80015f0:	f000 fb46 	bl	8001c80 <SSD1306_GotoXY>
		SSD1306_Putc(':', &Font_7x10, 1);
 80015f4:	4632      	mov	r2, r6
 80015f6:	4621      	mov	r1, r4
 80015f8:	203a      	movs	r0, #58	; 0x3a
 80015fa:	f000 fb47 	bl	8001c8c <SSD1306_Putc>
		SSD1306_GotoXY(90, 15);
 80015fe:	210f      	movs	r1, #15
 8001600:	205a      	movs	r0, #90	; 0x5a
 8001602:	f000 fb3d 	bl	8001c80 <SSD1306_GotoXY>
		itoa(getPlayer()->puntaje,(char*)buffer_puntaje,10);
 8001606:	f7fe fda3 	bl	8000150 <getPlayer>
 800160a:	220a      	movs	r2, #10
 800160c:	a909      	add	r1, sp, #36	; 0x24
 800160e:	8880      	ldrh	r0, [r0, #4]
 8001610:	f006 fb5e 	bl	8007cd0 <itoa>
		SSD1306_Puts((char *)buffer_puntaje, &Font_7x10, 1);
 8001614:	4632      	mov	r2, r6
 8001616:	4621      	mov	r1, r4
 8001618:	a809      	add	r0, sp, #36	; 0x24
 800161a:	f000 fb83 	bl	8001d24 <SSD1306_Puts>
		SSD1306_GotoXY(90, 34);
 800161e:	2122      	movs	r1, #34	; 0x22
 8001620:	205a      	movs	r0, #90	; 0x5a
 8001622:	f000 fb2d 	bl	8001c80 <SSD1306_GotoXY>
		itoa(getPlayer()->vidas, &cantidad_vidas,10);
 8001626:	f7fe fd93 	bl	8000150 <getPlayer>
 800162a:	220a      	movs	r2, #10
 800162c:	a906      	add	r1, sp, #24
 800162e:	7880      	ldrb	r0, [r0, #2]
 8001630:	f006 fb4e 	bl	8007cd0 <itoa>
		SSD1306_Puts(&cantidad_vidas, &Font_7x10, 1);
 8001634:	4632      	mov	r2, r6
 8001636:	4621      	mov	r1, r4
 8001638:	a806      	add	r0, sp, #24
 800163a:	f000 fb73 	bl	8001d24 <SSD1306_Puts>
		AumentoNivel();		//Aqui se reinicializa el player y se aumenta la dificultad del nivel.
 800163e:	f7ff f8b5 	bl	80007ac <AumentoNivel>
		InvaderInit();
 8001642:	f7fe fde1 	bl	8000208 <InvaderInit>
		disparoInit();
 8001646:	f7fe ff3b 	bl	80004c0 <disparoInit>
		if(y == arriba){
 800164a:	2d00      	cmp	r5, #0
 800164c:	f040 8107 	bne.w	800185e <menuActualizar+0x46a>
			getMenu()->menuActual = juego;
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <menuActualizar+0x2e8>)
 8001652:	701e      	strb	r6, [r3, #0]
 8001654:	e103      	b.n	800185e <menuActualizar+0x46a>
		SSD1306_GotoXY(35, 0);
 8001656:	2100      	movs	r1, #0
 8001658:	2023      	movs	r0, #35	; 0x23
 800165a:	f000 fb11 	bl	8001c80 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800165e:	2201      	movs	r2, #1
 8001660:	4920      	ldr	r1, [pc, #128]	; (80016e4 <menuActualizar+0x2f0>)
 8001662:	4822      	ldr	r0, [pc, #136]	; (80016ec <menuActualizar+0x2f8>)
 8001664:	f000 fb5e 	bl	8001d24 <SSD1306_Puts>
 8001668:	240d      	movs	r4, #13
 800166a:	2600      	movs	r6, #0
			SSD1306_GotoXY(15, posicion);
 800166c:	f04f 090f 	mov.w	r9, #15
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 8001670:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80016e4 <menuActualizar+0x2f0>
 8001674:	2701      	movs	r7, #1
			SSD1306_GotoXY(15, posicion);
 8001676:	4621      	mov	r1, r4
 8001678:	4648      	mov	r0, r9
 800167a:	f000 fb01 	bl	8001c80 <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 800167e:	b2f0      	uxtb	r0, r6
 8001680:	f7ff fcd4 	bl	800102c <getPuntajes>
 8001684:	463a      	mov	r2, r7
 8001686:	4641      	mov	r1, r8
 8001688:	f000 fb4c 	bl	8001d24 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 800168c:	3601      	adds	r6, #1
 800168e:	340a      	adds	r4, #10
 8001690:	b2a4      	uxth	r4, r4
 8001692:	2e05      	cmp	r6, #5
 8001694:	d1ef      	bne.n	8001676 <menuActualizar+0x282>
 8001696:	240d      	movs	r4, #13
 8001698:	2600      	movs	r6, #0
			SSD1306_GotoXY(90, posicion);
 800169a:	f04f 085a 	mov.w	r8, #90	; 0x5a
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 800169e:	4f11      	ldr	r7, [pc, #68]	; (80016e4 <menuActualizar+0x2f0>)
			SSD1306_GotoXY(90, posicion);
 80016a0:	4621      	mov	r1, r4
 80016a2:	4640      	mov	r0, r8
 80016a4:	f000 faec 	bl	8001c80 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 80016a8:	b2f0      	uxtb	r0, r6
 80016aa:	f7ff fcbf 	bl	800102c <getPuntajes>
 80016ae:	220a      	movs	r2, #10
 80016b0:	a909      	add	r1, sp, #36	; 0x24
 80016b2:	88c0      	ldrh	r0, [r0, #6]
 80016b4:	f006 fb0c 	bl	8007cd0 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	4639      	mov	r1, r7
 80016bc:	a809      	add	r0, sp, #36	; 0x24
 80016be:	f000 fb31 	bl	8001d24 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 80016c2:	3601      	adds	r6, #1
 80016c4:	340a      	adds	r4, #10
 80016c6:	b2a4      	uxth	r4, r4
 80016c8:	2e05      	cmp	r6, #5
 80016ca:	d1e9      	bne.n	80016a0 <menuActualizar+0x2ac>
		switch(y){
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	f040 80c6 	bne.w	800185e <menuActualizar+0x46a>
				getMenu()->menuActual = menu_principal;
 80016d2:	4b02      	ldr	r3, [pc, #8]	; (80016dc <menuActualizar+0x2e8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			break;
 80016d8:	e0c1      	b.n	800185e <menuActualizar+0x46a>
 80016da:	bf00      	nop
 80016dc:	20000bb4 	.word	0x20000bb4
 80016e0:	08009710 	.word	0x08009710
 80016e4:	20000000 	.word	0x20000000
 80016e8:	080096c8 	.word	0x080096c8
 80016ec:	080096d0 	.word	0x080096d0
 80016f0:	20000b84 	.word	0x20000b84
 80016f4:	40011000 	.word	0x40011000
 80016f8:	080096dc 	.word	0x080096dc
 80016fc:	080096e8 	.word	0x080096e8
 8001700:	08009a18 	.word	0x08009a18
		char buff_qwerty[] = "qwertyuiop";
 8001704:	4ab0      	ldr	r2, [pc, #704]	; (80019c8 <menuActualizar+0x5d4>)
 8001706:	ab06      	add	r3, sp, #24
 8001708:	ca07      	ldmia	r2, {r0, r1, r2}
 800170a:	c303      	stmia	r3!, {r0, r1}
 800170c:	f823 2b02 	strh.w	r2, [r3], #2
 8001710:	0c12      	lsrs	r2, r2, #16
 8001712:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8001714:	4aad      	ldr	r2, [pc, #692]	; (80019cc <menuActualizar+0x5d8>)
 8001716:	ab09      	add	r3, sp, #36	; 0x24
 8001718:	ca07      	ldmia	r2, {r0, r1, r2}
 800171a:	c303      	stmia	r3!, {r0, r1}
 800171c:	f823 2b02 	strh.w	r2, [r3], #2
 8001720:	0c12      	lsrs	r2, r2, #16
 8001722:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 8001724:	4aaa      	ldr	r2, [pc, #680]	; (80019d0 <menuActualizar+0x5dc>)
 8001726:	ab04      	add	r3, sp, #16
 8001728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172c:	e883 0003 	stmia.w	r3, {r0, r1}
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001730:	2301      	movs	r3, #1
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	230f      	movs	r3, #15
 8001736:	223c      	movs	r2, #60	; 0x3c
 8001738:	2100      	movs	r1, #0
 800173a:	201e      	movs	r0, #30
 800173c:	f000 fbb5 	bl	8001eaa <SSD1306_DrawRectangle>
			for(uint8_t i=0;i<10;i++){
 8001740:	f10d 0a18 	add.w	sl, sp, #24
 8001744:	f10d 0924 	add.w	r9, sp, #36	; 0x24
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001748:	2406      	movs	r4, #6
				SSD1306_GotoXY(posicion_x, 23);
 800174a:	f04f 0b17 	mov.w	fp, #23
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 800174e:	f8df 8284 	ldr.w	r8, [pc, #644]	; 80019d4 <menuActualizar+0x5e0>
 8001752:	2701      	movs	r7, #1
				SSD1306_GotoXY(posicion_x, 23);
 8001754:	4659      	mov	r1, fp
 8001756:	4620      	mov	r0, r4
 8001758:	f000 fa92 	bl	8001c80 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 800175c:	463a      	mov	r2, r7
 800175e:	4641      	mov	r1, r8
 8001760:	f81a 0b01 	ldrb.w	r0, [sl], #1
 8001764:	f000 fa92 	bl	8001c8c <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 8001768:	2126      	movs	r1, #38	; 0x26
 800176a:	4620      	mov	r0, r4
 800176c:	f000 fa88 	bl	8001c80 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 8001770:	463a      	mov	r2, r7
 8001772:	4641      	mov	r1, r8
 8001774:	f819 0b01 	ldrb.w	r0, [r9], #1
 8001778:	f000 fa88 	bl	8001c8c <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 800177c:	340c      	adds	r4, #12
 800177e:	b2a4      	uxth	r4, r4
 8001780:	2c7e      	cmp	r4, #126	; 0x7e
 8001782:	d1e7      	bne.n	8001754 <menuActualizar+0x360>
 8001784:	f10d 070f 	add.w	r7, sp, #15
 8001788:	241a      	movs	r4, #26
				SSD1306_GotoXY(posicion_x, 53);
 800178a:	f04f 0a35 	mov.w	sl, #53	; 0x35
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 800178e:	f8df 9244 	ldr.w	r9, [pc, #580]	; 80019d4 <menuActualizar+0x5e0>
 8001792:	f04f 0801 	mov.w	r8, #1
				SSD1306_GotoXY(posicion_x, 53);
 8001796:	4651      	mov	r1, sl
 8001798:	4620      	mov	r0, r4
 800179a:	f000 fa71 	bl	8001c80 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 800179e:	4642      	mov	r2, r8
 80017a0:	4649      	mov	r1, r9
 80017a2:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 80017a6:	f000 fa71 	bl	8001c8c <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 80017aa:	340c      	adds	r4, #12
 80017ac:	b2a4      	uxth	r4, r4
 80017ae:	2c6e      	cmp	r4, #110	; 0x6e
 80017b0:	d1f1      	bne.n	8001796 <menuActualizar+0x3a2>
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 80017b2:	2401      	movs	r4, #1
 80017b4:	9400      	str	r4, [sp, #0]
 80017b6:	2310      	movs	r3, #16
 80017b8:	461a      	mov	r2, r3
 80017ba:	2132      	movs	r1, #50	; 0x32
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 fb74 	bl	8001eaa <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 80017c2:	2135      	movs	r1, #53	; 0x35
 80017c4:	2008      	movs	r0, #8
 80017c6:	f000 fa5b 	bl	8001c80 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 80017ca:	4f82      	ldr	r7, [pc, #520]	; (80019d4 <menuActualizar+0x5e0>)
 80017cc:	4622      	mov	r2, r4
 80017ce:	4639      	mov	r1, r7
 80017d0:	2078      	movs	r0, #120	; 0x78
 80017d2:	f000 fa5b 	bl	8001c8c <SSD1306_Putc>
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 80017d6:	9400      	str	r4, [sp, #0]
 80017d8:	2310      	movs	r3, #16
 80017da:	461a      	mov	r2, r3
 80017dc:	2132      	movs	r1, #50	; 0x32
 80017de:	206c      	movs	r0, #108	; 0x6c
 80017e0:	f000 fb63 	bl	8001eaa <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 80017e4:	2135      	movs	r1, #53	; 0x35
 80017e6:	2071      	movs	r0, #113	; 0x71
 80017e8:	f000 fa4a 	bl	8001c80 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 80017ec:	4622      	mov	r2, r4
 80017ee:	4639      	mov	r1, r7
 80017f0:	203c      	movs	r0, #60	; 0x3c
 80017f2:	f000 fa4b 	bl	8001c8c <SSD1306_Putc>
			switch(y){
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	f000 817e 	beq.w	8001af8 <menuActualizar+0x704>
 80017fc:	42a5      	cmp	r5, r4
 80017fe:	f000 8165 	beq.w	8001acc <menuActualizar+0x6d8>
			Timenow = xTaskGetTickCount();
 8001802:	f005 f9b3 	bl	8006b6c <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001806:	4b74      	ldr	r3, [pc, #464]	; (80019d8 <menuActualizar+0x5e4>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	1ac0      	subs	r0, r0, r3
 800180c:	2896      	cmp	r0, #150	; 0x96
 800180e:	d965      	bls.n	80018dc <menuActualizar+0x4e8>
 8001810:	2d04      	cmp	r5, #4
 8001812:	d127      	bne.n	8001864 <menuActualizar+0x470>
 8001814:	9d03      	ldr	r5, [sp, #12]
			Timenow = xTaskGetTickCount();
 8001816:	f005 f9a9 	bl	8006b6c <xTaskGetTickCount>
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 800181a:	4b6f      	ldr	r3, [pc, #444]	; (80019d8 <menuActualizar+0x5e4>)
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	1ac0      	subs	r0, r0, r3
 8001820:	2864      	cmp	r0, #100	; 0x64
 8001822:	d902      	bls.n	800182a <menuActualizar+0x436>
 8001824:	9b03      	ldr	r3, [sp, #12]
 8001826:	2b04      	cmp	r3, #4
 8001828:	d15a      	bne.n	80018e0 <menuActualizar+0x4ec>
			Timenow = xTaskGetTickCount();
 800182a:	f005 f99f 	bl	8006b6c <xTaskGetTickCount>
		if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 800182e:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <menuActualizar+0x5e4>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	1ac0      	subs	r0, r0, r3
 8001834:	2864      	cmp	r0, #100	; 0x64
 8001836:	d902      	bls.n	800183e <menuActualizar+0x44a>
 8001838:	2e00      	cmp	r6, #0
 800183a:	f040 809b 	bne.w	8001974 <menuActualizar+0x580>
				SSD1306_DrawFilledCircle(getMenu()->GuardarNombre.posicion_x,  getMenu()->GuardarNombre.posicion_y, 5, 1);
 800183e:	4c66      	ldr	r4, [pc, #408]	; (80019d8 <menuActualizar+0x5e4>)
 8001840:	2301      	movs	r3, #1
 8001842:	2205      	movs	r2, #5
 8001844:	7961      	ldrb	r1, [r4, #5]
 8001846:	7920      	ldrb	r0, [r4, #4]
 8001848:	f000 fc07 	bl	800205a <SSD1306_DrawFilledCircle>
				SSD1306_GotoXY(43, 5);
 800184c:	2105      	movs	r1, #5
 800184e:	202b      	movs	r0, #43	; 0x2b
 8001850:	f000 fa16 	bl	8001c80 <SSD1306_GotoXY>
				SSD1306_Puts(getMenu()->GuardarNombre.nombre, &Font_7x10, 1);
 8001854:	2201      	movs	r2, #1
 8001856:	495f      	ldr	r1, [pc, #380]	; (80019d4 <menuActualizar+0x5e0>)
 8001858:	1da0      	adds	r0, r4, #6
 800185a:	f000 fa63 	bl	8001d24 <SSD1306_Puts>
}
 800185e:	b00d      	add	sp, #52	; 0x34
 8001860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001864:	9d03      	ldr	r5, [sp, #12]
 8001866:	e14f      	b.n	8001b08 <menuActualizar+0x714>
 8001868:	2d01      	cmp	r5, #1
 800186a:	d1d4      	bne.n	8001816 <menuActualizar+0x422>
 800186c:	e13a      	b.n	8001ae4 <menuActualizar+0x6f0>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 800186e:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <menuActualizar+0x5e4>)
 8001870:	221b      	movs	r2, #27
 8001872:	715a      	strb	r2, [r3, #5]
							break;
 8001874:	e7cf      	b.n	8001816 <menuActualizar+0x422>
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001876:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <menuActualizar+0x5e4>)
 8001878:	2209      	movs	r2, #9
 800187a:	711a      	strb	r2, [r3, #4]
 800187c:	e7cb      	b.n	8001816 <menuActualizar+0x422>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 800187e:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <menuActualizar+0x5e4>)
 8001880:	2209      	movs	r2, #9
 8001882:	711a      	strb	r2, [r3, #4]
 8001884:	e7c7      	b.n	8001816 <menuActualizar+0x422>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001886:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <menuActualizar+0x5e4>)
 8001888:	222a      	movs	r2, #42	; 0x2a
 800188a:	715a      	strb	r2, [r3, #5]
							break;
 800188c:	2501      	movs	r5, #1
 800188e:	e7c2      	b.n	8001816 <menuActualizar+0x422>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 8001890:	4b51      	ldr	r3, [pc, #324]	; (80019d8 <menuActualizar+0x5e4>)
 8001892:	2239      	movs	r2, #57	; 0x39
 8001894:	715a      	strb	r2, [r3, #5]
							div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 8001896:	791b      	ldrb	r3, [r3, #4]
 8001898:	3b09      	subs	r3, #9
 800189a:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 800189c:	4a4f      	ldr	r2, [pc, #316]	; (80019dc <menuActualizar+0x5e8>)
 800189e:	fb82 1203 	smull	r1, r2, r2, r3
 80018a2:	17db      	asrs	r3, r3, #31
 80018a4:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 80018a8:	b25b      	sxtb	r3, r3
							if(div == 0){
 80018aa:	b923      	cbnz	r3, 80018b6 <menuActualizar+0x4c2>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 80018ac:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <menuActualizar+0x5e4>)
 80018ae:	220b      	movs	r2, #11
 80018b0:	711a      	strb	r2, [r3, #4]
 80018b2:	2501      	movs	r5, #1
 80018b4:	e7af      	b.n	8001816 <menuActualizar+0x422>
							else if(div == 8 || div == 9){
 80018b6:	f1a3 0208 	sub.w	r2, r3, #8
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	2a01      	cmp	r2, #1
 80018be:	d908      	bls.n	80018d2 <menuActualizar+0x4de>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 80018c0:	3b01      	subs	r3, #1
 80018c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	331c      	adds	r3, #28
 80018ca:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <menuActualizar+0x5e4>)
 80018cc:	7113      	strb	r3, [r2, #4]
 80018ce:	2501      	movs	r5, #1
 80018d0:	e7a1      	b.n	8001816 <menuActualizar+0x422>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <menuActualizar+0x5e4>)
 80018d4:	2274      	movs	r2, #116	; 0x74
 80018d6:	711a      	strb	r2, [r3, #4]
 80018d8:	2501      	movs	r5, #1
 80018da:	e79c      	b.n	8001816 <menuActualizar+0x422>
 80018dc:	9d03      	ldr	r5, [sp, #12]
 80018de:	e79a      	b.n	8001816 <menuActualizar+0x422>
			getMenu()->GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 80018e0:	f005 f944 	bl	8006b6c <xTaskGetTickCount>
 80018e4:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <menuActualizar+0x5e4>)
 80018e6:	6118      	str	r0, [r3, #16]
			switch(mov){
 80018e8:	2d02      	cmp	r5, #2
 80018ea:	d021      	beq.n	8001930 <menuActualizar+0x53c>
 80018ec:	2d03      	cmp	r5, #3
 80018ee:	d19c      	bne.n	800182a <menuActualizar+0x436>
					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 80018f0:	461a      	mov	r2, r3
 80018f2:	791b      	ldrb	r3, [r3, #4]
 80018f4:	3b0c      	subs	r3, #12
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	7113      	strb	r3, [r2, #4]
					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 80018fa:	7952      	ldrb	r2, [r2, #5]
 80018fc:	2a39      	cmp	r2, #57	; 0x39
 80018fe:	d005      	beq.n	800190c <menuActualizar+0x518>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 8001900:	2bfd      	cmp	r3, #253	; 0xfd
 8001902:	d192      	bne.n	800182a <menuActualizar+0x436>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 8001904:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <menuActualizar+0x5e4>)
 8001906:	2275      	movs	r2, #117	; 0x75
 8001908:	711a      	strb	r2, [r3, #4]
 800190a:	e78e      	b.n	800182a <menuActualizar+0x436>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 800190c:	2b10      	cmp	r3, #16
 800190e:	d007      	beq.n	8001920 <menuActualizar+0x52c>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8001910:	2b68      	cmp	r3, #104	; 0x68
 8001912:	d009      	beq.n	8001928 <menuActualizar+0x534>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 8001914:	2bff      	cmp	r3, #255	; 0xff
 8001916:	d188      	bne.n	800182a <menuActualizar+0x436>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <menuActualizar+0x5e4>)
 800191a:	220b      	movs	r2, #11
 800191c:	711a      	strb	r2, [r3, #4]
 800191e:	e784      	b.n	800182a <menuActualizar+0x436>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <menuActualizar+0x5e4>)
 8001922:	220b      	movs	r2, #11
 8001924:	711a      	strb	r2, [r3, #4]
 8001926:	e780      	b.n	800182a <menuActualizar+0x436>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <menuActualizar+0x5e4>)
 800192a:	2264      	movs	r2, #100	; 0x64
 800192c:	711a      	strb	r2, [r3, #4]
 800192e:	e77c      	b.n	800182a <menuActualizar+0x436>
					getMenu()->GuardarNombre.posicion_x = getMenu()->GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8001930:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <menuActualizar+0x5e4>)
 8001932:	7913      	ldrb	r3, [r2, #4]
 8001934:	330c      	adds	r3, #12
 8001936:	b2db      	uxtb	r3, r3
 8001938:	7113      	strb	r3, [r2, #4]
					if(getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 800193a:	7952      	ldrb	r2, [r2, #5]
 800193c:	2a39      	cmp	r2, #57	; 0x39
 800193e:	d006      	beq.n	800194e <menuActualizar+0x55a>
						if(getMenu()->GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8001940:	2b75      	cmp	r3, #117	; 0x75
 8001942:	f67f af72 	bls.w	800182a <menuActualizar+0x436>
								getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001946:	4b24      	ldr	r3, [pc, #144]	; (80019d8 <menuActualizar+0x5e4>)
 8001948:	2209      	movs	r2, #9
 800194a:	711a      	strb	r2, [r3, #4]
 800194c:	e76d      	b.n	800182a <menuActualizar+0x436>
						if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 800194e:	2b70      	cmp	r3, #112	; 0x70
 8001950:	d008      	beq.n	8001964 <menuActualizar+0x570>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 8001952:	2b80      	cmp	r3, #128	; 0x80
 8001954:	d00a      	beq.n	800196c <menuActualizar+0x578>
						else if(getMenu()->GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 8001956:	2b17      	cmp	r3, #23
 8001958:	f47f af67 	bne.w	800182a <menuActualizar+0x436>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 800195c:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <menuActualizar+0x5e4>)
 800195e:	221c      	movs	r2, #28
 8001960:	711a      	strb	r2, [r3, #4]
 8001962:	e762      	b.n	800182a <menuActualizar+0x436>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001964:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <menuActualizar+0x5e4>)
 8001966:	2274      	movs	r2, #116	; 0x74
 8001968:	711a      	strb	r2, [r3, #4]
 800196a:	e75e      	b.n	800182a <menuActualizar+0x436>
							getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <menuActualizar+0x5e4>)
 800196e:	220b      	movs	r2, #11
 8001970:	711a      	strb	r2, [r3, #4]
 8001972:	e75a      	b.n	800182a <menuActualizar+0x436>
			getMenu()->GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 8001974:	f005 f8fa 	bl	8006b6c <xTaskGetTickCount>
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <menuActualizar+0x5e4>)
 800197a:	6198      	str	r0, [r3, #24]
			if((boton == true) && (getMenu()->GuardarNombre.indice <= 5)){
 800197c:	2e01      	cmp	r6, #1
 800197e:	f47f af5e 	bne.w	800183e <menuActualizar+0x44a>
 8001982:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001986:	2b05      	cmp	r3, #5
 8001988:	f73f af59 	bgt.w	800183e <menuActualizar+0x44a>
						if((getMenu()->GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <menuActualizar+0x5e4>)
 800198e:	7951      	ldrb	r1, [r2, #5]
 8001990:	2939      	cmp	r1, #57	; 0x39
 8001992:	d03a      	beq.n	8001a0a <menuActualizar+0x616>
							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 8001994:	7912      	ldrb	r2, [r2, #4]
 8001996:	3a09      	subs	r2, #9
 8001998:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 800199a:	4810      	ldr	r0, [pc, #64]	; (80019dc <menuActualizar+0x5e8>)
 800199c:	fb80 4002 	smull	r4, r0, r0, r2
 80019a0:	17d2      	asrs	r2, r2, #31
 80019a2:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 80019a6:	b252      	sxtb	r2, r2
							if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 80019a8:	291b      	cmp	r1, #27
 80019aa:	d019      	beq.n	80019e0 <menuActualizar+0x5ec>
							else if((getMenu()->GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 80019ac:	292a      	cmp	r1, #42	; 0x2a
 80019ae:	f47f af46 	bne.w	800183e <menuActualizar+0x44a>
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_asdf[div];
 80019b2:	4909      	ldr	r1, [pc, #36]	; (80019d8 <menuActualizar+0x5e4>)
 80019b4:	18c8      	adds	r0, r1, r3
 80019b6:	3230      	adds	r2, #48	; 0x30
 80019b8:	446a      	add	r2, sp
 80019ba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80019be:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 80019c0:	3301      	adds	r3, #1
 80019c2:	730b      	strb	r3, [r1, #12]
 80019c4:	e015      	b.n	80019f2 <menuActualizar+0x5fe>
 80019c6:	bf00      	nop
 80019c8:	080096f0 	.word	0x080096f0
 80019cc:	080096fc 	.word	0x080096fc
 80019d0:	08009708 	.word	0x08009708
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000bb4 	.word	0x20000bb4
 80019dc:	2aaaaaab 	.word	0x2aaaaaab
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_qwerty[div];
 80019e0:	495e      	ldr	r1, [pc, #376]	; (8001b5c <menuActualizar+0x768>)
 80019e2:	18c8      	adds	r0, r1, r3
 80019e4:	3230      	adds	r2, #48	; 0x30
 80019e6:	446a      	add	r2, sp
 80019e8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80019ec:	7182      	strb	r2, [r0, #6]
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 80019ee:	3301      	adds	r3, #1
 80019f0:	730b      	strb	r3, [r1, #12]
						if(getMenu()->GuardarNombre.indice > 5){
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <menuActualizar+0x768>)
 80019f4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	f77f af20 	ble.w	800183e <menuActualizar+0x44a>
							getMenu()->GuardarNombre.indice = 5;
 80019fe:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <menuActualizar+0x768>)
 8001a00:	2205      	movs	r2, #5
 8001a02:	731a      	strb	r2, [r3, #12]
							getMenu()->GuardarNombre.nombre[5] = '\0';
 8001a04:	2200      	movs	r2, #0
 8001a06:	72da      	strb	r2, [r3, #11]
 8001a08:	e719      	b.n	800183e <menuActualizar+0x44a>
							div = getMenu()->GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 8001a0a:	4a54      	ldr	r2, [pc, #336]	; (8001b5c <menuActualizar+0x768>)
 8001a0c:	7912      	ldrb	r2, [r2, #4]
 8001a0e:	3a1c      	subs	r2, #28
 8001a10:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 8001a12:	2a00      	cmp	r2, #0
 8001a14:	db0e      	blt.n	8001a34 <menuActualizar+0x640>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 8001a16:	210c      	movs	r1, #12
 8001a18:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 8001a1c:	2a07      	cmp	r2, #7
 8001a1e:	d013      	beq.n	8001a48 <menuActualizar+0x654>
										getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = buff_zxc[div];
 8001a20:	494e      	ldr	r1, [pc, #312]	; (8001b5c <menuActualizar+0x768>)
 8001a22:	18c8      	adds	r0, r1, r3
 8001a24:	3230      	adds	r2, #48	; 0x30
 8001a26:	446a      	add	r2, sp
 8001a28:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001a2c:	7182      	strb	r2, [r0, #6]
										getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice + 1;
 8001a2e:	3301      	adds	r3, #1
 8001a30:	730b      	strb	r3, [r1, #12]
 8001a32:	e7de      	b.n	80019f2 <menuActualizar+0x5fe>
								getMenu()->GuardarNombre.indice = getMenu()->GuardarNombre.indice - 1;
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a3c:	4a47      	ldr	r2, [pc, #284]	; (8001b5c <menuActualizar+0x768>)
 8001a3e:	7313      	strb	r3, [r2, #12]
								getMenu()->GuardarNombre.nombre[getMenu()->GuardarNombre.indice] = '\0';
 8001a40:	441a      	add	r2, r3
 8001a42:	2300      	movs	r3, #0
 8001a44:	7193      	strb	r3, [r2, #6]
 8001a46:	e7d4      	b.n	80019f2 <menuActualizar+0x5fe>
										if((getMenu()->GuardarNombre.indice != 0 )){
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f43f aef8 	beq.w	800183e <menuActualizar+0x44a>
											osMutexAcquire(myMutexPuntajeHandle, osWaitForever);
 8001a4e:	4d44      	ldr	r5, [pc, #272]	; (8001b60 <menuActualizar+0x76c>)
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	6828      	ldr	r0, [r5, #0]
 8001a56:	f003 fd9b 	bl	8005590 <osMutexAcquire>
											getPuntajes(4)->puntaje  = getPlayer()->puntaje;
 8001a5a:	f7fe fb79 	bl	8000150 <getPlayer>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	2004      	movs	r0, #4
 8001a62:	f7ff fae3 	bl	800102c <getPuntajes>
 8001a66:	88a3      	ldrh	r3, [r4, #4]
 8001a68:	80c3      	strh	r3, [r0, #6]
											strcpy(getPuntajes(4)->nombre,getMenu()->GuardarNombre.nombre);
 8001a6a:	2004      	movs	r0, #4
 8001a6c:	f7ff fade 	bl	800102c <getPuntajes>
 8001a70:	493c      	ldr	r1, [pc, #240]	; (8001b64 <menuActualizar+0x770>)
 8001a72:	f006 fb30 	bl	80080d6 <strcpy>
											osMutexRelease(myMutexPuntajeHandle);
 8001a76:	6828      	ldr	r0, [r5, #0]
 8001a78:	f003 fdcc 	bl	8005614 <osMutexRelease>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <menuActualizar+0x774>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	f003 fca9 	bl	80053d8 <osEventFlagsSet>
										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4837      	ldr	r0, [pc, #220]	; (8001b6c <menuActualizar+0x778>)
 8001a90:	6800      	ldr	r0, [r0, #0]
 8001a92:	f003 fcdf 	bl	8005454 <osEventFlagsWait>
										    if (flags == NOTIFICATION_VALUE2){
 8001a96:	2802      	cmp	r0, #2
 8001a98:	d1ab      	bne.n	80019f2 <menuActualizar+0x5fe>
										    	menuReset();
 8001a9a:	f7ff fc7d 	bl	8001398 <menuReset>
										    	getMenu()->menuActual = puntajes;
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <menuActualizar+0x768>)
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	e7a5      	b.n	80019f2 <menuActualizar+0x5fe>
		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	2328      	movs	r3, #40	; 0x28
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2364      	movs	r3, #100	; 0x64
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <menuActualizar+0x77c>)
 8001ab2:	210a      	movs	r1, #10
 8001ab4:	200f      	movs	r0, #15
 8001ab6:	f000 f897 	bl	8001be8 <SSD1306_DrawBitmap>
		if(y == arriba){
 8001aba:	2d00      	cmp	r5, #0
 8001abc:	f47f aecf 	bne.w	800185e <menuActualizar+0x46a>
			GuardarNombreReset();
 8001ac0:	f7ff fc86 	bl	80013d0 <GuardarNombreReset>
			getMenu()->menuActual = guardar_nombre;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <menuActualizar+0x768>)
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	701a      	strb	r2, [r3, #0]
}
 8001aca:	e6c8      	b.n	800185e <menuActualizar+0x46a>
			Timenow = xTaskGetTickCount();
 8001acc:	f005 f84e 	bl	8006b6c <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <menuActualizar+0x768>)
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	1ac0      	subs	r0, r0, r3
 8001ad6:	2896      	cmp	r0, #150	; 0x96
 8001ad8:	f67f ae9d 	bls.w	8001816 <menuActualizar+0x422>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 8001adc:	f005 f846 	bl	8006b6c <xTaskGetTickCount>
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <menuActualizar+0x768>)
 8001ae2:	6158      	str	r0, [r3, #20]
					switch(getMenu()->GuardarNombre.posicion_y){
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <menuActualizar+0x768>)
 8001ae6:	795b      	ldrb	r3, [r3, #5]
 8001ae8:	2b1b      	cmp	r3, #27
 8001aea:	f43f aecc 	beq.w	8001886 <menuActualizar+0x492>
 8001aee:	2b2a      	cmp	r3, #42	; 0x2a
 8001af0:	f43f aece 	beq.w	8001890 <menuActualizar+0x49c>
 8001af4:	2501      	movs	r5, #1
 8001af6:	e68e      	b.n	8001816 <menuActualizar+0x422>
			Timenow = xTaskGetTickCount();
 8001af8:	f005 f838 	bl	8006b6c <xTaskGetTickCount>
			if((Timenow - getMenu()->GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <menuActualizar+0x768>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	1ac0      	subs	r0, r0, r3
 8001b02:	2896      	cmp	r0, #150	; 0x96
 8001b04:	f67f ae87 	bls.w	8001816 <menuActualizar+0x422>
				getMenu()->GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 8001b08:	f005 f830 	bl	8006b6c <xTaskGetTickCount>
 8001b0c:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <menuActualizar+0x768>)
 8001b0e:	6158      	str	r0, [r3, #20]
			switch(mov){
 8001b10:	2d00      	cmp	r5, #0
 8001b12:	f47f aea9 	bne.w	8001868 <menuActualizar+0x474>
					switch(getMenu()->GuardarNombre.posicion_y){
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <menuActualizar+0x768>)
 8001b18:	795b      	ldrb	r3, [r3, #5]
 8001b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8001b1c:	f43f aea7 	beq.w	800186e <menuActualizar+0x47a>
 8001b20:	2b39      	cmp	r3, #57	; 0x39
 8001b22:	f47f ae78 	bne.w	8001816 <menuActualizar+0x422>
							getMenu()->GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <menuActualizar+0x768>)
 8001b28:	222a      	movs	r2, #42	; 0x2a
 8001b2a:	715a      	strb	r2, [r3, #5]
							if(getMenu()->GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 8001b2c:	791b      	ldrb	r3, [r3, #4]
 8001b2e:	2b1b      	cmp	r3, #27
 8001b30:	f67f aea5 	bls.w	800187e <menuActualizar+0x48a>
								div = getMenu()->GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8001b34:	3b1c      	subs	r3, #28
 8001b36:	b25b      	sxtb	r3, r3
								if(div < 0) getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f6ff ae9c 	blt.w	8001876 <menuActualizar+0x482>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <menuActualizar+0x780>)
 8001b40:	fb82 1203 	smull	r1, r2, r2, r3
 8001b44:	17db      	asrs	r3, r3, #31
 8001b46:	ebc3 0362 	rsb	r3, r3, r2, asr #1
									 getMenu()->GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	3309      	adds	r3, #9
 8001b54:	4a01      	ldr	r2, [pc, #4]	; (8001b5c <menuActualizar+0x768>)
 8001b56:	7113      	strb	r3, [r2, #4]
 8001b58:	e65d      	b.n	8001816 <menuActualizar+0x422>
 8001b5a:	bf00      	nop
 8001b5c:	20000bb4 	.word	0x20000bb4
 8001b60:	20000b6c 	.word	0x20000b6c
 8001b64:	20000bba 	.word	0x20000bba
 8001b68:	20000b74 	.word	0x20000b74
 8001b6c:	20000b78 	.word	0x20000b78
 8001b70:	08009810 	.word	0x08009810
 8001b74:	2aaaaaab 	.word	0x2aaaaaab

08001b78 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b78:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b80:	bf0c      	ite	eq
 8001b82:	2100      	moveq	r1, #0
 8001b84:	21ff      	movne	r1, #255	; 0xff
 8001b86:	4802      	ldr	r0, [pc, #8]	; (8001b90 <SSD1306_Fill+0x18>)
 8001b88:	f006 fa29 	bl	8007fde <memset>
}
 8001b8c:	bd08      	pop	{r3, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000be4 	.word	0x20000be4

08001b94 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001b94:	287f      	cmp	r0, #127	; 0x7f
 8001b96:	d822      	bhi.n	8001bde <SSD1306_DrawPixel+0x4a>
		x >= SSD1306_WIDTH ||
 8001b98:	293f      	cmp	r1, #63	; 0x3f
 8001b9a:	d820      	bhi.n	8001bde <SSD1306_DrawPixel+0x4a>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b9c:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <SSD1306_DrawPixel+0x4c>)
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	b17b      	cbz	r3, 8001bc2 <SSD1306_DrawPixel+0x2e>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001ba2:	b182      	cbz	r2, 8001bc6 <SSD1306_DrawPixel+0x32>
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001ba4:	b410      	push	{r4}
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ba6:	08cb      	lsrs	r3, r1, #3
 8001ba8:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001bac:	4c0d      	ldr	r4, [pc, #52]	; (8001be4 <SSD1306_DrawPixel+0x50>)
 8001bae:	f001 0107 	and.w	r1, r1, #7
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	408a      	lsls	r2, r1
 8001bb6:	5c23      	ldrb	r3, [r4, r0]
 8001bb8:	ea23 0302 	bic.w	r3, r3, r2
 8001bbc:	5423      	strb	r3, [r4, r0]
	}
}
 8001bbe:	bc10      	pop	{r4}
 8001bc0:	4770      	bx	lr
	if (color == SSD1306_COLOR_WHITE) {
 8001bc2:	2a01      	cmp	r2, #1
 8001bc4:	d1ee      	bne.n	8001ba4 <SSD1306_DrawPixel+0x10>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bc6:	08cb      	lsrs	r3, r1, #3
 8001bc8:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001bcc:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <SSD1306_DrawPixel+0x50>)
 8001bce:	f001 0107 	and.w	r1, r1, #7
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	408b      	lsls	r3, r1
 8001bd6:	5c11      	ldrb	r1, [r2, r0]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	5413      	strb	r3, [r2, r0]
 8001bdc:	4770      	bx	lr
 8001bde:	4770      	bx	lr
 8001be0:	20000bdc 	.word	0x20000bdc
 8001be4:	20000be4 	.word	0x20000be4

08001be8 <SSD1306_DrawBitmap>:
{
 8001be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bec:	b085      	sub	sp, #20
 8001bee:	4683      	mov	fp, r0
 8001bf0:	4688      	mov	r8, r1
 8001bf2:	9203      	str	r2, [sp, #12]
 8001bf4:	461e      	mov	r6, r3
 8001bf6:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 8001bfa:	9301      	str	r3, [sp, #4]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001bfc:	1df3      	adds	r3, r6, #7
 8001bfe:	bf48      	it	mi
 8001c00:	3307      	addmi	r3, #7
 8001c02:	10db      	asrs	r3, r3, #3
 8001c04:	9302      	str	r3, [sp, #8]
    for(int16_t j=0; j<h; j++, y++)
 8001c06:	9b01      	ldr	r3, [sp, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dd36      	ble.n	8001c7a <SSD1306_DrawBitmap+0x92>
 8001c0c:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8001c0e:	463d      	mov	r5, r7
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001c10:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	e026      	b.n	8001c66 <SSD1306_DrawBitmap+0x7e>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bfb8      	it	lt
 8001c1e:	1dda      	addlt	r2, r3, #7
 8001c20:	f342 02cf 	sbfx	r2, r2, #3, #16
 8001c24:	f819 5002 	ldrb.w	r5, [r9, r2]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001c28:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001c2c:	d10a      	bne.n	8001c44 <SSD1306_DrawBitmap+0x5c>
        for(int16_t i=0; i<w; i++)
 8001c2e:	3401      	adds	r4, #1
 8001c30:	b223      	sxth	r3, r4
 8001c32:	42b3      	cmp	r3, r6
 8001c34:	d00e      	beq.n	8001c54 <SSD1306_DrawBitmap+0x6c>
            if(i & 7)
 8001c36:	b29c      	uxth	r4, r3
 8001c38:	f013 0f07 	tst.w	r3, #7
 8001c3c:	d0ec      	beq.n	8001c18 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 8001c3e:	006d      	lsls	r5, r5, #1
 8001c40:	b2ed      	uxtb	r5, r5
 8001c42:	e7f1      	b.n	8001c28 <SSD1306_DrawBitmap+0x40>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001c44:	eb04 000b 	add.w	r0, r4, fp
 8001c48:	9a00      	ldr	r2, [sp, #0]
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	b280      	uxth	r0, r0
 8001c4e:	f7ff ffa1 	bl	8001b94 <SSD1306_DrawPixel>
 8001c52:	e7ec      	b.n	8001c2e <SSD1306_DrawBitmap+0x46>
    for(int16_t j=0; j<h; j++, y++)
 8001c54:	3701      	adds	r7, #1
 8001c56:	b23f      	sxth	r7, r7
 8001c58:	f108 0801 	add.w	r8, r8, #1
 8001c5c:	fa0f f888 	sxth.w	r8, r8
 8001c60:	9b01      	ldr	r3, [sp, #4]
 8001c62:	42bb      	cmp	r3, r7
 8001c64:	dd09      	ble.n	8001c7a <SSD1306_DrawBitmap+0x92>
        for(int16_t i=0; i<w; i++)
 8001c66:	2e00      	cmp	r6, #0
 8001c68:	ddf4      	ble.n	8001c54 <SSD1306_DrawBitmap+0x6c>
 8001c6a:	2300      	movs	r3, #0
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001c6c:	9a03      	ldr	r2, [sp, #12]
 8001c6e:	9902      	ldr	r1, [sp, #8]
 8001c70:	fb07 2901 	mla	r9, r7, r1, r2
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001c74:	fa1f fa88 	uxth.w	sl, r8
 8001c78:	e7dd      	b.n	8001c36 <SSD1306_DrawBitmap+0x4e>
}
 8001c7a:	b005      	add	sp, #20
 8001c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c80 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c80:	4b01      	ldr	r3, [pc, #4]	; (8001c88 <SSD1306_GotoXY+0x8>)
 8001c82:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001c84:	8059      	strh	r1, [r3, #2]
}
 8001c86:	4770      	bx	lr
 8001c88:	20000bdc 	.word	0x20000bdc

08001c8c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c90:	b083      	sub	sp, #12
 8001c92:	9001      	str	r0, [sp, #4]
 8001c94:	4691      	mov	r9, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <SSD1306_Putc+0x94>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	780b      	ldrb	r3, [r1, #0]
 8001ca0:	4413      	add	r3, r2
	if (
 8001ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca4:	dc38      	bgt.n	8001d18 <SSD1306_Putc+0x8c>
 8001ca6:	460e      	mov	r6, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <SSD1306_Putc+0x94>)
 8001caa:	885f      	ldrh	r7, [r3, #2]
 8001cac:	784b      	ldrb	r3, [r1, #1]
 8001cae:	18fa      	adds	r2, r7, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001cb0:	2a3f      	cmp	r2, #63	; 0x3f
 8001cb2:	dc33      	bgt.n	8001d1c <SSD1306_Putc+0x90>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001cb4:	b333      	cbz	r3, 8001d04 <SSD1306_Putc+0x78>
 8001cb6:	f04f 0a00 	mov.w	sl, #0
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001cba:	f1a0 0b20 	sub.w	fp, r0, #32
 8001cbe:	fb03 a30b 	mla	r3, r3, fp, sl
 8001cc2:	6872      	ldr	r2, [r6, #4]
 8001cc4:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001cc8:	7833      	ldrb	r3, [r6, #0]
 8001cca:	b1a3      	cbz	r3, 8001cf6 <SSD1306_Putc+0x6a>
 8001ccc:	9c00      	ldr	r4, [sp, #0]
 8001cce:	2500      	movs	r5, #0
			if ((b << j) & 0x8000) {
 8001cd0:	fa08 f305 	lsl.w	r3, r8, r5
 8001cd4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001cd8:	bf12      	itee	ne
 8001cda:	464a      	movne	r2, r9
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001cdc:	fab9 f289 	clzeq	r2, r9
 8001ce0:	0952      	lsreq	r2, r2, #5
 8001ce2:	4639      	mov	r1, r7
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff ff55 	bl	8001b94 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cea:	3501      	adds	r5, #1
 8001cec:	3401      	adds	r4, #1
 8001cee:	b2a4      	uxth	r4, r4
 8001cf0:	7833      	ldrb	r3, [r6, #0]
 8001cf2:	42ab      	cmp	r3, r5
 8001cf4:	d8ec      	bhi.n	8001cd0 <SSD1306_Putc+0x44>
	for (i = 0; i < Font->FontHeight; i++) {
 8001cf6:	f10a 0a01 	add.w	sl, sl, #1
 8001cfa:	7873      	ldrb	r3, [r6, #1]
 8001cfc:	3701      	adds	r7, #1
 8001cfe:	b2bf      	uxth	r7, r7
 8001d00:	4553      	cmp	r3, sl
 8001d02:	d8dc      	bhi.n	8001cbe <SSD1306_Putc+0x32>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d04:	7833      	ldrb	r3, [r6, #0]
 8001d06:	9a00      	ldr	r2, [sp, #0]
 8001d08:	441a      	add	r2, r3
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <SSD1306_Putc+0x94>)
 8001d0e:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 8001d10:	9801      	ldr	r0, [sp, #4]
}
 8001d12:	b003      	add	sp, #12
 8001d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e7fa      	b.n	8001d12 <SSD1306_Putc+0x86>
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	e7f8      	b.n	8001d12 <SSD1306_Putc+0x86>
 8001d20:	20000bdc 	.word	0x20000bdc

08001d24 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d24:	b570      	push	{r4, r5, r6, lr}
 8001d26:	4604      	mov	r4, r0
 8001d28:	460e      	mov	r6, r1
 8001d2a:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001d2c:	7800      	ldrb	r0, [r0, #0]
 8001d2e:	b158      	cbz	r0, 8001d48 <SSD1306_Puts+0x24>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d30:	462a      	mov	r2, r5
 8001d32:	4631      	mov	r1, r6
 8001d34:	f7ff ffaa 	bl	8001c8c <SSD1306_Putc>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	7820      	ldrb	r0, [r4, #0]
 8001d3c:	4283      	cmp	r3, r0
 8001d3e:	d103      	bne.n	8001d48 <SSD1306_Puts+0x24>
	while (*str) {
 8001d40:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d1f3      	bne.n	8001d30 <SSD1306_Puts+0xc>
		str++;
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8001d48:	bd70      	pop	{r4, r5, r6, pc}

08001d4a <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001d4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001d54:	287f      	cmp	r0, #127	; 0x7f
 8001d56:	bf28      	it	cs
 8001d58:	207f      	movcs	r0, #127	; 0x7f
 8001d5a:	4605      	mov	r5, r0
		x0 = SSD1306_WIDTH - 1;
	}
	if (x1 >= SSD1306_WIDTH) {
 8001d5c:	2a7f      	cmp	r2, #127	; 0x7f
 8001d5e:	bf28      	it	cs
 8001d60:	227f      	movcs	r2, #127	; 0x7f
 8001d62:	4690      	mov	r8, r2
		x1 = SSD1306_WIDTH - 1;
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001d64:	293f      	cmp	r1, #63	; 0x3f
 8001d66:	bf28      	it	cs
 8001d68:	213f      	movcs	r1, #63	; 0x3f
 8001d6a:	460c      	mov	r4, r1
		y0 = SSD1306_HEIGHT - 1;
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001d6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d6e:	bf28      	it	cs
 8001d70:	233f      	movcs	r3, #63	; 0x3f
 8001d72:	9301      	str	r3, [sp, #4]
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001d74:	4290      	cmp	r0, r2
 8001d76:	d21c      	bcs.n	8001db2 <SSD1306_DrawLine+0x68>
 8001d78:	eba2 0a00 	sub.w	sl, r2, r0
 8001d7c:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001d80:	4299      	cmp	r1, r3
 8001d82:	d326      	bcc.n	8001dd2 <SSD1306_DrawLine+0x88>
 8001d84:	9b01      	ldr	r3, [sp, #4]
 8001d86:	1ae7      	subs	r7, r4, r3
 8001d88:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001d8a:	4545      	cmp	r5, r8
 8001d8c:	d230      	bcs.n	8001df0 <SSD1306_DrawLine+0xa6>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	9302      	str	r3, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001d98:	4557      	cmp	r7, sl
 8001d9a:	da2e      	bge.n	8001dfa <SSD1306_DrawLine+0xb0>
 8001d9c:	eb0a 76da 	add.w	r6, sl, sl, lsr #31
 8001da0:	1076      	asrs	r6, r6, #1

	if (dx == 0) {
 8001da2:	f1ba 0f00 	cmp.w	sl, #0
 8001da6:	d02e      	beq.n	8001e06 <SSD1306_DrawLine+0xbc>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 8001da8:	2f00      	cmp	r7, #0
 8001daa:	d047      	beq.n	8001e3c <SSD1306_DrawLine+0xf2>
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 8001dac:	f1ca 0b00 	rsb	fp, sl, #0
 8001db0:	e06c      	b.n	8001e8c <SSD1306_DrawLine+0x142>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001db2:	eba0 0a02 	sub.w	sl, r0, r2
 8001db6:	fa0f fa8a 	sxth.w	sl, sl
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001dba:	9b01      	ldr	r3, [sp, #4]
 8001dbc:	4299      	cmp	r1, r3
 8001dbe:	d2e1      	bcs.n	8001d84 <SSD1306_DrawLine+0x3a>
 8001dc0:	9b01      	ldr	r3, [sp, #4]
 8001dc2:	1a5f      	subs	r7, r3, r1
 8001dc4:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001dcc:	2301      	movs	r3, #1
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	e7e2      	b.n	8001d98 <SSD1306_DrawLine+0x4e>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001dd2:	9b01      	ldr	r3, [sp, #4]
 8001dd4:	1a5f      	subs	r7, r3, r1
 8001dd6:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8001dd8:	4290      	cmp	r0, r2
 8001dda:	d203      	bcs.n	8001de4 <SSD1306_DrawLine+0x9a>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	e7d9      	b.n	8001d98 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001dea:	2301      	movs	r3, #1
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	e7d3      	b.n	8001d98 <SSD1306_DrawLine+0x4e>
	sx = (x0 < x1) ? 1 : -1; 
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	e7ce      	b.n	8001d98 <SSD1306_DrawLine+0x4e>
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001dfa:	eb07 76d7 	add.w	r6, r7, r7, lsr #31
 8001dfe:	1076      	asrs	r6, r6, #1
 8001e00:	4276      	negs	r6, r6
 8001e02:	b236      	sxth	r6, r6
 8001e04:	e7cd      	b.n	8001da2 <SSD1306_DrawLine+0x58>
		if (y1 < y0) {
 8001e06:	9a01      	ldr	r2, [sp, #4]
 8001e08:	4294      	cmp	r4, r2
 8001e0a:	d902      	bls.n	8001e12 <SSD1306_DrawLine+0xc8>
 8001e0c:	4623      	mov	r3, r4
			y0 = tmp;
 8001e0e:	4614      	mov	r4, r2
			y1 = y0;
 8001e10:	9301      	str	r3, [sp, #4]
		if (x1 < x0) {
 8001e12:	45a8      	cmp	r8, r5
 8001e14:	bf28      	it	cs
 8001e16:	46a8      	movcs	r8, r5
 8001e18:	fa1f f888 	uxth.w	r8, r8
		for (i = y0; i <= y1; i++) {
 8001e1c:	b224      	sxth	r4, r4
 8001e1e:	9b01      	ldr	r3, [sp, #4]
 8001e20:	461d      	mov	r5, r3
 8001e22:	429c      	cmp	r4, r3
 8001e24:	dc26      	bgt.n	8001e74 <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(x0, i, c);
 8001e26:	b2a4      	uxth	r4, r4
 8001e28:	464a      	mov	r2, r9
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	4640      	mov	r0, r8
 8001e2e:	f7ff feb1 	bl	8001b94 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001e32:	3401      	adds	r4, #1
 8001e34:	b224      	sxth	r4, r4
 8001e36:	42ac      	cmp	r4, r5
 8001e38:	ddf5      	ble.n	8001e26 <SSD1306_DrawLine+0xdc>
 8001e3a:	e01b      	b.n	8001e74 <SSD1306_DrawLine+0x12a>
		if (y1 < y0) {
 8001e3c:	9b01      	ldr	r3, [sp, #4]
 8001e3e:	429c      	cmp	r4, r3
 8001e40:	bf28      	it	cs
 8001e42:	461c      	movcs	r4, r3
 8001e44:	b2a4      	uxth	r4, r4
		if (x1 < x0) {
 8001e46:	4545      	cmp	r5, r8
 8001e48:	d902      	bls.n	8001e50 <SSD1306_DrawLine+0x106>
 8001e4a:	462b      	mov	r3, r5
			x0 = tmp;
 8001e4c:	4645      	mov	r5, r8
			x1 = x0;
 8001e4e:	4698      	mov	r8, r3
		for (i = x0; i <= x1; i++) {
 8001e50:	b22d      	sxth	r5, r5
 8001e52:	4646      	mov	r6, r8
 8001e54:	4545      	cmp	r5, r8
 8001e56:	dc0d      	bgt.n	8001e74 <SSD1306_DrawLine+0x12a>
			SSD1306_DrawPixel(i, y0, c);
 8001e58:	b2ad      	uxth	r5, r5
 8001e5a:	464a      	mov	r2, r9
 8001e5c:	4621      	mov	r1, r4
 8001e5e:	4628      	mov	r0, r5
 8001e60:	f7ff fe98 	bl	8001b94 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001e64:	3501      	adds	r5, #1
 8001e66:	b22d      	sxth	r5, r5
 8001e68:	42b5      	cmp	r5, r6
 8001e6a:	ddf5      	ble.n	8001e58 <SSD1306_DrawLine+0x10e>
 8001e6c:	e002      	b.n	8001e74 <SSD1306_DrawLine+0x12a>
		if (x0 == x1 && y0 == y1) {
 8001e6e:	9b01      	ldr	r3, [sp, #4]
 8001e70:	429c      	cmp	r4, r3
 8001e72:	d112      	bne.n	8001e9a <SSD1306_DrawLine+0x150>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8001e74:	b005      	add	sp, #20
 8001e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e7a:	4633      	mov	r3, r6
		if (e2 < dy) {
 8001e7c:	42be      	cmp	r6, r7
 8001e7e:	da04      	bge.n	8001e8a <SSD1306_DrawLine+0x140>
			err += dx;
 8001e80:	4453      	add	r3, sl
 8001e82:	b21b      	sxth	r3, r3
			y0 += sy;
 8001e84:	9a02      	ldr	r2, [sp, #8]
 8001e86:	4414      	add	r4, r2
 8001e88:	b2a4      	uxth	r4, r4
			x1 = x0;
 8001e8a:	461e      	mov	r6, r3
		SSD1306_DrawPixel(x0, y0, c);
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	4621      	mov	r1, r4
 8001e90:	4628      	mov	r0, r5
 8001e92:	f7ff fe7f 	bl	8001b94 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001e96:	45a8      	cmp	r8, r5
 8001e98:	d0e9      	beq.n	8001e6e <SSD1306_DrawLine+0x124>
		if (e2 > -dx) {
 8001e9a:	455e      	cmp	r6, fp
 8001e9c:	dded      	ble.n	8001e7a <SSD1306_DrawLine+0x130>
			err -= dy;
 8001e9e:	1bf3      	subs	r3, r6, r7
 8001ea0:	b21b      	sxth	r3, r3
			x0 += sx;
 8001ea2:	9a03      	ldr	r2, [sp, #12]
 8001ea4:	4415      	add	r5, r2
 8001ea6:	b2ad      	uxth	r5, r5
 8001ea8:	e7e8      	b.n	8001e7c <SSD1306_DrawLine+0x132>

08001eaa <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 8001eb4:	287f      	cmp	r0, #127	; 0x7f
 8001eb6:	d832      	bhi.n	8001f1e <SSD1306_DrawRectangle+0x74>
 8001eb8:	4606      	mov	r6, r0
 8001eba:	460f      	mov	r7, r1
 8001ebc:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 8001ebe:	293f      	cmp	r1, #63	; 0x3f
 8001ec0:	d82d      	bhi.n	8001f1e <SSD1306_DrawRectangle+0x74>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001ec2:	1883      	adds	r3, r0, r2
 8001ec4:	2b7f      	cmp	r3, #127	; 0x7f
		w = SSD1306_WIDTH - x;
 8001ec6:	bfc4      	itt	gt
 8001ec8:	f1c0 0280 	rsbgt	r2, r0, #128	; 0x80
 8001ecc:	b292      	uxthgt	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001ece:	194b      	adds	r3, r1, r5
 8001ed0:	2b3f      	cmp	r3, #63	; 0x3f
		h = SSD1306_HEIGHT - y;
 8001ed2:	bfc4      	itt	gt
 8001ed4:	f1c1 0540 	rsbgt	r5, r1, #64	; 0x40
 8001ed8:	b2ad      	uxthgt	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8001eda:	1814      	adds	r4, r2, r0
 8001edc:	b2a4      	uxth	r4, r4
 8001ede:	f8cd 8000 	str.w	r8, [sp]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4622      	mov	r2, r4
 8001ee6:	f7ff ff30 	bl	8001d4a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8001eea:	443d      	add	r5, r7
 8001eec:	b2ad      	uxth	r5, r5
 8001eee:	f8cd 8000 	str.w	r8, [sp]
 8001ef2:	462b      	mov	r3, r5
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f7ff ff26 	bl	8001d4a <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8001efe:	f8cd 8000 	str.w	r8, [sp]
 8001f02:	462b      	mov	r3, r5
 8001f04:	4632      	mov	r2, r6
 8001f06:	4639      	mov	r1, r7
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f7ff ff1e 	bl	8001d4a <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8001f0e:	f8cd 8000 	str.w	r8, [sp]
 8001f12:	462b      	mov	r3, r5
 8001f14:	4622      	mov	r2, r4
 8001f16:	4639      	mov	r1, r7
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ff16 	bl	8001d4a <SSD1306_DrawLine>
}
 8001f1e:	b002      	add	sp, #8
 8001f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f24 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	4615      	mov	r5, r2
 8001f2c:	9200      	str	r2, [sp, #0]
 8001f2e:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 8001f30:	b294      	uxth	r4, r2
 8001f32:	f1c4 0301 	rsb	r3, r4, #1
 8001f36:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 8001f3a:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	9303      	str	r3, [sp, #12]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001f44:	fa1f fa80 	uxth.w	sl, r0
 8001f48:	fa1f fb81 	uxth.w	fp, r1
 8001f4c:	eb04 010b 	add.w	r1, r4, fp
 8001f50:	4632      	mov	r2, r6
 8001f52:	b289      	uxth	r1, r1
 8001f54:	4650      	mov	r0, sl
 8001f56:	f7ff fe1d 	bl	8001b94 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001f5a:	ebab 0104 	sub.w	r1, fp, r4
 8001f5e:	4632      	mov	r2, r6
 8001f60:	b289      	uxth	r1, r1
 8001f62:	4650      	mov	r0, sl
 8001f64:	f7ff fe16 	bl	8001b94 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001f68:	eb04 000a 	add.w	r0, r4, sl
 8001f6c:	4632      	mov	r2, r6
 8001f6e:	4659      	mov	r1, fp
 8001f70:	b280      	uxth	r0, r0
 8001f72:	f7ff fe0f 	bl	8001b94 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001f76:	ebaa 0004 	sub.w	r0, sl, r4
 8001f7a:	4632      	mov	r2, r6
 8001f7c:	4659      	mov	r1, fp
 8001f7e:	b280      	uxth	r0, r0
 8001f80:	f7ff fe08 	bl	8001b94 <SSD1306_DrawPixel>

    while (x < y) {
 8001f84:	2d00      	cmp	r5, #0
 8001f86:	dd65      	ble.n	8002054 <SSD1306_DrawCircle+0x130>
	int16_t x = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	e05e      	b.n	800204c <SSD1306_DrawCircle+0x128>
        if (f >= 0) {
            y--;
 8001f8e:	9b00      	ldr	r3, [sp, #0]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	9300      	str	r3, [sp, #0]
            ddF_y += 2;
 8001f96:	9b03      	ldr	r3, [sp, #12]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 8001f9e:	444b      	add	r3, r9
 8001fa0:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 8001fa4:	9b01      	ldr	r3, [sp, #4]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b29c      	uxth	r4, r3
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	9301      	str	r3, [sp, #4]
        ddF_x += 2;
 8001fae:	eb09 0944 	add.w	r9, r9, r4, lsl #1
        f += ddF_x;
 8001fb2:	f109 0901 	add.w	r9, r9, #1
 8001fb6:	fa0f f989 	sxth.w	r9, r9

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001fba:	eb0a 0304 	add.w	r3, sl, r4
 8001fbe:	b298      	uxth	r0, r3
 8001fc0:	f8bd 5000 	ldrh.w	r5, [sp]
 8001fc4:	eb0b 0805 	add.w	r8, fp, r5
 8001fc8:	fa1f f888 	uxth.w	r8, r8
 8001fcc:	4632      	mov	r2, r6
 8001fce:	4641      	mov	r1, r8
 8001fd0:	9002      	str	r0, [sp, #8]
 8001fd2:	f7ff fddf 	bl	8001b94 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001fd6:	ebaa 0704 	sub.w	r7, sl, r4
 8001fda:	b2bf      	uxth	r7, r7
 8001fdc:	4632      	mov	r2, r6
 8001fde:	4641      	mov	r1, r8
 8001fe0:	4638      	mov	r0, r7
 8001fe2:	f7ff fdd7 	bl	8001b94 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001fe6:	ebab 0805 	sub.w	r8, fp, r5
 8001fea:	fa1f f888 	uxth.w	r8, r8
 8001fee:	4632      	mov	r2, r6
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	9802      	ldr	r0, [sp, #8]
 8001ff4:	f7ff fdce 	bl	8001b94 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001ff8:	4632      	mov	r2, r6
 8001ffa:	4641      	mov	r1, r8
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	f7ff fdc9 	bl	8001b94 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8002002:	eb0a 0705 	add.w	r7, sl, r5
 8002006:	b2bf      	uxth	r7, r7
 8002008:	eb0b 0804 	add.w	r8, fp, r4
 800200c:	fa1f f888 	uxth.w	r8, r8
 8002010:	4632      	mov	r2, r6
 8002012:	4641      	mov	r1, r8
 8002014:	4638      	mov	r0, r7
 8002016:	f7ff fdbd 	bl	8001b94 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 800201a:	ebaa 0505 	sub.w	r5, sl, r5
 800201e:	b2ad      	uxth	r5, r5
 8002020:	4632      	mov	r2, r6
 8002022:	4641      	mov	r1, r8
 8002024:	4628      	mov	r0, r5
 8002026:	f7ff fdb5 	bl	8001b94 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 800202a:	ebab 0404 	sub.w	r4, fp, r4
 800202e:	b2a4      	uxth	r4, r4
 8002030:	4632      	mov	r2, r6
 8002032:	4621      	mov	r1, r4
 8002034:	4638      	mov	r0, r7
 8002036:	f7ff fdad 	bl	8001b94 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 800203a:	4632      	mov	r2, r6
 800203c:	4621      	mov	r1, r4
 800203e:	4628      	mov	r0, r5
 8002040:	f7ff fda8 	bl	8001b94 <SSD1306_DrawPixel>
    while (x < y) {
 8002044:	9a00      	ldr	r2, [sp, #0]
 8002046:	9b01      	ldr	r3, [sp, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dd03      	ble.n	8002054 <SSD1306_DrawCircle+0x130>
        if (f >= 0) {
 800204c:	f1b9 0f00 	cmp.w	r9, #0
 8002050:	da9d      	bge.n	8001f8e <SSD1306_DrawCircle+0x6a>
 8002052:	e7a7      	b.n	8001fa4 <SSD1306_DrawCircle+0x80>
    }
}
 8002054:	b005      	add	sp, #20
 8002056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800205a <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800205a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800205e:	b087      	sub	sp, #28
 8002060:	4690      	mov	r8, r2
 8002062:	9203      	str	r2, [sp, #12]
 8002064:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8002066:	b295      	uxth	r5, r2
 8002068:	f1c5 0401 	rsb	r4, r5, #1
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 800206c:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	b21b      	sxth	r3, r3
 8002074:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002076:	fa1f fb80 	uxth.w	fp, r0
 800207a:	b28f      	uxth	r7, r1
 800207c:	19e9      	adds	r1, r5, r7
 800207e:	4652      	mov	r2, sl
 8002080:	b289      	uxth	r1, r1
 8002082:	4658      	mov	r0, fp
 8002084:	f7ff fd86 	bl	8001b94 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8002088:	1b79      	subs	r1, r7, r5
 800208a:	4652      	mov	r2, sl
 800208c:	b289      	uxth	r1, r1
 800208e:	4658      	mov	r0, fp
 8002090:	f7ff fd80 	bl	8001b94 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002094:	eb05 060b 	add.w	r6, r5, fp
 8002098:	b2b6      	uxth	r6, r6
 800209a:	4652      	mov	r2, sl
 800209c:	4639      	mov	r1, r7
 800209e:	4630      	mov	r0, r6
 80020a0:	f7ff fd78 	bl	8001b94 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80020a4:	ebab 0505 	sub.w	r5, fp, r5
 80020a8:	b2ad      	uxth	r5, r5
 80020aa:	4652      	mov	r2, sl
 80020ac:	4639      	mov	r1, r7
 80020ae:	4628      	mov	r0, r5
 80020b0:	f7ff fd70 	bl	8001b94 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 80020b4:	f8cd a000 	str.w	sl, [sp]
 80020b8:	463b      	mov	r3, r7
 80020ba:	4632      	mov	r2, r6
 80020bc:	4639      	mov	r1, r7
 80020be:	4628      	mov	r0, r5
 80020c0:	f7ff fe43 	bl	8001d4a <SSD1306_DrawLine>

    while (x < y) {
 80020c4:	4643      	mov	r3, r8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dd52      	ble.n	8002170 <SSD1306_DrawFilledCircle+0x116>
 80020ca:	b224      	sxth	r4, r4
	int16_t x = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	9304      	str	r3, [sp, #16]
 80020d0:	e04b      	b.n	800216a <SSD1306_DrawFilledCircle+0x110>
        if (f >= 0) {
            y--;
 80020d2:	9b03      	ldr	r3, [sp, #12]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	9303      	str	r3, [sp, #12]
            ddF_y += 2;
 80020da:	9b05      	ldr	r3, [sp, #20]
 80020dc:	3302      	adds	r3, #2
 80020de:	b21a      	sxth	r2, r3
 80020e0:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 80020e2:	4423      	add	r3, r4
 80020e4:	b21c      	sxth	r4, r3
        }
        x++;
 80020e6:	9b04      	ldr	r3, [sp, #16]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b29d      	uxth	r5, r3
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	9304      	str	r3, [sp, #16]
        ddF_x += 2;
 80020f0:	eb04 0445 	add.w	r4, r4, r5, lsl #1
        f += ddF_x;
 80020f4:	3401      	adds	r4, #1
 80020f6:	b224      	sxth	r4, r4

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80020f8:	ebab 0905 	sub.w	r9, fp, r5
 80020fc:	fa1f f989 	uxth.w	r9, r9
 8002100:	f8bd 600c 	ldrh.w	r6, [sp, #12]
 8002104:	19b9      	adds	r1, r7, r6
 8002106:	b289      	uxth	r1, r1
 8002108:	eb0b 0805 	add.w	r8, fp, r5
 800210c:	fa1f f888 	uxth.w	r8, r8
 8002110:	f8cd a000 	str.w	sl, [sp]
 8002114:	460b      	mov	r3, r1
 8002116:	4642      	mov	r2, r8
 8002118:	4648      	mov	r0, r9
 800211a:	f7ff fe16 	bl	8001d4a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800211e:	1bb9      	subs	r1, r7, r6
 8002120:	b289      	uxth	r1, r1
 8002122:	f8cd a000 	str.w	sl, [sp]
 8002126:	460b      	mov	r3, r1
 8002128:	464a      	mov	r2, r9
 800212a:	4640      	mov	r0, r8
 800212c:	f7ff fe0d 	bl	8001d4a <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8002130:	eb0b 0806 	add.w	r8, fp, r6
 8002134:	fa1f f888 	uxth.w	r8, r8
 8002138:	1979      	adds	r1, r7, r5
 800213a:	b289      	uxth	r1, r1
 800213c:	ebab 0606 	sub.w	r6, fp, r6
 8002140:	b2b6      	uxth	r6, r6
 8002142:	f8cd a000 	str.w	sl, [sp]
 8002146:	460b      	mov	r3, r1
 8002148:	4632      	mov	r2, r6
 800214a:	4640      	mov	r0, r8
 800214c:	f7ff fdfd 	bl	8001d4a <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8002150:	1b79      	subs	r1, r7, r5
 8002152:	b289      	uxth	r1, r1
 8002154:	f8cd a000 	str.w	sl, [sp]
 8002158:	460b      	mov	r3, r1
 800215a:	4632      	mov	r2, r6
 800215c:	4640      	mov	r0, r8
 800215e:	f7ff fdf4 	bl	8001d4a <SSD1306_DrawLine>
    while (x < y) {
 8002162:	9a03      	ldr	r2, [sp, #12]
 8002164:	9b04      	ldr	r3, [sp, #16]
 8002166:	429a      	cmp	r2, r3
 8002168:	dd02      	ble.n	8002170 <SSD1306_DrawFilledCircle+0x116>
        if (f >= 0) {
 800216a:	2c00      	cmp	r4, #0
 800216c:	dab1      	bge.n	80020d2 <SSD1306_DrawFilledCircle+0x78>
 800216e:	e7ba      	b.n	80020e6 <SSD1306_DrawFilledCircle+0x8c>
    }
}
 8002170:	b007      	add	sp, #28
 8002172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002178 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002178:	b500      	push	{lr}
 800217a:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 800217c:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8002180:	4619      	mov	r1, r3
 8002182:	b173      	cbz	r3, 80021a2 <ssd1306_I2C_WriteMulti+0x2a>
 8002184:	f04f 0e00 	mov.w	lr, #0
dt[i+1] = data[i];
 8002188:	ab02      	add	r3, sp, #8
 800218a:	eb03 0c0e 	add.w	ip, r3, lr
 800218e:	f812 300e 	ldrb.w	r3, [r2, lr]
 8002192:	f88c 3001 	strb.w	r3, [ip, #1]
for(i = 0; i < count; i++)
 8002196:	f10e 0c01 	add.w	ip, lr, #1
 800219a:	fa5f fe8c 	uxtb.w	lr, ip
 800219e:	458e      	cmp	lr, r1
 80021a0:	d3f2      	bcc.n	8002188 <ssd1306_I2C_WriteMulti+0x10>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80021a2:	1c4b      	adds	r3, r1, #1
 80021a4:	220a      	movs	r2, #10
 80021a6:	9200      	str	r2, [sp, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	aa02      	add	r2, sp, #8
 80021ac:	4601      	mov	r1, r0
 80021ae:	4803      	ldr	r0, [pc, #12]	; (80021bc <ssd1306_I2C_WriteMulti+0x44>)
 80021b0:	f001 f9d4 	bl	800355c <HAL_I2C_Master_Transmit>
}
 80021b4:	b043      	add	sp, #268	; 0x10c
 80021b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ba:	bf00      	nop
 80021bc:	20000a2c 	.word	0x20000a2c

080021c0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80021c0:	b500      	push	{lr}
 80021c2:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80021c4:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80021c8:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80021cc:	230a      	movs	r3, #10
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2302      	movs	r3, #2
 80021d2:	aa03      	add	r2, sp, #12
 80021d4:	4601      	mov	r1, r0
 80021d6:	4803      	ldr	r0, [pc, #12]	; (80021e4 <ssd1306_I2C_Write+0x24>)
 80021d8:	f001 f9c0 	bl	800355c <HAL_I2C_Master_Transmit>
}
 80021dc:	b005      	add	sp, #20
 80021de:	f85d fb04 	ldr.w	pc, [sp], #4
 80021e2:	bf00      	nop
 80021e4:	20000a2c 	.word	0x20000a2c

080021e8 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80021e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (m = 0; m < 8; m++) {
 80021ec:	4f10      	ldr	r7, [pc, #64]	; (8002230 <SSD1306_UpdateScreen+0x48>)
void SSD1306_UpdateScreen(void) {
 80021ee:	24b0      	movs	r4, #176	; 0xb0
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021f0:	2600      	movs	r6, #0
 80021f2:	2578      	movs	r5, #120	; 0x78
		SSD1306_WRITECOMMAND(0x10);
 80021f4:	f04f 0810 	mov.w	r8, #16
		SSD1306_WRITECOMMAND(0xB0 + m);
 80021f8:	4622      	mov	r2, r4
 80021fa:	4631      	mov	r1, r6
 80021fc:	4628      	mov	r0, r5
 80021fe:	f7ff ffdf 	bl	80021c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002202:	4632      	mov	r2, r6
 8002204:	4631      	mov	r1, r6
 8002206:	4628      	mov	r0, r5
 8002208:	f7ff ffda 	bl	80021c0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800220c:	4642      	mov	r2, r8
 800220e:	4631      	mov	r1, r6
 8002210:	4628      	mov	r0, r5
 8002212:	f7ff ffd5 	bl	80021c0 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	463a      	mov	r2, r7
 800221a:	2140      	movs	r1, #64	; 0x40
 800221c:	4628      	mov	r0, r5
 800221e:	f7ff ffab 	bl	8002178 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002222:	3401      	adds	r4, #1
 8002224:	b2e4      	uxtb	r4, r4
 8002226:	3780      	adds	r7, #128	; 0x80
 8002228:	2cb8      	cmp	r4, #184	; 0xb8
 800222a:	d1e5      	bne.n	80021f8 <SSD1306_UpdateScreen+0x10>
}
 800222c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002230:	20000be4 	.word	0x20000be4

08002234 <SSD1306_Clear>:
{
 8002234:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff fc9e 	bl	8001b78 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800223c:	f7ff ffd4 	bl	80021e8 <SSD1306_UpdateScreen>
}
 8002240:	bd08      	pop	{r3, pc}
	...

08002244 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8002244:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002246:	f644 6320 	movw	r3, #20000	; 0x4e20
 800224a:	2201      	movs	r2, #1
 800224c:	2178      	movs	r1, #120	; 0x78
 800224e:	4854      	ldr	r0, [pc, #336]	; (80023a0 <SSD1306_Init+0x15c>)
 8002250:	f001 fa88 	bl	8003764 <HAL_I2C_IsDeviceReady>
 8002254:	2800      	cmp	r0, #0
 8002256:	f040 80a1 	bne.w	800239c <SSD1306_Init+0x158>
 800225a:	f640 13c4 	movw	r3, #2500	; 0x9c4
	while(p>0)
 800225e:	3b01      	subs	r3, #1
 8002260:	d1fd      	bne.n	800225e <SSD1306_Init+0x1a>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002262:	22ae      	movs	r2, #174	; 0xae
 8002264:	2100      	movs	r1, #0
 8002266:	2078      	movs	r0, #120	; 0x78
 8002268:	f7ff ffaa 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800226c:	2220      	movs	r2, #32
 800226e:	2100      	movs	r1, #0
 8002270:	2078      	movs	r0, #120	; 0x78
 8002272:	f7ff ffa5 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002276:	2210      	movs	r2, #16
 8002278:	2100      	movs	r1, #0
 800227a:	2078      	movs	r0, #120	; 0x78
 800227c:	f7ff ffa0 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002280:	22b0      	movs	r2, #176	; 0xb0
 8002282:	2100      	movs	r1, #0
 8002284:	2078      	movs	r0, #120	; 0x78
 8002286:	f7ff ff9b 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800228a:	22c8      	movs	r2, #200	; 0xc8
 800228c:	2100      	movs	r1, #0
 800228e:	2078      	movs	r0, #120	; 0x78
 8002290:	f7ff ff96 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002294:	2200      	movs	r2, #0
 8002296:	4611      	mov	r1, r2
 8002298:	2078      	movs	r0, #120	; 0x78
 800229a:	f7ff ff91 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800229e:	2210      	movs	r2, #16
 80022a0:	2100      	movs	r1, #0
 80022a2:	2078      	movs	r0, #120	; 0x78
 80022a4:	f7ff ff8c 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80022a8:	2240      	movs	r2, #64	; 0x40
 80022aa:	2100      	movs	r1, #0
 80022ac:	2078      	movs	r0, #120	; 0x78
 80022ae:	f7ff ff87 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80022b2:	2281      	movs	r2, #129	; 0x81
 80022b4:	2100      	movs	r1, #0
 80022b6:	2078      	movs	r0, #120	; 0x78
 80022b8:	f7ff ff82 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80022bc:	22ff      	movs	r2, #255	; 0xff
 80022be:	2100      	movs	r1, #0
 80022c0:	2078      	movs	r0, #120	; 0x78
 80022c2:	f7ff ff7d 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80022c6:	22a1      	movs	r2, #161	; 0xa1
 80022c8:	2100      	movs	r1, #0
 80022ca:	2078      	movs	r0, #120	; 0x78
 80022cc:	f7ff ff78 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80022d0:	22a6      	movs	r2, #166	; 0xa6
 80022d2:	2100      	movs	r1, #0
 80022d4:	2078      	movs	r0, #120	; 0x78
 80022d6:	f7ff ff73 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80022da:	22a8      	movs	r2, #168	; 0xa8
 80022dc:	2100      	movs	r1, #0
 80022de:	2078      	movs	r0, #120	; 0x78
 80022e0:	f7ff ff6e 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80022e4:	223f      	movs	r2, #63	; 0x3f
 80022e6:	2100      	movs	r1, #0
 80022e8:	2078      	movs	r0, #120	; 0x78
 80022ea:	f7ff ff69 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80022ee:	22a4      	movs	r2, #164	; 0xa4
 80022f0:	2100      	movs	r1, #0
 80022f2:	2078      	movs	r0, #120	; 0x78
 80022f4:	f7ff ff64 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022f8:	22d3      	movs	r2, #211	; 0xd3
 80022fa:	2100      	movs	r1, #0
 80022fc:	2078      	movs	r0, #120	; 0x78
 80022fe:	f7ff ff5f 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002302:	2200      	movs	r2, #0
 8002304:	4611      	mov	r1, r2
 8002306:	2078      	movs	r0, #120	; 0x78
 8002308:	f7ff ff5a 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800230c:	22d5      	movs	r2, #213	; 0xd5
 800230e:	2100      	movs	r1, #0
 8002310:	2078      	movs	r0, #120	; 0x78
 8002312:	f7ff ff55 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002316:	22f0      	movs	r2, #240	; 0xf0
 8002318:	2100      	movs	r1, #0
 800231a:	2078      	movs	r0, #120	; 0x78
 800231c:	f7ff ff50 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002320:	22d9      	movs	r2, #217	; 0xd9
 8002322:	2100      	movs	r1, #0
 8002324:	2078      	movs	r0, #120	; 0x78
 8002326:	f7ff ff4b 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800232a:	2222      	movs	r2, #34	; 0x22
 800232c:	2100      	movs	r1, #0
 800232e:	2078      	movs	r0, #120	; 0x78
 8002330:	f7ff ff46 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002334:	22da      	movs	r2, #218	; 0xda
 8002336:	2100      	movs	r1, #0
 8002338:	2078      	movs	r0, #120	; 0x78
 800233a:	f7ff ff41 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800233e:	2212      	movs	r2, #18
 8002340:	2100      	movs	r1, #0
 8002342:	2078      	movs	r0, #120	; 0x78
 8002344:	f7ff ff3c 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002348:	22db      	movs	r2, #219	; 0xdb
 800234a:	2100      	movs	r1, #0
 800234c:	2078      	movs	r0, #120	; 0x78
 800234e:	f7ff ff37 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002352:	2220      	movs	r2, #32
 8002354:	2100      	movs	r1, #0
 8002356:	2078      	movs	r0, #120	; 0x78
 8002358:	f7ff ff32 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800235c:	228d      	movs	r2, #141	; 0x8d
 800235e:	2100      	movs	r1, #0
 8002360:	2078      	movs	r0, #120	; 0x78
 8002362:	f7ff ff2d 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002366:	2214      	movs	r2, #20
 8002368:	2100      	movs	r1, #0
 800236a:	2078      	movs	r0, #120	; 0x78
 800236c:	f7ff ff28 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002370:	22af      	movs	r2, #175	; 0xaf
 8002372:	2100      	movs	r1, #0
 8002374:	2078      	movs	r0, #120	; 0x78
 8002376:	f7ff ff23 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800237a:	222e      	movs	r2, #46	; 0x2e
 800237c:	2100      	movs	r1, #0
 800237e:	2078      	movs	r0, #120	; 0x78
 8002380:	f7ff ff1e 	bl	80021c0 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002384:	2000      	movs	r0, #0
 8002386:	f7ff fbf7 	bl	8001b78 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800238a:	f7ff ff2d 	bl	80021e8 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SSD1306_Init+0x160>)
 8002390:	2200      	movs	r2, #0
 8002392:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002394:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8002396:	2001      	movs	r0, #1
 8002398:	7158      	strb	r0, [r3, #5]
}
 800239a:	bd08      	pop	{r3, pc}
		return 0;
 800239c:	2000      	movs	r0, #0
 800239e:	e7fc      	b.n	800239a <SSD1306_Init+0x156>
 80023a0:	20000a2c 	.word	0x20000a2c
 80023a4:	20000bdc 	.word	0x20000bdc

080023a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b500      	push	{lr}
 80023aa:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_MspInit+0x4c>)
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	f002 0201 	and.w	r2, r2, #1
 80023bc:	9200      	str	r2, [sp, #0]
 80023be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023c6:	61da      	str	r2, [r3, #28]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	210f      	movs	r1, #15
 80023d6:	f06f 0001 	mvn.w	r0, #1
 80023da:	f000 fd53 	bl	8002e84 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023de:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_MspInit+0x50>)
 80023e0:	6853      	ldr	r3, [r2, #4]
 80023e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ea:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ec:	b003      	add	sp, #12
 80023ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010000 	.word	0x40010000

080023fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023fc:	b500      	push	{lr}
 80023fe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	2300      	movs	r3, #0
 8002402:	9304      	str	r3, [sp, #16]
 8002404:	9305      	str	r3, [sp, #20]
 8002406:	9306      	str	r3, [sp, #24]
 8002408:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800240a:	6803      	ldr	r3, [r0, #0]
 800240c:	4a20      	ldr	r2, [pc, #128]	; (8002490 <HAL_ADC_MspInit+0x94>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d005      	beq.n	800241e <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002412:	4a20      	ldr	r2, [pc, #128]	; (8002494 <HAL_ADC_MspInit+0x98>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d01e      	beq.n	8002456 <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002418:	b009      	add	sp, #36	; 0x24
 800241a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_ADC_MspInit+0x9c>)
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800242e:	9200      	str	r2, [sp, #0]
 8002430:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	f042 0204 	orr.w	r2, r2, #4
 8002438:	619a      	str	r2, [r3, #24]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002444:	2308      	movs	r3, #8
 8002446:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002448:	2303      	movs	r3, #3
 800244a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	a904      	add	r1, sp, #16
 800244e:	4813      	ldr	r0, [pc, #76]	; (800249c <HAL_ADC_MspInit+0xa0>)
 8002450:	f000 fd5c 	bl	8002f0c <HAL_GPIO_Init>
 8002454:	e7e0      	b.n	8002418 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_ADC_MspInit+0x9c>)
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800245e:	619a      	str	r2, [r3, #24]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002466:	9202      	str	r2, [sp, #8]
 8002468:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	f042 0204 	orr.w	r2, r2, #4
 8002470:	619a      	str	r2, [r3, #24]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	9303      	str	r3, [sp, #12]
 800247a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800247c:	2302      	movs	r3, #2
 800247e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002480:	2303      	movs	r3, #3
 8002482:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	a904      	add	r1, sp, #16
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <HAL_ADC_MspInit+0xa0>)
 8002488:	f000 fd40 	bl	8002f0c <HAL_GPIO_Init>
}
 800248c:	e7c4      	b.n	8002418 <HAL_ADC_MspInit+0x1c>
 800248e:	bf00      	nop
 8002490:	40012400 	.word	0x40012400
 8002494:	40012800 	.word	0x40012800
 8002498:	40021000 	.word	0x40021000
 800249c:	40010800 	.word	0x40010800

080024a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a0:	b510      	push	{r4, lr}
 80024a2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	2300      	movs	r3, #0
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	9303      	str	r3, [sp, #12]
 80024aa:	9304      	str	r3, [sp, #16]
 80024ac:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 80024ae:	6802      	ldr	r2, [r0, #0]
 80024b0:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_I2C_MspInit+0x58>)
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024b6:	b006      	add	sp, #24
 80024b8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	4c10      	ldr	r4, [pc, #64]	; (80024fc <HAL_I2C_MspInit+0x5c>)
 80024bc:	69a3      	ldr	r3, [r4, #24]
 80024be:	f043 0308 	orr.w	r3, r3, #8
 80024c2:	61a3      	str	r3, [r4, #24]
 80024c4:	69a3      	ldr	r3, [r4, #24]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024ce:	23c0      	movs	r3, #192	; 0xc0
 80024d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d2:	2312      	movs	r3, #18
 80024d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024d6:	2303      	movs	r3, #3
 80024d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	a902      	add	r1, sp, #8
 80024dc:	4808      	ldr	r0, [pc, #32]	; (8002500 <HAL_I2C_MspInit+0x60>)
 80024de:	f000 fd15 	bl	8002f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e2:	69e3      	ldr	r3, [r4, #28]
 80024e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e8:	61e3      	str	r3, [r4, #28]
 80024ea:	69e3      	ldr	r3, [r4, #28]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	9b01      	ldr	r3, [sp, #4]
}
 80024f4:	e7df      	b.n	80024b6 <HAL_I2C_MspInit+0x16>
 80024f6:	bf00      	nop
 80024f8:	40005400 	.word	0x40005400
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010c00 	.word	0x40010c00

08002504 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002504:	b510      	push	{r4, lr}
 8002506:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	2300      	movs	r3, #0
 800250a:	9302      	str	r3, [sp, #8]
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	9304      	str	r3, [sp, #16]
 8002510:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8002512:	6802      	ldr	r2, [r0, #0]
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_SPI_MspInit+0x6c>)
 8002516:	429a      	cmp	r2, r3
 8002518:	d001      	beq.n	800251e <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800251a:	b006      	add	sp, #24
 800251c:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800251e:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002528:	619a      	str	r2, [r3, #24]
 800252a:	699a      	ldr	r2, [r3, #24]
 800252c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002530:	9200      	str	r2, [sp, #0]
 8002532:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	f042 0204 	orr.w	r2, r2, #4
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002546:	23a0      	movs	r3, #160	; 0xa0
 8002548:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	4c08      	ldr	r4, [pc, #32]	; (8002574 <HAL_SPI_MspInit+0x70>)
 8002554:	a902      	add	r1, sp, #8
 8002556:	4620      	mov	r0, r4
 8002558:	f000 fcd8 	bl	8002f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800255c:	2340      	movs	r3, #64	; 0x40
 800255e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	a902      	add	r1, sp, #8
 8002568:	4620      	mov	r0, r4
 800256a:	f000 fccf 	bl	8002f0c <HAL_GPIO_Init>
}
 800256e:	e7d4      	b.n	800251a <HAL_SPI_MspInit+0x16>
 8002570:	40013000 	.word	0x40013000
 8002574:	40010800 	.word	0x40010800

08002578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002578:	b500      	push	{lr}
 800257a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 800257c:	6803      	ldr	r3, [r0, #0]
 800257e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002582:	d005      	beq.n	8002590 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <HAL_TIM_Base_MspInit+0x58>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800258a:	b003      	add	sp, #12
 800258c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002590:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002594:	69da      	ldr	r2, [r3, #28]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	61da      	str	r2, [r3, #28]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	9b00      	ldr	r3, [sp, #0]
 80025a6:	e7f0      	b.n	800258a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025a8:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_TIM_Base_MspInit+0x5c>)
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	f042 0202 	orr.w	r2, r2, #2
 80025b0:	61da      	str	r2, [r3, #28]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2105      	movs	r1, #5
 80025c0:	201d      	movs	r0, #29
 80025c2:	f000 fc5f 	bl	8002e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025c6:	201d      	movs	r0, #29
 80025c8:	f000 fc92 	bl	8002ef0 <HAL_NVIC_EnableIRQ>
}
 80025cc:	e7dd      	b.n	800258a <HAL_TIM_Base_MspInit+0x12>
 80025ce:	bf00      	nop
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d8:	b500      	push	{lr}
 80025da:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	2300      	movs	r3, #0
 80025de:	9302      	str	r3, [sp, #8]
 80025e0:	9303      	str	r3, [sp, #12]
 80025e2:	9304      	str	r3, [sp, #16]
 80025e4:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d002      	beq.n	80025f4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025ee:	b007      	add	sp, #28
 80025f0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	f042 0204 	orr.w	r2, r2, #4
 80025fe:	619a      	str	r2, [r3, #24]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800260a:	2301      	movs	r3, #1
 800260c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002612:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	a902      	add	r1, sp, #8
 8002616:	4802      	ldr	r0, [pc, #8]	; (8002620 <HAL_TIM_MspPostInit+0x48>)
 8002618:	f000 fc78 	bl	8002f0c <HAL_GPIO_Init>
}
 800261c:	e7e7      	b.n	80025ee <HAL_TIM_MspPostInit+0x16>
 800261e:	bf00      	nop
 8002620:	40010800 	.word	0x40010800

08002624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b530      	push	{r4, r5, lr}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_InitTick+0x8c>)
 800262c:	69da      	ldr	r2, [r3, #28]
 800262e:	f042 0204 	orr.w	r2, r2, #4
 8002632:	61da      	str	r2, [r3, #28]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800263e:	a902      	add	r1, sp, #8
 8002640:	a803      	add	r0, sp, #12
 8002642:	f001 fc7d 	bl	8003f40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002646:	9b06      	ldr	r3, [sp, #24]
 8002648:	b9cb      	cbnz	r3, 800267e <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800264a:	f001 fc59 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 800264e:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002650:	4818      	ldr	r0, [pc, #96]	; (80026b4 <HAL_InitTick+0x90>)
 8002652:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_InitTick+0x94>)
 8002654:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002656:	f240 32e7 	movw	r2, #999	; 0x3e7
 800265a:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800265c:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_InitTick+0x98>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8002666:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266c:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266e:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002670:	f002 fb38 	bl	8004ce4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002674:	4605      	mov	r5, r0
 8002676:	b130      	cbz	r0, 8002686 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8002678:	4628      	mov	r0, r5
 800267a:	b009      	add	sp, #36	; 0x24
 800267c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800267e:	f001 fc3f 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
 8002682:	0043      	lsls	r3, r0, #1
 8002684:	e7e4      	b.n	8002650 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002686:	480b      	ldr	r0, [pc, #44]	; (80026b4 <HAL_InitTick+0x90>)
 8002688:	f002 f9ce 	bl	8004a28 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800268c:	4605      	mov	r5, r0
 800268e:	2800      	cmp	r0, #0
 8002690:	d1f2      	bne.n	8002678 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002692:	201e      	movs	r0, #30
 8002694:	f000 fc2c 	bl	8002ef0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002698:	2c0f      	cmp	r4, #15
 800269a:	d901      	bls.n	80026a0 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 800269c:	2501      	movs	r5, #1
 800269e:	e7eb      	b.n	8002678 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80026a0:	2200      	movs	r2, #0
 80026a2:	4621      	mov	r1, r4
 80026a4:	201e      	movs	r0, #30
 80026a6:	f000 fbed 	bl	8002e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_InitTick+0x9c>)
 80026ac:	601c      	str	r4, [r3, #0]
 80026ae:	e7e3      	b.n	8002678 <HAL_InitTick+0x54>
 80026b0:	40021000 	.word	0x40021000
 80026b4:	20000fe4 	.word	0x20000fe4
 80026b8:	40000800 	.word	0x40000800
 80026bc:	431bde83 	.word	0x431bde83
 80026c0:	200008b0 	.word	0x200008b0

080026c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <NMI_Handler>
	...

080026c8 <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    // Leer el registro CFSR para obtener información sobre el fallo
    uint32_t cfsr = SCB->CFSR;
 80026c8:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <HardFault_Handler+0x8>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026cc:	e7fe      	b.n	80026cc <HardFault_Handler+0x4>
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler>

080026d6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <BusFault_Handler>

080026d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <UsageFault_Handler>

080026da <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026da:	4770      	bx	lr

080026dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026de:	4802      	ldr	r0, [pc, #8]	; (80026e8 <TIM3_IRQHandler+0xc>)
 80026e0:	f002 f9f4 	bl	8004acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026e4:	bd08      	pop	{r3, pc}
 80026e6:	bf00      	nop
 80026e8:	20000b20 	.word	0x20000b20

080026ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026ee:	4802      	ldr	r0, [pc, #8]	; (80026f8 <TIM4_IRQHandler+0xc>)
 80026f0:	f002 f9ec 	bl	8004acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026f4:	bd08      	pop	{r3, pc}
 80026f6:	bf00      	nop
 80026f8:	20000fe4 	.word	0x20000fe4

080026fc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80026fc:	2001      	movs	r0, #1
 80026fe:	4770      	bx	lr

08002700 <_kill>:

int _kill(int pid, int sig)
{
 8002700:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002702:	f005 fcbb 	bl	800807c <__errno>
 8002706:	2316      	movs	r3, #22
 8002708:	6003      	str	r3, [r0, #0]
  return -1;
}
 800270a:	f04f 30ff 	mov.w	r0, #4294967295
 800270e:	bd08      	pop	{r3, pc}

08002710 <_exit>:

void _exit (int status)
{
 8002710:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002712:	f005 fcb3 	bl	800807c <__errno>
 8002716:	2316      	movs	r3, #22
 8002718:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800271a:	e7fe      	b.n	800271a <_exit+0xa>

0800271c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800271c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271e:	1e16      	subs	r6, r2, #0
 8002720:	dd07      	ble.n	8002732 <_read+0x16>
 8002722:	460c      	mov	r4, r1
 8002724:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002726:	f3af 8000 	nop.w
 800272a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	42a5      	cmp	r5, r4
 8002730:	d1f9      	bne.n	8002726 <_read+0xa>
  }

  return len;
}
 8002732:	4630      	mov	r0, r6
 8002734:	bd70      	pop	{r4, r5, r6, pc}

08002736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002736:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002738:	1e16      	subs	r6, r2, #0
 800273a:	dd07      	ble.n	800274c <_write+0x16>
 800273c:	460c      	mov	r4, r1
 800273e:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8002740:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002744:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	42a5      	cmp	r5, r4
 800274a:	d1f9      	bne.n	8002740 <_write+0xa>
  }
  return len;
}
 800274c:	4630      	mov	r0, r6
 800274e:	bd70      	pop	{r4, r5, r6, pc}

08002750 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	4770      	bx	lr

08002756 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275a:	604b      	str	r3, [r1, #4]
  return 0;
}
 800275c:	2000      	movs	r0, #0
 800275e:	4770      	bx	lr

08002760 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002760:	2001      	movs	r0, #1
 8002762:	4770      	bx	lr

08002764 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002764:	2000      	movs	r0, #0
 8002766:	4770      	bx	lr

08002768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002768:	b508      	push	{r3, lr}
 800276a:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <_sbrk+0x38>)
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	b152      	cbz	r2, 8002788 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <_sbrk+0x38>)
 8002774:	6810      	ldr	r0, [r2, #0]
 8002776:	4403      	add	r3, r0
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <_sbrk+0x3c>)
 800277a:	490b      	ldr	r1, [pc, #44]	; (80027a8 <_sbrk+0x40>)
 800277c:	1a52      	subs	r2, r2, r1
 800277e:	4293      	cmp	r3, r2
 8002780:	d806      	bhi.n	8002790 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002782:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <_sbrk+0x38>)
 8002784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002786:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <_sbrk+0x38>)
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <_sbrk+0x44>)
 800278c:	6011      	str	r1, [r2, #0]
 800278e:	e7f0      	b.n	8002772 <_sbrk+0xa>
    errno = ENOMEM;
 8002790:	f005 fc74 	bl	800807c <__errno>
 8002794:	230c      	movs	r3, #12
 8002796:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	e7f3      	b.n	8002786 <_sbrk+0x1e>
 800279e:	bf00      	nop
 80027a0:	2000102c 	.word	0x2000102c
 80027a4:	20005000 	.word	0x20005000
 80027a8:	00000400 	.word	0x00000400
 80027ac:	20002e70 	.word	0x20002e70

080027b0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b0:	4770      	bx	lr
	...

080027b4 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80027b4:	f7ff fffc 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b8:	480b      	ldr	r0, [pc, #44]	; (80027e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027ba:	490c      	ldr	r1, [pc, #48]	; (80027ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027d0:	4c09      	ldr	r4, [pc, #36]	; (80027f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027de:	f005 fc53 	bl	8008088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027e2:	f7fe f941 	bl	8000a68 <main>
  bx lr
 80027e6:	4770      	bx	lr
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	20000914 	.word	0x20000914
  ldr r2, =_sidata
 80027f0:	08009b84 	.word	0x08009b84
  ldr r2, =_sbss
 80027f4:	20000914 	.word	0x20000914
  ldr r4, =_ebss
 80027f8:	20002e6c 	.word	0x20002e6c

080027fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC1_2_IRQHandler>
	...

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002802:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_Init+0x20>)
 8002804:	6813      	ldr	r3, [r2, #0]
 8002806:	f043 0310 	orr.w	r3, r3, #16
 800280a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800280c:	2003      	movs	r0, #3
 800280e:	f000 fb27 	bl	8002e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002812:	200f      	movs	r0, #15
 8002814:	f7ff ff06 	bl	8002624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002818:	f7ff fdc6 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800281c:	2000      	movs	r0, #0
 800281e:	bd08      	pop	{r3, pc}
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002824:	4a03      	ldr	r2, [pc, #12]	; (8002834 <HAL_IncTick+0x10>)
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_IncTick+0x14>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	440b      	add	r3, r1
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20001030 	.word	0x20001030
 8002838:	200008ad 	.word	0x200008ad

0800283c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800283c:	4b01      	ldr	r3, [pc, #4]	; (8002844 <HAL_GetTick+0x8>)
 800283e:	6818      	ldr	r0, [r3, #0]
}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20001030 	.word	0x20001030

08002848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff fff6 	bl	800283c <HAL_GetTick>
 8002850:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002852:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002856:	d002      	beq.n	800285e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_Delay+0x24>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285e:	f7ff ffed 	bl	800283c <HAL_GetTick>
 8002862:	1b40      	subs	r0, r0, r5
 8002864:	42a0      	cmp	r0, r4
 8002866:	d3fa      	bcc.n	800285e <HAL_Delay+0x16>
  {
  }
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	bf00      	nop
 800286c:	200008ad 	.word	0x200008ad

08002870 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b083      	sub	sp, #12
 8002874:	4606      	mov	r6, r0
 8002876:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800287c:	f7ff ffde 	bl	800283c <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002880:	6833      	ldr	r3, [r6, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002888:	d124      	bne.n	80028d4 <HAL_ADC_PollForConversion+0x64>
 800288a:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002892:	d103      	bne.n	800289c <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002896:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800289a:	d02a      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x82>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_ADC_PollForConversion+0x170>)
 800289e:	681d      	ldr	r5, [r3, #0]
 80028a0:	2002      	movs	r0, #2
 80028a2:	f001 fbf9 	bl	8004098 <HAL_RCCEx_GetPeriphCLKFreq>
 80028a6:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80028aa:	6833      	ldr	r3, [r6, #0]
 80028ac:	6919      	ldr	r1, [r3, #16]
 80028ae:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_ADC_PollForConversion+0x174>)
 80028b0:	4211      	tst	r1, r2
 80028b2:	d137      	bne.n	8002924 <HAL_ADC_PollForConversion+0xb4>
 80028b4:	68d9      	ldr	r1, [r3, #12]
 80028b6:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80028ba:	4211      	tst	r1, r2
 80028bc:	d132      	bne.n	8002924 <HAL_ADC_PollForConversion+0xb4>
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	4a49      	ldr	r2, [pc, #292]	; (80029e8 <HAL_ADC_PollForConversion+0x178>)
 80028c2:	4211      	tst	r1, r2
 80028c4:	d158      	bne.n	8002978 <HAL_ADC_PollForConversion+0x108>
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4b48      	ldr	r3, [pc, #288]	; (80029ec <HAL_ADC_PollForConversion+0x17c>)
 80028ca:	421a      	tst	r2, r3
 80028cc:	bf14      	ite	ne
 80028ce:	2329      	movne	r3, #41	; 0x29
 80028d0:	2314      	moveq	r3, #20
 80028d2:	e03b      	b.n	800294c <HAL_ADC_PollForConversion+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	62b3      	str	r3, [r6, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80028dc:	2300      	movs	r3, #0
 80028de:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    return HAL_ERROR;
 80028e2:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80028e4:	b003      	add	sp, #12
 80028e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028e8:	6833      	ldr	r3, [r6, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f013 0f02 	tst.w	r3, #2
 80028f0:	d00f      	beq.n	8002912 <HAL_ADC_PollForConversion+0xa2>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80028f2:	6832      	ldr	r2, [r6, #0]
 80028f4:	6813      	ldr	r3, [r2, #0]
 80028f6:	f013 0f02 	tst.w	r3, #2
 80028fa:	d12c      	bne.n	8002956 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 80028fc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002900:	d0f8      	beq.n	80028f4 <HAL_ADC_PollForConversion+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002902:	2c00      	cmp	r4, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_ADC_PollForConversion+0x78>
 8002906:	f7ff ff99 	bl	800283c <HAL_GetTick>
 800290a:	1bc3      	subs	r3, r0, r7
 800290c:	42a3      	cmp	r3, r4
 800290e:	d9f0      	bls.n	80028f2 <HAL_ADC_PollForConversion+0x82>
 8002910:	e7ea      	b.n	80028e8 <HAL_ADC_PollForConversion+0x78>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002912:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002914:	f043 0304 	orr.w	r3, r3, #4
 8002918:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 800291a:	2300      	movs	r3, #0
 800291c:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 8002920:	2003      	movs	r0, #3
 8002922:	e7df      	b.n	80028e4 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002924:	6919      	ldr	r1, [r3, #16]
 8002926:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_ADC_PollForConversion+0x178>)
 8002928:	4211      	tst	r1, r2
 800292a:	d104      	bne.n	8002936 <HAL_ADC_PollForConversion+0xc6>
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002932:	4211      	tst	r1, r2
 8002934:	d022      	beq.n	800297c <HAL_ADC_PollForConversion+0x10c>
 8002936:	6919      	ldr	r1, [r3, #16]
 8002938:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <HAL_ADC_PollForConversion+0x180>)
 800293a:	400a      	ands	r2, r1
 800293c:	bb02      	cbnz	r2, 8002980 <HAL_ADC_PollForConversion+0x110>
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_ADC_PollForConversion+0x180>)
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	23fc      	movne	r3, #252	; 0xfc
 800294a:	2354      	moveq	r3, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800294c:	fb03 f505 	mul.w	r5, r3, r5
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002950:	9b01      	ldr	r3, [sp, #4]
 8002952:	429d      	cmp	r5, r3
 8002954:	d81f      	bhi.n	8002996 <HAL_ADC_PollForConversion+0x126>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002956:	6833      	ldr	r3, [r6, #0]
 8002958:	f06f 0212 	mvn.w	r2, #18
 800295c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800295e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002964:	62b3      	str	r3, [r6, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002966:	6833      	ldr	r3, [r6, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800296e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002972:	d024      	beq.n	80029be <HAL_ADC_PollForConversion+0x14e>
  return HAL_OK;
 8002974:	2000      	movs	r0, #0
 8002976:	e7b5      	b.n	80028e4 <HAL_ADC_PollForConversion+0x74>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002978:	2329      	movs	r3, #41	; 0x29
 800297a:	e7e7      	b.n	800294c <HAL_ADC_PollForConversion+0xdc>
 800297c:	2354      	movs	r3, #84	; 0x54
 800297e:	e7e5      	b.n	800294c <HAL_ADC_PollForConversion+0xdc>
 8002980:	23fc      	movs	r3, #252	; 0xfc
 8002982:	e7e3      	b.n	800294c <HAL_ADC_PollForConversion+0xdc>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002984:	9b01      	ldr	r3, [sp, #4]
 8002986:	42ab      	cmp	r3, r5
 8002988:	d310      	bcc.n	80029ac <HAL_ADC_PollForConversion+0x13c>
      Conversion_Timeout_CPU_cycles ++;
 800298a:	9b01      	ldr	r3, [sp, #4]
 800298c:	3301      	adds	r3, #1
 800298e:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002990:	9b01      	ldr	r3, [sp, #4]
 8002992:	42ab      	cmp	r3, r5
 8002994:	d2df      	bcs.n	8002956 <HAL_ADC_PollForConversion+0xe6>
      if(Timeout != HAL_MAX_DELAY)
 8002996:	f1b4 3fff 	cmp.w	r4, #4294967295
 800299a:	d0f6      	beq.n	800298a <HAL_ADC_PollForConversion+0x11a>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800299c:	2c00      	cmp	r4, #0
 800299e:	d0f1      	beq.n	8002984 <HAL_ADC_PollForConversion+0x114>
 80029a0:	f7ff ff4c 	bl	800283c <HAL_GetTick>
 80029a4:	1bc0      	subs	r0, r0, r7
 80029a6:	42a0      	cmp	r0, r4
 80029a8:	d9ef      	bls.n	800298a <HAL_ADC_PollForConversion+0x11a>
 80029aa:	e7eb      	b.n	8002984 <HAL_ADC_PollForConversion+0x114>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029ac:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	62b3      	str	r3, [r6, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80029b4:	2300      	movs	r3, #0
 80029b6:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            return HAL_TIMEOUT;
 80029ba:	2003      	movs	r0, #3
 80029bc:	e792      	b.n	80028e4 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029be:	7b30      	ldrb	r0, [r6, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029c0:	b960      	cbnz	r0, 80029dc <HAL_ADC_PollForConversion+0x16c>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029c2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80029c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c8:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ca:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80029cc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80029d0:	d188      	bne.n	80028e4 <HAL_ADC_PollForConversion+0x74>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	62b3      	str	r3, [r6, #40]	; 0x28
 80029da:	e783      	b.n	80028e4 <HAL_ADC_PollForConversion+0x74>
  return HAL_OK;
 80029dc:	2000      	movs	r0, #0
 80029de:	e781      	b.n	80028e4 <HAL_ADC_PollForConversion+0x74>
 80029e0:	20000020 	.word	0x20000020
 80029e4:	24924924 	.word	0x24924924
 80029e8:	12492492 	.word	0x12492492
 80029ec:	00492492 	.word	0x00492492
 80029f0:	00249249 	.word	0x00249249

080029f4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80029f4:	6803      	ldr	r3, [r0, #0]
 80029f6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029fc:	b430      	push	{r4, r5}
 80029fe:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002a00:	2200      	movs	r2, #0
 8002a02:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a04:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002a08:	2a01      	cmp	r2, #1
 8002a0a:	f000 8093 	beq.w	8002b34 <HAL_ADC_ConfigChannel+0x138>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2201      	movs	r2, #1
 8002a12:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a16:	684a      	ldr	r2, [r1, #4]
 8002a18:	2a06      	cmp	r2, #6
 8002a1a:	d82d      	bhi.n	8002a78 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a1c:	6804      	ldr	r4, [r0, #0]
 8002a1e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002a20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a24:	3a05      	subs	r2, #5
 8002a26:	f04f 0c1f 	mov.w	ip, #31
 8002a2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8002a2e:	ea20 000c 	bic.w	r0, r0, ip
 8002a32:	680d      	ldr	r5, [r1, #0]
 8002a34:	fa05 f202 	lsl.w	r2, r5, r2
 8002a38:	4302      	orrs	r2, r0
 8002a3a:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a3c:	680a      	ldr	r2, [r1, #0]
 8002a3e:	2a09      	cmp	r2, #9
 8002a40:	d938      	bls.n	8002ab4 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a42:	681c      	ldr	r4, [r3, #0]
 8002a44:	68e0      	ldr	r0, [r4, #12]
 8002a46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002a4a:	3a1e      	subs	r2, #30
 8002a4c:	f04f 0c07 	mov.w	ip, #7
 8002a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8002a54:	ea20 000c 	bic.w	r0, r0, ip
 8002a58:	688d      	ldr	r5, [r1, #8]
 8002a5a:	fa05 f202 	lsl.w	r2, r5, r2
 8002a5e:	4302      	orrs	r2, r0
 8002a60:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a62:	680a      	ldr	r2, [r1, #0]
 8002a64:	3a10      	subs	r2, #16
 8002a66:	2a01      	cmp	r2, #1
 8002a68:	d934      	bls.n	8002ad4 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002a72:	b002      	add	sp, #8
 8002a74:	bc30      	pop	{r4, r5}
 8002a76:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002a78:	2a0c      	cmp	r2, #12
 8002a7a:	d80d      	bhi.n	8002a98 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a7c:	6805      	ldr	r5, [r0, #0]
 8002a7e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002a80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a84:	3a23      	subs	r2, #35	; 0x23
 8002a86:	241f      	movs	r4, #31
 8002a88:	4094      	lsls	r4, r2
 8002a8a:	ea20 0004 	bic.w	r0, r0, r4
 8002a8e:	680c      	ldr	r4, [r1, #0]
 8002a90:	4094      	lsls	r4, r2
 8002a92:	4320      	orrs	r0, r4
 8002a94:	6328      	str	r0, [r5, #48]	; 0x30
 8002a96:	e7d1      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a98:	6805      	ldr	r5, [r0, #0]
 8002a9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002a9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002aa0:	3a41      	subs	r2, #65	; 0x41
 8002aa2:	241f      	movs	r4, #31
 8002aa4:	4094      	lsls	r4, r2
 8002aa6:	ea20 0004 	bic.w	r0, r0, r4
 8002aaa:	680c      	ldr	r4, [r1, #0]
 8002aac:	4094      	lsls	r4, r2
 8002aae:	4320      	orrs	r0, r4
 8002ab0:	62e8      	str	r0, [r5, #44]	; 0x2c
 8002ab2:	e7c3      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ab4:	681c      	ldr	r4, [r3, #0]
 8002ab6:	6920      	ldr	r0, [r4, #16]
 8002ab8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002abc:	f04f 0c07 	mov.w	ip, #7
 8002ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8002ac4:	ea20 000c 	bic.w	r0, r0, ip
 8002ac8:	688d      	ldr	r5, [r1, #8]
 8002aca:	fa05 f202 	lsl.w	r2, r5, r2
 8002ace:	4302      	orrs	r2, r0
 8002ad0:	6122      	str	r2, [r4, #16]
 8002ad2:	e7c6      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <HAL_ADC_ConfigChannel+0x13c>)
 8002ad8:	4290      	cmp	r0, r2
 8002ada:	d005      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ade:	f042 0220 	orr.w	r2, r2, #32
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	e7c1      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ae8:	6892      	ldr	r2, [r2, #8]
 8002aea:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8002aee:	d11d      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002af0:	4811      	ldr	r0, [pc, #68]	; (8002b38 <HAL_ADC_ConfigChannel+0x13c>)
 8002af2:	6882      	ldr	r2, [r0, #8]
 8002af4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002af8:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002afa:	680a      	ldr	r2, [r1, #0]
 8002afc:	2a10      	cmp	r2, #16
 8002afe:	d001      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b00:	2000      	movs	r0, #0
 8002b02:	e7b3      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b04:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <HAL_ADC_ConfigChannel+0x140>)
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	490d      	ldr	r1, [pc, #52]	; (8002b40 <HAL_ADC_ConfigChannel+0x144>)
 8002b0a:	fba1 1202 	umull	r1, r2, r1, r2
 8002b0e:	0c92      	lsrs	r2, r2, #18
 8002b10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b14:	0052      	lsls	r2, r2, #1
 8002b16:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002b18:	9a01      	ldr	r2, [sp, #4]
 8002b1a:	b14a      	cbz	r2, 8002b30 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 8002b1c:	9a01      	ldr	r2, [sp, #4]
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002b22:	9a01      	ldr	r2, [sp, #4]
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	d1f9      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b28:	2000      	movs	r0, #0
 8002b2a:	e79f      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x70>
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	e79d      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x70>
 8002b30:	2000      	movs	r0, #0
 8002b32:	e79b      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002b34:	2002      	movs	r0, #2
 8002b36:	e79c      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x76>
 8002b38:	40012400 	.word	0x40012400
 8002b3c:	20000020 	.word	0x20000020
 8002b40:	431bde83 	.word	0x431bde83

08002b44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b44:	b530      	push	{r4, r5, lr}
 8002b46:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b4c:	6803      	ldr	r3, [r0, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	f012 0f01 	tst.w	r2, #1
 8002b54:	d13b      	bne.n	8002bce <ADC_Enable+0x8a>
 8002b56:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b60:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <ADC_Enable+0x90>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <ADC_Enable+0x94>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	0c9b      	lsrs	r3, r3, #18
 8002b6c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	b12b      	cbz	r3, 8002b7e <ADC_Enable+0x3a>
    {
      wait_loop_index--;
 8002b72:	9b01      	ldr	r3, [sp, #4]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <ADC_Enable+0x2e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b7e:	f7ff fe5d 	bl	800283c <HAL_GetTick>
 8002b82:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f013 0f01 	tst.w	r3, #1
 8002b8c:	d006      	beq.n	8002b9c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b8e:	2000      	movs	r0, #0
 8002b90:	e01e      	b.n	8002bd0 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f013 0f01 	tst.w	r3, #1
 8002b9a:	d116      	bne.n	8002bca <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b9c:	f7ff fe4e 	bl	800283c <HAL_GetTick>
 8002ba0:	1b43      	subs	r3, r0, r5
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d9f5      	bls.n	8002b92 <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f013 0f01 	tst.w	r3, #1
 8002bae:	d1f0      	bne.n	8002b92 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bb2:	f043 0310 	orr.w	r3, r3, #16
 8002bb6:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	e002      	b.n	8002bd0 <ADC_Enable+0x8c>
  return HAL_OK;
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e000      	b.n	8002bd0 <ADC_Enable+0x8c>
 8002bce:	2000      	movs	r0, #0
}
 8002bd0:	b003      	add	sp, #12
 8002bd2:	bd30      	pop	{r4, r5, pc}
 8002bd4:	20000020 	.word	0x20000020
 8002bd8:	431bde83 	.word	0x431bde83

08002bdc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002bdc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d066      	beq.n	8002cb2 <HAL_ADC_Start+0xd6>
{
 8002be4:	b510      	push	{r4, lr}
 8002be6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002be8:	2301      	movs	r3, #1
 8002bea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002bee:	f7ff ffa9 	bl	8002b44 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d159      	bne.n	8002caa <HAL_ADC_Start+0xce>
    ADC_STATE_CLR_SET(hadc->State,
 8002bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c04:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	4a2b      	ldr	r2, [pc, #172]	; (8002cb8 <HAL_ADC_Start+0xdc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d028      	beq.n	8002c60 <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c0e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c10:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002c14:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002c1c:	d005      	beq.n	8002c2a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c20:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c28:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c2c:	f412 5f80 	tst.w	r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c30:	bf1a      	itte	ne
 8002c32:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8002c34:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002c38:	2200      	moveq	r2, #0
 8002c3a:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c42:	f06f 0202 	mvn.w	r2, #2
 8002c46:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002c50:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002c54:	d01a      	beq.n	8002c8c <HAL_ADC_Start+0xb0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	e027      	b.n	8002cb0 <HAL_ADC_Start+0xd4>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c60:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002c64:	6852      	ldr	r2, [r2, #4]
 8002c66:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002c6a:	d0d0      	beq.n	8002c0e <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c72:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c74:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <HAL_ADC_Start+0xe0>)
 8002c76:	6852      	ldr	r2, [r2, #4]
 8002c78:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002c7c:	d0d5      	beq.n	8002c2a <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c80:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c8a:	e7ce      	b.n	8002c2a <HAL_ADC_Start+0x4e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_ADC_Start+0xdc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <HAL_ADC_Start+0xc0>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	e009      	b.n	8002cb0 <HAL_ADC_Start+0xd4>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c9c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002ca0:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ca2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002ca6:	d1d6      	bne.n	8002c56 <HAL_ADC_Start+0x7a>
 8002ca8:	e7f3      	b.n	8002c92 <HAL_ADC_Start+0xb6>
    __HAL_UNLOCK(hadc);
 8002caa:	2300      	movs	r3, #0
 8002cac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002cb0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002cb2:	2002      	movs	r0, #2
}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40012800 	.word	0x40012800
 8002cbc:	40012400 	.word	0x40012400

08002cc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cc2:	6803      	ldr	r3, [r0, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	f012 0f01 	tst.w	r2, #1
 8002cca:	d101      	bne.n	8002cd0 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ccc:	2000      	movs	r0, #0
}
 8002cce:	bd38      	pop	{r3, r4, r5, pc}
 8002cd0:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002cda:	f7ff fdaf 	bl	800283c <HAL_GetTick>
 8002cde:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f013 0f01 	tst.w	r3, #1
 8002ce8:	d106      	bne.n	8002cf8 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8002cea:	2000      	movs	r0, #0
 8002cec:	e7ef      	b.n	8002cce <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f013 0f01 	tst.w	r3, #1
 8002cf6:	d013      	beq.n	8002d20 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cf8:	f7ff fda0 	bl	800283c <HAL_GetTick>
 8002cfc:	1b43      	subs	r3, r0, r5
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d9f5      	bls.n	8002cee <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f013 0f01 	tst.w	r3, #1
 8002d0a:	d0f0      	beq.n	8002cee <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d0e:	f043 0310 	orr.w	r3, r3, #16
 8002d12:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	e7d6      	b.n	8002cce <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002d20:	2000      	movs	r0, #0
 8002d22:	e7d4      	b.n	8002cce <ADC_ConversionStop_Disable+0xe>

08002d24 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d07a      	beq.n	8002e1e <HAL_ADC_Init+0xfa>
{
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d04f      	beq.n	8002dd2 <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d32:	4620      	mov	r0, r4
 8002d34:	f7ff ffc4 	bl	8002cc0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002d3a:	f013 0310 	ands.w	r3, r3, #16
 8002d3e:	d168      	bne.n	8002e12 <HAL_ADC_Init+0xee>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d166      	bne.n	8002e12 <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8002d44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d46:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002d4a:	f022 0202 	bic.w	r2, r2, #2
 8002d4e:	f042 0202 	orr.w	r2, r2, #2
 8002d52:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d54:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d56:	6862      	ldr	r2, [r4, #4]
 8002d58:	69e5      	ldr	r5, [r4, #28]
 8002d5a:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d5c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d60:	68a5      	ldr	r5, [r4, #8]
 8002d62:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8002d66:	d004      	beq.n	8002d72 <HAL_ADC_Init+0x4e>
 8002d68:	2d01      	cmp	r5, #1
 8002d6a:	bf14      	ite	ne
 8002d6c:	2500      	movne	r5, #0
 8002d6e:	2501      	moveq	r5, #1
 8002d70:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d72:	7d26      	ldrb	r6, [r4, #20]
 8002d74:	2e01      	cmp	r6, #1
 8002d76:	d032      	beq.n	8002dde <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8002d78:	6826      	ldr	r6, [r4, #0]
 8002d7a:	6871      	ldr	r1, [r6, #4]
 8002d7c:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8002d80:	4329      	orrs	r1, r5
 8002d82:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002d84:	6825      	ldr	r5, [r4, #0]
 8002d86:	68ae      	ldr	r6, [r5, #8]
 8002d88:	4926      	ldr	r1, [pc, #152]	; (8002e24 <HAL_ADC_Init+0x100>)
 8002d8a:	4031      	ands	r1, r6
 8002d8c:	4311      	orrs	r1, r2
 8002d8e:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d90:	68a1      	ldr	r1, [r4, #8]
 8002d92:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002d96:	d001      	beq.n	8002d9c <HAL_ADC_Init+0x78>
 8002d98:	2901      	cmp	r1, #1
 8002d9a:	d102      	bne.n	8002da2 <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d9c:	6923      	ldr	r3, [r4, #16]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002da2:	6825      	ldr	r5, [r4, #0]
 8002da4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002da6:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8002daa:	430b      	orrs	r3, r1
 8002dac:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_ADC_Init+0x104>)
 8002db4:	400b      	ands	r3, r1
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d022      	beq.n	8002e00 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8002dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dbc:	f023 0312 	bic.w	r3, r3, #18
 8002dc0:	f043 0310 	orr.w	r3, r3, #16
 8002dc4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8002dce:	2001      	movs	r0, #1
 8002dd0:	e024      	b.n	8002e1c <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002dd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8002dd8:	f7ff fb10 	bl	80023fc <HAL_ADC_MspInit>
 8002ddc:	e7a9      	b.n	8002d32 <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dde:	b931      	cbnz	r1, 8002dee <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002de0:	69a1      	ldr	r1, [r4, #24]
 8002de2:	3901      	subs	r1, #1
 8002de4:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002de8:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002dec:	e7c4      	b.n	8002d78 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dee:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002df0:	f041 0120 	orr.w	r1, r1, #32
 8002df4:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002df8:	f041 0101 	orr.w	r1, r1, #1
 8002dfc:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002dfe:	e7bb      	b.n	8002d78 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8002e00:	2300      	movs	r3, #0
 8002e02:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002e04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e06:	f023 0303 	bic.w	r3, r3, #3
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e10:	e004      	b.n	8002e1c <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e14:	f043 0310 	orr.w	r3, r3, #16
 8002e18:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002e1a:	2001      	movs	r0, #1
}
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
}
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	ffe1f7fd 	.word	0xffe1f7fd
 8002e28:	ff1f0efe 	.word	0xff1f0efe

08002e2c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002e2c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d013      	beq.n	8002e5c <HAL_ADC_Stop+0x30>
{
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e3e:	f7ff ff3f 	bl	8002cc0 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8002e42:	b938      	cbnz	r0, 8002e54 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8002e44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8002e54:	2300      	movs	r3, #0
 8002e56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8002e5a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002e5c:	2002      	movs	r0, #2
}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002e62:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e64:	0203      	lsls	r3, r0, #8
 8002e66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e6e:	0412      	lsls	r2, r2, #16
 8002e70:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002e7c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e84:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e86:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <HAL_NVIC_SetPriority+0x64>)
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8e:	f1c3 0c07 	rsb	ip, r3, #7
 8002e92:	f1bc 0f04 	cmp.w	ip, #4
 8002e96:	bf28      	it	cs
 8002e98:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9c:	f103 0e04 	add.w	lr, r3, #4
 8002ea0:	f1be 0f06 	cmp.w	lr, #6
 8002ea4:	bf8c      	ite	hi
 8002ea6:	3b03      	subhi	r3, #3
 8002ea8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eaa:	f04f 3eff 	mov.w	lr, #4294967295
 8002eae:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002eb2:	ea21 010c 	bic.w	r1, r1, ip
 8002eb6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb8:	fa0e fe03 	lsl.w	lr, lr, r3
 8002ebc:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	db09      	blt.n	8002eda <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec6:	0109      	lsls	r1, r1, #4
 8002ec8:	b2c9      	uxtb	r1, r1
 8002eca:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002ece:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002ed2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ed6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	f000 000f 	and.w	r0, r0, #15
 8002ede:	0109      	lsls	r1, r1, #4
 8002ee0:	b2c9      	uxtb	r1, r1
 8002ee2:	4b02      	ldr	r3, [pc, #8]	; (8002eec <HAL_NVIC_SetPriority+0x68>)
 8002ee4:	5419      	strb	r1, [r3, r0]
 8002ee6:	e7f6      	b.n	8002ed6 <HAL_NVIC_SetPriority+0x52>
 8002ee8:	e000ed00 	.word	0xe000ed00
 8002eec:	e000ed14 	.word	0xe000ed14

08002ef0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ef0:	2800      	cmp	r0, #0
 8002ef2:	db07      	blt.n	8002f04 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ef4:	0941      	lsrs	r1, r0, #5
 8002ef6:	f000 001f 	and.w	r0, r0, #31
 8002efa:	2301      	movs	r3, #1
 8002efc:	4083      	lsls	r3, r0
 8002efe:	4a02      	ldr	r2, [pc, #8]	; (8002f08 <HAL_NVIC_EnableIRQ+0x18>)
 8002f00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f12:	f8d1 9000 	ldr.w	r9, [r1]
 8002f16:	f1b9 0f00 	cmp.w	r9, #0
 8002f1a:	f000 811f 	beq.w	800315c <HAL_GPIO_Init+0x250>
 8002f1e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002f20:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f22:	4e90      	ldr	r6, [pc, #576]	; (8003164 <HAL_GPIO_Init+0x258>)
        {
          SET_BIT(EXTI->IMR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f24:	4c90      	ldr	r4, [pc, #576]	; (8003168 <HAL_GPIO_Init+0x25c>)
      switch (GPIO_Init->Mode)
 8002f26:	4d91      	ldr	r5, [pc, #580]	; (800316c <HAL_GPIO_Init+0x260>)
 8002f28:	f8df e244 	ldr.w	lr, [pc, #580]	; 8003170 <HAL_GPIO_Init+0x264>
 8002f2c:	4694      	mov	ip, r2
 8002f2e:	e0ba      	b.n	80030a6 <HAL_GPIO_Init+0x19a>
 8002f30:	f04f 0c00 	mov.w	ip, #0
 8002f34:	e025      	b.n	8002f82 <HAL_GPIO_Init+0x76>
 8002f36:	45a9      	cmp	r9, r5
 8002f38:	d00f      	beq.n	8002f5a <HAL_GPIO_Init+0x4e>
 8002f3a:	d906      	bls.n	8002f4a <HAL_GPIO_Init+0x3e>
 8002f3c:	45f1      	cmp	r9, lr
 8002f3e:	d00c      	beq.n	8002f5a <HAL_GPIO_Init+0x4e>
 8002f40:	f8df a230 	ldr.w	sl, [pc, #560]	; 8003174 <HAL_GPIO_Init+0x268>
 8002f44:	45d1      	cmp	r9, sl
 8002f46:	d008      	beq.n	8002f5a <HAL_GPIO_Init+0x4e>
 8002f48:	e01b      	b.n	8002f82 <HAL_GPIO_Init+0x76>
 8002f4a:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8003178 <HAL_GPIO_Init+0x26c>
 8002f4e:	45d1      	cmp	r9, sl
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x4e>
 8002f52:	f50a 2a70 	add.w	sl, sl, #983040	; 0xf0000
 8002f56:	45d1      	cmp	r9, sl
 8002f58:	d10f      	bne.n	8002f7a <HAL_GPIO_Init+0x6e>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f5a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002f5e:	f1bc 0f00 	cmp.w	ip, #0
 8002f62:	f000 80ef 	beq.w	8003144 <HAL_GPIO_Init+0x238>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f66:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002f6a:	bf0c      	ite	eq
 8002f6c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002f70:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f74:	f04f 0c08 	mov.w	ip, #8
 8002f78:	e003      	b.n	8002f82 <HAL_GPIO_Init+0x76>
      switch (GPIO_Init->Mode)
 8002f7a:	f5aa 1a80 	sub.w	sl, sl, #1048576	; 0x100000
 8002f7e:	45d1      	cmp	r9, sl
 8002f80:	d0eb      	beq.n	8002f5a <HAL_GPIO_Init+0x4e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f82:	2fff      	cmp	r7, #255	; 0xff
 8002f84:	bf99      	ittee	ls
 8002f86:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f88:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f8a:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f8e:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f92:	f8d9 8000 	ldr.w	r8, [r9]
 8002f96:	f04f 0b0f 	mov.w	fp, #15
 8002f9a:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002f9e:	ea28 080b 	bic.w	r8, r8, fp
 8002fa2:	fa0c fa0a 	lsl.w	sl, ip, sl
 8002fa6:	ea48 080a 	orr.w	r8, r8, sl
 8002faa:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fae:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002fb2:	f018 5f80 	tst.w	r8, #268435456	; 0x10000000
 8002fb6:	d06f      	beq.n	8003098 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb8:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002fbc:	f048 0801 	orr.w	r8, r8, #1
 8002fc0:	f8c6 8018 	str.w	r8, [r6, #24]
 8002fc4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8002fc8:	f008 0801 	and.w	r8, r8, #1
 8002fcc:	f8cd 8004 	str.w	r8, [sp, #4]
 8002fd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002fd4:	f023 0803 	bic.w	r8, r3, #3
 8002fd8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002fdc:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002fe0:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fe4:	f003 0b03 	and.w	fp, r3, #3
 8002fe8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002fec:	f04f 090f 	mov.w	r9, #15
 8002ff0:	fa09 f90b 	lsl.w	r9, r9, fp
 8002ff4:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ff8:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800317c <HAL_GPIO_Init+0x270>
 8002ffc:	4548      	cmp	r0, r9
 8002ffe:	f000 80a4 	beq.w	800314a <HAL_GPIO_Init+0x23e>
 8003002:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003006:	4548      	cmp	r0, r9
 8003008:	f000 80a2 	beq.w	8003150 <HAL_GPIO_Init+0x244>
 800300c:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8003010:	4548      	cmp	r0, r9
 8003012:	f000 80a0 	beq.w	8003156 <HAL_GPIO_Init+0x24a>
 8003016:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 800301a:	4548      	cmp	r0, r9
 800301c:	bf0c      	ite	eq
 800301e:	f04f 0903 	moveq.w	r9, #3
 8003022:	f04f 0904 	movne.w	r9, #4
 8003026:	fa09 f90b 	lsl.w	r9, r9, fp
 800302a:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 800302e:	f8c8 9008 	str.w	r9, [r8, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003032:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003036:	f418 1f80 	tst.w	r8, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800303a:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800303e:	bf14      	ite	ne
 8003040:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003044:	ea28 0807 	biceq.w	r8, r8, r7
 8003048:	f8c4 8008 	str.w	r8, [r4, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800304c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003050:	f418 1f00 	tst.w	r8, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003054:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8003058:	bf14      	ite	ne
 800305a:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800305e:	ea28 0807 	biceq.w	r8, r8, r7
 8003062:	f8c4 800c 	str.w	r8, [r4, #12]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003066:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800306a:	f418 3f00 	tst.w	r8, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800306e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003072:	bf14      	ite	ne
 8003074:	ea48 0807 	orrne.w	r8, r8, r7
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003078:	ea28 0807 	biceq.w	r8, r8, r7
 800307c:	f8c4 8004 	str.w	r8, [r4, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003080:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8003084:	f418 3f80 	tst.w	r8, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003088:	f8d4 8000 	ldr.w	r8, [r4]
 800308c:	bf14      	ite	ne
 800308e:	ea48 0707 	orrne.w	r7, r8, r7
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003092:	ea28 0707 	biceq.w	r7, r8, r7
 8003096:	6027      	str	r7, [r4, #0]
        }
      }
    }

	position++;
 8003098:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	f8d1 9000 	ldr.w	r9, [r1]
 800309e:	3204      	adds	r2, #4
 80030a0:	fa39 f703 	lsrs.w	r7, r9, r3
 80030a4:	d05a      	beq.n	800315c <HAL_GPIO_Init+0x250>
    ioposition = (0x01uL << position);
 80030a6:	f04f 0801 	mov.w	r8, #1
 80030aa:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ae:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 80030b2:	ea38 0909 	bics.w	r9, r8, r9
 80030b6:	d1ef      	bne.n	8003098 <HAL_GPIO_Init+0x18c>
      switch (GPIO_Init->Mode)
 80030b8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80030bc:	f1b9 0f12 	cmp.w	r9, #18
 80030c0:	f63f af39 	bhi.w	8002f36 <HAL_GPIO_Init+0x2a>
 80030c4:	f1b9 0f12 	cmp.w	r9, #18
 80030c8:	f63f af5b 	bhi.w	8002f82 <HAL_GPIO_Init+0x76>
 80030cc:	f20f 0a04 	addw	sl, pc, #4
 80030d0:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 80030d4:	08002f5b 	.word	0x08002f5b
 80030d8:	08003121 	.word	0x08003121
 80030dc:	08003131 	.word	0x08003131
 80030e0:	08002f31 	.word	0x08002f31
 80030e4:	08002f83 	.word	0x08002f83
 80030e8:	08002f83 	.word	0x08002f83
 80030ec:	08002f83 	.word	0x08002f83
 80030f0:	08002f83 	.word	0x08002f83
 80030f4:	08002f83 	.word	0x08002f83
 80030f8:	08002f83 	.word	0x08002f83
 80030fc:	08002f83 	.word	0x08002f83
 8003100:	08002f83 	.word	0x08002f83
 8003104:	08002f83 	.word	0x08002f83
 8003108:	08002f83 	.word	0x08002f83
 800310c:	08002f83 	.word	0x08002f83
 8003110:	08002f83 	.word	0x08002f83
 8003114:	08002f83 	.word	0x08002f83
 8003118:	08003127 	.word	0x08003127
 800311c:	0800313b 	.word	0x0800313b
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003120:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8003124:	e72d      	b.n	8002f82 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003126:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800312a:	f10c 0c04 	add.w	ip, ip, #4
          break;
 800312e:	e728      	b.n	8002f82 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003130:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8003134:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8003138:	e723      	b.n	8002f82 <HAL_GPIO_Init+0x76>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800313a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800313e:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8003142:	e71e      	b.n	8002f82 <HAL_GPIO_Init+0x76>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003144:	f04f 0c04 	mov.w	ip, #4
 8003148:	e71b      	b.n	8002f82 <HAL_GPIO_Init+0x76>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800314a:	f04f 0900 	mov.w	r9, #0
 800314e:	e76a      	b.n	8003026 <HAL_GPIO_Init+0x11a>
 8003150:	f04f 0901 	mov.w	r9, #1
 8003154:	e767      	b.n	8003026 <HAL_GPIO_Init+0x11a>
 8003156:	f04f 0902 	mov.w	r9, #2
 800315a:	e764      	b.n	8003026 <HAL_GPIO_Init+0x11a>
  }
}
 800315c:	b003      	add	sp, #12
 800315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	40010400 	.word	0x40010400
 800316c:	10220000 	.word	0x10220000
 8003170:	10310000 	.word	0x10310000
 8003174:	10320000 	.word	0x10320000
 8003178:	10120000 	.word	0x10120000
 800317c:	40010800 	.word	0x40010800

08003180 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003180:	6883      	ldr	r3, [r0, #8]
 8003182:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003184:	bf14      	ite	ne
 8003186:	2001      	movne	r0, #1
 8003188:	2000      	moveq	r0, #0
 800318a:	4770      	bx	lr

0800318c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800318c:	b10a      	cbz	r2, 8003192 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318e:	6101      	str	r1, [r0, #16]
 8003190:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003192:	0409      	lsls	r1, r1, #16
 8003194:	6101      	str	r1, [r0, #16]
  }
}
 8003196:	4770      	bx	lr

08003198 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003198:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800319a:	ea01 0203 	and.w	r2, r1, r3
 800319e:	ea21 0103 	bic.w	r1, r1, r3
 80031a2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80031a6:	6101      	str	r1, [r0, #16]
}
 80031a8:	4770      	bx	lr

080031aa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031aa:	6803      	ldr	r3, [r0, #0]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80031b2:	d101      	bne.n	80031b8 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80031b4:	2000      	movs	r0, #0
}
 80031b6:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031bc:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	2300      	movs	r3, #0
 80031c0:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	2220      	movs	r2, #32
 80031c4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80031ce:	f042 0204 	orr.w	r2, r2, #4
 80031d2:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80031d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80031d8:	2001      	movs	r0, #1
 80031da:	4770      	bx	lr

080031dc <I2C_WaitOnFlagUntilTimeout>:
{
 80031dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e0:	4605      	mov	r5, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	4616      	mov	r6, r2
 80031e6:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031e8:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80031ec:	f1b8 0f01 	cmp.w	r8, #1
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	bf0c      	ite	eq
 80031f4:	695b      	ldreq	r3, [r3, #20]
 80031f6:	699b      	ldrne	r3, [r3, #24]
 80031f8:	ea24 0c03 	bic.w	ip, r4, r3
 80031fc:	fa1f fc8c 	uxth.w	ip, ip
 8003200:	fabc fc8c 	clz	ip, ip
 8003204:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8003208:	4566      	cmp	r6, ip
 800320a:	d127      	bne.n	800325c <I2C_WaitOnFlagUntilTimeout+0x80>
    if (Timeout != HAL_MAX_DELAY)
 800320c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003210:	d0ec      	beq.n	80031ec <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7ff fb13 	bl	800283c <HAL_GetTick>
 8003216:	9b06      	ldr	r3, [sp, #24]
 8003218:	1ac0      	subs	r0, r0, r3
 800321a:	42b8      	cmp	r0, r7
 800321c:	d801      	bhi.n	8003222 <I2C_WaitOnFlagUntilTimeout+0x46>
 800321e:	2f00      	cmp	r7, #0
 8003220:	d1e4      	bne.n	80031ec <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003222:	f1b8 0f01 	cmp.w	r8, #1
 8003226:	682b      	ldr	r3, [r5, #0]
 8003228:	bf0c      	ite	eq
 800322a:	695b      	ldreq	r3, [r3, #20]
 800322c:	699b      	ldrne	r3, [r3, #24]
 800322e:	ea24 0303 	bic.w	r3, r4, r3
 8003232:	b29b      	uxth	r3, r3
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	429e      	cmp	r6, r3
 800323c:	d1d6      	bne.n	80031ec <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800323e:	2300      	movs	r3, #0
 8003240:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003242:	2220      	movs	r2, #32
 8003244:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003248:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003254:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003258:	2001      	movs	r0, #1
 800325a:	e000      	b.n	800325e <I2C_WaitOnFlagUntilTimeout+0x82>
  return HAL_OK;
 800325c:	2000      	movs	r0, #0
}
 800325e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003262 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003262:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003266:	4605      	mov	r5, r0
 8003268:	460e      	mov	r6, r1
 800326a:	4617      	mov	r7, r2
 800326c:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800326e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003272:	f1b8 0f01 	cmp.w	r8, #1
 8003276:	682b      	ldr	r3, [r5, #0]
 8003278:	bf0c      	ite	eq
 800327a:	695c      	ldreq	r4, [r3, #20]
 800327c:	699c      	ldrne	r4, [r3, #24]
 800327e:	ea26 0404 	bic.w	r4, r6, r4
 8003282:	b2a4      	uxth	r4, r4
 8003284:	3c00      	subs	r4, #0
 8003286:	bf18      	it	ne
 8003288:	2401      	movne	r4, #1
 800328a:	2c00      	cmp	r4, #0
 800328c:	d044      	beq.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003296:	d127      	bne.n	80032e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
    if (Timeout != HAL_MAX_DELAY)
 8003298:	f1b7 3fff 	cmp.w	r7, #4294967295
 800329c:	d0e9      	beq.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7ff facd 	bl	800283c <HAL_GetTick>
 80032a2:	eba0 0009 	sub.w	r0, r0, r9
 80032a6:	42b8      	cmp	r0, r7
 80032a8:	d801      	bhi.n	80032ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
 80032aa:	2f00      	cmp	r7, #0
 80032ac:	d1e1      	bne.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032ae:	f1b8 0f01 	cmp.w	r8, #1
 80032b2:	682b      	ldr	r3, [r5, #0]
 80032b4:	bf0c      	ite	eq
 80032b6:	695b      	ldreq	r3, [r3, #20]
 80032b8:	699b      	ldrne	r3, [r3, #24]
 80032ba:	ea26 0303 	bic.w	r3, r6, r3
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b00      	subs	r3, #0
 80032c2:	bf18      	it	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0d3      	beq.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032ce:	2220      	movs	r2, #32
 80032d0:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80032da:	f042 0220 	orr.w	r2, r2, #32
 80032de:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80032e0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 80032e4:	2001      	movs	r0, #1
 80032e6:	e015      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ee:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032f6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032fc:	2220      	movs	r2, #32
 80032fe:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003302:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003306:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003308:	f042 0204 	orr.w	r2, r2, #4
 800330c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800330e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003312:	2001      	movs	r0, #1
}
 8003314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return HAL_OK;
 8003318:	2000      	movs	r0, #0
 800331a:	e7fb      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb2>

0800331c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
 8003322:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f013 0f80 	tst.w	r3, #128	; 0x80
 800332c:	d121      	bne.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800332e:	4620      	mov	r0, r4
 8003330:	f7ff ff3b 	bl	80031aa <I2C_IsAcknowledgeFailed>
 8003334:	b9f8      	cbnz	r0, 8003376 <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003336:	f1b5 3fff 	cmp.w	r5, #4294967295
 800333a:	d0f3      	beq.n	8003324 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333c:	f7ff fa7e 	bl	800283c <HAL_GetTick>
 8003340:	1b80      	subs	r0, r0, r6
 8003342:	42a8      	cmp	r0, r5
 8003344:	d801      	bhi.n	800334a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003346:	2d00      	cmp	r5, #0
 8003348:	d1ec      	bne.n	8003324 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800334a:	6823      	ldr	r3, [r4, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003352:	d1e7      	bne.n	8003324 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003354:	2300      	movs	r3, #0
 8003356:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003358:	2220      	movs	r2, #32
 800335a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003364:	f042 0220 	orr.w	r2, r2, #32
 8003368:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800336a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800336e:	2001      	movs	r0, #1
 8003370:	e000      	b.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8003372:	2000      	movs	r0, #0
}
 8003374:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003376:	2001      	movs	r0, #1
 8003378:	e7fc      	b.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x58>

0800337a <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800337a:	b570      	push	{r4, r5, r6, lr}
 800337c:	4604      	mov	r4, r0
 800337e:	460d      	mov	r5, r1
 8003380:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f013 0f04 	tst.w	r3, #4
 800338a:	d121      	bne.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800338c:	4620      	mov	r0, r4
 800338e:	f7ff ff0c 	bl	80031aa <I2C_IsAcknowledgeFailed>
 8003392:	b9f8      	cbnz	r0, 80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8003394:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003398:	d0f3      	beq.n	8003382 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7ff fa4f 	bl	800283c <HAL_GetTick>
 800339e:	1b80      	subs	r0, r0, r6
 80033a0:	42a8      	cmp	r0, r5
 80033a2:	d801      	bhi.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80033a4:	2d00      	cmp	r5, #0
 80033a6:	d1ec      	bne.n	8003382 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f013 0f04 	tst.w	r3, #4
 80033b0:	d1e7      	bne.n	8003382 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b6:	2220      	movs	r2, #32
 80033b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033c2:	f042 0220 	orr.w	r2, r2, #32
 80033c6:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80033c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80033cc:	2001      	movs	r0, #1
 80033ce:	e000      	b.n	80033d2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 80033d0:	2000      	movs	r0, #0
}
 80033d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
 80033d6:	e7fc      	b.n	80033d2 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

080033d8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80033d8:	2800      	cmp	r0, #0
 80033da:	f000 80b1 	beq.w	8003540 <HAL_I2C_Init+0x168>
{
 80033de:	b538      	push	{r3, r4, r5, lr}
 80033e0:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d074      	beq.n	80034d4 <HAL_I2C_Init+0xfc>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ea:	2324      	movs	r3, #36	; 0x24
 80033ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003404:	6822      	ldr	r2, [r4, #0]
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800340c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800340e:	f000 fd77 	bl	8003f00 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003412:	6862      	ldr	r2, [r4, #4]
 8003414:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_I2C_Init+0x170>)
 8003416:	429a      	cmp	r2, r3
 8003418:	d861      	bhi.n	80034de <HAL_I2C_Init+0x106>
 800341a:	4b4c      	ldr	r3, [pc, #304]	; (800354c <HAL_I2C_Init+0x174>)
 800341c:	4298      	cmp	r0, r3
 800341e:	f240 8091 	bls.w	8003544 <HAL_I2C_Init+0x16c>
  freqrange = I2C_FREQRANGE(pclk1);
 8003422:	494b      	ldr	r1, [pc, #300]	; (8003550 <HAL_I2C_Init+0x178>)
 8003424:	fba1 3100 	umull	r3, r1, r1, r0
 8003428:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800342a:	6825      	ldr	r5, [r4, #0]
 800342c:	686a      	ldr	r2, [r5, #4]
 800342e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003432:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003436:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003438:	6821      	ldr	r1, [r4, #0]
 800343a:	6a0a      	ldr	r2, [r1, #32]
 800343c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003440:	4d41      	ldr	r5, [pc, #260]	; (8003548 <HAL_I2C_Init+0x170>)
 8003442:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8003446:	45ac      	cmp	ip, r5
 8003448:	d84e      	bhi.n	80034e8 <HAL_I2C_Init+0x110>
 800344a:	3301      	adds	r3, #1
 800344c:	4313      	orrs	r3, r2
 800344e:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003450:	6821      	ldr	r1, [r4, #0]
 8003452:	69ca      	ldr	r2, [r1, #28]
 8003454:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003458:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800345c:	6865      	ldr	r5, [r4, #4]
 800345e:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <HAL_I2C_Init+0x170>)
 8003460:	429d      	cmp	r5, r3
 8003462:	d84b      	bhi.n	80034fc <HAL_I2C_Init+0x124>
 8003464:	1e43      	subs	r3, r0, #1
 8003466:	006d      	lsls	r5, r5, #1
 8003468:	fbb3 f3f5 	udiv	r3, r3, r5
 800346c:	3301      	adds	r3, #1
 800346e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003472:	4203      	tst	r3, r0
 8003474:	d05e      	beq.n	8003534 <HAL_I2C_Init+0x15c>
 8003476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347a:	431a      	orrs	r2, r3
 800347c:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800347e:	6821      	ldr	r1, [r4, #0]
 8003480:	680a      	ldr	r2, [r1, #0]
 8003482:	69e3      	ldr	r3, [r4, #28]
 8003484:	6a20      	ldr	r0, [r4, #32]
 8003486:	4303      	orrs	r3, r0
 8003488:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800348c:	4313      	orrs	r3, r2
 800348e:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003490:	6821      	ldr	r1, [r4, #0]
 8003492:	688a      	ldr	r2, [r1, #8]
 8003494:	6923      	ldr	r3, [r4, #16]
 8003496:	68e0      	ldr	r0, [r4, #12]
 8003498:	4303      	orrs	r3, r0
 800349a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800349e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a6:	6821      	ldr	r1, [r4, #0]
 80034a8:	68ca      	ldr	r2, [r1, #12]
 80034aa:	6963      	ldr	r3, [r4, #20]
 80034ac:	69a0      	ldr	r0, [r4, #24]
 80034ae:	4303      	orrs	r3, r0
 80034b0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80034b8:	6822      	ldr	r2, [r4, #0]
 80034ba:	6813      	ldr	r3, [r2, #0]
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c2:	2000      	movs	r0, #0
 80034c4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	2320      	movs	r3, #32
 80034c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034cc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ce:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80034d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80034d8:	f7fe ffe2 	bl	80024a0 <HAL_I2C_MspInit>
 80034dc:	e785      	b.n	80033ea <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <HAL_I2C_Init+0x17c>)
 80034e0:	4298      	cmp	r0, r3
 80034e2:	d89e      	bhi.n	8003422 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80034e4:	2001      	movs	r0, #1
 80034e6:	e7f4      	b.n	80034d2 <HAL_I2C_Init+0xfa>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034e8:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80034ec:	fb05 f303 	mul.w	r3, r5, r3
 80034f0:	4d19      	ldr	r5, [pc, #100]	; (8003558 <HAL_I2C_Init+0x180>)
 80034f2:	fba5 5303 	umull	r5, r3, r5, r3
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	3301      	adds	r3, #1
 80034fa:	e7a7      	b.n	800344c <HAL_I2C_Init+0x74>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034fc:	68a3      	ldr	r3, [r4, #8]
 80034fe:	b95b      	cbnz	r3, 8003518 <HAL_I2C_Init+0x140>
 8003500:	1e43      	subs	r3, r0, #1
 8003502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003506:	fbb3 f3f5 	udiv	r3, r3, r5
 800350a:	3301      	adds	r3, #1
 800350c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003510:	b193      	cbz	r3, 8003538 <HAL_I2C_Init+0x160>
 8003512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003516:	e7b0      	b.n	800347a <HAL_I2C_Init+0xa2>
 8003518:	1e43      	subs	r3, r0, #1
 800351a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800351e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003522:	fbb3 f3f5 	udiv	r3, r3, r5
 8003526:	3301      	adds	r3, #1
 8003528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352c:	b133      	cbz	r3, 800353c <HAL_I2C_Init+0x164>
 800352e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003532:	e7a2      	b.n	800347a <HAL_I2C_Init+0xa2>
 8003534:	2304      	movs	r3, #4
 8003536:	e7a0      	b.n	800347a <HAL_I2C_Init+0xa2>
 8003538:	2301      	movs	r3, #1
 800353a:	e79e      	b.n	800347a <HAL_I2C_Init+0xa2>
 800353c:	2301      	movs	r3, #1
 800353e:	e79c      	b.n	800347a <HAL_I2C_Init+0xa2>
    return HAL_ERROR;
 8003540:	2001      	movs	r0, #1
}
 8003542:	4770      	bx	lr
    return HAL_ERROR;
 8003544:	2001      	movs	r0, #1
 8003546:	e7c4      	b.n	80034d2 <HAL_I2C_Init+0xfa>
 8003548:	000186a0 	.word	0x000186a0
 800354c:	001e847f 	.word	0x001e847f
 8003550:	431bde83 	.word	0x431bde83
 8003554:	003d08ff 	.word	0x003d08ff
 8003558:	10624dd3 	.word	0x10624dd3

0800355c <HAL_I2C_Master_Transmit>:
{
 800355c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003560:	b085      	sub	sp, #20
 8003562:	4604      	mov	r4, r0
 8003564:	460f      	mov	r7, r1
 8003566:	4691      	mov	r9, r2
 8003568:	4698      	mov	r8, r3
 800356a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff f966 	bl	800283c <HAL_GetTick>
 8003570:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003576:	b2c0      	uxtb	r0, r0
 8003578:	2820      	cmp	r0, #32
 800357a:	d004      	beq.n	8003586 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 800357c:	2702      	movs	r7, #2
}
 800357e:	4638      	mov	r0, r7
 8003580:	b005      	add	sp, #20
 8003582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003586:	9500      	str	r5, [sp, #0]
 8003588:	2319      	movs	r3, #25
 800358a:	2201      	movs	r2, #1
 800358c:	4971      	ldr	r1, [pc, #452]	; (8003754 <HAL_I2C_Master_Transmit+0x1f8>)
 800358e:	4620      	mov	r0, r4
 8003590:	f7ff fe24 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8003594:	2800      	cmp	r0, #0
 8003596:	f040 80d7 	bne.w	8003748 <HAL_I2C_Master_Transmit+0x1ec>
    __HAL_LOCK(hi2c);
 800359a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	f000 80d4 	beq.w	800374c <HAL_I2C_Master_Transmit+0x1f0>
 80035a4:	2301      	movs	r3, #1
 80035a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f012 0f01 	tst.w	r2, #1
 80035b2:	d103      	bne.n	80035bc <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035c6:	2321      	movs	r3, #33	; 0x21
 80035c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035cc:	2310      	movs	r3, #16
 80035ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80035d6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035da:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80035e0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e2:	4b5d      	ldr	r3, [pc, #372]	; (8003758 <HAL_I2C_Master_Transmit+0x1fc>)
 80035e4:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d00d      	beq.n	8003608 <HAL_I2C_Master_Transmit+0xac>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d00b      	beq.n	8003608 <HAL_I2C_Master_Transmit+0xac>
 80035f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035f4:	d008      	beq.n	8003608 <HAL_I2C_Master_Transmit+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035f8:	2b12      	cmp	r3, #18
 80035fa:	d10a      	bne.n	8003612 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e004      	b.n	8003612 <HAL_I2C_Master_Transmit+0xb6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003608:	6822      	ldr	r2, [r4, #0]
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003612:	9500      	str	r5, [sp, #0]
 8003614:	4633      	mov	r3, r6
 8003616:	2200      	movs	r2, #0
 8003618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800361c:	4620      	mov	r0, r4
 800361e:	f7ff fddd 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8003622:	b9d0      	cbnz	r0, 800365a <HAL_I2C_Master_Transmit+0xfe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003624:	6923      	ldr	r3, [r4, #16]
 8003626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362a:	d120      	bne.n	800366e <HAL_I2C_Master_Transmit+0x112>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003632:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003634:	462b      	mov	r3, r5
 8003636:	4632      	mov	r2, r6
 8003638:	4948      	ldr	r1, [pc, #288]	; (800375c <HAL_I2C_Master_Transmit+0x200>)
 800363a:	4620      	mov	r0, r4
 800363c:	f7ff fe11 	bl	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003640:	4607      	mov	r7, r0
 8003642:	2800      	cmp	r0, #0
 8003644:	f040 8084 	bne.w	8003750 <HAL_I2C_Master_Transmit+0x1f4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003648:	2300      	movs	r3, #0
 800364a:	9303      	str	r3, [sp, #12]
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	9203      	str	r2, [sp, #12]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	9303      	str	r3, [sp, #12]
 8003656:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003658:	e02f      	b.n	80036ba <HAL_I2C_Master_Transmit+0x15e>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003662:	d002      	beq.n	800366a <HAL_I2C_Master_Transmit+0x10e>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003668:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800366a:	2701      	movs	r7, #1
 800366c:	e787      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	11fb      	asrs	r3, r7, #7
 8003672:	f003 0306 	and.w	r3, r3, #6
 8003676:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800367a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800367c:	462b      	mov	r3, r5
 800367e:	4632      	mov	r2, r6
 8003680:	4937      	ldr	r1, [pc, #220]	; (8003760 <HAL_I2C_Master_Transmit+0x204>)
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff fded 	bl	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003688:	2800      	cmp	r0, #0
 800368a:	d1ee      	bne.n	800366a <HAL_I2C_Master_Transmit+0x10e>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	b2ff      	uxtb	r7, r7
 8003690:	611f      	str	r7, [r3, #16]
 8003692:	e7cf      	b.n	8003634 <HAL_I2C_Master_Transmit+0xd8>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003694:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003696:	2b04      	cmp	r3, #4
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Transmit+0x142>
        return HAL_ERROR;
 800369a:	2701      	movs	r7, #1
 800369c:	e76f      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a6:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80036a8:	2701      	movs	r7, #1
 80036aa:	e768      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ac:	462a      	mov	r2, r5
 80036ae:	4631      	mov	r1, r6
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fe62 	bl	800337a <I2C_WaitOnBTFFlagUntilTimeout>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d12c      	bne.n	8003714 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 80036ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d035      	beq.n	800372c <HAL_I2C_Master_Transmit+0x1d0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036c0:	462a      	mov	r2, r5
 80036c2:	4631      	mov	r1, r6
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7ff fe29 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d1e2      	bne.n	8003694 <HAL_I2C_Master_Transmit+0x138>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80036d8:	1c53      	adds	r3, r2, #1
 80036da:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80036dc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80036de:	3901      	subs	r1, #1
 80036e0:	b289      	uxth	r1, r1
 80036e2:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80036e4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80036e6:	3901      	subs	r1, #1
 80036e8:	b289      	uxth	r1, r1
 80036ea:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	6958      	ldr	r0, [r3, #20]
 80036f0:	f010 0f04 	tst.w	r0, #4
 80036f4:	d0da      	beq.n	80036ac <HAL_I2C_Master_Transmit+0x150>
 80036f6:	2900      	cmp	r1, #0
 80036f8:	d0d8      	beq.n	80036ac <HAL_I2C_Master_Transmit+0x150>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036fa:	7852      	ldrb	r2, [r2, #1]
 80036fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80036fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003700:	3301      	adds	r3, #1
 8003702:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003704:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003706:	3b01      	subs	r3, #1
 8003708:	b29b      	uxth	r3, r3
 800370a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800370c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800370e:	3b01      	subs	r3, #1
 8003710:	8523      	strh	r3, [r4, #40]	; 0x28
 8003712:	e7cb      	b.n	80036ac <HAL_I2C_Master_Transmit+0x150>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003716:	2b04      	cmp	r3, #4
 8003718:	d001      	beq.n	800371e <HAL_I2C_Master_Transmit+0x1c2>
        return HAL_ERROR;
 800371a:	2701      	movs	r7, #1
 800371c:	e72f      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	6822      	ldr	r2, [r4, #0]
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003726:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003728:	2701      	movs	r7, #1
 800372a:	e728      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	6822      	ldr	r2, [r4, #0]
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003734:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003736:	2320      	movs	r3, #32
 8003738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	2300      	movs	r3, #0
 800373e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003746:	e71a      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8003748:	2702      	movs	r7, #2
 800374a:	e718      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 800374c:	2702      	movs	r7, #2
 800374e:	e716      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8003750:	2701      	movs	r7, #1
 8003752:	e714      	b.n	800357e <HAL_I2C_Master_Transmit+0x22>
 8003754:	00100002 	.word	0x00100002
 8003758:	ffff0000 	.word	0xffff0000
 800375c:	00010002 	.word	0x00010002
 8003760:	00010008 	.word	0x00010008

08003764 <HAL_I2C_IsDeviceReady>:
{
 8003764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	b085      	sub	sp, #20
 800376a:	4604      	mov	r4, r0
 800376c:	4689      	mov	r9, r1
 800376e:	4692      	mov	sl, r2
 8003770:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003772:	f7ff f863 	bl	800283c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003776:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b20      	cmp	r3, #32
 800377e:	d003      	beq.n	8003788 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8003780:	2002      	movs	r0, #2
}
 8003782:	b005      	add	sp, #20
 8003784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003788:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800378a:	9000      	str	r0, [sp, #0]
 800378c:	2319      	movs	r3, #25
 800378e:	2201      	movs	r2, #1
 8003790:	495d      	ldr	r1, [pc, #372]	; (8003908 <HAL_I2C_IsDeviceReady+0x1a4>)
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff fd22 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8003798:	2800      	cmp	r0, #0
 800379a:	f040 80ab 	bne.w	80038f4 <HAL_I2C_IsDeviceReady+0x190>
    __HAL_LOCK(hi2c);
 800379e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	f000 80a8 	beq.w	80038f8 <HAL_I2C_IsDeviceReady+0x194>
 80037a8:	2301      	movs	r3, #1
 80037aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f012 0f01 	tst.w	r2, #1
 80037b6:	d103      	bne.n	80037c0 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c0:	6822      	ldr	r2, [r4, #0]
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ca:	2324      	movs	r3, #36	; 0x24
 80037cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d4:	4a4d      	ldr	r2, [pc, #308]	; (800390c <HAL_I2C_IsDeviceReady+0x1a8>)
 80037d6:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 0U;
 80037d8:	4698      	mov	r8, r3
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037da:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037de:	f8df b128 	ldr.w	fp, [pc, #296]	; 8003908 <HAL_I2C_IsDeviceReady+0x1a4>
 80037e2:	e03f      	b.n	8003864 <HAL_I2C_IsDeviceReady+0x100>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037ec:	f000 8086 	beq.w	80038fc <HAL_I2C_IsDeviceReady+0x198>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f4:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80037f6:	2003      	movs	r0, #3
 80037f8:	e7c3      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037fa:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	6953      	ldr	r3, [r2, #20]
 8003802:	f003 0302 	and.w	r3, r3, #2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003806:	6951      	ldr	r1, [r2, #20]
 8003808:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800380c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	2aa0      	cmp	r2, #160	; 0xa0
 8003814:	d009      	beq.n	800382a <HAL_I2C_IsDeviceReady+0xc6>
 8003816:	430b      	orrs	r3, r1
 8003818:	d107      	bne.n	800382a <HAL_I2C_IsDeviceReady+0xc6>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7ff f80f 	bl	800283c <HAL_GetTick>
 800381e:	1b80      	subs	r0, r0, r6
 8003820:	42a8      	cmp	r0, r5
 8003822:	d8ea      	bhi.n	80037fa <HAL_I2C_IsDeviceReady+0x96>
 8003824:	2d00      	cmp	r5, #0
 8003826:	d1ea      	bne.n	80037fe <HAL_I2C_IsDeviceReady+0x9a>
 8003828:	e7e7      	b.n	80037fa <HAL_I2C_IsDeviceReady+0x96>
      hi2c->State = HAL_I2C_STATE_READY;
 800382a:	2320      	movs	r3, #32
 800382c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	f012 0f02 	tst.w	r2, #2
 8003838:	d139      	bne.n	80038ae <HAL_I2C_IsDeviceReady+0x14a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003840:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003848:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800384a:	9600      	str	r6, [sp, #0]
 800384c:	2319      	movs	r3, #25
 800384e:	2201      	movs	r2, #1
 8003850:	4659      	mov	r1, fp
 8003852:	4620      	mov	r0, r4
 8003854:	f7ff fcc2 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 8003858:	2800      	cmp	r0, #0
 800385a:	d153      	bne.n	8003904 <HAL_I2C_IsDeviceReady+0x1a0>
      I2C_Trials++;
 800385c:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 8003860:	45d0      	cmp	r8, sl
 8003862:	d23f      	bcs.n	80038e4 <HAL_I2C_IsDeviceReady+0x180>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800386e:	9600      	str	r6, [sp, #0]
 8003870:	462b      	mov	r3, r5
 8003872:	2200      	movs	r2, #0
 8003874:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff fcaf 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 800387e:	2800      	cmp	r0, #0
 8003880:	d1b0      	bne.n	80037e4 <HAL_I2C_IsDeviceReady+0x80>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8003888:	f7fe ffd8 	bl	800283c <HAL_GetTick>
 800388c:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800388e:	6822      	ldr	r2, [r4, #0]
 8003890:	6953      	ldr	r3, [r2, #20]
 8003892:	f003 0302 	and.w	r3, r3, #2
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003896:	6951      	ldr	r1, [r2, #20]
 8003898:	f401 6180 	and.w	r1, r1, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800389c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	2aa0      	cmp	r2, #160	; 0xa0
 80038a4:	d0c1      	beq.n	800382a <HAL_I2C_IsDeviceReady+0xc6>
 80038a6:	430b      	orrs	r3, r1
 80038a8:	d1bf      	bne.n	800382a <HAL_I2C_IsDeviceReady+0xc6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038aa:	27a0      	movs	r7, #160	; 0xa0
 80038ac:	e7b5      	b.n	800381a <HAL_I2C_IsDeviceReady+0xb6>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	9303      	str	r3, [sp, #12]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	9203      	str	r2, [sp, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038c6:	9600      	str	r6, [sp, #0]
 80038c8:	2319      	movs	r3, #25
 80038ca:	2201      	movs	r2, #1
 80038cc:	490e      	ldr	r1, [pc, #56]	; (8003908 <HAL_I2C_IsDeviceReady+0x1a4>)
 80038ce:	4620      	mov	r0, r4
 80038d0:	f7ff fc84 	bl	80031dc <I2C_WaitOnFlagUntilTimeout>
 80038d4:	b9a0      	cbnz	r0, 8003900 <HAL_I2C_IsDeviceReady+0x19c>
        hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	2320      	movs	r3, #32
 80038d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80038dc:	2300      	movs	r3, #0
 80038de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 80038e2:	e74e      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	2320      	movs	r3, #32
 80038e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80038ea:	2300      	movs	r3, #0
 80038ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80038f0:	2001      	movs	r0, #1
 80038f2:	e746      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80038f4:	2002      	movs	r0, #2
 80038f6:	e744      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80038f8:	2002      	movs	r0, #2
 80038fa:	e742      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_TIMEOUT;
 80038fc:	2003      	movs	r0, #3
 80038fe:	e740      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003900:	2001      	movs	r0, #1
 8003902:	e73e      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003904:	2001      	movs	r0, #1
 8003906:	e73c      	b.n	8003782 <HAL_I2C_IsDeviceReady+0x1e>
 8003908:	00100002 	.word	0x00100002
 800390c:	ffff0000 	.word	0xffff0000

08003910 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003910:	2800      	cmp	r0, #0
 8003912:	f000 8201 	beq.w	8003d18 <HAL_RCC_OscConfig+0x408>
{
 8003916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	6803      	ldr	r3, [r0, #0]
 8003920:	f013 0f01 	tst.w	r3, #1
 8003924:	d02c      	beq.n	8003980 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003926:	4b9f      	ldr	r3, [pc, #636]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d01d      	beq.n	800396e <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003932:	4b9c      	ldr	r3, [pc, #624]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b08      	cmp	r3, #8
 800393c:	d012      	beq.n	8003964 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003944:	d041      	beq.n	80039ca <HAL_RCC_OscConfig+0xba>
 8003946:	2b00      	cmp	r3, #0
 8003948:	d155      	bne.n	80039f6 <HAL_RCC_OscConfig+0xe6>
 800394a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800394e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e037      	b.n	80039d4 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003964:	4b8f      	ldr	r3, [pc, #572]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800396c:	d0e7      	beq.n	800393e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003976:	d003      	beq.n	8003980 <HAL_RCC_OscConfig+0x70>
 8003978:	6863      	ldr	r3, [r4, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	f000 81ce 	beq.w	8003d1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f013 0f02 	tst.w	r3, #2
 8003986:	d075      	beq.n	8003a74 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003988:	4b86      	ldr	r3, [pc, #536]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f013 0f0c 	tst.w	r3, #12
 8003990:	d05f      	beq.n	8003a52 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003992:	4b84      	ldr	r3, [pc, #528]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b08      	cmp	r3, #8
 800399c:	d054      	beq.n	8003a48 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399e:	6923      	ldr	r3, [r4, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 808a 	beq.w	8003aba <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a6:	4b80      	ldr	r3, [pc, #512]	; (8003ba8 <HAL_RCC_OscConfig+0x298>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe ff46 	bl	800283c <HAL_GetTick>
 80039b0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4e7c      	ldr	r6, [pc, #496]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	f013 0f02 	tst.w	r3, #2
 80039ba:	d175      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039bc:	f7fe ff3e 	bl	800283c <HAL_GetTick>
 80039c0:	1b40      	subs	r0, r0, r5
 80039c2:	2802      	cmp	r0, #2
 80039c4:	d9f6      	bls.n	80039b4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 80039c6:	2003      	movs	r0, #3
 80039c8:	e1ad      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ca:	4a76      	ldr	r2, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 80039cc:	6813      	ldr	r3, [r2, #0]
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039d4:	6863      	ldr	r3, [r4, #4]
 80039d6:	b343      	cbz	r3, 8003a2a <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80039d8:	f7fe ff30 	bl	800283c <HAL_GetTick>
 80039dc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4e71      	ldr	r6, [pc, #452]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 80039e0:	6833      	ldr	r3, [r6, #0]
 80039e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80039e6:	d1cb      	bne.n	8003980 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fe ff28 	bl	800283c <HAL_GetTick>
 80039ec:	1b40      	subs	r0, r0, r5
 80039ee:	2864      	cmp	r0, #100	; 0x64
 80039f0:	d9f6      	bls.n	80039e0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80039f2:	2003      	movs	r0, #3
 80039f4:	e197      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039fa:	d009      	beq.n	8003a10 <HAL_RCC_OscConfig+0x100>
 80039fc:	4b69      	ldr	r3, [pc, #420]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e7e1      	b.n	80039d4 <HAL_RCC_OscConfig+0xc4>
 8003a10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a14:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	e7d4      	b.n	80039d4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8003a2a:	f7fe ff07 	bl	800283c <HAL_GetTick>
 8003a2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a30:	4e5c      	ldr	r6, [pc, #368]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003a32:	6833      	ldr	r3, [r6, #0]
 8003a34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a38:	d0a2      	beq.n	8003980 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3a:	f7fe feff 	bl	800283c <HAL_GetTick>
 8003a3e:	1b40      	subs	r0, r0, r5
 8003a40:	2864      	cmp	r0, #100	; 0x64
 8003a42:	d9f6      	bls.n	8003a32 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8003a44:	2003      	movs	r0, #3
 8003a46:	e16e      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a48:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003a50:	d1a5      	bne.n	800399e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f013 0f02 	tst.w	r3, #2
 8003a5a:	d003      	beq.n	8003a64 <HAL_RCC_OscConfig+0x154>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	f040 815e 	bne.w	8003d20 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4a4f      	ldr	r2, [pc, #316]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	6961      	ldr	r1, [r4, #20]
 8003a6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a72:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f013 0f08 	tst.w	r3, #8
 8003a7a:	d03d      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a7c:	69a3      	ldr	r3, [r4, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d066      	beq.n	8003b50 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a82:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <HAL_RCC_OscConfig+0x298>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8a:	f7fe fed7 	bl	800283c <HAL_GetTick>
 8003a8e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a90:	4e44      	ldr	r6, [pc, #272]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003a92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003a94:	f013 0f02 	tst.w	r3, #2
 8003a98:	d121      	bne.n	8003ade <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7fe fecf 	bl	800283c <HAL_GetTick>
 8003a9e:	1b40      	subs	r0, r0, r5
 8003aa0:	2802      	cmp	r0, #2
 8003aa2:	d9f6      	bls.n	8003a92 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8003aa4:	2003      	movs	r0, #3
 8003aa6:	e13e      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4a3e      	ldr	r2, [pc, #248]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	6961      	ldr	r1, [r4, #20]
 8003aae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ab2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e7dc      	b.n	8003a74 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x298>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ac0:	f7fe febc 	bl	800283c <HAL_GetTick>
 8003ac4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4e37      	ldr	r6, [pc, #220]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003ac8:	6833      	ldr	r3, [r6, #0]
 8003aca:	f013 0f02 	tst.w	r3, #2
 8003ace:	d0d1      	beq.n	8003a74 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad0:	f7fe feb4 	bl	800283c <HAL_GetTick>
 8003ad4:	1b40      	subs	r0, r0, r5
 8003ad6:	2802      	cmp	r0, #2
 8003ad8:	d9f6      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8003ada:	2003      	movs	r0, #3
 8003adc:	e123      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <HAL_RCC_OscConfig+0x29c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a33      	ldr	r2, [pc, #204]	; (8003bb0 <HAL_RCC_OscConfig+0x2a0>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	0a5b      	lsrs	r3, r3, #9
 8003aea:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003aec:	bf00      	nop
  }
  while (Delay --);
 8003aee:	9b01      	ldr	r3, [sp, #4]
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	9201      	str	r2, [sp, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f9      	bne.n	8003aec <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f013 0f04 	tst.w	r3, #4
 8003afe:	f000 809b 	beq.w	8003c38 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b28      	ldr	r3, [pc, #160]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003b0a:	d134      	bne.n	8003b76 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003b20:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x2a4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b2a:	d026      	beq.n	8003b7a <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b2c:	68e3      	ldr	r3, [r4, #12]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d042      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2a8>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d158      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2d8>
 8003b36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b3a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	621a      	str	r2, [r3, #32]
 8003b46:	6a1a      	ldr	r2, [r3, #32]
 8003b48:	f022 0204 	bic.w	r2, r2, #4
 8003b4c:	621a      	str	r2, [r3, #32]
 8003b4e:	e038      	b.n	8003bc2 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCC_OscConfig+0x298>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003b58:	f7fe fe70 	bl	800283c <HAL_GetTick>
 8003b5c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5e:	4e11      	ldr	r6, [pc, #68]	; (8003ba4 <HAL_RCC_OscConfig+0x294>)
 8003b60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003b62:	f013 0f02 	tst.w	r3, #2
 8003b66:	d0c7      	beq.n	8003af8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fe fe68 	bl	800283c <HAL_GetTick>
 8003b6c:	1b40      	subs	r0, r0, r5
 8003b6e:	2802      	cmp	r0, #2
 8003b70:	d9f6      	bls.n	8003b60 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8003b72:	2003      	movs	r0, #3
 8003b74:	e0d7      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003b76:	2500      	movs	r5, #0
 8003b78:	e7d3      	b.n	8003b22 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	4a0e      	ldr	r2, [pc, #56]	; (8003bb4 <HAL_RCC_OscConfig+0x2a4>)
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b82:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b84:	f7fe fe5a 	bl	800283c <HAL_GetTick>
 8003b88:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4f0a      	ldr	r7, [pc, #40]	; (8003bb4 <HAL_RCC_OscConfig+0x2a4>)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b92:	d1cb      	bne.n	8003b2c <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f7fe fe52 	bl	800283c <HAL_GetTick>
 8003b98:	1b80      	subs	r0, r0, r6
 8003b9a:	2864      	cmp	r0, #100	; 0x64
 8003b9c:	d9f6      	bls.n	8003b8c <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8003b9e:	2003      	movs	r0, #3
 8003ba0:	e0c1      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	42420000 	.word	0x42420000
 8003bac:	20000020 	.word	0x20000020
 8003bb0:	10624dd3 	.word	0x10624dd3
 8003bb4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb8:	4a5e      	ldr	r2, [pc, #376]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003bba:	6a13      	ldr	r3, [r2, #32]
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc2:	68e3      	ldr	r3, [r4, #12]
 8003bc4:	b333      	cbz	r3, 8003c14 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8003bc6:	f7fe fe39 	bl	800283c <HAL_GetTick>
 8003bca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4f59      	ldr	r7, [pc, #356]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f013 0f02 	tst.w	r3, #2
 8003bd8:	d12d      	bne.n	8003c36 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bda:	f7fe fe2f 	bl	800283c <HAL_GetTick>
 8003bde:	1b80      	subs	r0, r0, r6
 8003be0:	4540      	cmp	r0, r8
 8003be2:	d9f6      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 8003be4:	2003      	movs	r0, #3
 8003be6:	e09e      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d009      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2f0>
 8003bec:	4b51      	ldr	r3, [pc, #324]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	621a      	str	r2, [r3, #32]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	f022 0204 	bic.w	r2, r2, #4
 8003bfc:	621a      	str	r2, [r3, #32]
 8003bfe:	e7e0      	b.n	8003bc2 <HAL_RCC_OscConfig+0x2b2>
 8003c00:	4b4c      	ldr	r3, [pc, #304]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	f042 0204 	orr.w	r2, r2, #4
 8003c08:	621a      	str	r2, [r3, #32]
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	621a      	str	r2, [r3, #32]
 8003c12:	e7d6      	b.n	8003bc2 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 8003c14:	f7fe fe12 	bl	800283c <HAL_GetTick>
 8003c18:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	4f46      	ldr	r7, [pc, #280]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1c:	f241 3888 	movw	r8, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f013 0f02 	tst.w	r3, #2
 8003c26:	d006      	beq.n	8003c36 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe fe08 	bl	800283c <HAL_GetTick>
 8003c2c:	1b80      	subs	r0, r0, r6
 8003c2e:	4540      	cmp	r0, r8
 8003c30:	d9f6      	bls.n	8003c20 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8003c32:	2003      	movs	r0, #3
 8003c34:	e077      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8003c36:	b9e5      	cbnz	r5, 8003c72 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c38:	69e3      	ldr	r3, [r4, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d072      	beq.n	8003d24 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c3e:	4a3d      	ldr	r2, [pc, #244]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003c40:	6852      	ldr	r2, [r2, #4]
 8003c42:	f002 020c 	and.w	r2, r2, #12
 8003c46:	2a08      	cmp	r2, #8
 8003c48:	d056      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d017      	beq.n	8003c7e <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCC_OscConfig+0x428>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003c54:	f7fe fdf2 	bl	800283c <HAL_GetTick>
 8003c58:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	4d36      	ldr	r5, [pc, #216]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c62:	d047      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fe fdea 	bl	800283c <HAL_GetTick>
 8003c68:	1b00      	subs	r0, r0, r4
 8003c6a:	2802      	cmp	r0, #2
 8003c6c:	d9f6      	bls.n	8003c5c <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8003c6e:	2003      	movs	r0, #3
 8003c70:	e059      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4a30      	ldr	r2, [pc, #192]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003c74:	69d3      	ldr	r3, [r2, #28]
 8003c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	61d3      	str	r3, [r2, #28]
 8003c7c:	e7dc      	b.n	8003c38 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <HAL_RCC_OscConfig+0x428>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003c84:	f7fe fdda 	bl	800283c <HAL_GetTick>
 8003c88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8a:	4e2a      	ldr	r6, [pc, #168]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003c8c:	6833      	ldr	r3, [r6, #0]
 8003c8e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003c92:	d006      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7fe fdd2 	bl	800283c <HAL_GetTick>
 8003c98:	1b40      	subs	r0, r0, r5
 8003c9a:	2802      	cmp	r0, #2
 8003c9c:	d9f6      	bls.n	8003c8c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8003c9e:	2003      	movs	r0, #3
 8003ca0:	e041      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ca2:	6a23      	ldr	r3, [r4, #32]
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d01a      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003caa:	4922      	ldr	r1, [pc, #136]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003cac:	684a      	ldr	r2, [r1, #4]
 8003cae:	6a23      	ldr	r3, [r4, #32]
 8003cb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003cb2:	4303      	orrs	r3, r0
 8003cb4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <HAL_RCC_OscConfig+0x428>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003cc2:	f7fe fdbb 	bl	800283c <HAL_GetTick>
 8003cc6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc8:	4d1a      	ldr	r5, [pc, #104]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003cca:	682b      	ldr	r3, [r5, #0]
 8003ccc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe fdb3 	bl	800283c <HAL_GetTick>
 8003cd6:	1b00      	subs	r0, r0, r4
 8003cd8:	2802      	cmp	r0, #2
 8003cda:	d9f6      	bls.n	8003cca <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8003cdc:	2003      	movs	r0, #3
 8003cde:	e022      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ce0:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003ce2:	6853      	ldr	r3, [r2, #4]
 8003ce4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ce8:	68a1      	ldr	r1, [r4, #8]
 8003cea:	430b      	orrs	r3, r1
 8003cec:	6053      	str	r3, [r2, #4]
 8003cee:	e7dc      	b.n	8003caa <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	e018      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e016      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d017      	beq.n	8003d2c <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <HAL_RCC_OscConfig+0x424>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d00:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003d04:	6a22      	ldr	r2, [r4, #32]
 8003d06:	4291      	cmp	r1, r2
 8003d08:	d112      	bne.n	8003d30 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d0a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8003d10:	1a18      	subs	r0, r3, r0
 8003d12:	bf18      	it	ne
 8003d14:	2001      	movne	r0, #1
 8003d16:	e006      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003d18:	2001      	movs	r0, #1
}
 8003d1a:	4770      	bx	lr
        return HAL_ERROR;
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	e002      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8003d20:	2001      	movs	r0, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8003d24:	2000      	movs	r0, #0
}
 8003d26:	b002      	add	sp, #8
 8003d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	e7fa      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
 8003d32:	e7f8      	b.n	8003d26 <HAL_RCC_OscConfig+0x416>
 8003d34:	40021000 	.word	0x40021000
 8003d38:	42420000 	.word	0x42420000

08003d3c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x40>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003d40:	f003 020c 	and.w	r2, r3, #12
 8003d44:	2a08      	cmp	r2, #8
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8003d48:	480d      	ldr	r0, [pc, #52]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8003d4a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d4c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003d50:	490c      	ldr	r1, [pc, #48]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x48>)
 8003d52:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d54:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d58:	d00b      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d5a:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x40>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d5e:	4a08      	ldr	r2, [pc, #32]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x44>)
 8003d60:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d64:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003d68:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x4c>)
 8003d6a:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d70:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x50>)
 8003d74:	fb03 f000 	mul.w	r0, r3, r0
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	007a1200 	.word	0x007a1200
 8003d84:	08009a38 	.word	0x08009a38
 8003d88:	08009a48 	.word	0x08009a48
 8003d8c:	003d0900 	.word	0x003d0900

08003d90 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003d90:	2800      	cmp	r0, #0
 8003d92:	f000 80a2 	beq.w	8003eda <HAL_RCC_ClockConfig+0x14a>
{
 8003d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9a:	460d      	mov	r5, r1
 8003d9c:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d9e:	4b53      	ldr	r3, [pc, #332]	; (8003eec <HAL_RCC_ClockConfig+0x15c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	428b      	cmp	r3, r1
 8003da8:	d20b      	bcs.n	8003dc2 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003daa:	4a50      	ldr	r2, [pc, #320]	; (8003eec <HAL_RCC_ClockConfig+0x15c>)
 8003dac:	6813      	ldr	r3, [r2, #0]
 8003dae:	f023 0307 	bic.w	r3, r3, #7
 8003db2:	430b      	orrs	r3, r1
 8003db4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	6813      	ldr	r3, [r2, #0]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	f040 808e 	bne.w	8003ede <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	f013 0f02 	tst.w	r3, #2
 8003dc8:	d017      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dca:	f013 0f04 	tst.w	r3, #4
 8003dce:	d004      	beq.n	8003dda <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd0:	4a47      	ldr	r2, [pc, #284]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003dd2:	6853      	ldr	r3, [r2, #4]
 8003dd4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003dd8:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	f013 0f08 	tst.w	r3, #8
 8003de0:	d004      	beq.n	8003dec <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de2:	4a43      	ldr	r2, [pc, #268]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003de4:	6853      	ldr	r3, [r2, #4]
 8003de6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dea:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4a40      	ldr	r2, [pc, #256]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003dee:	6853      	ldr	r3, [r2, #4]
 8003df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003df4:	68a1      	ldr	r1, [r4, #8]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f013 0f01 	tst.w	r3, #1
 8003e00:	d031      	beq.n	8003e66 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e02:	6862      	ldr	r2, [r4, #4]
 8003e04:	2a01      	cmp	r2, #1
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e08:	2a02      	cmp	r2, #2
 8003e0a:	d025      	beq.n	8003e58 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f013 0f02 	tst.w	r3, #2
 8003e14:	d065      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e16:	4936      	ldr	r1, [pc, #216]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003e18:	684b      	ldr	r3, [r1, #4]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003e22:	f7fe fd0b 	bl	800283c <HAL_GetTick>
 8003e26:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e28:	4f31      	ldr	r7, [pc, #196]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	6862      	ldr	r2, [r4, #4]
 8003e36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e3a:	d014      	beq.n	8003e66 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fe fcfe 	bl	800283c <HAL_GetTick>
 8003e40:	1b80      	subs	r0, r0, r6
 8003e42:	4540      	cmp	r0, r8
 8003e44:	d9f3      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8003e46:	2003      	movs	r0, #3
 8003e48:	e045      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e52:	d1e0      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003e54:	2001      	movs	r0, #1
 8003e56:	e03e      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003e60:	d1d9      	bne.n	8003e16 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8003e62:	2001      	movs	r0, #1
 8003e64:	e037      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <HAL_RCC_ClockConfig+0x15c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	d90a      	bls.n	8003e88 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_RCC_ClockConfig+0x15c>)
 8003e74:	6813      	ldr	r3, [r2, #0]
 8003e76:	f023 0307 	bic.w	r3, r3, #7
 8003e7a:	432b      	orrs	r3, r5
 8003e7c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	42ab      	cmp	r3, r5
 8003e86:	d12e      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	f013 0f04 	tst.w	r3, #4
 8003e8e:	d006      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e90:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003e92:	6853      	ldr	r3, [r2, #4]
 8003e94:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e98:	68e1      	ldr	r1, [r4, #12]
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	f013 0f08 	tst.w	r3, #8
 8003ea4:	d007      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ea6:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003ea8:	6853      	ldr	r3, [r2, #4]
 8003eaa:	6921      	ldr	r1, [r4, #16]
 8003eac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003eb0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003eb4:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eb6:	f7ff ff41 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8003eba:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <HAL_RCC_ClockConfig+0x160>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_RCC_ClockConfig+0x164>)
 8003ec4:	5cd3      	ldrb	r3, [r2, r3]
 8003ec6:	40d8      	lsrs	r0, r3
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCC_ClockConfig+0x168>)
 8003eca:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <HAL_RCC_ClockConfig+0x16c>)
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	f7fe fba8 	bl	8002624 <HAL_InitTick>
  return HAL_OK;
 8003ed4:	2000      	movs	r0, #0
}
 8003ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003eda:	2001      	movs	r0, #1
}
 8003edc:	4770      	bx	lr
    return HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
 8003ee0:	e7f9      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	e7f7      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	e7f5      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x146>
 8003eea:	bf00      	nop
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	08009a20 	.word	0x08009a20
 8003ef8:	20000020 	.word	0x20000020
 8003efc:	200008b0 	.word	0x200008b0

08003f00 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003f08:	4a03      	ldr	r2, [pc, #12]	; (8003f18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f0a:	5cd3      	ldrb	r3, [r2, r3]
 8003f0c:	4a03      	ldr	r2, [pc, #12]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f0e:	6810      	ldr	r0, [r2, #0]
}
 8003f10:	40d8      	lsrs	r0, r3
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	08009a30 	.word	0x08009a30
 8003f1c:	20000020 	.word	0x20000020

08003f20 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003f28:	4a03      	ldr	r2, [pc, #12]	; (8003f38 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f2a:	5cd3      	ldrb	r3, [r2, r3]
 8003f2c:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003f2e:	6810      	ldr	r0, [r2, #0]
}
 8003f30:	40d8      	lsrs	r0, r3
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08009a30 	.word	0x08009a30
 8003f3c:	20000020 	.word	0x20000020

08003f40 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f40:	230f      	movs	r3, #15
 8003f42:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_GetClockConfig+0x34>)
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	f002 0203 	and.w	r2, r2, #3
 8003f4c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003f54:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003f5c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f66:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f68:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <HAL_RCC_GetClockConfig+0x38>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	600b      	str	r3, [r1, #0]
}
 8003f72:	4770      	bx	lr
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40022000 	.word	0x40022000

08003f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f84:	6803      	ldr	r3, [r0, #0]
 8003f86:	f013 0f01 	tst.w	r3, #1
 8003f8a:	d036      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f8c:	4b3f      	ldr	r3, [pc, #252]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003f94:	d149      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4b3d      	ldr	r3, [pc, #244]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f9e:	61da      	str	r2, [r3, #28]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	9301      	str	r3, [sp, #4]
 8003fa8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003faa:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fb4:	d03b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fb6:	4b35      	ldr	r3, [pc, #212]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fba:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003fc0:	6862      	ldr	r2, [r4, #4]
 8003fc2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fca:	4a30      	ldr	r2, [pc, #192]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003fcc:	6a13      	ldr	r3, [r2, #32]
 8003fce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fd2:	4930      	ldr	r1, [pc, #192]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003fd4:	2601      	movs	r6, #1
 8003fd6:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fda:	2600      	movs	r6, #0
 8003fdc:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003fe0:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fe2:	f013 0f01 	tst.w	r3, #1
 8003fe6:	d136      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe8:	4a28      	ldr	r2, [pc, #160]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8003fea:	6a13      	ldr	r3, [r2, #32]
 8003fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff0:	6861      	ldr	r1, [r4, #4]
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ff6:	2d00      	cmp	r5, #0
 8003ff8:	d13e      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	f013 0f02 	tst.w	r3, #2
 8004000:	d006      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004002:	4a22      	ldr	r2, [pc, #136]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8004004:	6853      	ldr	r3, [r2, #4]
 8004006:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800400a:	68a1      	ldr	r1, [r4, #8]
 800400c:	430b      	orrs	r3, r1
 800400e:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004010:	6823      	ldr	r3, [r4, #0]
 8004012:	f013 0f10 	tst.w	r3, #16
 8004016:	d034      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004018:	4a1c      	ldr	r2, [pc, #112]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800401a:	6853      	ldr	r3, [r2, #4]
 800401c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004020:	68e1      	ldr	r1, [r4, #12]
 8004022:	430b      	orrs	r3, r1
 8004024:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004026:	2000      	movs	r0, #0
 8004028:	e02c      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 800402a:	2500      	movs	r5, #0
 800402c:	e7be      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402e:	4a18      	ldr	r2, [pc, #96]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004030:	6813      	ldr	r3, [r2, #0]
 8004032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004036:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004038:	f7fe fc00 	bl	800283c <HAL_GetTick>
 800403c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403e:	4f14      	ldr	r7, [pc, #80]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004046:	d1b6      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fe fbf8 	bl	800283c <HAL_GetTick>
 800404c:	1b80      	subs	r0, r0, r6
 800404e:	2864      	cmp	r0, #100	; 0x64
 8004050:	d9f6      	bls.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8004052:	2003      	movs	r0, #3
 8004054:	e016      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8004056:	f7fe fbf1 	bl	800283c <HAL_GetTick>
 800405a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405c:	4f0b      	ldr	r7, [pc, #44]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	f013 0f02 	tst.w	r3, #2
 8004068:	d1be      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fe fbe7 	bl	800283c <HAL_GetTick>
 800406e:	1b80      	subs	r0, r0, r6
 8004070:	4540      	cmp	r0, r8
 8004072:	d9f6      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8004074:	2003      	movs	r0, #3
 8004076:	e005      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	69d3      	ldr	r3, [r2, #28]
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	61d3      	str	r3, [r2, #28]
 8004080:	e7bb      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8004082:	2000      	movs	r0, #0
}
 8004084:	b002      	add	sp, #8
 8004086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
 8004090:	40007000 	.word	0x40007000
 8004094:	42420000 	.word	0x42420000

08004098 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004098:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800409a:	2802      	cmp	r0, #2
 800409c:	d050      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800409e:	2810      	cmp	r0, #16
 80040a0:	d003      	beq.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 80040a2:	2801      	cmp	r0, #1
 80040a4:	d028      	beq.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80040a6:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80040a8:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 80040aa:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80040ac:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80040b4:	d0f8      	beq.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040b6:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80040ba:	4929      	ldr	r1, [pc, #164]	; (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80040bc:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040be:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80040c2:	d015      	beq.n	80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040c4:	4b25      	ldr	r3, [pc, #148]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80040cc:	4a25      	ldr	r2, [pc, #148]	; (8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80040ce:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 80040d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80040d6:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80040da:	4b20      	ldr	r3, [pc, #128]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80040e2:	d1e1      	bne.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 80040e4:	0040      	lsls	r0, r0, #1
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 80040e8:	fba3 3000 	umull	r3, r0, r3, r0
 80040ec:	0840      	lsrs	r0, r0, #1
 80040ee:	e7db      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040f0:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80040f2:	fb03 f000 	mul.w	r0, r3, r0
 80040f6:	e7f0      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 80040f8:	4b18      	ldr	r3, [pc, #96]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040fc:	f240 3202 	movw	r2, #770	; 0x302
 8004100:	401a      	ands	r2, r3
 8004102:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8004106:	d026      	beq.n	8004156 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004110:	d004      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
  uint32_t temp_reg = 0U, frequency = 0U;
 8004118:	2000      	movs	r0, #0
  return (frequency);
 800411a:	e7c5      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 800411e:	6a58      	ldr	r0, [r3, #36]	; 0x24
        frequency = LSI_VALUE;
 8004120:	f010 0002 	ands.w	r0, r0, #2
 8004124:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004128:	bf18      	it	ne
 800412a:	4618      	movne	r0, r3
 800412c:	e7bc      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004130:	6818      	ldr	r0, [r3, #0]
        frequency = HSE_VALUE / 128U;
 8004132:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004136:	f24f 4324 	movw	r3, #62500	; 0xf424
 800413a:	bf18      	it	ne
 800413c:	4618      	movne	r0, r3
 800413e:	e7b3      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004140:	f7ff feee 	bl	8003f20 <HAL_RCC_GetPCLK2Freq>
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800414c:	3301      	adds	r3, #1
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8004154:	e7a8      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 8004156:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800415a:	e7a5      	b.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 800415c:	40021000 	.word	0x40021000
 8004160:	08009a4c 	.word	0x08009a4c
 8004164:	08009a5c 	.word	0x08009a5c
 8004168:	007a1200 	.word	0x007a1200
 800416c:	aaaaaaab 	.word	0xaaaaaaab
 8004170:	003d0900 	.word	0x003d0900

08004174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	4681      	mov	r9, r0
 800417c:	460f      	mov	r7, r1
 800417e:	4616      	mov	r6, r2
 8004180:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004182:	f7fe fb5b 	bl	800283c <HAL_GetTick>
 8004186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004188:	442b      	add	r3, r5
 800418a:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 800418e:	f7fe fb55 	bl	800283c <HAL_GetTick>
 8004192:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004194:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <SPI_WaitFlagStateUntilTimeout+0xd4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800419c:	fb08 f303 	mul.w	r3, r8, r3
 80041a0:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041a2:	f8d9 2000 	ldr.w	r2, [r9]
 80041a6:	6894      	ldr	r4, [r2, #8]
 80041a8:	ea37 0404 	bics.w	r4, r7, r4
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	42b3      	cmp	r3, r6
 80041b4:	d044      	beq.n	8004240 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80041ba:	d0f4      	beq.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041bc:	f7fe fb3e 	bl	800283c <HAL_GetTick>
 80041c0:	eba0 000a 	sub.w	r0, r0, sl
 80041c4:	4540      	cmp	r0, r8
 80041c6:	d207      	bcs.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041c8:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf08      	it	eq
 80041ce:	4698      	moveq	r8, r3
      }
      count--;
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	e7e4      	b.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041d8:	f8d9 2000 	ldr.w	r2, [r9]
 80041dc:	6853      	ldr	r3, [r2, #4]
 80041de:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80041e2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80041e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ec:	d00c      	beq.n	8004208 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ee:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80041f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f6:	d016      	beq.n	8004226 <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f889 3051 	strb.w	r3, [r9, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80041fe:	2300      	movs	r3, #0
 8004200:	f889 3050 	strb.w	r3, [r9, #80]	; 0x50
        return HAL_TIMEOUT;
 8004204:	2003      	movs	r0, #3
 8004206:	e01c      	b.n	8004242 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004208:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	d002      	beq.n	8004218 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d1ea      	bne.n	80041ee <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8004218:	f8d9 2000 	ldr.w	r2, [r9]
 800421c:	6813      	ldr	r3, [r2, #0]
 800421e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e7e3      	b.n	80041ee <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8004226:	f8d9 2000 	ldr.w	r2, [r9]
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	f8d9 2000 	ldr.w	r2, [r9]
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e7db      	b.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8004240:	2000      	movs	r0, #0
}
 8004242:	b002      	add	sp, #8
 8004244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004248:	20000020 	.word	0x20000020

0800424c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b510      	push	{r4, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	4604      	mov	r4, r0
 8004252:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004254:	9200      	str	r2, [sp, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	f7ff ff8b 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 800425e:	b908      	cbnz	r0, 8004264 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8004260:	b002      	add	sp, #8
 8004262:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004264:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004266:	f043 0320 	orr.w	r3, r3, #32
 800426a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800426c:	2003      	movs	r0, #3
 800426e:	e7f7      	b.n	8004260 <SPI_EndRxTxTransaction+0x14>

08004270 <SPI_EndRxTransaction>:
{
 8004270:	b510      	push	{r4, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	4604      	mov	r4, r0
 8004276:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004278:	6841      	ldr	r1, [r0, #4]
 800427a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800427e:	d008      	beq.n	8004292 <SPI_EndRxTransaction+0x22>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004280:	9200      	str	r2, [sp, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	2180      	movs	r1, #128	; 0x80
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff ff74 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 800428c:	bb18      	cbnz	r0, 80042d6 <SPI_EndRxTransaction+0x66>
}
 800428e:	b002      	add	sp, #8
 8004290:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004292:	6881      	ldr	r1, [r0, #8]
 8004294:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004298:	d002      	beq.n	80042a0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800429a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800429e:	d1ef      	bne.n	8004280 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 80042a0:	6820      	ldr	r0, [r4, #0]
 80042a2:	6801      	ldr	r1, [r0, #0]
 80042a4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80042a8:	6001      	str	r1, [r0, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80042aa:	6861      	ldr	r1, [r4, #4]
 80042ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80042b0:	d1e6      	bne.n	8004280 <SPI_EndRxTransaction+0x10>
 80042b2:	68a1      	ldr	r1, [r4, #8]
 80042b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80042b8:	d1e2      	bne.n	8004280 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80042ba:	9200      	str	r2, [sp, #0]
 80042bc:	2200      	movs	r2, #0
 80042be:	2101      	movs	r1, #1
 80042c0:	4620      	mov	r0, r4
 80042c2:	f7ff ff57 	bl	8004174 <SPI_WaitFlagStateUntilTimeout>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d0e1      	beq.n	800428e <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042cc:	f043 0320 	orr.w	r3, r3, #32
 80042d0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80042d2:	2003      	movs	r0, #3
 80042d4:	e7db      	b.n	800428e <SPI_EndRxTransaction+0x1e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042d8:	f043 0320 	orr.w	r3, r3, #32
 80042dc:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80042de:	2003      	movs	r0, #3
 80042e0:	e7d5      	b.n	800428e <SPI_EndRxTransaction+0x1e>

080042e2 <HAL_SPI_Init>:
  if (hspi == NULL)
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d056      	beq.n	8004394 <HAL_SPI_Init+0xb2>
{
 80042e6:	b510      	push	{r4, lr}
 80042e8:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042ec:	b933      	cbnz	r3, 80042fc <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ee:	6843      	ldr	r3, [r0, #4]
 80042f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f4:	d005      	beq.n	8004302 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61c3      	str	r3, [r0, #28]
 80042fa:	e002      	b.n	8004302 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042fc:	2300      	movs	r3, #0
 80042fe:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004300:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004306:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800430a:	2b00      	cmp	r3, #0
 800430c:	d03c      	beq.n	8004388 <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800430e:	2302      	movs	r3, #2
 8004310:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	6813      	ldr	r3, [r2, #0]
 8004318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	6863      	ldr	r3, [r4, #4]
 8004322:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004326:	68a1      	ldr	r1, [r4, #8]
 8004328:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800432c:	430b      	orrs	r3, r1
 800432e:	68e1      	ldr	r1, [r4, #12]
 8004330:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004334:	430b      	orrs	r3, r1
 8004336:	6921      	ldr	r1, [r4, #16]
 8004338:	f001 0102 	and.w	r1, r1, #2
 800433c:	430b      	orrs	r3, r1
 800433e:	6961      	ldr	r1, [r4, #20]
 8004340:	f001 0101 	and.w	r1, r1, #1
 8004344:	430b      	orrs	r3, r1
 8004346:	69a1      	ldr	r1, [r4, #24]
 8004348:	f401 7100 	and.w	r1, r1, #512	; 0x200
 800434c:	430b      	orrs	r3, r1
 800434e:	69e1      	ldr	r1, [r4, #28]
 8004350:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004354:	430b      	orrs	r3, r1
 8004356:	6a21      	ldr	r1, [r4, #32]
 8004358:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800435c:	430b      	orrs	r3, r1
 800435e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004360:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8004364:	430b      	orrs	r3, r1
 8004366:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	8b63      	ldrh	r3, [r4, #26]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	69d3      	ldr	r3, [r2, #28]
 8004376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437a:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800437c:	2000      	movs	r0, #0
 800437e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004380:	2301      	movs	r3, #1
 8004382:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004386:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004388:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800438c:	4620      	mov	r0, r4
 800438e:	f7fe f8b9 	bl	8002504 <HAL_SPI_MspInit>
 8004392:	e7bc      	b.n	800430e <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004394:	2001      	movs	r0, #1
}
 8004396:	4770      	bx	lr

08004398 <HAL_SPI_Transmit>:
{
 8004398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800439c:	b083      	sub	sp, #12
 800439e:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80043a0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f000 80d6 	beq.w	8004556 <HAL_SPI_Transmit+0x1be>
 80043aa:	4604      	mov	r4, r0
 80043ac:	4688      	mov	r8, r1
 80043ae:	4691      	mov	r9, r2
 80043b0:	2301      	movs	r3, #1
 80043b2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80043b6:	f7fe fa41 	bl	800283c <HAL_GetTick>
 80043ba:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80043bc:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80043c0:	b2f6      	uxtb	r6, r6
 80043c2:	2e01      	cmp	r6, #1
 80043c4:	f040 80bf 	bne.w	8004546 <HAL_SPI_Transmit+0x1ae>
  if ((pData == NULL) || (Size == 0U))
 80043c8:	f1b8 0f00 	cmp.w	r8, #0
 80043cc:	f000 80bc 	beq.w	8004548 <HAL_SPI_Transmit+0x1b0>
 80043d0:	f1b9 0f00 	cmp.w	r9, #0
 80043d4:	f000 80b8 	beq.w	8004548 <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043d8:	2303      	movs	r3, #3
 80043da:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043de:	2300      	movs	r3, #0
 80043e0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043e2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043e6:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80043ea:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ee:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80043f0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80043f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043f4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80043f6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f8:	68a3      	ldr	r3, [r4, #8]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fe:	d039      	beq.n	8004474 <HAL_SPI_Transmit+0xdc>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004408:	d103      	bne.n	8004412 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004410:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004418:	d037      	beq.n	800448a <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441a:	6863      	ldr	r3, [r4, #4]
 800441c:	b113      	cbz	r3, 8004424 <HAL_SPI_Transmit+0x8c>
 800441e:	f1b9 0f01 	cmp.w	r9, #1
 8004422:	d10a      	bne.n	800443a <HAL_SPI_Transmit+0xa2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800442c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800442e:	3301      	adds	r3, #1
 8004430:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004432:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004434:	3b01      	subs	r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800443a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d166      	bne.n	8004510 <HAL_SPI_Transmit+0x178>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004442:	463a      	mov	r2, r7
 8004444:	4629      	mov	r1, r5
 8004446:	4620      	mov	r0, r4
 8004448:	f7ff ff00 	bl	800424c <SPI_EndRxTxTransaction>
 800444c:	b108      	cbz	r0, 8004452 <HAL_SPI_Transmit+0xba>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444e:	2320      	movs	r3, #32
 8004450:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004452:	68a3      	ldr	r3, [r4, #8]
 8004454:	b933      	cbnz	r3, 8004464 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	9201      	str	r2, [sp, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004464:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004466:	2b00      	cmp	r3, #0
 8004468:	d16e      	bne.n	8004548 <HAL_SPI_Transmit+0x1b0>
    hspi->State = HAL_SPI_STATE_READY;
 800446a:	2301      	movs	r3, #1
 800446c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004470:	2600      	movs	r6, #0
 8004472:	e069      	b.n	8004548 <HAL_SPI_Transmit+0x1b0>
    __HAL_SPI_DISABLE(hspi);
 8004474:	6822      	ldr	r2, [r4, #0]
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800447e:	6822      	ldr	r2, [r4, #0]
 8004480:	6813      	ldr	r3, [r2, #0]
 8004482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e7ba      	b.n	8004400 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800448a:	6863      	ldr	r3, [r4, #4]
 800448c:	b113      	cbz	r3, 8004494 <HAL_SPI_Transmit+0xfc>
 800448e:	f1b9 0f01 	cmp.w	r9, #1
 8004492:	d10a      	bne.n	80044aa <HAL_SPI_Transmit+0x112>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004498:	8812      	ldrh	r2, [r2, #0]
 800449a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800449c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800449e:	3302      	adds	r3, #2
 80044a0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80044a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80044aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	b963      	cbnz	r3, 80044ca <HAL_SPI_Transmit+0x132>
 80044b0:	e7c7      	b.n	8004442 <HAL_SPI_Transmit+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044b2:	f7fe f9c3 	bl	800283c <HAL_GetTick>
 80044b6:	1bc0      	subs	r0, r0, r7
 80044b8:	42a8      	cmp	r0, r5
 80044ba:	d316      	bcc.n	80044ea <HAL_SPI_Transmit+0x152>
 80044bc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80044c0:	d115      	bne.n	80044ee <HAL_SPI_Transmit+0x156>
    while (hspi->TxXferCount > 0U)
 80044c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0bb      	beq.n	8004442 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	f012 0f02 	tst.w	r2, #2
 80044d2:	d0ee      	beq.n	80044b2 <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80044d6:	8812      	ldrh	r2, [r2, #0]
 80044d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044dc:	3302      	adds	r3, #2
 80044de:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80044e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80044e8:	e7eb      	b.n	80044c2 <HAL_SPI_Transmit+0x12a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	d1e9      	bne.n	80044c2 <HAL_SPI_Transmit+0x12a>
          hspi->State = HAL_SPI_STATE_READY;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80044f4:	2603      	movs	r6, #3
          goto error;
 80044f6:	e027      	b.n	8004548 <HAL_SPI_Transmit+0x1b0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f8:	f7fe f9a0 	bl	800283c <HAL_GetTick>
 80044fc:	1bc0      	subs	r0, r0, r7
 80044fe:	42a8      	cmp	r0, r5
 8004500:	d31a      	bcc.n	8004538 <HAL_SPI_Transmit+0x1a0>
 8004502:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004506:	d119      	bne.n	800453c <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 8004508:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800450a:	b289      	uxth	r1, r1
 800450c:	2900      	cmp	r1, #0
 800450e:	d098      	beq.n	8004442 <HAL_SPI_Transmit+0xaa>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	f012 0f02 	tst.w	r2, #2
 8004518:	d0ee      	beq.n	80044f8 <HAL_SPI_Transmit+0x160>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800451a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004522:	3301      	adds	r3, #1
 8004524:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004526:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 800452a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800452e:	fa1f fc8c 	uxth.w	ip, ip
 8004532:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 8004536:	e7e7      	b.n	8004508 <HAL_SPI_Transmit+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004538:	2d00      	cmp	r5, #0
 800453a:	d1e5      	bne.n	8004508 <HAL_SPI_Transmit+0x170>
          hspi->State = HAL_SPI_STATE_READY;
 800453c:	2301      	movs	r3, #1
 800453e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004542:	2603      	movs	r6, #3
          goto error;
 8004544:	e000      	b.n	8004548 <HAL_SPI_Transmit+0x1b0>
    errorcode = HAL_BUSY;
 8004546:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004548:	2300      	movs	r3, #0
 800454a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800454e:	4630      	mov	r0, r6
 8004550:	b003      	add	sp, #12
 8004552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004556:	2602      	movs	r6, #2
 8004558:	e7f9      	b.n	800454e <HAL_SPI_Transmit+0x1b6>

0800455a <HAL_SPI_TransmitReceive>:
{
 800455a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800455e:	b083      	sub	sp, #12
 8004560:	461f      	mov	r7, r3
 8004562:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004564:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004568:	2b01      	cmp	r3, #1
 800456a:	f000 8115 	beq.w	8004798 <HAL_SPI_TransmitReceive+0x23e>
 800456e:	4604      	mov	r4, r0
 8004570:	4688      	mov	r8, r1
 8004572:	4691      	mov	r9, r2
 8004574:	2301      	movs	r3, #1
 8004576:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800457a:	f7fe f95f 	bl	800283c <HAL_GetTick>
 800457e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004580:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004584:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8004586:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004588:	2801      	cmp	r0, #1
 800458a:	d00a      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x48>
 800458c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004590:	f040 80ef 	bne.w	8004772 <HAL_SPI_TransmitReceive+0x218>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004594:	68a3      	ldr	r3, [r4, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 80f2 	bne.w	8004780 <HAL_SPI_TransmitReceive+0x226>
 800459c:	2804      	cmp	r0, #4
 800459e:	f040 80f1 	bne.w	8004784 <HAL_SPI_TransmitReceive+0x22a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045a2:	f1b8 0f00 	cmp.w	r8, #0
 80045a6:	f000 80ef 	beq.w	8004788 <HAL_SPI_TransmitReceive+0x22e>
 80045aa:	f1b9 0f00 	cmp.w	r9, #0
 80045ae:	f000 80ed 	beq.w	800478c <HAL_SPI_TransmitReceive+0x232>
 80045b2:	2f00      	cmp	r7, #0
 80045b4:	f000 80ec 	beq.w	8004790 <HAL_SPI_TransmitReceive+0x236>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045b8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045c0:	bf1c      	itt	ne
 80045c2:	2305      	movne	r3, #5
 80045c4:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045cc:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80045d0:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80045d2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045d4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80045d8:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80045da:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80045dc:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045de:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80045e8:	d103      	bne.n	80045f2 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045f0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045f2:	68e3      	ldr	r3, [r4, #12]
 80045f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f8:	d012      	beq.n	8004620 <HAL_SPI_TransmitReceive+0xc6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045fa:	6863      	ldr	r3, [r4, #4]
 80045fc:	b10b      	cbz	r3, 8004602 <HAL_SPI_TransmitReceive+0xa8>
 80045fe:	2f01      	cmp	r7, #1
 8004600:	d10a      	bne.n	8004618 <HAL_SPI_TransmitReceive+0xbe>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004606:	7812      	ldrb	r2, [r2, #0]
 8004608:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800460a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800460c:	3301      	adds	r3, #1
 800460e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004610:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004612:	3b01      	subs	r3, #1
 8004614:	b29b      	uxth	r3, r3
 8004616:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004618:	2701      	movs	r7, #1
        txallowed = 0U;
 800461a:	f04f 0800 	mov.w	r8, #0
 800461e:	e06b      	b.n	80046f8 <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	b10b      	cbz	r3, 8004628 <HAL_SPI_TransmitReceive+0xce>
 8004624:	2f01      	cmp	r7, #1
 8004626:	d10a      	bne.n	800463e <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800462c:	8812      	ldrh	r2, [r2, #0]
 800462e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004630:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004632:	3302      	adds	r3, #2
 8004634:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004636:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004638:	3b01      	subs	r3, #1
 800463a:	b29b      	uxth	r3, r3
 800463c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800463e:	2701      	movs	r7, #1
        txallowed = 0U;
 8004640:	f04f 0800 	mov.w	r8, #0
 8004644:	e01a      	b.n	800467c <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004646:	6822      	ldr	r2, [r4, #0]
 8004648:	6893      	ldr	r3, [r2, #8]
 800464a:	f013 0301 	ands.w	r3, r3, #1
 800464e:	d00d      	beq.n	800466c <HAL_SPI_TransmitReceive+0x112>
 8004650:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004652:	b289      	uxth	r1, r1
 8004654:	b151      	cbz	r1, 800466c <HAL_SPI_TransmitReceive+0x112>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004656:	68d1      	ldr	r1, [r2, #12]
 8004658:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800465a:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800465c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800465e:	3202      	adds	r2, #2
 8004660:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004662:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004664:	3a01      	subs	r2, #1
 8004666:	b292      	uxth	r2, r2
 8004668:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 800466a:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800466c:	f7fe f8e6 	bl	800283c <HAL_GetTick>
 8004670:	1b80      	subs	r0, r0, r6
 8004672:	42a8      	cmp	r0, r5
 8004674:	d302      	bcc.n	800467c <HAL_SPI_TransmitReceive+0x122>
 8004676:	f1b5 3fff 	cmp.w	r5, #4294967295
 800467a:	d11d      	bne.n	80046b8 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	b91b      	cbnz	r3, 800468a <HAL_SPI_TransmitReceive+0x130>
 8004682:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d05a      	beq.n	8004740 <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	f012 0f02 	tst.w	r2, #2
 8004692:	d0d8      	beq.n	8004646 <HAL_SPI_TransmitReceive+0xec>
 8004694:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004696:	b292      	uxth	r2, r2
 8004698:	2a00      	cmp	r2, #0
 800469a:	d0d4      	beq.n	8004646 <HAL_SPI_TransmitReceive+0xec>
 800469c:	2f00      	cmp	r7, #0
 800469e:	d0d2      	beq.n	8004646 <HAL_SPI_TransmitReceive+0xec>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046a2:	8812      	ldrh	r2, [r2, #0]
 80046a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046a8:	3302      	adds	r3, #2
 80046aa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80046ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80046b4:	4647      	mov	r7, r8
 80046b6:	e7c6      	b.n	8004646 <HAL_SPI_TransmitReceive+0xec>
        hspi->State = HAL_SPI_STATE_READY;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 80046be:	2003      	movs	r0, #3
        goto error;
 80046c0:	e058      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	6893      	ldr	r3, [r2, #8]
 80046c6:	f013 0301 	ands.w	r3, r3, #1
 80046ca:	d00d      	beq.n	80046e8 <HAL_SPI_TransmitReceive+0x18e>
 80046cc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80046ce:	b289      	uxth	r1, r1
 80046d0:	b151      	cbz	r1, 80046e8 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80046d2:	68d1      	ldr	r1, [r2, #12]
 80046d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046d6:	7011      	strb	r1, [r2, #0]
        hspi->pRxBuffPtr++;
 80046d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046da:	3201      	adds	r2, #1
 80046dc:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80046de:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80046e0:	3a01      	subs	r2, #1
 80046e2:	b292      	uxth	r2, r2
 80046e4:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 1U;
 80046e6:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046e8:	f7fe f8a8 	bl	800283c <HAL_GetTick>
 80046ec:	1b83      	subs	r3, r0, r6
 80046ee:	42ab      	cmp	r3, r5
 80046f0:	d31f      	bcc.n	8004732 <HAL_SPI_TransmitReceive+0x1d8>
 80046f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80046f6:	d11e      	bne.n	8004736 <HAL_SPI_TransmitReceive+0x1dc>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	b913      	cbnz	r3, 8004704 <HAL_SPI_TransmitReceive+0x1aa>
 80046fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004700:	b29b      	uxth	r3, r3
 8004702:	b1eb      	cbz	r3, 8004740 <HAL_SPI_TransmitReceive+0x1e6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	f012 0f02 	tst.w	r2, #2
 800470c:	d0d9      	beq.n	80046c2 <HAL_SPI_TransmitReceive+0x168>
 800470e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004710:	b292      	uxth	r2, r2
 8004712:	2a00      	cmp	r2, #0
 8004714:	d0d5      	beq.n	80046c2 <HAL_SPI_TransmitReceive+0x168>
 8004716:	2f01      	cmp	r7, #1
 8004718:	d1d3      	bne.n	80046c2 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800471a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004720:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004722:	3301      	adds	r3, #1
 8004724:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004726:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004728:	3b01      	subs	r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800472e:	4647      	mov	r7, r8
 8004730:	e7c7      	b.n	80046c2 <HAL_SPI_TransmitReceive+0x168>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004732:	2d00      	cmp	r5, #0
 8004734:	d1e0      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x19e>
        hspi->State = HAL_SPI_STATE_READY;
 8004736:	2301      	movs	r3, #1
 8004738:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 800473c:	2003      	movs	r0, #3
        goto error;
 800473e:	e019      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004740:	4632      	mov	r2, r6
 8004742:	4629      	mov	r1, r5
 8004744:	4620      	mov	r0, r4
 8004746:	f7ff fd81 	bl	800424c <SPI_EndRxTxTransaction>
 800474a:	b970      	cbnz	r0, 800476a <HAL_SPI_TransmitReceive+0x210>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800474c:	68a3      	ldr	r3, [r4, #8]
 800474e:	b933      	cbnz	r3, 800475e <HAL_SPI_TransmitReceive+0x204>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	9201      	str	r2, [sp, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800475e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004760:	b9c3      	cbnz	r3, 8004794 <HAL_SPI_TransmitReceive+0x23a>
    hspi->State = HAL_SPI_STATE_READY;
 8004762:	2301      	movs	r3, #1
 8004764:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004768:	e004      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800476a:	2320      	movs	r3, #32
 800476c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800476e:	2001      	movs	r0, #1
    goto error;
 8004770:	e000      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_BUSY;
 8004772:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8004774:	2300      	movs	r3, #0
 8004776:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800477a:	b003      	add	sp, #12
 800477c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004780:	2002      	movs	r0, #2
 8004782:	e7f7      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
 8004784:	2002      	movs	r0, #2
 8004786:	e7f5      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 8004788:	2001      	movs	r0, #1
 800478a:	e7f3      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
 800478c:	2001      	movs	r0, #1
 800478e:	e7f1      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
 8004790:	2001      	movs	r0, #1
 8004792:	e7ef      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
    errorcode = HAL_ERROR;
 8004794:	2001      	movs	r0, #1
 8004796:	e7ed      	b.n	8004774 <HAL_SPI_TransmitReceive+0x21a>
  __HAL_LOCK(hspi);
 8004798:	2002      	movs	r0, #2
 800479a:	e7ee      	b.n	800477a <HAL_SPI_TransmitReceive+0x220>

0800479c <HAL_SPI_Receive>:
{
 800479c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047a0:	b083      	sub	sp, #12
 80047a2:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80047a4:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
 80047a8:	b2ed      	uxtb	r5, r5
 80047aa:	2d01      	cmp	r5, #1
 80047ac:	f040 80b7 	bne.w	800491e <HAL_SPI_Receive+0x182>
 80047b0:	4688      	mov	r8, r1
 80047b2:	4691      	mov	r9, r2
 80047b4:	461e      	mov	r6, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047b6:	6843      	ldr	r3, [r0, #4]
 80047b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047bc:	d045      	beq.n	800484a <HAL_SPI_Receive+0xae>
  __HAL_LOCK(hspi);
 80047be:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	f000 80b3 	beq.w	800492e <HAL_SPI_Receive+0x192>
 80047c8:	2301      	movs	r3, #1
 80047ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80047ce:	f7fe f835 	bl	800283c <HAL_GetTick>
 80047d2:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 80047d4:	f1b8 0f00 	cmp.w	r8, #0
 80047d8:	f000 80a2 	beq.w	8004920 <HAL_SPI_Receive+0x184>
 80047dc:	f1b9 0f00 	cmp.w	r9, #0
 80047e0:	f000 809e 	beq.w	8004920 <HAL_SPI_Receive+0x184>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047e4:	2304      	movs	r3, #4
 80047e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047ee:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80047f2:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80047f6:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047fa:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80047fc:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80047fe:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004800:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004802:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68a3      	ldr	r3, [r4, #8]
 8004806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480a:	d02b      	beq.n	8004864 <HAL_SPI_Receive+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004814:	d103      	bne.n	800481e <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800481c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800481e:	68e3      	ldr	r3, [r4, #12]
 8004820:	b35b      	cbz	r3, 800487a <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 8004822:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d15e      	bne.n	80048e8 <HAL_SPI_Receive+0x14c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800482a:	463a      	mov	r2, r7
 800482c:	4631      	mov	r1, r6
 800482e:	4620      	mov	r0, r4
 8004830:	f7ff fd1e 	bl	8004270 <SPI_EndRxTransaction>
 8004834:	b108      	cbz	r0, 800483a <HAL_SPI_Receive+0x9e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004836:	2320      	movs	r3, #32
 8004838:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800483a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800483c:	2b00      	cmp	r3, #0
 800483e:	d16f      	bne.n	8004920 <HAL_SPI_Receive+0x184>
    hspi->State = HAL_SPI_STATE_READY;
 8004840:	2301      	movs	r3, #1
 8004842:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004846:	2500      	movs	r5, #0
 8004848:	e06a      	b.n	8004920 <HAL_SPI_Receive+0x184>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800484a:	6883      	ldr	r3, [r0, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1b6      	bne.n	80047be <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004850:	2304      	movs	r3, #4
 8004852:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004856:	9600      	str	r6, [sp, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	460a      	mov	r2, r1
 800485c:	f7ff fe7d 	bl	800455a <HAL_SPI_TransmitReceive>
 8004860:	4605      	mov	r5, r0
 8004862:	e060      	b.n	8004926 <HAL_SPI_Receive+0x18a>
    __HAL_SPI_DISABLE(hspi);
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	6813      	ldr	r3, [r2, #0]
 8004872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	e7c8      	b.n	800480c <HAL_SPI_Receive+0x70>
    while (hspi->RxXferCount > 0U)
 800487a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800487c:	b29b      	uxth	r3, r3
 800487e:	b963      	cbnz	r3, 800489a <HAL_SPI_Receive+0xfe>
 8004880:	e7d3      	b.n	800482a <HAL_SPI_Receive+0x8e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004882:	f7fd ffdb 	bl	800283c <HAL_GetTick>
 8004886:	1bc0      	subs	r0, r0, r7
 8004888:	42b0      	cmp	r0, r6
 800488a:	d31a      	bcc.n	80048c2 <HAL_SPI_Receive+0x126>
 800488c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004890:	d119      	bne.n	80048c6 <HAL_SPI_Receive+0x12a>
    while (hspi->RxXferCount > 0U)
 8004892:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0c7      	beq.n	800482a <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	f012 0f01 	tst.w	r2, #1
 80048a2:	d0ee      	beq.n	8004882 <HAL_SPI_Receive+0xe6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048a4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048a6:	7b1b      	ldrb	r3, [r3, #12]
 80048a8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048ac:	3301      	adds	r3, #1
 80048ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80048b0:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 80048b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80048b8:	fa1f fc8c 	uxth.w	ip, ip
 80048bc:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 80048c0:	e7e7      	b.n	8004892 <HAL_SPI_Receive+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c2:	2e00      	cmp	r6, #0
 80048c4:	d1e5      	bne.n	8004892 <HAL_SPI_Receive+0xf6>
          hspi->State = HAL_SPI_STATE_READY;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80048cc:	2503      	movs	r5, #3
          goto error;
 80048ce:	e027      	b.n	8004920 <HAL_SPI_Receive+0x184>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d0:	f7fd ffb4 	bl	800283c <HAL_GetTick>
 80048d4:	1bc0      	subs	r0, r0, r7
 80048d6:	42b0      	cmp	r0, r6
 80048d8:	d31a      	bcc.n	8004910 <HAL_SPI_Receive+0x174>
 80048da:	f1b6 3fff 	cmp.w	r6, #4294967295
 80048de:	d119      	bne.n	8004914 <HAL_SPI_Receive+0x178>
    while (hspi->RxXferCount > 0U)
 80048e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0a0      	beq.n	800482a <HAL_SPI_Receive+0x8e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	f012 0f01 	tst.w	r2, #1
 80048f0:	d0ee      	beq.n	80048d0 <HAL_SPI_Receive+0x134>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048fa:	3302      	adds	r3, #2
 80048fc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80048fe:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004902:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004906:	fa1f fc8c 	uxth.w	ip, ip
 800490a:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 800490e:	e7e7      	b.n	80048e0 <HAL_SPI_Receive+0x144>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004910:	2e00      	cmp	r6, #0
 8004912:	d1e5      	bne.n	80048e0 <HAL_SPI_Receive+0x144>
          hspi->State = HAL_SPI_STATE_READY;
 8004914:	2301      	movs	r3, #1
 8004916:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 800491a:	2503      	movs	r5, #3
          goto error;
 800491c:	e000      	b.n	8004920 <HAL_SPI_Receive+0x184>
    errorcode = HAL_BUSY;
 800491e:	2502      	movs	r5, #2
  __HAL_UNLOCK(hspi);
 8004920:	2300      	movs	r3, #0
 8004922:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004926:	4628      	mov	r0, r5
 8004928:	b003      	add	sp, #12
 800492a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800492e:	2502      	movs	r5, #2
 8004930:	e7f9      	b.n	8004926 <HAL_SPI_Receive+0x18a>
	...

08004934 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004938:	6a02      	ldr	r2, [r0, #32]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004940:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004942:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004944:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	680d      	ldr	r5, [r1, #0]
 800494a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004950:	688d      	ldr	r5, [r1, #8]
 8004952:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004954:	4d0b      	ldr	r5, [pc, #44]	; (8004984 <TIM_OC1_SetConfig+0x50>)
 8004956:	42a8      	cmp	r0, r5
 8004958:	d006      	beq.n	8004968 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800495e:	684a      	ldr	r2, [r1, #4]
 8004960:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004962:	6203      	str	r3, [r0, #32]
}
 8004964:	bc70      	pop	{r4, r5, r6}
 8004966:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004968:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800496c:	68cd      	ldr	r5, [r1, #12]
 800496e:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004970:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004974:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004978:	694d      	ldr	r5, [r1, #20]
 800497a:	698e      	ldr	r6, [r1, #24]
 800497c:	4335      	orrs	r5, r6
 800497e:	432c      	orrs	r4, r5
 8004980:	e7eb      	b.n	800495a <TIM_OC1_SetConfig+0x26>
 8004982:	bf00      	nop
 8004984:	40012c00 	.word	0x40012c00

08004988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800498a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800498c:	6a02      	ldr	r2, [r0, #32]
 800498e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004992:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004994:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004998:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	680d      	ldr	r5, [r1, #0]
 800499e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049a4:	688d      	ldr	r5, [r1, #8]
 80049a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049aa:	4d0c      	ldr	r5, [pc, #48]	; (80049dc <TIM_OC3_SetConfig+0x54>)
 80049ac:	42a8      	cmp	r0, r5
 80049ae:	d006      	beq.n	80049be <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049b4:	684a      	ldr	r2, [r1, #4]
 80049b6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b8:	6203      	str	r3, [r0, #32]
}
 80049ba:	bc70      	pop	{r4, r5, r6}
 80049bc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80049be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049c2:	68cd      	ldr	r5, [r1, #12]
 80049c4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80049c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049cc:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049d0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049d2:	698e      	ldr	r6, [r1, #24]
 80049d4:	4335      	orrs	r5, r6
 80049d6:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80049da:	e7e9      	b.n	80049b0 <TIM_OC3_SetConfig+0x28>
 80049dc:	40012c00 	.word	0x40012c00

080049e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049e2:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e4:	6a02      	ldr	r2, [r0, #32]
 80049e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049ea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049f0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f4:	680d      	ldr	r5, [r1, #0]
 80049f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049fe:	688d      	ldr	r5, [r1, #8]
 8004a00:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a04:	4d07      	ldr	r5, [pc, #28]	; (8004a24 <TIM_OC4_SetConfig+0x44>)
 8004a06:	42a8      	cmp	r0, r5
 8004a08:	d006      	beq.n	8004a18 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a0a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a0c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a0e:	684a      	ldr	r2, [r1, #4]
 8004a10:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a12:	6203      	str	r3, [r0, #32]
}
 8004a14:	bc30      	pop	{r4, r5}
 8004a16:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a18:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a1c:	694d      	ldr	r5, [r1, #20]
 8004a1e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004a22:	e7f2      	b.n	8004a0a <TIM_OC4_SetConfig+0x2a>
 8004a24:	40012c00 	.word	0x40012c00

08004a28 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004a28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d127      	bne.n	8004a82 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a32:	2302      	movs	r3, #2
 8004a34:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a38:	6802      	ldr	r2, [r0, #0]
 8004a3a:	68d3      	ldr	r3, [r2, #12]
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a42:	6803      	ldr	r3, [r0, #0]
 8004a44:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <HAL_TIM_Base_Start_IT+0x64>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d010      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x44>
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d00d      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x44>
 8004a50:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x44>
 8004a58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d005      	beq.n	8004a6c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a68:	2000      	movs	r0, #0
 8004a6a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a72:	2a06      	cmp	r2, #6
 8004a74:	d007      	beq.n	8004a86 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	f042 0201 	orr.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a7e:	2000      	movs	r0, #0
 8004a80:	4770      	bx	lr
    return HAL_ERROR;
 8004a82:	2001      	movs	r0, #1
 8004a84:	4770      	bx	lr
  return HAL_OK;
 8004a86:	2000      	movs	r0, #0
}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40012c00 	.word	0x40012c00

08004a90 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a90:	6802      	ldr	r2, [r0, #0]
 8004a92:	68d3      	ldr	r3, [r2, #12]
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8004a9a:	6803      	ldr	r3, [r0, #0]
 8004a9c:	6a19      	ldr	r1, [r3, #32]
 8004a9e:	f241 1211 	movw	r2, #4369	; 0x1111
 8004aa2:	4211      	tst	r1, r2
 8004aa4:	d108      	bne.n	8004ab8 <HAL_TIM_Base_Stop_IT+0x28>
 8004aa6:	6a19      	ldr	r1, [r3, #32]
 8004aa8:	f240 4244 	movw	r2, #1092	; 0x444
 8004aac:	4211      	tst	r1, r2
 8004aae:	d103      	bne.n	8004ab8 <HAL_TIM_Base_Stop_IT+0x28>
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	f022 0201 	bic.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004abe:	2000      	movs	r0, #0
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_TIM_PWM_MspInit>:
}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_IC_CaptureCallback>:
}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004ac8:	4770      	bx	lr

08004aca <HAL_TIM_TriggerCallback>:
}
 8004aca:	4770      	bx	lr

08004acc <HAL_TIM_IRQHandler>:
{
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad0:	6803      	ldr	r3, [r0, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	f012 0f02 	tst.w	r2, #2
 8004ad8:	d011      	beq.n	8004afe <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	f012 0f02 	tst.w	r2, #2
 8004ae0:	d00d      	beq.n	8004afe <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ae2:	f06f 0202 	mvn.w	r2, #2
 8004ae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f013 0f03 	tst.w	r3, #3
 8004af4:	d070      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	f7ff ffe6 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	2300      	movs	r3, #0
 8004afc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	f012 0f04 	tst.w	r2, #4
 8004b06:	d012      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	f012 0f04 	tst.w	r2, #4
 8004b0e:	d00e      	beq.n	8004b2e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b10:	f06f 0204 	mvn.w	r2, #4
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b16:	2302      	movs	r3, #2
 8004b18:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b22:	d05f      	beq.n	8004be4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b24:	4620      	mov	r0, r4
 8004b26:	f7ff ffce 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	f012 0f08 	tst.w	r2, #8
 8004b36:	d012      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	f012 0f08 	tst.w	r2, #8
 8004b3e:	d00e      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b40:	f06f 0208 	mvn.w	r2, #8
 8004b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b46:	2304      	movs	r3, #4
 8004b48:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	f013 0f03 	tst.w	r3, #3
 8004b52:	d04e      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff ffb6 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	f012 0f10 	tst.w	r2, #16
 8004b66:	d012      	beq.n	8004b8e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	f012 0f10 	tst.w	r2, #16
 8004b6e:	d00e      	beq.n	8004b8e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b70:	f06f 0210 	mvn.w	r2, #16
 8004b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b76:	2308      	movs	r3, #8
 8004b78:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b82:	d03d      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7ff ff9e 	bl	8004ac6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	f012 0f01 	tst.w	r2, #1
 8004b96:	d003      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	f012 0f01 	tst.w	r2, #1
 8004b9e:	d136      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bb0:	d134      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	691a      	ldr	r2, [r3, #16]
 8004bb6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bba:	d003      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bc2:	d132      	bne.n	8004c2a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	f012 0f20 	tst.w	r2, #32
 8004bcc:	d003      	beq.n	8004bd6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	f012 0f20 	tst.w	r2, #32
 8004bd4:	d130      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x16c>
}
 8004bd6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd8:	f7ff ff74 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f7ff ff73 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004be2:	e78a      	b.n	8004afa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff ff6d 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bea:	4620      	mov	r0, r4
 8004bec:	f7ff ff6c 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bf0:	e79b      	b.n	8004b2a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff ff66 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7ff ff65 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004bfe:	e7ac      	b.n	8004b5a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c00:	4620      	mov	r0, r4
 8004c02:	f7ff ff5f 	bl	8004ac4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7ff ff5e 	bl	8004ac8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004c0c:	e7bd      	b.n	8004b8a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c0e:	f06f 0201 	mvn.w	r2, #1
 8004c12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c14:	4620      	mov	r0, r4
 8004c16:	f7fc f925 	bl	8000e64 <HAL_TIM_PeriodElapsedCallback>
 8004c1a:	e7c1      	b.n	8004ba0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c22:	4620      	mov	r0, r4
 8004c24:	f000 fafd 	bl	8005222 <HAL_TIMEx_BreakCallback>
 8004c28:	e7c3      	b.n	8004bb2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7ff ff4a 	bl	8004aca <HAL_TIM_TriggerCallback>
 8004c36:	e7c5      	b.n	8004bc4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c38:	f06f 0220 	mvn.w	r2, #32
 8004c3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f000 faee 	bl	8005220 <HAL_TIMEx_CommutCallback>
}
 8004c44:	e7c7      	b.n	8004bd6 <HAL_TIM_IRQHandler+0x10a>
	...

08004c48 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004c48:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c4a:	4a25      	ldr	r2, [pc, #148]	; (8004ce0 <TIM_Base_SetConfig+0x98>)
 8004c4c:	4290      	cmp	r0, r2
 8004c4e:	d014      	beq.n	8004c7a <TIM_Base_SetConfig+0x32>
 8004c50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c54:	d026      	beq.n	8004ca4 <TIM_Base_SetConfig+0x5c>
 8004c56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004c5a:	4290      	cmp	r0, r2
 8004c5c:	d036      	beq.n	8004ccc <TIM_Base_SetConfig+0x84>
 8004c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c62:	4290      	cmp	r0, r2
 8004c64:	d037      	beq.n	8004cd6 <TIM_Base_SetConfig+0x8e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c6a:	694a      	ldr	r2, [r1, #20]
 8004c6c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c70:	688b      	ldr	r3, [r1, #8]
 8004c72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c74:	680b      	ldr	r3, [r1, #0]
 8004c76:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c78:	e025      	b.n	8004cc6 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c7e:	684a      	ldr	r2, [r1, #4]
 8004c80:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c86:	68ca      	ldr	r2, [r1, #12]
 8004c88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8e:	694a      	ldr	r2, [r1, #20]
 8004c90:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c92:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c94:	688b      	ldr	r3, [r1, #8]
 8004c96:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c98:	680b      	ldr	r3, [r1, #0]
 8004c9a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004c9c:	690a      	ldr	r2, [r1, #16]
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <TIM_Base_SetConfig+0x98>)
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca2:	e010      	b.n	8004cc6 <TIM_Base_SetConfig+0x7e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	684a      	ldr	r2, [r1, #4]
 8004caa:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb0:	68ca      	ldr	r2, [r1, #12]
 8004cb2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb8:	694a      	ldr	r2, [r1, #20]
 8004cba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004cbc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cbe:	688b      	ldr	r3, [r1, #8]
 8004cc0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cc2:	680b      	ldr	r3, [r1, #0]
 8004cc4:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	6143      	str	r3, [r0, #20]
}
 8004cca:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004cd0:	684a      	ldr	r2, [r1, #4]
 8004cd2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd4:	e7ea      	b.n	8004cac <TIM_Base_SetConfig+0x64>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004cda:	684a      	ldr	r2, [r1, #4]
 8004cdc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cde:	e7e5      	b.n	8004cac <TIM_Base_SetConfig+0x64>
 8004ce0:	40012c00 	.word	0x40012c00

08004ce4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004ce4:	b340      	cbz	r0, 8004d38 <HAL_TIM_Base_Init+0x54>
{
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cee:	b1f3      	cbz	r3, 8004d2e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	f851 0b04 	ldr.w	r0, [r1], #4
 8004cfc:	f7ff ffa4 	bl	8004c48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004d0a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004d0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004d12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d2a:	2000      	movs	r0, #0
}
 8004d2c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004d32:	f7fd fc21 	bl	8002578 <HAL_TIM_Base_MspInit>
 8004d36:	e7db      	b.n	8004cf0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
}
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004d3c:	b340      	cbz	r0, 8004d90 <HAL_TIM_PWM_Init+0x54>
{
 8004d3e:	b510      	push	{r4, lr}
 8004d40:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d46:	b1f3      	cbz	r3, 8004d86 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4e:	4621      	mov	r1, r4
 8004d50:	f851 0b04 	ldr.w	r0, [r1], #4
 8004d54:	f7ff ff78 	bl	8004c48 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004d62:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004d66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004d6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004d82:	2000      	movs	r0, #0
}
 8004d84:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004d8a:	f7ff fe9a 	bl	8004ac2 <HAL_TIM_PWM_MspInit>
 8004d8e:	e7db      	b.n	8004d48 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004d90:	2001      	movs	r0, #1
}
 8004d92:	4770      	bx	lr

08004d94 <TIM_OC2_SetConfig>:
{
 8004d94:	b470      	push	{r4, r5, r6}
  tmpccer = TIMx->CCER;
 8004d96:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d98:	6a02      	ldr	r2, [r0, #32]
 8004d9a:	f022 0210 	bic.w	r2, r2, #16
 8004d9e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004da0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004da2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da8:	680d      	ldr	r5, [r1, #0]
 8004daa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004dae:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db2:	688d      	ldr	r5, [r1, #8]
 8004db4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004db8:	4d0c      	ldr	r5, [pc, #48]	; (8004dec <TIM_OC2_SetConfig+0x58>)
 8004dba:	42a8      	cmp	r0, r5
 8004dbc:	d006      	beq.n	8004dcc <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 8004dbe:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004dc0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc2:	684a      	ldr	r2, [r1, #4]
 8004dc4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004dc6:	6203      	str	r3, [r0, #32]
}
 8004dc8:	bc70      	pop	{r4, r5, r6}
 8004dca:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dd0:	68cd      	ldr	r5, [r1, #12]
 8004dd2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dda:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dde:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de0:	698e      	ldr	r6, [r1, #24]
 8004de2:	4335      	orrs	r5, r6
 8004de4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004de8:	e7e9      	b.n	8004dbe <TIM_OC2_SetConfig+0x2a>
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00

08004df0 <HAL_TIM_PWM_ConfigChannel>:
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004df2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d066      	beq.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	460d      	mov	r5, r1
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004e04:	2a0c      	cmp	r2, #12
 8004e06:	d85a      	bhi.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0xce>
 8004e08:	e8df f002 	tbb	[pc, r2]
 8004e0c:	59595907 	.word	0x59595907
 8004e10:	5959591b 	.word	0x5959591b
 8004e14:	59595930 	.word	0x59595930
 8004e18:	44          	.byte	0x44
 8004e19:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	f7ff fd8a 	bl	8004934 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e20:	6822      	ldr	r2, [r4, #0]
 8004e22:	6993      	ldr	r3, [r2, #24]
 8004e24:	f043 0308 	orr.w	r3, r3, #8
 8004e28:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e2a:	6822      	ldr	r2, [r4, #0]
 8004e2c:	6993      	ldr	r3, [r2, #24]
 8004e2e:	f023 0304 	bic.w	r3, r3, #4
 8004e32:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e34:	6822      	ldr	r2, [r4, #0]
 8004e36:	6993      	ldr	r3, [r2, #24]
 8004e38:	6929      	ldr	r1, [r5, #16]
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2000      	movs	r0, #0
      break;
 8004e40:	e03e      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e42:	6800      	ldr	r0, [r0, #0]
 8004e44:	f7ff ffa6 	bl	8004d94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e48:	6822      	ldr	r2, [r4, #0]
 8004e4a:	6993      	ldr	r3, [r2, #24]
 8004e4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e50:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	6993      	ldr	r3, [r2, #24]
 8004e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e5c:	6822      	ldr	r2, [r4, #0]
 8004e5e:	6993      	ldr	r3, [r2, #24]
 8004e60:	6929      	ldr	r1, [r5, #16]
 8004e62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004e66:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2000      	movs	r0, #0
      break;
 8004e6a:	e029      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e6c:	6800      	ldr	r0, [r0, #0]
 8004e6e:	f7ff fd8b 	bl	8004988 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	69d3      	ldr	r3, [r2, #28]
 8004e76:	f043 0308 	orr.w	r3, r3, #8
 8004e7a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	69d3      	ldr	r3, [r2, #28]
 8004e80:	f023 0304 	bic.w	r3, r3, #4
 8004e84:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	69d3      	ldr	r3, [r2, #28]
 8004e8a:	6929      	ldr	r1, [r5, #16]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004e90:	2000      	movs	r0, #0
      break;
 8004e92:	e015      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e94:	6800      	ldr	r0, [r0, #0]
 8004e96:	f7ff fda3 	bl	80049e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	69d3      	ldr	r3, [r2, #28]
 8004e9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ea2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ea4:	6822      	ldr	r2, [r4, #0]
 8004ea6:	69d3      	ldr	r3, [r2, #28]
 8004ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	69d3      	ldr	r3, [r2, #28]
 8004eb2:	6929      	ldr	r1, [r5, #16]
 8004eb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004eb8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2000      	movs	r0, #0
      break;
 8004ebc:	e000      	b.n	8004ec0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8004ebe:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004ec8:	2002      	movs	r0, #2
 8004eca:	e7fc      	b.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ece:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004eda:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	6082      	str	r2, [r0, #8]
}
 8004ee0:	bc10      	pop	{r4}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_ConfigClockSource>:
{
 8004ee4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004ee6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	f000 80ad 	beq.w	800504a <HAL_TIM_ConfigClockSource+0x166>
 8004ef0:	4604      	mov	r4, r0
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004efe:	6802      	ldr	r2, [r0, #0]
 8004f00:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004f0a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004f0c:	680b      	ldr	r3, [r1, #0]
 8004f0e:	2b60      	cmp	r3, #96	; 0x60
 8004f10:	d060      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0xf0>
 8004f12:	d83d      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0xac>
 8004f14:	2b40      	cmp	r3, #64	; 0x40
 8004f16:	d079      	beq.n	800500c <HAL_TIM_ConfigClockSource+0x128>
 8004f18:	d91c      	bls.n	8004f54 <HAL_TIM_ConfigClockSource+0x70>
 8004f1a:	2b50      	cmp	r3, #80	; 0x50
 8004f1c:	d136      	bne.n	8004f8c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f20:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004f22:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004f24:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f34:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f38:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004f3c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f40:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f42:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004f44:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f4a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004f4e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2000      	movs	r0, #0
}
 8004f52:	e012      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d002      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x7a>
 8004f58:	d90b      	bls.n	8004f72 <HAL_TIM_ConfigClockSource+0x8e>
 8004f5a:	2b30      	cmp	r3, #48	; 0x30
 8004f5c:	d114      	bne.n	8004f88 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f5e:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004f60:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8004f6c:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2000      	movs	r0, #0
}
 8004f70:	e003      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004f72:	f033 0210 	bics.w	r2, r3, #16
 8004f76:	d0f2      	beq.n	8004f5e <HAL_TIM_ConfigClockSource+0x7a>
 8004f78:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004f80:	2300      	movs	r3, #0
 8004f82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004f88:	2001      	movs	r0, #1
 8004f8a:	e7f6      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	e7f4      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	d055      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x15e>
 8004f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8004f9c:	68cb      	ldr	r3, [r1, #12]
 8004f9e:	684a      	ldr	r2, [r1, #4]
 8004fa0:	6889      	ldr	r1, [r1, #8]
 8004fa2:	6800      	ldr	r0, [r0, #0]
 8004fa4:	f7ff ff92 	bl	8004ecc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	6893      	ldr	r3, [r2, #8]
 8004fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fb0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2000      	movs	r0, #0
      break;
 8004fb4:	e7e1      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004fb6:	2b70      	cmp	r3, #112	; 0x70
 8004fb8:	d145      	bne.n	8005046 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8004fba:	68cb      	ldr	r3, [r1, #12]
 8004fbc:	684a      	ldr	r2, [r1, #4]
 8004fbe:	6889      	ldr	r1, [r1, #8]
 8004fc0:	6800      	ldr	r0, [r0, #0]
 8004fc2:	f7ff ff83 	bl	8004ecc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004fce:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2000      	movs	r0, #0
      break;
 8004fd2:	e7d2      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fd4:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fd6:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004fda:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fdc:	6a19      	ldr	r1, [r3, #32]
 8004fde:	f021 0110 	bic.w	r1, r1, #16
 8004fe2:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe4:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fea:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff2:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ff8:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ffa:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8004ffc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005002:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005006:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005008:	2000      	movs	r0, #0
}
 800500a:	e7b6      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005010:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005012:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800501c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800501e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005022:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005026:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800502a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800502c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800502e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005030:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8005032:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005038:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800503c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800503e:	2000      	movs	r0, #0
}
 8005040:	e79b      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2000      	movs	r0, #0
 8005044:	e799      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8005046:	2001      	movs	r0, #1
 8005048:	e797      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800504a:	2002      	movs	r0, #2
 800504c:	e79b      	b.n	8004f86 <HAL_TIM_ConfigClockSource+0xa2>

0800504e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800504e:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005052:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005054:	f04f 0c01 	mov.w	ip, #1
 8005058:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 800505c:	ea23 030c 	bic.w	r3, r3, ip
 8005060:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005062:	6a03      	ldr	r3, [r0, #32]
 8005064:	408a      	lsls	r2, r1
 8005066:	431a      	orrs	r2, r3
 8005068:	6202      	str	r2, [r0, #32]
}
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_PWM_Start>:
{
 800506c:	b510      	push	{r4, lr}
 800506e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005070:	4608      	mov	r0, r1
 8005072:	bb01      	cbnz	r1, 80050b6 <HAL_TIM_PWM_Start+0x4a>
 8005074:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d152      	bne.n	8005124 <HAL_TIM_PWM_Start+0xb8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800507e:	2302      	movs	r3, #2
 8005080:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005084:	2201      	movs	r2, #1
 8005086:	4601      	mov	r1, r0
 8005088:	6820      	ldr	r0, [r4, #0]
 800508a:	f7ff ffe0 	bl	800504e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	4a26      	ldr	r2, [pc, #152]	; (800512c <HAL_TIM_PWM_Start+0xc0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d034      	beq.n	8005100 <HAL_TIM_PWM_Start+0x94>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d038      	beq.n	800510e <HAL_TIM_PWM_Start+0xa2>
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <HAL_TIM_PWM_Start+0xc4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d035      	beq.n	800510e <HAL_TIM_PWM_Start+0xa2>
 80050a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d031      	beq.n	800510e <HAL_TIM_PWM_Start+0xa2>
    __HAL_TIM_ENABLE(htim);
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80050b2:	2000      	movs	r0, #0
 80050b4:	e035      	b.n	8005122 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050b6:	2904      	cmp	r1, #4
 80050b8:	d00c      	beq.n	80050d4 <HAL_TIM_PWM_Start+0x68>
 80050ba:	2908      	cmp	r1, #8
 80050bc:	bf0c      	ite	eq
 80050be:	f894 3040 	ldrbeq.w	r3, [r4, #64]	; 0x40
 80050c2:	f894 3041 	ldrbne.w	r3, [r4, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	bf18      	it	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	b143      	cbz	r3, 80050e2 <HAL_TIM_PWM_Start+0x76>
    return HAL_ERROR;
 80050d0:	2001      	movs	r0, #1
 80050d2:	e026      	b.n	8005122 <HAL_TIM_PWM_Start+0xb6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050d4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	bf18      	it	ne
 80050de:	2301      	movne	r3, #1
 80050e0:	e7f5      	b.n	80050ce <HAL_TIM_PWM_Start+0x62>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e2:	2804      	cmp	r0, #4
 80050e4:	d008      	beq.n	80050f8 <HAL_TIM_PWM_Start+0x8c>
 80050e6:	2808      	cmp	r0, #8
 80050e8:	f04f 0302 	mov.w	r3, #2
 80050ec:	bf0c      	ite	eq
 80050ee:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 80050f2:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 80050f6:	e7c5      	b.n	8005084 <HAL_TIM_PWM_Start+0x18>
 80050f8:	2302      	movs	r3, #2
 80050fa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80050fe:	e7c1      	b.n	8005084 <HAL_TIM_PWM_Start+0x18>
    __HAL_TIM_MOE_ENABLE(htim);
 8005100:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005106:	6453      	str	r3, [r2, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	4293      	cmp	r3, r2
 800510c:	d1c3      	bne.n	8005096 <HAL_TIM_PWM_Start+0x2a>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	2a06      	cmp	r2, #6
 8005116:	d007      	beq.n	8005128 <HAL_TIM_PWM_Start+0xbc>
      __HAL_TIM_ENABLE(htim);
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f042 0201 	orr.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005120:	2000      	movs	r0, #0
}
 8005122:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005124:	2001      	movs	r0, #1
 8005126:	e7fc      	b.n	8005122 <HAL_TIM_PWM_Start+0xb6>
  return HAL_OK;
 8005128:	2000      	movs	r0, #0
 800512a:	e7fa      	b.n	8005122 <HAL_TIM_PWM_Start+0xb6>
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40000400 	.word	0x40000400

08005134 <HAL_TIM_PWM_Stop>:
{
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4604      	mov	r4, r0
 8005138:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800513a:	2200      	movs	r2, #0
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f7ff ff86 	bl	800504e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <HAL_TIM_PWM_Stop+0x80>)
 8005146:	429a      	cmp	r2, r3
 8005148:	d014      	beq.n	8005174 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	6a19      	ldr	r1, [r3, #32]
 800514e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005152:	4211      	tst	r1, r2
 8005154:	d108      	bne.n	8005168 <HAL_TIM_PWM_Stop+0x34>
 8005156:	6a19      	ldr	r1, [r3, #32]
 8005158:	f240 4244 	movw	r2, #1092	; 0x444
 800515c:	4211      	tst	r1, r2
 800515e:	d103      	bne.n	8005168 <HAL_TIM_PWM_Stop+0x34>
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	b9ad      	cbnz	r5, 8005196 <HAL_TIM_PWM_Stop+0x62>
 800516a:	2301      	movs	r3, #1
 800516c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005170:	2000      	movs	r0, #0
 8005172:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005174:	6a1a      	ldr	r2, [r3, #32]
 8005176:	f241 1311 	movw	r3, #4369	; 0x1111
 800517a:	421a      	tst	r2, r3
 800517c:	d1e5      	bne.n	800514a <HAL_TIM_PWM_Stop+0x16>
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <HAL_TIM_PWM_Stop+0x80>)
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	f240 4344 	movw	r3, #1092	; 0x444
 8005186:	421a      	tst	r2, r3
 8005188:	d1df      	bne.n	800514a <HAL_TIM_PWM_Stop+0x16>
 800518a:	4a0a      	ldr	r2, [pc, #40]	; (80051b4 <HAL_TIM_PWM_Stop+0x80>)
 800518c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800518e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005192:	6453      	str	r3, [r2, #68]	; 0x44
 8005194:	e7d9      	b.n	800514a <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	2d04      	cmp	r5, #4
 8005198:	d008      	beq.n	80051ac <HAL_TIM_PWM_Stop+0x78>
 800519a:	2d08      	cmp	r5, #8
 800519c:	f04f 0301 	mov.w	r3, #1
 80051a0:	bf0c      	ite	eq
 80051a2:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 80051a6:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 80051aa:	e7e1      	b.n	8005170 <HAL_TIM_PWM_Stop+0x3c>
 80051ac:	2301      	movs	r3, #1
 80051ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80051b2:	e7dd      	b.n	8005170 <HAL_TIM_PWM_Stop+0x3c>
 80051b4:	40012c00 	.word	0x40012c00

080051b8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80051bc:	2a01      	cmp	r2, #1
 80051be:	d02b      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 80051c0:	b430      	push	{r4, r5}
 80051c2:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80051c4:	2201      	movs	r2, #1
 80051c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ca:	2202      	movs	r2, #2
 80051cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d0:	6804      	ldr	r4, [r0, #0]
 80051d2:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d4:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051da:	680d      	ldr	r5, [r1, #0]
 80051dc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051de:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4c0e      	ldr	r4, [pc, #56]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80051e4:	42a2      	cmp	r2, r4
 80051e6:	d00a      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80051e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80051ec:	d007      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80051ee:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80051f2:	42a2      	cmp	r2, r4
 80051f4:	d003      	beq.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80051f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051fa:	42a2      	cmp	r2, r4
 80051fc:	d104      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005202:	6849      	ldr	r1, [r1, #4]
 8005204:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005206:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520e:	2000      	movs	r0, #0
 8005210:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8005214:	bc30      	pop	{r4, r5}
 8005216:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005218:	2002      	movs	r0, #2
}
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00

08005220 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005220:	4770      	bx	lr

08005222 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005222:	4770      	bx	lr

08005224 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005224:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005228:	b9a3      	cbnz	r3, 8005254 <osKernelInitialize+0x30>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522a:	f3ef 8310 	mrs	r3, PRIMASK
 800522e:	b9a3      	cbnz	r3, 800525a <osKernelInitialize+0x36>
 8005230:	4b0d      	ldr	r3, [pc, #52]	; (8005268 <osKernelInitialize+0x44>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	2802      	cmp	r0, #2
 8005236:	d004      	beq.n	8005242 <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8005238:	b990      	cbnz	r0, 8005260 <osKernelInitialize+0x3c>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <osKernelInitialize+0x44>)
 800523c:	2201      	movs	r2, #1
 800523e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005240:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005242:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf14      	ite	ne
 800524a:	f06f 0005 	mvnne.w	r0, #5
 800524e:	f04f 30ff 	moveq.w	r0, #4294967295
 8005252:	4770      	bx	lr
    stat = osErrorISR;
 8005254:	f06f 0005 	mvn.w	r0, #5
 8005258:	4770      	bx	lr
 800525a:	f06f 0005 	mvn.w	r0, #5
 800525e:	4770      	bx	lr
      stat = osError;
 8005260:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20001294 	.word	0x20001294

0800526c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800526c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800526e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8005272:	b9c3      	cbnz	r3, 80052a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005274:	f3ef 8310 	mrs	r3, PRIMASK
 8005278:	b9c3      	cbnz	r3, 80052ac <osKernelStart+0x40>
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <osKernelStart+0x4c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d008      	beq.n	8005294 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8005282:	2b01      	cmp	r3, #1
 8005284:	d115      	bne.n	80052b2 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <osKernelStart+0x4c>)
 8005288:	2202      	movs	r2, #2
 800528a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800528c:	f001 fc20 	bl	8006ad0 <vTaskStartScheduler>
      stat = osOK;
 8005290:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8005292:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005294:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf14      	ite	ne
 800529c:	f06f 0005 	mvnne.w	r0, #5
 80052a0:	f04f 30ff 	moveq.w	r0, #4294967295
 80052a4:	e7f5      	b.n	8005292 <osKernelStart+0x26>
    stat = osErrorISR;
 80052a6:	f06f 0005 	mvn.w	r0, #5
 80052aa:	e7f2      	b.n	8005292 <osKernelStart+0x26>
 80052ac:	f06f 0005 	mvn.w	r0, #5
 80052b0:	e7ef      	b.n	8005292 <osKernelStart+0x26>
      stat = osError;
 80052b2:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80052b6:	e7ec      	b.n	8005292 <osKernelStart+0x26>
 80052b8:	20001294 	.word	0x20001294

080052bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052be:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052c0:	2400      	movs	r4, #0
 80052c2:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80052c8:	b9d4      	cbnz	r4, 8005300 <osThreadNew+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ca:	f3ef 8310 	mrs	r3, PRIMASK
 80052ce:	b9bb      	cbnz	r3, 8005300 <osThreadNew+0x44>
 80052d0:	4b2c      	ldr	r3, [pc, #176]	; (8005384 <osThreadNew+0xc8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d00f      	beq.n	80052f8 <osThreadNew+0x3c>
 80052d8:	b190      	cbz	r0, 8005300 <osThreadNew+0x44>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80052da:	2300      	movs	r3, #0
 80052dc:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	d03a      	beq.n	800535a <osThreadNew+0x9e>
      if (attr->name != NULL) {
 80052e4:	6814      	ldr	r4, [r2, #0]
 80052e6:	b174      	cbz	r4, 8005306 <osThreadNew+0x4a>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80052e8:	6993      	ldr	r3, [r2, #24]
 80052ea:	b17b      	cbz	r3, 800530c <osThreadNew+0x50>
        prio = (UBaseType_t)attr->priority;
 80052ec:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052ee:	3b01      	subs	r3, #1
 80052f0:	2b37      	cmp	r3, #55	; 0x37
 80052f2:	d90c      	bls.n	800530e <osThreadNew+0x52>
        return (NULL);
 80052f4:	2000      	movs	r0, #0
 80052f6:	e004      	b.n	8005302 <osThreadNew+0x46>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052f8:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0eb      	beq.n	80052d8 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005300:	9804      	ldr	r0, [sp, #16]
}
 8005302:	b007      	add	sp, #28
 8005304:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8005306:	f10d 0417 	add.w	r4, sp, #23
 800530a:	e7ed      	b.n	80052e8 <osThreadNew+0x2c>
 800530c:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800530e:	6853      	ldr	r3, [r2, #4]
 8005310:	f013 0f01 	tst.w	r3, #1
 8005314:	d134      	bne.n	8005380 <osThreadNew+0xc4>
      if (attr->stack_size > 0U) {
 8005316:	6953      	ldr	r3, [r2, #20]
 8005318:	b113      	cbz	r3, 8005320 <osThreadNew+0x64>
        stack = attr->stack_size / sizeof(StackType_t);
 800531a:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800531e:	e001      	b.n	8005324 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8005320:	f04f 0c80 	mov.w	ip, #128	; 0x80
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005324:	6896      	ldr	r6, [r2, #8]
 8005326:	b18e      	cbz	r6, 800534c <osThreadNew+0x90>
 8005328:	68d7      	ldr	r7, [r2, #12]
 800532a:	2f5f      	cmp	r7, #95	; 0x5f
 800532c:	d9e8      	bls.n	8005300 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800532e:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005330:	2a00      	cmp	r2, #0
 8005332:	d0e5      	beq.n	8005300 <osThreadNew+0x44>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0e3      	beq.n	8005300 <osThreadNew+0x44>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005338:	9602      	str	r6, [sp, #8]
 800533a:	9201      	str	r2, [sp, #4]
 800533c:	9500      	str	r5, [sp, #0]
 800533e:	460b      	mov	r3, r1
 8005340:	4662      	mov	r2, ip
 8005342:	4621      	mov	r1, r4
 8005344:	f001 fb58 	bl	80069f8 <xTaskCreateStatic>
 8005348:	9004      	str	r0, [sp, #16]
 800534a:	e7d9      	b.n	8005300 <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800534c:	68d3      	ldr	r3, [r2, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1d6      	bne.n	8005300 <osThreadNew+0x44>
      if (mem == 0) {
 8005352:	6913      	ldr	r3, [r2, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1d3      	bne.n	8005300 <osThreadNew+0x44>
 8005358:	e004      	b.n	8005364 <osThreadNew+0xa8>
    prio  = (UBaseType_t)osPriorityNormal;
 800535a:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800535c:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8005360:	f10d 0417 	add.w	r4, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005364:	ab04      	add	r3, sp, #16
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	9500      	str	r5, [sp, #0]
 800536a:	460b      	mov	r3, r1
 800536c:	fa1f f28c 	uxth.w	r2, ip
 8005370:	4621      	mov	r1, r4
 8005372:	f001 fb7b 	bl	8006a6c <xTaskCreate>
 8005376:	2801      	cmp	r0, #1
          hTask = NULL;
 8005378:	bf1c      	itt	ne
 800537a:	2300      	movne	r3, #0
 800537c:	9304      	strne	r3, [sp, #16]
 800537e:	e7bf      	b.n	8005300 <osThreadNew+0x44>
        return (NULL);
 8005380:	2000      	movs	r0, #0
 8005382:	e7be      	b.n	8005302 <osThreadNew+0x46>
 8005384:	20001294 	.word	0x20001294

08005388 <osEventFlagsNew>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005388:	f3ef 8205 	mrs	r2, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 800538c:	b9f2      	cbnz	r2, 80053cc <osEventFlagsNew+0x44>
osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800538e:	b508      	push	{r3, lr}
 8005390:	4603      	mov	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005392:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8005396:	b9da      	cbnz	r2, 80053d0 <osEventFlagsNew+0x48>
 8005398:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <osEventFlagsNew+0x4c>)
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	2a02      	cmp	r2, #2
 800539e:	d007      	beq.n	80053b0 <osEventFlagsNew+0x28>
    mem = -1;

    if (attr != NULL) {
 80053a0:	b173      	cbz	r3, 80053c0 <osEventFlagsNew+0x38>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80053a2:	6898      	ldr	r0, [r3, #8]
 80053a4:	b150      	cbz	r0, 80053bc <osEventFlagsNew+0x34>
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b1f      	cmp	r3, #31
 80053aa:	d80c      	bhi.n	80053c6 <osEventFlagsNew+0x3e>
  hEventGroup = NULL;
 80053ac:	2000      	movs	r0, #0
 80053ae:	e009      	b.n	80053c4 <osEventFlagsNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053b0:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	d0f3      	beq.n	80053a0 <osEventFlagsNew+0x18>
  hEventGroup = NULL;
 80053b8:	2000      	movs	r0, #0
        hEventGroup = xEventGroupCreate();
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80053ba:	e003      	b.n	80053c4 <osEventFlagsNew+0x3c>
      if (mem == 0) {
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	b90b      	cbnz	r3, 80053c4 <osEventFlagsNew+0x3c>
        hEventGroup = xEventGroupCreate();
 80053c0:	f000 fb0b 	bl	80059da <xEventGroupCreate>
}
 80053c4:	bd08      	pop	{r3, pc}
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80053c6:	f000 fae3 	bl	8005990 <xEventGroupCreateStatic>
 80053ca:	e7fb      	b.n	80053c4 <osEventFlagsNew+0x3c>
  hEventGroup = NULL;
 80053cc:	2000      	movs	r0, #0
}
 80053ce:	4770      	bx	lr
  hEventGroup = NULL;
 80053d0:	2000      	movs	r0, #0
 80053d2:	e7f7      	b.n	80053c4 <osEventFlagsNew+0x3c>
 80053d4:	20001294 	.word	0x20001294

080053d8 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80053d8:	b370      	cbz	r0, 8005438 <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80053da:	b510      	push	{r4, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	460c      	mov	r4, r1
 80053e0:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80053e2:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80053e6:	d12a      	bne.n	800543e <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e8:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 80053ec:	b94a      	cbnz	r2, 8005402 <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ee:	f3ef 8210 	mrs	r2, PRIMASK
 80053f2:	b932      	cbnz	r2, 8005402 <osEventFlagsSet+0x2a>
 80053f4:	4a16      	ldr	r2, [pc, #88]	; (8005450 <osEventFlagsSet+0x78>)
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	2a02      	cmp	r2, #2
 80053fa:	d118      	bne.n	800542e <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005400:	b1aa      	cbz	r2, 800542e <osEventFlagsSet+0x56>
    yield = pdFALSE;
 8005402:	2200      	movs	r2, #0
 8005404:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005406:	aa01      	add	r2, sp, #4
 8005408:	4621      	mov	r1, r4
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fbca 	bl	8005ba4 <xEventGroupSetBitsFromISR>
 8005410:	b9c8      	cbnz	r0, 8005446 <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 8005412:	9b01      	ldr	r3, [sp, #4]
 8005414:	b1d3      	cbz	r3, 800544c <osEventFlagsSet+0x74>
 8005416:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800541a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800541e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy
      rflags = flags;
 800542a:	4620      	mov	r0, r4
 800542c:	e009      	b.n	8005442 <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800542e:	4621      	mov	r1, r4
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fb6a 	bl	8005b0a <xEventGroupSetBits>
 8005436:	e004      	b.n	8005442 <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8005438:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 800543c:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 800543e:	f06f 0003 	mvn.w	r0, #3
}
 8005442:	b002      	add	sp, #8
 8005444:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8005446:	f06f 0002 	mvn.w	r0, #2
 800544a:	e7fa      	b.n	8005442 <osEventFlagsSet+0x6a>
      rflags = flags;
 800544c:	4620      	mov	r0, r4
  return (rflags);
 800544e:	e7f8      	b.n	8005442 <osEventFlagsSet+0x6a>
 8005450:	20001294 	.word	0x20001294

08005454 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005454:	2800      	cmp	r0, #0
 8005456:	d037      	beq.n	80054c8 <osEventFlagsWait+0x74>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	460c      	mov	r4, r1
 800545e:	461d      	mov	r5, r3
 8005460:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005462:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005466:	d132      	bne.n	80054ce <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005468:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 800546c:	bb9b      	cbnz	r3, 80054d6 <osEventFlagsWait+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546e:	f3ef 8310 	mrs	r3, PRIMASK
 8005472:	bb9b      	cbnz	r3, 80054dc <osEventFlagsWait+0x88>
 8005474:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <osEventFlagsWait+0x90>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d015      	beq.n	80054a8 <osEventFlagsWait+0x54>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 800547c:	f002 0601 	and.w	r6, r2, #1
      wait_all = pdTRUE;
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 8005480:	f082 0202 	eor.w	r2, r2, #2
      exit_clr = pdFAIL;
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005484:	9500      	str	r5, [sp, #0]
 8005486:	4633      	mov	r3, r6
 8005488:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800548c:	4621      	mov	r1, r4
 800548e:	4660      	mov	r0, ip
 8005490:	f000 fab1 	bl	80059f6 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8005494:	b17e      	cbz	r6, 80054b6 <osEventFlagsWait+0x62>
      if (flags != rflags) {
 8005496:	4284      	cmp	r4, r0
 8005498:	d01b      	beq.n	80054d2 <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 800549a:	2d00      	cmp	r5, #0
 800549c:	bf14      	ite	ne
 800549e:	f06f 0001 	mvnne.w	r0, #1
 80054a2:	f06f 0002 	mvneq.w	r0, #2
 80054a6:	e014      	b.n	80054d2 <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054a8:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0e5      	beq.n	800547c <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorISR;
 80054b0:	f06f 0005 	mvn.w	r0, #5
 80054b4:	e00d      	b.n	80054d2 <osEventFlagsWait+0x7e>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80054b6:	4204      	tst	r4, r0
 80054b8:	d10b      	bne.n	80054d2 <osEventFlagsWait+0x7e>
        if (timeout > 0U) {
          rflags = (uint32_t)osErrorTimeout;
        } else {
          rflags = (uint32_t)osErrorResource;
 80054ba:	2d00      	cmp	r5, #0
 80054bc:	bf14      	ite	ne
 80054be:	f06f 0001 	mvnne.w	r0, #1
 80054c2:	f06f 0002 	mvneq.w	r0, #2
 80054c6:	e004      	b.n	80054d2 <osEventFlagsWait+0x7e>
    rflags = (uint32_t)osErrorParameter;
 80054c8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 80054cc:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80054ce:	f06f 0003 	mvn.w	r0, #3
}
 80054d2:	b002      	add	sp, #8
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 80054d6:	f06f 0005 	mvn.w	r0, #5
 80054da:	e7fa      	b.n	80054d2 <osEventFlagsWait+0x7e>
 80054dc:	f06f 0005 	mvn.w	r0, #5
 80054e0:	e7f7      	b.n	80054d2 <osEventFlagsWait+0x7e>
 80054e2:	bf00      	nop
 80054e4:	20001294 	.word	0x20001294

080054e8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80054e8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ea:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d145      	bne.n	800557e <osMutexNew+0x96>
 80054f2:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f4:	f3ef 8310 	mrs	r3, PRIMASK
 80054f8:	461e      	mov	r6, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d142      	bne.n	8005584 <osMutexNew+0x9c>
 80054fe:	4b23      	ldr	r3, [pc, #140]	; (800558c <osMutexNew+0xa4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d00f      	beq.n	8005526 <osMutexNew+0x3e>
    if (attr != NULL) {
 8005506:	2c00      	cmp	r4, #0
 8005508:	d034      	beq.n	8005574 <osMutexNew+0x8c>
      type = attr->attr_bits;
 800550a:	6863      	ldr	r3, [r4, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800550c:	f013 0f08 	tst.w	r3, #8
 8005510:	d13a      	bne.n	8005588 <osMutexNew+0xa0>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005512:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 8005516:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005518:	68a1      	ldr	r1, [r4, #8]
 800551a:	b151      	cbz	r1, 8005532 <osMutexNew+0x4a>
 800551c:	68e2      	ldr	r2, [r4, #12]
 800551e:	2a4f      	cmp	r2, #79	; 0x4f
 8005520:	d813      	bhi.n	800554a <osMutexNew+0x62>
  hMutex = NULL;
 8005522:	2500      	movs	r5, #0
 8005524:	e02c      	b.n	8005580 <osMutexNew+0x98>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005526:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0eb      	beq.n	8005506 <osMutexNew+0x1e>
  hMutex = NULL;
 800552e:	2500      	movs	r5, #0
 8005530:	e026      	b.n	8005580 <osMutexNew+0x98>
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 8005532:	68e2      	ldr	r2, [r4, #12]
 8005534:	2a00      	cmp	r2, #0
 8005536:	d1f4      	bne.n	8005522 <osMutexNew+0x3a>
          if (rmtx != 0U) {
 8005538:	b1e3      	cbz	r3, 8005574 <osMutexNew+0x8c>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800553a:	2004      	movs	r0, #4
 800553c:	f000 fde8 	bl	8006110 <xQueueCreateMutex>
 8005540:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005542:	2d00      	cmp	r5, #0
 8005544:	d0ed      	beq.n	8005522 <osMutexNew+0x3a>
        if (attr != NULL) {
 8005546:	b93c      	cbnz	r4, 8005558 <osMutexNew+0x70>
 8005548:	e007      	b.n	800555a <osMutexNew+0x72>
        if (rmtx != 0U) {
 800554a:	b173      	cbz	r3, 800556a <osMutexNew+0x82>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800554c:	2004      	movs	r0, #4
 800554e:	f000 fdea 	bl	8006126 <xQueueCreateMutexStatic>
 8005552:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8005554:	2d00      	cmp	r5, #0
 8005556:	d0e4      	beq.n	8005522 <osMutexNew+0x3a>
          name = attr->name;
 8005558:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 800555a:	4621      	mov	r1, r4
 800555c:	4628      	mov	r0, r5
 800555e:	f001 f873 	bl	8006648 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005562:	b16e      	cbz	r6, 8005580 <osMutexNew+0x98>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005564:	f045 0501 	orr.w	r5, r5, #1
 8005568:	e00a      	b.n	8005580 <osMutexNew+0x98>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800556a:	2001      	movs	r0, #1
 800556c:	f000 fddb 	bl	8006126 <xQueueCreateMutexStatic>
 8005570:	4605      	mov	r5, r0
 8005572:	e7ef      	b.n	8005554 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateMutex ();
 8005574:	2001      	movs	r0, #1
 8005576:	f000 fdcb 	bl	8006110 <xQueueCreateMutex>
 800557a:	4605      	mov	r5, r0
 800557c:	e7e1      	b.n	8005542 <osMutexNew+0x5a>
  hMutex = NULL;
 800557e:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8005580:	4628      	mov	r0, r5
 8005582:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8005584:	2500      	movs	r5, #0
 8005586:	e7fb      	b.n	8005580 <osMutexNew+0x98>
 8005588:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 800558a:	e7f9      	b.n	8005580 <osMutexNew+0x98>
 800558c:	20001294 	.word	0x20001294

08005590 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005590:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8005594:	bb72      	cbnz	r2, 80055f4 <osMutexAcquire+0x64>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005596:	b510      	push	{r4, lr}
 8005598:	4603      	mov	r3, r0
 800559a:	460c      	mov	r4, r1
 800559c:	f020 0001 	bic.w	r0, r0, #1
 80055a0:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a4:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80055a8:	bb3a      	cbnz	r2, 80055fa <osMutexAcquire+0x6a>
 80055aa:	4a19      	ldr	r2, [pc, #100]	; (8005610 <osMutexAcquire+0x80>)
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	2a02      	cmp	r2, #2
 80055b0:	d00d      	beq.n	80055ce <osMutexAcquire+0x3e>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80055b2:	b328      	cbz	r0, 8005600 <osMutexAcquire+0x70>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80055b4:	b193      	cbz	r3, 80055dc <osMutexAcquire+0x4c>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80055b6:	4621      	mov	r1, r4
 80055b8:	f000 ffcf 	bl	800655a <xQueueTakeMutexRecursive>
 80055bc:	2801      	cmp	r0, #1
 80055be:	d022      	beq.n	8005606 <osMutexAcquire+0x76>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 80055c0:	2c00      	cmp	r4, #0
 80055c2:	bf14      	ite	ne
 80055c4:	f06f 0001 	mvnne.w	r0, #1
 80055c8:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 80055cc:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055ce:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	d0ed      	beq.n	80055b2 <osMutexAcquire+0x22>
    stat = osErrorISR;
 80055d6:	f06f 0005 	mvn.w	r0, #5
 80055da:	e7f7      	b.n	80055cc <osMutexAcquire+0x3c>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80055dc:	4621      	mov	r1, r4
 80055de:	f000 fee9 	bl	80063b4 <xQueueSemaphoreTake>
 80055e2:	2801      	cmp	r0, #1
 80055e4:	d011      	beq.n	800560a <osMutexAcquire+0x7a>
          stat = osErrorResource;
 80055e6:	2c00      	cmp	r4, #0
 80055e8:	bf14      	ite	ne
 80055ea:	f06f 0001 	mvnne.w	r0, #1
 80055ee:	f06f 0002 	mvneq.w	r0, #2
 80055f2:	e7eb      	b.n	80055cc <osMutexAcquire+0x3c>
    stat = osErrorISR;
 80055f4:	f06f 0005 	mvn.w	r0, #5
}
 80055f8:	4770      	bx	lr
    stat = osErrorISR;
 80055fa:	f06f 0005 	mvn.w	r0, #5
 80055fe:	e7e5      	b.n	80055cc <osMutexAcquire+0x3c>
    stat = osErrorParameter;
 8005600:	f06f 0003 	mvn.w	r0, #3
 8005604:	e7e2      	b.n	80055cc <osMutexAcquire+0x3c>
  stat = osOK;
 8005606:	2000      	movs	r0, #0
 8005608:	e7e0      	b.n	80055cc <osMutexAcquire+0x3c>
 800560a:	2000      	movs	r0, #0
 800560c:	e7de      	b.n	80055cc <osMutexAcquire+0x3c>
 800560e:	bf00      	nop
 8005610:	20001294 	.word	0x20001294

08005614 <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005614:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8005618:	bb42      	cbnz	r2, 800566c <osMutexRelease+0x58>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800561a:	b508      	push	{r3, lr}
 800561c:	4603      	mov	r3, r0
 800561e:	f020 0001 	bic.w	r0, r0, #1
 8005622:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005626:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 800562a:	bb12      	cbnz	r2, 8005672 <osMutexRelease+0x5e>
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <osMutexRelease+0x6c>)
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	2a02      	cmp	r2, #2
 8005632:	d009      	beq.n	8005648 <osMutexRelease+0x34>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8005634:	b300      	cbz	r0, 8005678 <osMutexRelease+0x64>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8005636:	b173      	cbz	r3, 8005656 <osMutexRelease+0x42>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005638:	f000 fd84 	bl	8006144 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 800563c:	2801      	cmp	r0, #1
 800563e:	bf0c      	ite	eq
 8005640:	2000      	moveq	r0, #0
 8005642:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8005646:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005648:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 800564c:	2a00      	cmp	r2, #0
 800564e:	d0f1      	beq.n	8005634 <osMutexRelease+0x20>
    stat = osErrorISR;
 8005650:	f06f 0005 	mvn.w	r0, #5
 8005654:	e7f7      	b.n	8005646 <osMutexRelease+0x32>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005656:	2300      	movs	r3, #0
 8005658:	461a      	mov	r2, r3
 800565a:	4619      	mov	r1, r3
 800565c:	f000 fc80 	bl	8005f60 <xQueueGenericSend>
        stat = osErrorResource;
 8005660:	2801      	cmp	r0, #1
 8005662:	bf0c      	ite	eq
 8005664:	2000      	moveq	r0, #0
 8005666:	f06f 0002 	mvnne.w	r0, #2
 800566a:	e7ec      	b.n	8005646 <osMutexRelease+0x32>
    stat = osErrorISR;
 800566c:	f06f 0005 	mvn.w	r0, #5
}
 8005670:	4770      	bx	lr
    stat = osErrorISR;
 8005672:	f06f 0005 	mvn.w	r0, #5
 8005676:	e7e6      	b.n	8005646 <osMutexRelease+0x32>
    stat = osErrorParameter;
 8005678:	f06f 0003 	mvn.w	r0, #3
 800567c:	e7e3      	b.n	8005646 <osMutexRelease+0x32>
 800567e:	bf00      	nop
 8005680:	20001294 	.word	0x20001294

08005684 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005688:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800568c:	2b00      	cmp	r3, #0
 800568e:	d146      	bne.n	800571e <osSemaphoreNew+0x9a>
 8005690:	460e      	mov	r6, r1
 8005692:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005694:	f3ef 8310 	mrs	r3, PRIMASK
 8005698:	2b00      	cmp	r3, #0
 800569a:	d144      	bne.n	8005726 <osSemaphoreNew+0xa2>
 800569c:	4b32      	ldr	r3, [pc, #200]	; (8005768 <osSemaphoreNew+0xe4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d00c      	beq.n	80056be <osSemaphoreNew+0x3a>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d040      	beq.n	800572a <osSemaphoreNew+0xa6>
 80056a8:	42b0      	cmp	r0, r6
 80056aa:	d340      	bcc.n	800572e <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 80056ac:	2d00      	cmp	r5, #0
 80056ae:	d04a      	beq.n	8005746 <osSemaphoreNew+0xc2>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80056b0:	68ac      	ldr	r4, [r5, #8]
 80056b2:	b154      	cbz	r4, 80056ca <osSemaphoreNew+0x46>
 80056b4:	68eb      	ldr	r3, [r5, #12]
 80056b6:	2b4f      	cmp	r3, #79	; 0x4f
 80056b8:	d83b      	bhi.n	8005732 <osSemaphoreNew+0xae>
  hSemaphore = NULL;
 80056ba:	2400      	movs	r4, #0
 80056bc:	e030      	b.n	8005720 <osSemaphoreNew+0x9c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056be:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0ee      	beq.n	80056a4 <osSemaphoreNew+0x20>
  hSemaphore = NULL;
 80056c6:	2400      	movs	r4, #0
 80056c8:	e02a      	b.n	8005720 <osSemaphoreNew+0x9c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056ca:	68eb      	ldr	r3, [r5, #12]
 80056cc:	bb43      	cbnz	r3, 8005720 <osSemaphoreNew+0x9c>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80056ce:	2801      	cmp	r0, #1
 80056d0:	d142      	bne.n	8005758 <osSemaphoreNew+0xd4>
        if (mem == 1) {
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80056d2:	2203      	movs	r2, #3
 80056d4:	2100      	movs	r1, #0
 80056d6:	2001      	movs	r0, #1
 80056d8:	f000 fbd9 	bl	8005e8e <xQueueGenericCreate>
 80056dc:	4604      	mov	r4, r0
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80056de:	b1fc      	cbz	r4, 8005720 <osSemaphoreNew+0x9c>
 80056e0:	b986      	cbnz	r6, 8005704 <osSemaphoreNew+0x80>
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 80056e2:	b105      	cbz	r5, 80056e6 <osSemaphoreNew+0x62>
          name = attr->name;
 80056e4:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80056e6:	4629      	mov	r1, r5
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 ffad 	bl	8006648 <vQueueAddToRegistry>
 80056ee:	e017      	b.n	8005720 <osSemaphoreNew+0x9c>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80056f0:	2303      	movs	r3, #3
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	4623      	mov	r3, r4
 80056f6:	2200      	movs	r2, #0
 80056f8:	4611      	mov	r1, r2
 80056fa:	2001      	movs	r0, #1
 80056fc:	f000 fb75 	bl	8005dea <xQueueGenericCreateStatic>
 8005700:	4604      	mov	r4, r0
 8005702:	e7ec      	b.n	80056de <osSemaphoreNew+0x5a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005704:	2300      	movs	r3, #0
 8005706:	461a      	mov	r2, r3
 8005708:	4619      	mov	r1, r3
 800570a:	4620      	mov	r0, r4
 800570c:	f000 fc28 	bl	8005f60 <xQueueGenericSend>
 8005710:	2801      	cmp	r0, #1
 8005712:	d0e6      	beq.n	80056e2 <osSemaphoreNew+0x5e>
            vSemaphoreDelete (hSemaphore);
 8005714:	4620      	mov	r0, r4
 8005716:	f000 ffc1 	bl	800669c <vQueueDelete>
            hSemaphore = NULL;
 800571a:	2400      	movs	r4, #0
 800571c:	e000      	b.n	8005720 <osSemaphoreNew+0x9c>
  hSemaphore = NULL;
 800571e:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8005720:	4620      	mov	r0, r4
 8005722:	b002      	add	sp, #8
 8005724:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8005726:	2400      	movs	r4, #0
 8005728:	e7fa      	b.n	8005720 <osSemaphoreNew+0x9c>
 800572a:	2400      	movs	r4, #0
 800572c:	e7f8      	b.n	8005720 <osSemaphoreNew+0x9c>
 800572e:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 8005730:	e7f6      	b.n	8005720 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 8005732:	2801      	cmp	r0, #1
 8005734:	d0dc      	beq.n	80056f0 <osSemaphoreNew+0x6c>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005736:	4622      	mov	r2, r4
 8005738:	4631      	mov	r1, r6
 800573a:	f000 fbd0 	bl	8005ede <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800573e:	4604      	mov	r4, r0
 8005740:	2800      	cmp	r0, #0
 8005742:	d1cf      	bne.n	80056e4 <osSemaphoreNew+0x60>
 8005744:	e7ec      	b.n	8005720 <osSemaphoreNew+0x9c>
      if (max_count == 1U) {
 8005746:	2801      	cmp	r0, #1
 8005748:	d0c3      	beq.n	80056d2 <osSemaphoreNew+0x4e>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800574a:	4631      	mov	r1, r6
 800574c:	f000 fbea 	bl	8005f24 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8005750:	4604      	mov	r4, r0
 8005752:	2800      	cmp	r0, #0
 8005754:	d0e4      	beq.n	8005720 <osSemaphoreNew+0x9c>
 8005756:	e7c6      	b.n	80056e6 <osSemaphoreNew+0x62>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005758:	4631      	mov	r1, r6
 800575a:	f000 fbe3 	bl	8005f24 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800575e:	4604      	mov	r4, r0
 8005760:	2800      	cmp	r0, #0
 8005762:	d1bf      	bne.n	80056e4 <osSemaphoreNew+0x60>
 8005764:	e7dc      	b.n	8005720 <osSemaphoreNew+0x9c>
 8005766:	bf00      	nop
 8005768:	20001294 	.word	0x20001294

0800576c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800576c:	b530      	push	{r4, r5, lr}
 800576e:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005770:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005774:	2b00      	cmp	r3, #0
 8005776:	d13e      	bne.n	80057f6 <osMessageQueueNew+0x8a>
 8005778:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577a:	f3ef 8310 	mrs	r3, PRIMASK
 800577e:	2b00      	cmp	r3, #0
 8005780:	d13d      	bne.n	80057fe <osMessageQueueNew+0x92>
 8005782:	4b27      	ldr	r3, [pc, #156]	; (8005820 <osMessageQueueNew+0xb4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d014      	beq.n	80057b4 <osMessageQueueNew+0x48>
 800578a:	2800      	cmp	r0, #0
 800578c:	d039      	beq.n	8005802 <osMessageQueueNew+0x96>
 800578e:	2900      	cmp	r1, #0
 8005790:	d039      	beq.n	8005806 <osMessageQueueNew+0x9a>
    mem = -1;

    if (attr != NULL) {
 8005792:	2d00      	cmp	r5, #0
 8005794:	d03d      	beq.n	8005812 <osMessageQueueNew+0xa6>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005796:	68ac      	ldr	r4, [r5, #8]
 8005798:	b194      	cbz	r4, 80057c0 <osMessageQueueNew+0x54>
 800579a:	68eb      	ldr	r3, [r5, #12]
 800579c:	2b4f      	cmp	r3, #79	; 0x4f
 800579e:	d934      	bls.n	800580a <osMessageQueueNew+0x9e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80057a0:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80057a2:	b3a2      	cbz	r2, 800580e <osMessageQueueNew+0xa2>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80057a4:	fb01 f300 	mul.w	r3, r1, r0
 80057a8:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80057ac:	459c      	cmp	ip, r3
 80057ae:	d219      	bcs.n	80057e4 <osMessageQueueNew+0x78>
  hQueue = NULL;
 80057b0:	2400      	movs	r4, #0
 80057b2:	e021      	b.n	80057f8 <osMessageQueueNew+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057b4:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0e6      	beq.n	800578a <osMessageQueueNew+0x1e>
  hQueue = NULL;
 80057bc:	2400      	movs	r4, #0
 80057be:	e01b      	b.n	80057f8 <osMessageQueueNew+0x8c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80057c0:	68eb      	ldr	r3, [r5, #12]
 80057c2:	b9cb      	cbnz	r3, 80057f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80057c4:	692a      	ldr	r2, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80057c6:	b9ba      	cbnz	r2, 80057f8 <osMessageQueueNew+0x8c>

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80057c8:	696b      	ldr	r3, [r5, #20]
  hQueue = NULL;
 80057ca:	4614      	mov	r4, r2
      if (mem == 0) {
 80057cc:	b9a3      	cbnz	r3, 80057f8 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 80057ce:	2200      	movs	r2, #0
 80057d0:	f000 fb5d 	bl	8005e8e <xQueueGenericCreate>
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80057d4:	4604      	mov	r4, r0
 80057d6:	b178      	cbz	r0, 80057f8 <osMessageQueueNew+0x8c>
      if (attr != NULL) {
        name = attr->name;
 80057d8:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80057da:	4629      	mov	r1, r5
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 ff33 	bl	8006648 <vQueueAddToRegistry>
 80057e2:	e009      	b.n	80057f8 <osMessageQueueNew+0x8c>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80057e4:	2300      	movs	r3, #0
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4623      	mov	r3, r4
 80057ea:	f000 fafe 	bl	8005dea <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80057ee:	4604      	mov	r4, r0
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d1f1      	bne.n	80057d8 <osMessageQueueNew+0x6c>
 80057f4:	e000      	b.n	80057f8 <osMessageQueueNew+0x8c>
  hQueue = NULL;
 80057f6:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80057f8:	4620      	mov	r0, r4
 80057fa:	b003      	add	sp, #12
 80057fc:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 80057fe:	2400      	movs	r4, #0
 8005800:	e7fa      	b.n	80057f8 <osMessageQueueNew+0x8c>
 8005802:	2400      	movs	r4, #0
 8005804:	e7f8      	b.n	80057f8 <osMessageQueueNew+0x8c>
 8005806:	2400      	movs	r4, #0
 8005808:	e7f6      	b.n	80057f8 <osMessageQueueNew+0x8c>
 800580a:	2400      	movs	r4, #0
 800580c:	e7f4      	b.n	80057f8 <osMessageQueueNew+0x8c>
 800580e:	4614      	mov	r4, r2
  return ((osMessageQueueId_t)hQueue);
 8005810:	e7f2      	b.n	80057f8 <osMessageQueueNew+0x8c>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005812:	2200      	movs	r2, #0
 8005814:	f000 fb3b 	bl	8005e8e <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005818:	4604      	mov	r4, r0
 800581a:	2800      	cmp	r0, #0
 800581c:	d0ec      	beq.n	80057f8 <osMessageQueueNew+0x8c>
 800581e:	e7dc      	b.n	80057da <osMessageQueueNew+0x6e>
 8005820:	20001294 	.word	0x20001294

08005824 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005824:	b510      	push	{r4, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800582a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800582e:	b9cb      	cbnz	r3, 8005864 <osMessageQueuePut+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8310 	mrs	r3, PRIMASK
 8005834:	b9b3      	cbnz	r3, 8005864 <osMessageQueuePut+0x40>
 8005836:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <osMessageQueuePut+0x9c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d00e      	beq.n	800585c <osMessageQueuePut+0x38>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800583e:	b3b0      	cbz	r0, 80058ae <osMessageQueuePut+0x8a>
 8005840:	b3c1      	cbz	r1, 80058b4 <osMessageQueuePut+0x90>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005842:	2300      	movs	r3, #0
 8005844:	4622      	mov	r2, r4
 8005846:	f000 fb8b 	bl	8005f60 <xQueueGenericSend>
 800584a:	2801      	cmp	r0, #1
 800584c:	d035      	beq.n	80058ba <osMessageQueuePut+0x96>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800584e:	2c00      	cmp	r4, #0
 8005850:	bf14      	ite	ne
 8005852:	f06f 0001 	mvnne.w	r0, #1
 8005856:	f06f 0002 	mvneq.w	r0, #2
 800585a:	e01a      	b.n	8005892 <osMessageQueuePut+0x6e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800585c:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ec      	beq.n	800583e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005864:	b1b8      	cbz	r0, 8005896 <osMessageQueuePut+0x72>
 8005866:	b1c9      	cbz	r1, 800589c <osMessageQueuePut+0x78>
 8005868:	b9dc      	cbnz	r4, 80058a2 <osMessageQueuePut+0x7e>
      yield = pdFALSE;
 800586a:	2300      	movs	r3, #0
 800586c:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800586e:	aa01      	add	r2, sp, #4
 8005870:	f000 fc88 	bl	8006184 <xQueueGenericSendFromISR>
 8005874:	2801      	cmp	r0, #1
 8005876:	d117      	bne.n	80058a8 <osMessageQueuePut+0x84>
        portYIELD_FROM_ISR (yield);
 8005878:	9801      	ldr	r0, [sp, #4]
 800587a:	b150      	cbz	r0, 8005892 <osMessageQueuePut+0x6e>
 800587c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005884:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005890:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005892:	b002      	add	sp, #8
 8005894:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005896:	f06f 0003 	mvn.w	r0, #3
 800589a:	e7fa      	b.n	8005892 <osMessageQueuePut+0x6e>
 800589c:	f06f 0003 	mvn.w	r0, #3
 80058a0:	e7f7      	b.n	8005892 <osMessageQueuePut+0x6e>
 80058a2:	f06f 0003 	mvn.w	r0, #3
 80058a6:	e7f4      	b.n	8005892 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
 80058a8:	f06f 0002 	mvn.w	r0, #2
 80058ac:	e7f1      	b.n	8005892 <osMessageQueuePut+0x6e>
      stat = osErrorParameter;
 80058ae:	f06f 0003 	mvn.w	r0, #3
 80058b2:	e7ee      	b.n	8005892 <osMessageQueuePut+0x6e>
 80058b4:	f06f 0003 	mvn.w	r0, #3
 80058b8:	e7eb      	b.n	8005892 <osMessageQueuePut+0x6e>
  stat = osOK;
 80058ba:	2000      	movs	r0, #0
 80058bc:	e7e9      	b.n	8005892 <osMessageQueuePut+0x6e>
 80058be:	bf00      	nop
 80058c0:	20001294 	.word	0x20001294

080058c4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80058c4:	b510      	push	{r4, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ca:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80058ce:	b9c3      	cbnz	r3, 8005902 <osMessageQueueGet+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d0:	f3ef 8310 	mrs	r3, PRIMASK
 80058d4:	b9ab      	cbnz	r3, 8005902 <osMessageQueueGet+0x3e>
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <osMessageQueueGet+0x98>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d00d      	beq.n	80058fa <osMessageQueueGet+0x36>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80058de:	b3a8      	cbz	r0, 800594c <osMessageQueueGet+0x88>
 80058e0:	b3b9      	cbz	r1, 8005952 <osMessageQueueGet+0x8e>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80058e2:	4622      	mov	r2, r4
 80058e4:	f000 fcb4 	bl	8006250 <xQueueReceive>
 80058e8:	2801      	cmp	r0, #1
 80058ea:	d035      	beq.n	8005958 <osMessageQueueGet+0x94>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	bf14      	ite	ne
 80058f0:	f06f 0001 	mvnne.w	r0, #1
 80058f4:	f06f 0002 	mvneq.w	r0, #2
 80058f8:	e01a      	b.n	8005930 <osMessageQueueGet+0x6c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058fa:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0ed      	beq.n	80058de <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005902:	b1b8      	cbz	r0, 8005934 <osMessageQueueGet+0x70>
 8005904:	b1c9      	cbz	r1, 800593a <osMessageQueueGet+0x76>
 8005906:	b9dc      	cbnz	r4, 8005940 <osMessageQueueGet+0x7c>
      yield = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800590c:	aa01      	add	r2, sp, #4
 800590e:	f000 fe44 	bl	800659a <xQueueReceiveFromISR>
 8005912:	2801      	cmp	r0, #1
 8005914:	d117      	bne.n	8005946 <osMessageQueueGet+0x82>
        portYIELD_FROM_ISR (yield);
 8005916:	9801      	ldr	r0, [sp, #4]
 8005918:	b150      	cbz	r0, 8005930 <osMessageQueueGet+0x6c>
 800591a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005922:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800592e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005930:	b002      	add	sp, #8
 8005932:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005934:	f06f 0003 	mvn.w	r0, #3
 8005938:	e7fa      	b.n	8005930 <osMessageQueueGet+0x6c>
 800593a:	f06f 0003 	mvn.w	r0, #3
 800593e:	e7f7      	b.n	8005930 <osMessageQueueGet+0x6c>
 8005940:	f06f 0003 	mvn.w	r0, #3
 8005944:	e7f4      	b.n	8005930 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
 8005946:	f06f 0002 	mvn.w	r0, #2
 800594a:	e7f1      	b.n	8005930 <osMessageQueueGet+0x6c>
      stat = osErrorParameter;
 800594c:	f06f 0003 	mvn.w	r0, #3
 8005950:	e7ee      	b.n	8005930 <osMessageQueueGet+0x6c>
 8005952:	f06f 0003 	mvn.w	r0, #3
 8005956:	e7eb      	b.n	8005930 <osMessageQueueGet+0x6c>
  stat = osOK;
 8005958:	2000      	movs	r0, #0
 800595a:	e7e9      	b.n	8005930 <osMessageQueueGet+0x6c>
 800595c:	20001294 	.word	0x20001294

08005960 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005960:	4b03      	ldr	r3, [pc, #12]	; (8005970 <vApplicationGetIdleTaskMemory+0x10>)
 8005962:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <vApplicationGetIdleTaskMemory+0x14>)
 8005966:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	6013      	str	r3, [r2, #0]
}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20001234 	.word	0x20001234
 8005974:	20001034 	.word	0x20001034

08005978 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <vApplicationGetTimerTaskMemory+0x10>)
 800597a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <vApplicationGetTimerTaskMemory+0x14>)
 800597e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	4770      	bx	lr
 8005988:	20001698 	.word	0x20001698
 800598c:	20001298 	.word	0x20001298

08005990 <xEventGroupCreateStatic>:
	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005990:	b180      	cbz	r0, 80059b4 <xEventGroupCreateStatic+0x24>
	{
 8005992:	b510      	push	{r4, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	4604      	mov	r4, r0
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005998:	2320      	movs	r3, #32
 800599a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800599c:	9b01      	ldr	r3, [sp, #4]
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d011      	beq.n	80059c6 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	e7fe      	b.n	80059b2 <xEventGroupCreateStatic+0x22>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 80059c4:	e7fe      	b.n	80059c4 <xEventGroupCreateStatic+0x34>
		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */

		if( pxEventBits != NULL )
		{
			pxEventBits->uxEventBits = 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80059cc:	f000 f8f4 	bl	8005bb8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80059d0:	2301      	movs	r3, #1
 80059d2:	7723      	strb	r3, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80059d4:	4620      	mov	r0, r4
 80059d6:	b002      	add	sp, #8
 80059d8:	bd10      	pop	{r4, pc}

080059da <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80059da:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80059dc:	2020      	movs	r0, #32
 80059de:	f002 f893 	bl	8007b08 <pvPortMalloc>

		if( pxEventBits != NULL )
 80059e2:	4604      	mov	r4, r0
 80059e4:	b128      	cbz	r0, 80059f2 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
 80059e6:	2500      	movs	r5, #0
 80059e8:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80059ec:	f000 f8e4 	bl	8005bb8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80059f0:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
 80059f2:	4620      	mov	r0, r4
 80059f4:	bd38      	pop	{r3, r4, r5, pc}

080059f6 <xEventGroupWaitBits>:
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80059f6:	b188      	cbz	r0, 8005a1c <xEventGroupWaitBits+0x26>
{
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	460c      	mov	r4, r1
 80059fe:	4616      	mov	r6, r2
 8005a00:	461d      	mov	r5, r3
 8005a02:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005a04:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005a08:	d011      	beq.n	8005a2e <xEventGroupWaitBits+0x38>
 8005a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	e7fe      	b.n	8005a1a <xEventGroupWaitBits+0x24>
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005a2c:	e7fe      	b.n	8005a2c <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8005a2e:	b941      	cbnz	r1, 8005a42 <xEventGroupWaitBits+0x4c>
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	e7fe      	b.n	8005a40 <xEventGroupWaitBits+0x4a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a42:	f001 fb99 	bl	8007178 <xTaskGetSchedulerState>
 8005a46:	b950      	cbnz	r0, 8005a5e <xEventGroupWaitBits+0x68>
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	b143      	cbz	r3, 8005a5e <xEventGroupWaitBits+0x68>
 8005a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	e7fe      	b.n	8005a5c <xEventGroupWaitBits+0x66>
	}
	#endif

	vTaskSuspendAll();
 8005a5e:	f001 f87d 	bl	8006b5c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005a62:	f8d7 8000 	ldr.w	r8, [r7]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005a66:	bb5d      	cbnz	r5, 8005ac0 <xEventGroupWaitBits+0xca>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005a68:	ea14 0f08 	tst.w	r4, r8
 8005a6c:	bf14      	ite	ne
 8005a6e:	2001      	movne	r0, #1
 8005a70:	2000      	moveq	r0, #0
		if( xWaitConditionMet != pdFALSE )
 8005a72:	bb58      	cbnz	r0, 8005acc <xEventGroupWaitBits+0xd6>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005a74:	9b06      	ldr	r3, [sp, #24]
 8005a76:	b36b      	cbz	r3, 8005ad4 <xEventGroupWaitBits+0xde>
			if( xClearOnExit != pdFALSE )
 8005a78:	1e31      	subs	r1, r6, #0
 8005a7a:	bf18      	it	ne
 8005a7c:	2101      	movne	r1, #1
 8005a7e:	0609      	lsls	r1, r1, #24
			if( xWaitForAllBits != pdFALSE )
 8005a80:	b10d      	cbz	r5, 8005a86 <xEventGroupWaitBits+0x90>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005a82:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005a86:	9a06      	ldr	r2, [sp, #24]
 8005a88:	4321      	orrs	r1, r4
 8005a8a:	1d38      	adds	r0, r7, #4
 8005a8c:	f001 fa48 	bl	8006f20 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 8005a90:	f001 f90c 	bl	8006cac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005a94:	b948      	cbnz	r0, 8005aaa <xEventGroupWaitBits+0xb4>
			portYIELD_WITHIN_API();
 8005a96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8005aaa:	f001 fc59 	bl	8007360 <uxTaskResetEventItemValue>
 8005aae:	4680      	mov	r8, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005ab0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005ab4:	d011      	beq.n	8005ada <xEventGroupWaitBits+0xe4>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005ab6:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
}
 8005aba:	4640      	mov	r0, r8
 8005abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ac0:	ea34 0308 	bics.w	r3, r4, r8
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2001      	moveq	r0, #1
 8005ac8:	2000      	movne	r0, #0
 8005aca:	e7d2      	b.n	8005a72 <xEventGroupWaitBits+0x7c>
			if( xClearOnExit != pdFALSE )
 8005acc:	b116      	cbz	r6, 8005ad4 <xEventGroupWaitBits+0xde>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005ace:	ea28 0404 	bic.w	r4, r8, r4
 8005ad2:	603c      	str	r4, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005ad4:	f001 f8ea 	bl	8006cac <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8005ad8:	e7ef      	b.n	8005aba <xEventGroupWaitBits+0xc4>
			taskENTER_CRITICAL();
 8005ada:	f001 fecb 	bl	8007874 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8005ade:	f8d7 8000 	ldr.w	r8, [r7]
	if( xWaitForAllBits == pdFALSE )
 8005ae2:	b965      	cbnz	r5, 8005afe <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005ae4:	ea14 0f08 	tst.w	r4, r8
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005aee:	b11b      	cbz	r3, 8005af8 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8005af0:	b116      	cbz	r6, 8005af8 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005af2:	ea28 0404 	bic.w	r4, r8, r4
 8005af6:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8005af8:	f001 fede 	bl	80078b8 <vPortExitCritical>
 8005afc:	e7db      	b.n	8005ab6 <xEventGroupWaitBits+0xc0>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005afe:	ea34 0308 	bics.w	r3, r4, r8
 8005b02:	bf0c      	ite	eq
 8005b04:	2301      	moveq	r3, #1
 8005b06:	2300      	movne	r3, #0
 8005b08:	e7f1      	b.n	8005aee <xEventGroupWaitBits+0xf8>

08005b0a <xEventGroupSetBits>:
	configASSERT( xEventGroup );
 8005b0a:	b178      	cbz	r0, 8005b2c <xEventGroupSetBits+0x22>
{
 8005b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b10:	460e      	mov	r6, r1
 8005b12:	4605      	mov	r5, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005b14:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005b18:	d011      	beq.n	8005b3e <xEventGroupSetBits+0x34>
 8005b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	e7fe      	b.n	8005b2a <xEventGroupSetBits+0x20>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005b3c:	e7fe      	b.n	8005b3c <xEventGroupSetBits+0x32>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b3e:	f100 070c 	add.w	r7, r0, #12
	vTaskSuspendAll();
 8005b42:	f001 f80b 	bl	8006b5c <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005b46:	692c      	ldr	r4, [r5, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005b48:	682b      	ldr	r3, [r5, #0]
 8005b4a:	4333      	orrs	r3, r6
 8005b4c:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8005b4e:	42a7      	cmp	r7, r4
 8005b50:	d118      	bne.n	8005b84 <xEventGroupSetBits+0x7a>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005b52:	682b      	ldr	r3, [r5, #0]
 8005b54:	ea23 0308 	bic.w	r3, r3, r8
 8005b58:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005b5a:	f001 f8a7 	bl	8006cac <xTaskResumeAll>
}
 8005b5e:	6828      	ldr	r0, [r5, #0]
 8005b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005b64:	6829      	ldr	r1, [r5, #0]
 8005b66:	ea32 0101 	bics.w	r1, r2, r1
 8005b6a:	d109      	bne.n	8005b80 <xEventGroupSetBits+0x76>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005b6c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
					uxBitsToClear |= uxBitsWaitedFor;
 8005b70:	bf18      	it	ne
 8005b72:	ea48 0802 	orrne.w	r8, r8, r2
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005b76:	6829      	ldr	r1, [r5, #0]
 8005b78:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005b7c:	f001 fa5e 	bl	800703c <vTaskRemoveFromUnorderedEventList>
		while( pxListItem != pxListEnd )
 8005b80:	42a7      	cmp	r7, r4
 8005b82:	d0e6      	beq.n	8005b52 <xEventGroupSetBits+0x48>
			pxNext = listGET_NEXT( pxListItem );
 8005b84:	4620      	mov	r0, r4
 8005b86:	6864      	ldr	r4, [r4, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005b88:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005b8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005b8e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005b92:	d1e7      	bne.n	8005b64 <xEventGroupSetBits+0x5a>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005b94:	6829      	ldr	r1, [r5, #0]
 8005b96:	420a      	tst	r2, r1
 8005b98:	d1e8      	bne.n	8005b6c <xEventGroupSetBits+0x62>
 8005b9a:	e7f1      	b.n	8005b80 <xEventGroupSetBits+0x76>

08005b9c <vEventGroupSetBitsCallback>:
{
 8005b9c:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005b9e:	f7ff ffb4 	bl	8005b0a <xEventGroupSetBits>
}
 8005ba2:	bd08      	pop	{r3, pc}

08005ba4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ba4:	b508      	push	{r3, lr}
 8005ba6:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005ba8:	460a      	mov	r2, r1
 8005baa:	4601      	mov	r1, r0
 8005bac:	4801      	ldr	r0, [pc, #4]	; (8005bb4 <xEventGroupSetBitsFromISR+0x10>)
 8005bae:	f001 fdf5 	bl	800779c <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005bb2:	bd08      	pop	{r3, pc}
 8005bb4:	08005b9d 	.word	0x08005b9d

08005bb8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bb8:	f100 0308 	add.w	r3, r0, #8
 8005bbc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bc6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bcc:	4770      	bx	lr

08005bce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bd2:	4770      	bx	lr

08005bd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bd4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bd6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bdc:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bde:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005be0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005be2:	6803      	ldr	r3, [r0, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	6003      	str	r3, [r0, #0]
}
 8005be8:	4770      	bx	lr

08005bea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bea:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bec:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bee:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005bf2:	d011      	beq.n	8005c18 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005bf4:	f100 0308 	add.w	r3, r0, #8
 8005bf8:	461c      	mov	r4, r3
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	42aa      	cmp	r2, r5
 8005c00:	d9fa      	bls.n	8005bf8 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c02:	6863      	ldr	r3, [r4, #4]
 8005c04:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c06:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c08:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c0a:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c0c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005c0e:	6803      	ldr	r3, [r0, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	6003      	str	r3, [r0, #0]
}
 8005c14:	bc30      	pop	{r4, r5}
 8005c16:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c18:	6904      	ldr	r4, [r0, #16]
 8005c1a:	e7f2      	b.n	8005c02 <vListInsert+0x18>

08005c1c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c1c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c1e:	6841      	ldr	r1, [r0, #4]
 8005c20:	6882      	ldr	r2, [r0, #8]
 8005c22:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c24:	6841      	ldr	r1, [r0, #4]
 8005c26:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c2c:	bf04      	itt	eq
 8005c2e:	6882      	ldreq	r2, [r0, #8]
 8005c30:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005c32:	2200      	movs	r2, #0
 8005c34:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	3a01      	subs	r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c3c:	6818      	ldr	r0, [r3, #0]
}
 8005c3e:	4770      	bx	lr

08005c40 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c44:	f001 fe16 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c48:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005c4a:	f001 fe35 	bl	80078b8 <vPortExitCritical>

	return xReturn;
}
 8005c4e:	fab4 f084 	clz	r0, r4
 8005c52:	0940      	lsrs	r0, r0, #5
 8005c54:	bd10      	pop	{r4, pc}

08005c56 <prvCopyDataToQueue>:
{
 8005c56:	b570      	push	{r4, r5, r6, lr}
 8005c58:	4604      	mov	r4, r0
 8005c5a:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c5c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c5e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005c60:	b95a      	cbnz	r2, 8005c7a <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c62:	6803      	ldr	r3, [r0, #0]
 8005c64:	b11b      	cbz	r3, 8005c6e <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005c66:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c68:	3601      	adds	r6, #1
 8005c6a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c6e:	6840      	ldr	r0, [r0, #4]
 8005c70:	f001 fade 	bl	8007230 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	6063      	str	r3, [r4, #4]
 8005c78:	e7f6      	b.n	8005c68 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005c7a:	b96d      	cbnz	r5, 8005c98 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c7c:	6880      	ldr	r0, [r0, #8]
 8005c7e:	f002 fa32 	bl	80080e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005c86:	4413      	add	r3, r2
 8005c88:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d319      	bcc.n	8005cc4 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005c94:	4628      	mov	r0, r5
 8005c96:	e7e7      	b.n	8005c68 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c98:	68c0      	ldr	r0, [r0, #12]
 8005c9a:	f002 fa24 	bl	80080e6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ca0:	4251      	negs	r1, r2
 8005ca2:	68e3      	ldr	r3, [r4, #12]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d202      	bcs.n	8005cb4 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	440b      	add	r3, r1
 8005cb2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005cb4:	2d02      	cmp	r5, #2
 8005cb6:	d001      	beq.n	8005cbc <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e7d5      	b.n	8005c68 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cbc:	b126      	cbz	r6, 8005cc8 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005cbe:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e7d1      	b.n	8005c68 <prvCopyDataToQueue+0x12>
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	e7cf      	b.n	8005c68 <prvCopyDataToQueue+0x12>
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e7cd      	b.n	8005c68 <prvCopyDataToQueue+0x12>

08005ccc <prvCopyDataFromQueue>:
{
 8005ccc:	b508      	push	{r3, lr}
 8005cce:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cd0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005cd2:	b162      	cbz	r2, 8005cee <prvCopyDataFromQueue+0x22>
 8005cd4:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005cd6:	68d9      	ldr	r1, [r3, #12]
 8005cd8:	4411      	add	r1, r2
 8005cda:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cdc:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005ce0:	4561      	cmp	r1, ip
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005ce2:	bf24      	itt	cs
 8005ce4:	6819      	ldrcs	r1, [r3, #0]
 8005ce6:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005ce8:	68d9      	ldr	r1, [r3, #12]
 8005cea:	f002 f9fc 	bl	80080e6 <memcpy>
}
 8005cee:	bd08      	pop	{r3, pc}

08005cf0 <prvUnlockQueue>:
{
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8005cf4:	f001 fdbe 	bl	8007874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005cf8:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005cfc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfe:	2c00      	cmp	r4, #0
 8005d00:	dd0f      	ble.n	8005d22 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d02:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8005d06:	e002      	b.n	8005d0e <prvUnlockQueue+0x1e>
			--cTxLock;
 8005d08:	3c01      	subs	r4, #1
 8005d0a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0c:	b14c      	cbz	r4, 8005d22 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d10:	b13b      	cbz	r3, 8005d22 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d12:	4630      	mov	r0, r6
 8005d14:	f001 f94e 	bl	8006fb4 <xTaskRemoveFromEventList>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d0f5      	beq.n	8005d08 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8005d1c:	f001 fa20 	bl	8007160 <vTaskMissedYield>
 8005d20:	e7f2      	b.n	8005d08 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005d22:	23ff      	movs	r3, #255	; 0xff
 8005d24:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005d28:	f001 fdc6 	bl	80078b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d2c:	f001 fda2 	bl	8007874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005d30:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8005d34:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d36:	2c00      	cmp	r4, #0
 8005d38:	dd0f      	ble.n	8005d5a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d3a:	f105 0610 	add.w	r6, r5, #16
 8005d3e:	e002      	b.n	8005d46 <prvUnlockQueue+0x56>
				--cRxLock;
 8005d40:	3c01      	subs	r4, #1
 8005d42:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d44:	b14c      	cbz	r4, 8005d5a <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d46:	692b      	ldr	r3, [r5, #16]
 8005d48:	b13b      	cbz	r3, 8005d5a <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f001 f932 	bl	8006fb4 <xTaskRemoveFromEventList>
 8005d50:	2800      	cmp	r0, #0
 8005d52:	d0f5      	beq.n	8005d40 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8005d54:	f001 fa04 	bl	8007160 <vTaskMissedYield>
 8005d58:	e7f2      	b.n	8005d40 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8005d5a:	23ff      	movs	r3, #255	; 0xff
 8005d5c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005d60:	f001 fdaa 	bl	80078b8 <vPortExitCritical>
}
 8005d64:	bd70      	pop	{r4, r5, r6, pc}

08005d66 <xQueueGenericReset>:
{
 8005d66:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005d68:	b1e0      	cbz	r0, 8005da4 <xQueueGenericReset+0x3e>
 8005d6a:	460d      	mov	r5, r1
 8005d6c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005d6e:	f001 fd81 	bl	8007874 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d72:	6822      	ldr	r2, [r4, #0]
 8005d74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005d76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	18d0      	adds	r0, r2, r3
 8005d7e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d80:	2000      	movs	r0, #0
 8005d82:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d84:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d86:	1a5b      	subs	r3, r3, r1
 8005d88:	441a      	add	r2, r3
 8005d8a:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d8c:	23ff      	movs	r3, #255	; 0xff
 8005d8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005d96:	b9fd      	cbnz	r5, 8005dd8 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	b963      	cbnz	r3, 8005db6 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005d9c:	f001 fd8c 	bl	80078b8 <vPortExitCritical>
}
 8005da0:	2001      	movs	r0, #1
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005db4:	e7fe      	b.n	8005db4 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db6:	f104 0010 	add.w	r0, r4, #16
 8005dba:	f001 f8fb 	bl	8006fb4 <xTaskRemoveFromEventList>
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d0ec      	beq.n	8005d9c <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8005dc2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	e7e1      	b.n	8005d9c <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005dd8:	f104 0010 	add.w	r0, r4, #16
 8005ddc:	f7ff feec 	bl	8005bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005de0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005de4:	f7ff fee8 	bl	8005bb8 <vListInitialise>
 8005de8:	e7d8      	b.n	8005d9c <xQueueGenericReset+0x36>

08005dea <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dea:	b940      	cbnz	r0, 8005dfe <xQueueGenericCreateStatic+0x14>
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	e7fe      	b.n	8005dfc <xQueueGenericCreateStatic+0x12>
	{
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	461c      	mov	r4, r3
 8005e04:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8005e06:	b154      	cbz	r4, 8005e1e <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e08:	b192      	cbz	r2, 8005e30 <xQueueGenericCreateStatic+0x46>
 8005e0a:	b9d9      	cbnz	r1, 8005e44 <xQueueGenericCreateStatic+0x5a>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	e7fe      	b.n	8005e1c <xQueueGenericCreateStatic+0x32>
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005e2e:	e7fe      	b.n	8005e2e <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e30:	b1b1      	cbz	r1, 8005e60 <xQueueGenericCreateStatic+0x76>
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	e7fe      	b.n	8005e42 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e44:	2050      	movs	r0, #80	; 0x50
 8005e46:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e48:	9801      	ldr	r0, [sp, #4]
 8005e4a:	2850      	cmp	r0, #80	; 0x50
 8005e4c:	d00e      	beq.n	8005e6c <xQueueGenericCreateStatic+0x82>
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	e7fe      	b.n	8005e5e <xQueueGenericCreateStatic+0x74>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e60:	2250      	movs	r2, #80	; 0x50
 8005e62:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e64:	9a01      	ldr	r2, [sp, #4]
 8005e66:	2a50      	cmp	r2, #80	; 0x50
 8005e68:	d1f1      	bne.n	8005e4e <xQueueGenericCreateStatic+0x64>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e6a:	4622      	mov	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
 8005e72:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005e74:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e76:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e78:	4601      	mov	r1, r0
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff ff73 	bl	8005d66 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005e80:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005e84:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8005e88:	4620      	mov	r0, r4
 8005e8a:	b002      	add	sp, #8
 8005e8c:	bd10      	pop	{r4, pc}

08005e8e <xQueueGenericCreate>:
	{
 8005e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e90:	b940      	cbnz	r0, 8005ea4 <xQueueGenericCreate+0x16>
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	e7fe      	b.n	8005ea2 <xQueueGenericCreate+0x14>
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	4616      	mov	r6, r2
 8005ea8:	4607      	mov	r7, r0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eaa:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005eae:	3050      	adds	r0, #80	; 0x50
 8005eb0:	f001 fe2a 	bl	8007b08 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	b170      	cbz	r0, 8005ed6 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ebe:	b164      	cbz	r4, 8005eda <xQueueGenericCreate+0x4c>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005ec0:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ec4:	602b      	str	r3, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005ec6:	63ef      	str	r7, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ec8:	642c      	str	r4, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005eca:	2101      	movs	r1, #1
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f7ff ff4a 	bl	8005d66 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005ed2:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
	}
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005eda:	4603      	mov	r3, r0
 8005edc:	e7f2      	b.n	8005ec4 <xQueueGenericCreate+0x36>

08005ede <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8005ede:	b940      	cbnz	r0, 8005ef2 <xQueueCreateCountingSemaphoreStatic+0x14>
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	e7fe      	b.n	8005ef0 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8005ef2:	b510      	push	{r4, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005ef8:	4288      	cmp	r0, r1
 8005efa:	d208      	bcs.n	8005f0e <xQueueCreateCountingSemaphoreStatic+0x30>
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	e7fe      	b.n	8005f0c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f0e:	2302      	movs	r3, #2
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	2200      	movs	r2, #0
 8005f16:	4611      	mov	r1, r2
 8005f18:	f7ff ff67 	bl	8005dea <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8005f1c:	b100      	cbz	r0, 8005f20 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f1e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005f20:	b002      	add	sp, #8
 8005f22:	bd10      	pop	{r4, pc}

08005f24 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8005f24:	b940      	cbnz	r0, 8005f38 <xQueueCreateCountingSemaphore+0x14>
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	e7fe      	b.n	8005f36 <xQueueCreateCountingSemaphore+0x12>
	{
 8005f38:	b510      	push	{r4, lr}
 8005f3a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f3c:	4288      	cmp	r0, r1
 8005f3e:	d208      	bcs.n	8005f52 <xQueueCreateCountingSemaphore+0x2e>
 8005f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	e7fe      	b.n	8005f50 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005f52:	2202      	movs	r2, #2
 8005f54:	2100      	movs	r1, #0
 8005f56:	f7ff ff9a 	bl	8005e8e <xQueueGenericCreate>
		if( xHandle != NULL )
 8005f5a:	b100      	cbz	r0, 8005f5e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005f5c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8005f5e:	bd10      	pop	{r4, pc}

08005f60 <xQueueGenericSend>:
{
 8005f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f64:	b085      	sub	sp, #20
 8005f66:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005f68:	b188      	cbz	r0, 8005f8e <xQueueGenericSend+0x2e>
 8005f6a:	460e      	mov	r6, r1
 8005f6c:	461d      	mov	r5, r3
 8005f6e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f70:	b1b1      	cbz	r1, 8005fa0 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f72:	2d02      	cmp	r5, #2
 8005f74:	d120      	bne.n	8005fb8 <xQueueGenericSend+0x58>
 8005f76:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d01d      	beq.n	8005fb8 <xQueueGenericSend+0x58>
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericSend+0x2c>
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005f9e:	e7fe      	b.n	8005f9e <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fa0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0e5      	beq.n	8005f72 <xQueueGenericSend+0x12>
 8005fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	e7fe      	b.n	8005fb6 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fb8:	f001 f8de 	bl	8007178 <xTaskGetSchedulerState>
 8005fbc:	b950      	cbnz	r0, 8005fd4 <xQueueGenericSend+0x74>
 8005fbe:	9b01      	ldr	r3, [sp, #4]
 8005fc0:	b163      	cbz	r3, 8005fdc <xQueueGenericSend+0x7c>
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	e7fe      	b.n	8005fd2 <xQueueGenericSend+0x72>
 8005fd4:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005fd8:	2700      	movs	r7, #0
 8005fda:	e03a      	b.n	8006052 <xQueueGenericSend+0xf2>
 8005fdc:	f04f 0800 	mov.w	r8, #0
 8005fe0:	e7fa      	b.n	8005fd8 <xQueueGenericSend+0x78>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff fe35 	bl	8005c56 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fee:	b983      	cbnz	r3, 8006012 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8005ff0:	b148      	cbz	r0, 8006006 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8005ff2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ffa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006006:	f001 fc57 	bl	80078b8 <vPortExitCritical>
				return pdPASS;
 800600a:	2001      	movs	r0, #1
}
 800600c:	b005      	add	sp, #20
 800600e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006012:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006016:	f000 ffcd 	bl	8006fb4 <xTaskRemoveFromEventList>
 800601a:	2800      	cmp	r0, #0
 800601c:	d0f3      	beq.n	8006006 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 800601e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006026:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	e7e8      	b.n	8006006 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8006034:	f001 fc40 	bl	80078b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006038:	2000      	movs	r0, #0
 800603a:	e7e7      	b.n	800600c <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800603c:	a802      	add	r0, sp, #8
 800603e:	f001 f841 	bl	80070c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006042:	e014      	b.n	800606e <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff fe53 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800604a:	f000 fe2f 	bl	8006cac <xTaskResumeAll>
 800604e:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8006052:	f001 fc0f 	bl	8007874 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006056:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800605a:	429a      	cmp	r2, r3
 800605c:	d3c1      	bcc.n	8005fe2 <xQueueGenericSend+0x82>
 800605e:	2d02      	cmp	r5, #2
 8006060:	d0bf      	beq.n	8005fe2 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006062:	9b01      	ldr	r3, [sp, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0e5      	beq.n	8006034 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8006068:	f1b8 0f00 	cmp.w	r8, #0
 800606c:	d0e6      	beq.n	800603c <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 800606e:	f001 fc23 	bl	80078b8 <vPortExitCritical>
		vTaskSuspendAll();
 8006072:	f000 fd73 	bl	8006b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006076:	f001 fbfd 	bl	8007874 <vPortEnterCritical>
 800607a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800607e:	b252      	sxtb	r2, r2
 8006080:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006084:	bf08      	it	eq
 8006086:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800608a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800608e:	b252      	sxtb	r2, r2
 8006090:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006094:	bf08      	it	eq
 8006096:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800609a:	f001 fc0d 	bl	80078b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800609e:	a901      	add	r1, sp, #4
 80060a0:	a802      	add	r0, sp, #8
 80060a2:	f001 f81b 	bl	80070dc <xTaskCheckForTimeOut>
 80060a6:	bb00      	cbnz	r0, 80060ea <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060a8:	f001 fbe4 	bl	8007874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060ac:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 80060b0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80060b4:	f001 fc00 	bl	80078b8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80060b8:	45c1      	cmp	r9, r8
 80060ba:	d1c3      	bne.n	8006044 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80060bc:	9901      	ldr	r1, [sp, #4]
 80060be:	f104 0010 	add.w	r0, r4, #16
 80060c2:	f000 ff15 	bl	8006ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff fe12 	bl	8005cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060cc:	f000 fdee 	bl	8006cac <xTaskResumeAll>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d1bc      	bne.n	800604e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 80060d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	e7b1      	b.n	800604e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7ff fe00 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060f0:	f000 fddc 	bl	8006cac <xTaskResumeAll>
			return errQUEUE_FULL;
 80060f4:	2000      	movs	r0, #0
 80060f6:	e789      	b.n	800600c <xQueueGenericSend+0xac>

080060f8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80060f8:	b148      	cbz	r0, 800610e <prvInitialiseMutex+0x16>
	{
 80060fa:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80060fc:	2100      	movs	r1, #0
 80060fe:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006100:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006102:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006104:	460b      	mov	r3, r1
 8006106:	460a      	mov	r2, r1
 8006108:	f7ff ff2a 	bl	8005f60 <xQueueGenericSend>
	}
 800610c:	bd08      	pop	{r3, pc}
 800610e:	4770      	bx	lr

08006110 <xQueueCreateMutex>:
	{
 8006110:	b510      	push	{r4, lr}
 8006112:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006114:	2100      	movs	r1, #0
 8006116:	2001      	movs	r0, #1
 8006118:	f7ff feb9 	bl	8005e8e <xQueueGenericCreate>
 800611c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800611e:	f7ff ffeb 	bl	80060f8 <prvInitialiseMutex>
	}
 8006122:	4620      	mov	r0, r4
 8006124:	bd10      	pop	{r4, pc}

08006126 <xQueueCreateMutexStatic>:
	{
 8006126:	b510      	push	{r4, lr}
 8006128:	b082      	sub	sp, #8
 800612a:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800612c:	9000      	str	r0, [sp, #0]
 800612e:	2200      	movs	r2, #0
 8006130:	4611      	mov	r1, r2
 8006132:	2001      	movs	r0, #1
 8006134:	f7ff fe59 	bl	8005dea <xQueueGenericCreateStatic>
 8006138:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800613a:	f7ff ffdd 	bl	80060f8 <prvInitialiseMutex>
	}
 800613e:	4620      	mov	r0, r4
 8006140:	b002      	add	sp, #8
 8006142:	bd10      	pop	{r4, pc}

08006144 <xQueueGiveMutexRecursive>:
	{
 8006144:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006146:	b138      	cbz	r0, 8006158 <xQueueGiveMutexRecursive+0x14>
 8006148:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800614a:	6845      	ldr	r5, [r0, #4]
 800614c:	f001 f80e 	bl	800716c <xTaskGetCurrentTaskHandle>
 8006150:	4285      	cmp	r5, r0
 8006152:	d00a      	beq.n	800616a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8006154:	2000      	movs	r0, #0
	}
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8006168:	e7fe      	b.n	8006168 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	3b01      	subs	r3, #1
 800616e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006170:	b10b      	cbz	r3, 8006176 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8006172:	2001      	movs	r0, #1
		return xReturn;
 8006174:	e7ef      	b.n	8006156 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006176:	461a      	mov	r2, r3
 8006178:	4619      	mov	r1, r3
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fef0 	bl	8005f60 <xQueueGenericSend>
			xReturn = pdPASS;
 8006180:	2001      	movs	r0, #1
 8006182:	e7e8      	b.n	8006156 <xQueueGiveMutexRecursive+0x12>

08006184 <xQueueGenericSendFromISR>:
{
 8006184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8006188:	b190      	cbz	r0, 80061b0 <xQueueGenericSendFromISR+0x2c>
 800618a:	460f      	mov	r7, r1
 800618c:	4616      	mov	r6, r2
 800618e:	461c      	mov	r4, r3
 8006190:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006192:	b1b1      	cbz	r1, 80061c2 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006194:	2c02      	cmp	r4, #2
 8006196:	d120      	bne.n	80061da <xQueueGenericSendFromISR+0x56>
 8006198:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800619a:	2b01      	cmp	r3, #1
 800619c:	d01d      	beq.n	80061da <xQueueGenericSendFromISR+0x56>
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	e7fe      	b.n	80061ae <xQueueGenericSendFromISR+0x2a>
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80061c0:	e7fe      	b.n	80061c0 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d0e5      	beq.n	8006194 <xQueueGenericSendFromISR+0x10>
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061da:	f001 fc39 	bl	8007a50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80061de:	f3ef 8811 	mrs	r8, BASEPRI
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061f2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80061f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d306      	bcc.n	8006208 <xQueueGenericSendFromISR+0x84>
 80061fa:	2c02      	cmp	r4, #2
 80061fc:	d004      	beq.n	8006208 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80061fe:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006200:	f388 8811 	msr	BASEPRI, r8
}
 8006204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8006208:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 800620c:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006210:	4622      	mov	r2, r4
 8006212:	4639      	mov	r1, r7
 8006214:	4628      	mov	r0, r5
 8006216:	f7ff fd1e 	bl	8005c56 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800621a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800621e:	d006      	beq.n	800622e <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006220:	f109 0301 	add.w	r3, r9, #1
 8006224:	b25b      	sxtb	r3, r3
 8006226:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800622a:	2001      	movs	r0, #1
 800622c:	e7e8      	b.n	8006200 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800622e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006230:	b90b      	cbnz	r3, 8006236 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8006232:	2001      	movs	r0, #1
 8006234:	e7e4      	b.n	8006200 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006236:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800623a:	f000 febb 	bl	8006fb4 <xTaskRemoveFromEventList>
 800623e:	b118      	cbz	r0, 8006248 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006240:	b126      	cbz	r6, 800624c <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006242:	2001      	movs	r0, #1
 8006244:	6030      	str	r0, [r6, #0]
 8006246:	e7db      	b.n	8006200 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8006248:	2001      	movs	r0, #1
 800624a:	e7d9      	b.n	8006200 <xQueueGenericSendFromISR+0x7c>
 800624c:	2001      	movs	r0, #1
 800624e:	e7d7      	b.n	8006200 <xQueueGenericSendFromISR+0x7c>

08006250 <xQueueReceive>:
{
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006258:	b180      	cbz	r0, 800627c <xQueueReceive+0x2c>
 800625a:	460e      	mov	r6, r1
 800625c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800625e:	b1b1      	cbz	r1, 800628e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006260:	f000 ff8a 	bl	8007178 <xTaskGetSchedulerState>
 8006264:	b9f8      	cbnz	r0, 80062a6 <xQueueReceive+0x56>
 8006266:	9b01      	ldr	r3, [sp, #4]
 8006268:	b30b      	cbz	r3, 80062ae <xQueueReceive+0x5e>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	e7fe      	b.n	800627a <xQueueReceive+0x2a>
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800628c:	e7fe      	b.n	800628c <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800628e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0e5      	beq.n	8006260 <xQueueReceive+0x10>
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	e7fe      	b.n	80062a4 <xQueueReceive+0x54>
 80062a6:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 80062aa:	2700      	movs	r7, #0
 80062ac:	e03b      	b.n	8006326 <xQueueReceive+0xd6>
 80062ae:	f04f 0800 	mov.w	r8, #0
 80062b2:	e7fa      	b.n	80062aa <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062b4:	4631      	mov	r1, r6
 80062b6:	4620      	mov	r0, r4
 80062b8:	f7ff fd08 	bl	8005ccc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062bc:	3d01      	subs	r5, #1
 80062be:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b92b      	cbnz	r3, 80062d0 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 80062c4:	f001 faf8 	bl	80078b8 <vPortExitCritical>
				return pdPASS;
 80062c8:	2001      	movs	r0, #1
}
 80062ca:	b004      	add	sp, #16
 80062cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d0:	f104 0010 	add.w	r0, r4, #16
 80062d4:	f000 fe6e 	bl	8006fb4 <xTaskRemoveFromEventList>
 80062d8:	2800      	cmp	r0, #0
 80062da:	d0f3      	beq.n	80062c4 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 80062dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	e7e8      	b.n	80062c4 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 80062f2:	f001 fae1 	bl	80078b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80062f6:	2000      	movs	r0, #0
 80062f8:	e7e7      	b.n	80062ca <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062fa:	a802      	add	r0, sp, #8
 80062fc:	f000 fee2 	bl	80070c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006300:	e01c      	b.n	800633c <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8006302:	4620      	mov	r0, r4
 8006304:	f7ff fcf4 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006308:	f000 fcd0 	bl	8006cac <xTaskResumeAll>
 800630c:	e009      	b.n	8006322 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 800630e:	4620      	mov	r0, r4
 8006310:	f7ff fcee 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006314:	f000 fcca 	bl	8006cac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006318:	4620      	mov	r0, r4
 800631a:	f7ff fc91 	bl	8005c40 <prvIsQueueEmpty>
 800631e:	2800      	cmp	r0, #0
 8006320:	d146      	bne.n	80063b0 <xQueueReceive+0x160>
 8006322:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8006326:	f001 faa5 	bl	8007874 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800632a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800632c:	2d00      	cmp	r5, #0
 800632e:	d1c1      	bne.n	80062b4 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006330:	9b01      	ldr	r3, [sp, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0dd      	beq.n	80062f2 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 8006336:	f1b8 0f00 	cmp.w	r8, #0
 800633a:	d0de      	beq.n	80062fa <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 800633c:	f001 fabc 	bl	80078b8 <vPortExitCritical>
		vTaskSuspendAll();
 8006340:	f000 fc0c 	bl	8006b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006344:	f001 fa96 	bl	8007874 <vPortEnterCritical>
 8006348:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800634c:	b25b      	sxtb	r3, r3
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	bf08      	it	eq
 8006354:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8006358:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800635c:	b25b      	sxtb	r3, r3
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	bf08      	it	eq
 8006364:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8006368:	f001 faa6 	bl	80078b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800636c:	a901      	add	r1, sp, #4
 800636e:	a802      	add	r0, sp, #8
 8006370:	f000 feb4 	bl	80070dc <xTaskCheckForTimeOut>
 8006374:	2800      	cmp	r0, #0
 8006376:	d1ca      	bne.n	800630e <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006378:	4620      	mov	r0, r4
 800637a:	f7ff fc61 	bl	8005c40 <prvIsQueueEmpty>
 800637e:	2800      	cmp	r0, #0
 8006380:	d0bf      	beq.n	8006302 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006382:	9901      	ldr	r1, [sp, #4]
 8006384:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006388:	f000 fdb2 	bl	8006ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff fcaf 	bl	8005cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006392:	f000 fc8b 	bl	8006cac <xTaskResumeAll>
 8006396:	2800      	cmp	r0, #0
 8006398:	d1c3      	bne.n	8006322 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 800639a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800639e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	e7b8      	b.n	8006322 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 80063b0:	2000      	movs	r0, #0
 80063b2:	e78a      	b.n	80062ca <xQueueReceive+0x7a>

080063b4 <xQueueSemaphoreTake>:
{
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	b085      	sub	sp, #20
 80063b8:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80063ba:	b158      	cbz	r0, 80063d4 <xQueueSemaphoreTake+0x20>
 80063bc:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80063be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063c0:	b18b      	cbz	r3, 80063e6 <xQueueSemaphoreTake+0x32>
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	e7fe      	b.n	80063d2 <xQueueSemaphoreTake+0x1e>
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80063e4:	e7fe      	b.n	80063e4 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063e6:	f000 fec7 	bl	8007178 <xTaskGetSchedulerState>
 80063ea:	b950      	cbnz	r0, 8006402 <xQueueSemaphoreTake+0x4e>
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	b163      	cbz	r3, 800640a <xQueueSemaphoreTake+0x56>
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	e7fe      	b.n	8006400 <xQueueSemaphoreTake+0x4c>
 8006402:	2600      	movs	r6, #0
 8006404:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 8006406:	2500      	movs	r5, #0
 8006408:	e04e      	b.n	80064a8 <xQueueSemaphoreTake+0xf4>
 800640a:	2600      	movs	r6, #0
 800640c:	4637      	mov	r7, r6
 800640e:	e7fa      	b.n	8006406 <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006410:	3b01      	subs	r3, #1
 8006412:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	b13b      	cbz	r3, 8006428 <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	b94b      	cbnz	r3, 8006430 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 800641c:	f001 fa4c 	bl	80078b8 <vPortExitCritical>
				return pdPASS;
 8006420:	2601      	movs	r6, #1
}
 8006422:	4630      	mov	r0, r6
 8006424:	b005      	add	sp, #20
 8006426:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006428:	f000 ffa6 	bl	8007378 <pvTaskIncrementMutexHeldCount>
 800642c:	6060      	str	r0, [r4, #4]
 800642e:	e7f3      	b.n	8006418 <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006430:	f104 0010 	add.w	r0, r4, #16
 8006434:	f000 fdbe 	bl	8006fb4 <xTaskRemoveFromEventList>
 8006438:	2800      	cmp	r0, #0
 800643a:	d0ef      	beq.n	800641c <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800643c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006444:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	e7e4      	b.n	800641c <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006452:	b146      	cbz	r6, 8006466 <xQueueSemaphoreTake+0xb2>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	e7fe      	b.n	8006464 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 8006466:	f001 fa27 	bl	80078b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800646a:	e7da      	b.n	8006422 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800646c:	a802      	add	r0, sp, #8
 800646e:	f000 fe29 	bl	80070c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006472:	e023      	b.n	80064bc <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 8006474:	f001 f9fe 	bl	8007874 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006478:	6860      	ldr	r0, [r4, #4]
 800647a:	f000 fe8d 	bl	8007198 <xTaskPriorityInherit>
 800647e:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8006480:	f001 fa1a 	bl	80078b8 <vPortExitCritical>
 8006484:	e040      	b.n	8006508 <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fc32 	bl	8005cf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800648c:	f000 fc0e 	bl	8006cac <xTaskResumeAll>
 8006490:	e009      	b.n	80064a6 <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 8006492:	4620      	mov	r0, r4
 8006494:	f7ff fc2c 	bl	8005cf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006498:	f000 fc08 	bl	8006cac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fbcf 	bl	8005c40 <prvIsQueueEmpty>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d147      	bne.n	8006536 <xQueueSemaphoreTake+0x182>
 80064a6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80064a8:	f001 f9e4 	bl	8007874 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80064ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1ae      	bne.n	8006410 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80064b2:	9b01      	ldr	r3, [sp, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0cc      	beq.n	8006452 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 80064b8:	2f00      	cmp	r7, #0
 80064ba:	d0d7      	beq.n	800646c <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 80064bc:	f001 f9fc 	bl	80078b8 <vPortExitCritical>
		vTaskSuspendAll();
 80064c0:	f000 fb4c 	bl	8006b5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c4:	f001 f9d6 	bl	8007874 <vPortEnterCritical>
 80064c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d2:	bf08      	it	eq
 80064d4:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 80064d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80064dc:	b25b      	sxtb	r3, r3
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	bf08      	it	eq
 80064e4:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 80064e8:	f001 f9e6 	bl	80078b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ec:	a901      	add	r1, sp, #4
 80064ee:	a802      	add	r0, sp, #8
 80064f0:	f000 fdf4 	bl	80070dc <xTaskCheckForTimeOut>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d1cc      	bne.n	8006492 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7ff fba1 	bl	8005c40 <prvIsQueueEmpty>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d0c1      	beq.n	8006486 <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0b5      	beq.n	8006474 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006508:	9901      	ldr	r1, [sp, #4]
 800650a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800650e:	f000 fcef 	bl	8006ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006512:	4620      	mov	r0, r4
 8006514:	f7ff fbec 	bl	8005cf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006518:	f000 fbc8 	bl	8006cac <xTaskResumeAll>
 800651c:	2800      	cmp	r0, #0
 800651e:	d1c2      	bne.n	80064a6 <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 8006520:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006528:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	e7b7      	b.n	80064a6 <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 8006536:	2e00      	cmp	r6, #0
 8006538:	f43f af73 	beq.w	8006422 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 800653c:	f001 f99a 	bl	8007874 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006540:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006542:	b119      	cbz	r1, 800654c <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006544:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006546:	6819      	ldr	r1, [r3, #0]
 8006548:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800654c:	6860      	ldr	r0, [r4, #4]
 800654e:	f000 feb7 	bl	80072c0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006552:	f001 f9b1 	bl	80078b8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006556:	2600      	movs	r6, #0
 8006558:	e763      	b.n	8006422 <xQueueSemaphoreTake+0x6e>

0800655a <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800655a:	b180      	cbz	r0, 800657e <xQueueTakeMutexRecursive+0x24>
	{
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	460c      	mov	r4, r1
 8006560:	4605      	mov	r5, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006562:	6846      	ldr	r6, [r0, #4]
 8006564:	f000 fe02 	bl	800716c <xTaskGetCurrentTaskHandle>
 8006568:	4286      	cmp	r6, r0
 800656a:	d011      	beq.n	8006590 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800656c:	4621      	mov	r1, r4
 800656e:	4628      	mov	r0, r5
 8006570:	f7ff ff20 	bl	80063b4 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006574:	b180      	cbz	r0, 8006598 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.uxRecursiveCallCount )++;
 8006576:	68eb      	ldr	r3, [r5, #12]
 8006578:	3301      	adds	r3, #1
 800657a:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800657c:	e00c      	b.n	8006598 <xQueueTakeMutexRecursive+0x3e>
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800658e:	e7fe      	b.n	800658e <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.uxRecursiveCallCount )++;
 8006590:	68eb      	ldr	r3, [r5, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 8006596:	2001      	movs	r0, #1
	}
 8006598:	bd70      	pop	{r4, r5, r6, pc}

0800659a <xQueueReceiveFromISR>:
{
 800659a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800659e:	b1b0      	cbz	r0, 80065ce <xQueueReceiveFromISR+0x34>
 80065a0:	460d      	mov	r5, r1
 80065a2:	4690      	mov	r8, r2
 80065a4:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a6:	b1d9      	cbz	r1, 80065e0 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065a8:	f001 fa52 	bl	8007a50 <vPortValidateInterruptPriority>
	__asm volatile
 80065ac:	f3ef 8711 	mrs	r7, BASEPRI
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065c2:	b9ce      	cbnz	r6, 80065f8 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80065c4:	2000      	movs	r0, #0
	__asm volatile
 80065c6:	f387 8811 	msr	BASEPRI, r7
}
 80065ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80065de:	e7fe      	b.n	80065de <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0e0      	beq.n	80065a8 <xQueueReceiveFromISR+0xe>
 80065e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	e7fe      	b.n	80065f6 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80065f8:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80065fc:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006600:	4629      	mov	r1, r5
 8006602:	4620      	mov	r0, r4
 8006604:	f7ff fb62 	bl	8005ccc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006608:	1e73      	subs	r3, r6, #1
 800660a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800660c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006610:	d006      	beq.n	8006620 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006612:	f109 0301 	add.w	r3, r9, #1
 8006616:	b25b      	sxtb	r3, r3
 8006618:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800661c:	2001      	movs	r0, #1
 800661e:	e7d2      	b.n	80065c6 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	b90b      	cbnz	r3, 8006628 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8006624:	2001      	movs	r0, #1
 8006626:	e7ce      	b.n	80065c6 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006628:	f104 0010 	add.w	r0, r4, #16
 800662c:	f000 fcc2 	bl	8006fb4 <xTaskRemoveFromEventList>
 8006630:	b130      	cbz	r0, 8006640 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8006632:	f1b8 0f00 	cmp.w	r8, #0
 8006636:	d005      	beq.n	8006644 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006638:	2001      	movs	r0, #1
 800663a:	f8c8 0000 	str.w	r0, [r8]
 800663e:	e7c2      	b.n	80065c6 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8006640:	2001      	movs	r0, #1
 8006642:	e7c0      	b.n	80065c6 <xQueueReceiveFromISR+0x2c>
 8006644:	2001      	movs	r0, #1
 8006646:	e7be      	b.n	80065c6 <xQueueReceiveFromISR+0x2c>

08006648 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006648:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800664a:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800664c:	4c07      	ldr	r4, [pc, #28]	; (800666c <vQueueAddToRegistry+0x24>)
 800664e:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8006652:	b122      	cbz	r2, 800665e <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006654:	3301      	adds	r3, #1
 8006656:	2b08      	cmp	r3, #8
 8006658:	d1f9      	bne.n	800664e <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800665a:	bc10      	pop	{r4}
 800665c:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800665e:	4a03      	ldr	r2, [pc, #12]	; (800666c <vQueueAddToRegistry+0x24>)
 8006660:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006664:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006668:	6050      	str	r0, [r2, #4]
				break;
 800666a:	e7f6      	b.n	800665a <vQueueAddToRegistry+0x12>
 800666c:	200016f8 	.word	0x200016f8

08006670 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006670:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006672:	4909      	ldr	r1, [pc, #36]	; (8006698 <vQueueUnregisterQueue+0x28>)
 8006674:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8006678:	6852      	ldr	r2, [r2, #4]
 800667a:	4282      	cmp	r2, r0
 800667c:	d003      	beq.n	8006686 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800667e:	3301      	adds	r3, #1
 8006680:	2b08      	cmp	r3, #8
 8006682:	d1f7      	bne.n	8006674 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006684:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006686:	4a04      	ldr	r2, [pc, #16]	; (8006698 <vQueueUnregisterQueue+0x28>)
 8006688:	2100      	movs	r1, #0
 800668a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800668e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006692:	6051      	str	r1, [r2, #4]
				break;
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	200016f8 	.word	0x200016f8

0800669c <vQueueDelete>:
	configASSERT( pxQueue );
 800669c:	b138      	cbz	r0, 80066ae <vQueueDelete+0x12>
{
 800669e:	b510      	push	{r4, lr}
 80066a0:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 80066a2:	f7ff ffe5 	bl	8006670 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80066aa:	b14b      	cbz	r3, 80066c0 <vQueueDelete+0x24>
}
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80066be:	e7fe      	b.n	80066be <vQueueDelete+0x22>
			vPortFree( pxQueue );
 80066c0:	4620      	mov	r0, r4
 80066c2:	f001 fab7 	bl	8007c34 <vPortFree>
}
 80066c6:	e7f1      	b.n	80066ac <vQueueDelete+0x10>

080066c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066c8:	b570      	push	{r4, r5, r6, lr}
 80066ca:	4604      	mov	r4, r0
 80066cc:	460d      	mov	r5, r1
 80066ce:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066d0:	f001 f8d0 	bl	8007874 <vPortEnterCritical>
 80066d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	bf04      	itt	eq
 80066e0:	2300      	moveq	r3, #0
 80066e2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80066e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80066ea:	b25b      	sxtb	r3, r3
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	bf04      	itt	eq
 80066f2:	2300      	moveq	r3, #0
 80066f4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80066f8:	f001 f8de 	bl	80078b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80066fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066fe:	b11b      	cbz	r3, 8006708 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006700:	4620      	mov	r0, r4
 8006702:	f7ff faf5 	bl	8005cf0 <prvUnlockQueue>
	}
 8006706:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006708:	4632      	mov	r2, r6
 800670a:	4629      	mov	r1, r5
 800670c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006710:	f000 fc32 	bl	8006f78 <vTaskPlaceOnEventListRestricted>
 8006714:	e7f4      	b.n	8006700 <vQueueWaitForMessageRestricted+0x38>
	...

08006718 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <prvResetNextTaskUnblockTime+0x24>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	b923      	cbnz	r3, 800672a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <prvResetNextTaskUnblockTime+0x28>)
 8006722:	f04f 32ff 	mov.w	r2, #4294967295
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <prvResetNextTaskUnblockTime+0x24>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	4b02      	ldr	r3, [pc, #8]	; (8006740 <prvResetNextTaskUnblockTime+0x28>)
 8006736:	601a      	str	r2, [r3, #0]
	}
}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	2000173c 	.word	0x2000173c
 8006740:	20001be4 	.word	0x20001be4

08006744 <prvInitialiseNewTask>:
{
 8006744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006748:	4606      	mov	r6, r0
 800674a:	4689      	mov	r9, r1
 800674c:	461f      	mov	r7, r3
 800674e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8006752:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006754:	0095      	lsls	r5, r2, #2
 8006756:	462a      	mov	r2, r5
 8006758:	21a5      	movs	r1, #165	; 0xa5
 800675a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800675c:	f001 fc3f 	bl	8007fde <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006760:	3d04      	subs	r5, #4
 8006762:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006764:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006766:	f025 0507 	bic.w	r5, r5, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800676a:	f109 3cff 	add.w	ip, r9, #4294967295
 800676e:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8006772:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006776:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800677a:	f80e 2f01 	strb.w	r2, [lr, #1]!
		if( pcName[ x ] == 0x00 )
 800677e:	b10a      	cbz	r2, 8006784 <prvInitialiseNewTask+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006780:	458c      	cmp	ip, r1
 8006782:	d1f8      	bne.n	8006776 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006784:	f04f 0a00 	mov.w	sl, #0
 8006788:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800678c:	9b08      	ldr	r3, [sp, #32]
 800678e:	2b37      	cmp	r3, #55	; 0x37
 8006790:	bf28      	it	cs
 8006792:	2337      	movcs	r3, #55	; 0x37
 8006794:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8006796:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006798:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800679a:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800679e:	1d20      	adds	r0, r4, #4
 80067a0:	f7ff fa15 	bl	8005bce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067a4:	f104 0018 	add.w	r0, r4, #24
 80067a8:	f7ff fa11 	bl	8005bce <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ac:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ae:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 80067b2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067b4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 80067b6:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 80067ba:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067be:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80067c2:	463a      	mov	r2, r7
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	f001 f82c 	bl	8007824 <pxPortInitialiseStack>
 80067cc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80067ce:	f1b8 0f00 	cmp.w	r8, #0
 80067d2:	d001      	beq.n	80067d8 <prvInitialiseNewTask+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80067d4:	f8c8 4000 	str.w	r4, [r8]
}
 80067d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080067dc <prvAddNewTaskToReadyList>:
{
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80067e0:	f001 f848 	bl	8007874 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80067e4:	4a30      	ldr	r2, [pc, #192]	; (80068a8 <prvAddNewTaskToReadyList+0xcc>)
 80067e6:	6813      	ldr	r3, [r2, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ec:	4b2f      	ldr	r3, [pc, #188]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d034      	beq.n	800685e <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 80067f4:	4b2e      	ldr	r3, [pc, #184]	; (80068b0 <prvAddNewTaskToReadyList+0xd4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b93b      	cbnz	r3, 800680a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067fa:	4b2c      	ldr	r3, [pc, #176]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006802:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006804:	bf9c      	itt	ls
 8006806:	4b29      	ldrls	r3, [pc, #164]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 8006808:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 800680a:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <prvAddNewTaskToReadyList+0xd8>)
 800680c:	6813      	ldr	r3, [r2, #0]
 800680e:	3301      	adds	r3, #1
 8006810:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006812:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006814:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006816:	4b28      	ldr	r3, [pc, #160]	; (80068b8 <prvAddNewTaskToReadyList+0xdc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4298      	cmp	r0, r3
 800681c:	bf84      	itt	hi
 800681e:	4b26      	ldrhi	r3, [pc, #152]	; (80068b8 <prvAddNewTaskToReadyList+0xdc>)
 8006820:	6018      	strhi	r0, [r3, #0]
 8006822:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006826:	1d29      	adds	r1, r5, #4
 8006828:	4b24      	ldr	r3, [pc, #144]	; (80068bc <prvAddNewTaskToReadyList+0xe0>)
 800682a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800682e:	f7ff f9d1 	bl	8005bd4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006832:	f001 f841 	bl	80078b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006836:	4b1e      	ldr	r3, [pc, #120]	; (80068b0 <prvAddNewTaskToReadyList+0xd4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	b17b      	cbz	r3, 800685c <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800683c:	4b1b      	ldr	r3, [pc, #108]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006842:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006844:	429a      	cmp	r2, r3
 8006846:	d209      	bcs.n	800685c <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8006848:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800684c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006850:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	f3bf 8f6f 	isb	sy
}
 800685c:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <prvAddNewTaskToReadyList+0xd0>)
 8006860:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006862:	6813      	ldr	r3, [r2, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d1d0      	bne.n	800680a <prvAddNewTaskToReadyList+0x2e>
 8006868:	4c14      	ldr	r4, [pc, #80]	; (80068bc <prvAddNewTaskToReadyList+0xe0>)
 800686a:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800686e:	4620      	mov	r0, r4
 8006870:	f7ff f9a2 	bl	8005bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006874:	3414      	adds	r4, #20
 8006876:	42b4      	cmp	r4, r6
 8006878:	d1f9      	bne.n	800686e <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 800687a:	4e11      	ldr	r6, [pc, #68]	; (80068c0 <prvAddNewTaskToReadyList+0xe4>)
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff f99b 	bl	8005bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006882:	4c10      	ldr	r4, [pc, #64]	; (80068c4 <prvAddNewTaskToReadyList+0xe8>)
 8006884:	4620      	mov	r0, r4
 8006886:	f7ff f997 	bl	8005bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800688a:	480f      	ldr	r0, [pc, #60]	; (80068c8 <prvAddNewTaskToReadyList+0xec>)
 800688c:	f7ff f994 	bl	8005bb8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006890:	480e      	ldr	r0, [pc, #56]	; (80068cc <prvAddNewTaskToReadyList+0xf0>)
 8006892:	f7ff f991 	bl	8005bb8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006896:	480e      	ldr	r0, [pc, #56]	; (80068d0 <prvAddNewTaskToReadyList+0xf4>)
 8006898:	f7ff f98e 	bl	8005bb8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800689c:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <prvAddNewTaskToReadyList+0xf8>)
 800689e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068a0:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <prvAddNewTaskToReadyList+0xfc>)
 80068a2:	601c      	str	r4, [r3, #0]
}
 80068a4:	e7b1      	b.n	800680a <prvAddNewTaskToReadyList+0x2e>
 80068a6:	bf00      	nop
 80068a8:	20001ba4 	.word	0x20001ba4
 80068ac:	20001738 	.word	0x20001738
 80068b0:	20001c00 	.word	0x20001c00
 80068b4:	20001bb4 	.word	0x20001bb4
 80068b8:	20001bb8 	.word	0x20001bb8
 80068bc:	20001744 	.word	0x20001744
 80068c0:	20001bbc 	.word	0x20001bbc
 80068c4:	20001bd0 	.word	0x20001bd0
 80068c8:	20001bec 	.word	0x20001bec
 80068cc:	20001c18 	.word	0x20001c18
 80068d0:	20001c04 	.word	0x20001c04
 80068d4:	2000173c 	.word	0x2000173c
 80068d8:	20001740 	.word	0x20001740

080068dc <prvDeleteTCB>:
	{
 80068dc:	b510      	push	{r4, lr}
 80068de:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068e0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80068e4:	b163      	cbz	r3, 8006900 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d011      	beq.n	800690e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d00e      	beq.n	800690c <prvDeleteTCB+0x30>
 80068ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	e7fe      	b.n	80068fe <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006900:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006902:	f001 f997 	bl	8007c34 <vPortFree>
				vPortFree( pxTCB );
 8006906:	4620      	mov	r0, r4
 8006908:	f001 f994 	bl	8007c34 <vPortFree>
	}
 800690c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800690e:	f001 f991 	bl	8007c34 <vPortFree>
 8006912:	e7fb      	b.n	800690c <prvDeleteTCB+0x30>

08006914 <prvIdleTask>:
{
 8006914:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006916:	4c15      	ldr	r4, [pc, #84]	; (800696c <prvIdleTask+0x58>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006918:	4f15      	ldr	r7, [pc, #84]	; (8006970 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 800691a:	4e16      	ldr	r6, [pc, #88]	; (8006974 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800691c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006978 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	b1a3      	cbz	r3, 800694e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8006924:	f000 ffa6 	bl	8007874 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800692c:	1d28      	adds	r0, r5, #4
 800692e:	f7ff f975 	bl	8005c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006932:	6833      	ldr	r3, [r6, #0]
 8006934:	3b01      	subs	r3, #1
 8006936:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800693e:	f000 ffbb 	bl	80078b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006942:	4628      	mov	r0, r5
 8006944:	f7ff ffca 	bl	80068dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ea      	bne.n	8006924 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800694e:	f8d8 3000 	ldr.w	r3, [r8]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d9e4      	bls.n	8006920 <prvIdleTask+0xc>
				taskYIELD();
 8006956:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800695a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800695e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	e7d9      	b.n	8006920 <prvIdleTask+0xc>
 800696c:	20001ba8 	.word	0x20001ba8
 8006970:	20001c18 	.word	0x20001c18
 8006974:	20001ba4 	.word	0x20001ba4
 8006978:	20001744 	.word	0x20001744

0800697c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <prvAddCurrentTaskToDelayedList+0x64>)
 8006984:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006986:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <prvAddCurrentTaskToDelayedList+0x68>)
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	3004      	adds	r0, #4
 800698c:	f7ff f946 	bl	8005c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006990:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006994:	d00d      	beq.n	80069b2 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006996:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006998:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <prvAddCurrentTaskToDelayedList+0x68>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800699e:	42a6      	cmp	r6, r4
 80069a0:	d910      	bls.n	80069c4 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069a2:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <prvAddCurrentTaskToDelayedList+0x6c>)
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <prvAddCurrentTaskToDelayedList+0x68>)
 80069a8:	6819      	ldr	r1, [r3, #0]
 80069aa:	3104      	adds	r1, #4
 80069ac:	f7ff f91d 	bl	8005bea <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069b2:	2d00      	cmp	r5, #0
 80069b4:	d0ef      	beq.n	8006996 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <prvAddCurrentTaskToDelayedList+0x68>)
 80069b8:	6819      	ldr	r1, [r3, #0]
 80069ba:	3104      	adds	r1, #4
 80069bc:	480b      	ldr	r0, [pc, #44]	; (80069ec <prvAddCurrentTaskToDelayedList+0x70>)
 80069be:	f7ff f909 	bl	8005bd4 <vListInsertEnd>
 80069c2:	e7f5      	b.n	80069b0 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c4:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <prvAddCurrentTaskToDelayedList+0x74>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <prvAddCurrentTaskToDelayedList+0x68>)
 80069ca:	6819      	ldr	r1, [r3, #0]
 80069cc:	3104      	adds	r1, #4
 80069ce:	f7ff f90c 	bl	8005bea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069d2:	4b08      	ldr	r3, [pc, #32]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x78>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 80069d8:	bf84      	itt	hi
 80069da:	4b06      	ldrhi	r3, [pc, #24]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x78>)
 80069dc:	601c      	strhi	r4, [r3, #0]
}
 80069de:	e7e7      	b.n	80069b0 <prvAddCurrentTaskToDelayedList+0x34>
 80069e0:	20001c2c 	.word	0x20001c2c
 80069e4:	20001738 	.word	0x20001738
 80069e8:	20001740 	.word	0x20001740
 80069ec:	20001c04 	.word	0x20001c04
 80069f0:	2000173c 	.word	0x2000173c
 80069f4:	20001be4 	.word	0x20001be4

080069f8 <xTaskCreateStatic>:
	{
 80069f8:	b530      	push	{r4, r5, lr}
 80069fa:	b087      	sub	sp, #28
 80069fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80069fe:	b17c      	cbz	r4, 8006a20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a02:	b1b5      	cbz	r5, 8006a32 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a04:	2560      	movs	r5, #96	; 0x60
 8006a06:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a08:	9d04      	ldr	r5, [sp, #16]
 8006a0a:	2d60      	cmp	r5, #96	; 0x60
 8006a0c:	d01a      	beq.n	8006a44 <xTaskCreateStatic+0x4c>
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	e7fe      	b.n	8006a1e <xTaskCreateStatic+0x26>
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006a30:	e7fe      	b.n	8006a30 <xTaskCreateStatic+0x38>
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006a42:	e7fe      	b.n	8006a42 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a46:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a48:	2402      	movs	r4, #2
 8006a4a:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a4e:	2400      	movs	r4, #0
 8006a50:	9403      	str	r4, [sp, #12]
 8006a52:	9502      	str	r5, [sp, #8]
 8006a54:	ac05      	add	r4, sp, #20
 8006a56:	9401      	str	r4, [sp, #4]
 8006a58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a5a:	9400      	str	r4, [sp, #0]
 8006a5c:	f7ff fe72 	bl	8006744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a60:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006a62:	f7ff febb 	bl	80067dc <prvAddNewTaskToReadyList>
	}
 8006a66:	9805      	ldr	r0, [sp, #20]
 8006a68:	b007      	add	sp, #28
 8006a6a:	bd30      	pop	{r4, r5, pc}

08006a6c <xTaskCreate>:
	{
 8006a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a70:	b085      	sub	sp, #20
 8006a72:	4607      	mov	r7, r0
 8006a74:	4688      	mov	r8, r1
 8006a76:	4614      	mov	r4, r2
 8006a78:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a7a:	0090      	lsls	r0, r2, #2
 8006a7c:	f001 f844 	bl	8007b08 <pvPortMalloc>
			if( pxStack != NULL )
 8006a80:	b308      	cbz	r0, 8006ac6 <xTaskCreate+0x5a>
 8006a82:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a84:	2060      	movs	r0, #96	; 0x60
 8006a86:	f001 f83f 	bl	8007b08 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	b1a8      	cbz	r0, 8006aba <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8006a8e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a92:	2300      	movs	r3, #0
 8006a94:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a98:	9303      	str	r3, [sp, #12]
 8006a9a:	9002      	str	r0, [sp, #8]
 8006a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	4633      	mov	r3, r6
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f7ff fe4a 	bl	8006744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f7ff fe93 	bl	80067dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	e007      	b.n	8006aca <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8006aba:	4648      	mov	r0, r9
 8006abc:	f001 f8ba 	bl	8007c34 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac4:	e001      	b.n	8006aca <xTaskCreate+0x5e>
 8006ac6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006aca:	b005      	add	sp, #20
 8006acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006ad0 <vTaskStartScheduler>:
{
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006ad4:	2400      	movs	r4, #0
 8006ad6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ad8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ada:	aa07      	add	r2, sp, #28
 8006adc:	a906      	add	r1, sp, #24
 8006ade:	a805      	add	r0, sp, #20
 8006ae0:	f7fe ff3e 	bl	8005960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ae4:	9b05      	ldr	r3, [sp, #20]
 8006ae6:	9302      	str	r3, [sp, #8]
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	9400      	str	r4, [sp, #0]
 8006aee:	4623      	mov	r3, r4
 8006af0:	9a07      	ldr	r2, [sp, #28]
 8006af2:	4915      	ldr	r1, [pc, #84]	; (8006b48 <vTaskStartScheduler+0x78>)
 8006af4:	4815      	ldr	r0, [pc, #84]	; (8006b4c <vTaskStartScheduler+0x7c>)
 8006af6:	f7ff ff7f 	bl	80069f8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006afa:	b310      	cbz	r0, 8006b42 <vTaskStartScheduler+0x72>
			xReturn = xTimerCreateTimerTask();
 8006afc:	f000 fca6 	bl	800744c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006b00:	2801      	cmp	r0, #1
 8006b02:	d00b      	beq.n	8006b1c <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b04:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b08:	d11b      	bne.n	8006b42 <vTaskStartScheduler+0x72>
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	e7fe      	b.n	8006b1a <vTaskStartScheduler+0x4a>
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <vTaskStartScheduler+0x80>)
 8006b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b34:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <vTaskStartScheduler+0x84>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <vTaskStartScheduler+0x88>)
 8006b3c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006b3e:	f000 ff23 	bl	8007988 <xPortStartScheduler>
}
 8006b42:	b008      	add	sp, #32
 8006b44:	bd10      	pop	{r4, pc}
 8006b46:	bf00      	nop
 8006b48:	08009a60 	.word	0x08009a60
 8006b4c:	08006915 	.word	0x08006915
 8006b50:	20001be4 	.word	0x20001be4
 8006b54:	20001c00 	.word	0x20001c00
 8006b58:	20001c2c 	.word	0x20001c2c

08006b5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006b5c:	4a02      	ldr	r2, [pc, #8]	; (8006b68 <vTaskSuspendAll+0xc>)
 8006b5e:	6813      	ldr	r3, [r2, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	6013      	str	r3, [r2, #0]
}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20001bb0 	.word	0x20001bb0

08006b6c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006b6c:	4b01      	ldr	r3, [pc, #4]	; (8006b74 <xTaskGetTickCount+0x8>)
 8006b6e:	6818      	ldr	r0, [r3, #0]
}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20001c2c 	.word	0x20001c2c

08006b78 <xTaskIncrementTick>:
{
 8006b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b7c:	4b40      	ldr	r3, [pc, #256]	; (8006c80 <xTaskIncrementTick+0x108>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d170      	bne.n	8006c66 <xTaskIncrementTick+0xee>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b84:	4b3f      	ldr	r3, [pc, #252]	; (8006c84 <xTaskIncrementTick+0x10c>)
 8006b86:	681e      	ldr	r6, [r3, #0]
 8006b88:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8006b8a:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b8c:	b9c6      	cbnz	r6, 8006bc0 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8006b8e:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <xTaskIncrementTick+0x110>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	b143      	cbz	r3, 8006ba8 <xTaskIncrementTick+0x30>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	e7fe      	b.n	8006ba6 <xTaskIncrementTick+0x2e>
 8006ba8:	4a37      	ldr	r2, [pc, #220]	; (8006c88 <xTaskIncrementTick+0x110>)
 8006baa:	6811      	ldr	r1, [r2, #0]
 8006bac:	4b37      	ldr	r3, [pc, #220]	; (8006c8c <xTaskIncrementTick+0x114>)
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	6010      	str	r0, [r2, #0]
 8006bb2:	6019      	str	r1, [r3, #0]
 8006bb4:	4a36      	ldr	r2, [pc, #216]	; (8006c90 <xTaskIncrementTick+0x118>)
 8006bb6:	6813      	ldr	r3, [r2, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	f7ff fdac 	bl	8006718 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bc0:	4b34      	ldr	r3, [pc, #208]	; (8006c94 <xTaskIncrementTick+0x11c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	42b3      	cmp	r3, r6
 8006bc6:	d841      	bhi.n	8006c4c <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bc8:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <xTaskIncrementTick+0x110>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	b13b      	cbz	r3, 8006be0 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8006bd0:	2500      	movs	r5, #0
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006bd2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8006c88 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8006bd6:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8006c98 <xTaskIncrementTick+0x120>
 8006bda:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8006c9c <xTaskIncrementTick+0x124>
 8006bde:	e022      	b.n	8006c26 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8006be0:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be2:	4b2c      	ldr	r3, [pc, #176]	; (8006c94 <xTaskIncrementTick+0x11c>)
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295
 8006be8:	601a      	str	r2, [r3, #0]
					break;
 8006bea:	e030      	b.n	8006c4e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8006bec:	4a29      	ldr	r2, [pc, #164]	; (8006c94 <xTaskIncrementTick+0x11c>)
 8006bee:	6013      	str	r3, [r2, #0]
						break;
 8006bf0:	e02d      	b.n	8006c4e <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 8006bf2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006bf4:	f8d9 3000 	ldr.w	r3, [r9]
 8006bf8:	4298      	cmp	r0, r3
 8006bfa:	bf88      	it	hi
 8006bfc:	f8c9 0000 	strhi.w	r0, [r9]
 8006c00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006c04:	4639      	mov	r1, r7
 8006c06:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8006c0a:	f7fe ffe3 	bl	8005bd4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <xTaskIncrementTick+0x128>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006c16:	429a      	cmp	r2, r3
 8006c18:	bf28      	it	cs
 8006c1a:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0dd      	beq.n	8006be2 <xTaskIncrementTick+0x6a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c26:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c2e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8006c30:	429e      	cmp	r6, r3
 8006c32:	d3db      	bcc.n	8006bec <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c34:	1d27      	adds	r7, r4, #4
 8006c36:	4638      	mov	r0, r7
 8006c38:	f7fe fff0 	bl	8005c1c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0d7      	beq.n	8006bf2 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c42:	f104 0018 	add.w	r0, r4, #24
 8006c46:	f7fe ffe9 	bl	8005c1c <uxListRemove>
 8006c4a:	e7d2      	b.n	8006bf2 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8006c4c:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c4e:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <xTaskIncrementTick+0x128>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4a10      	ldr	r2, [pc, #64]	; (8006c9c <xTaskIncrementTick+0x124>)
 8006c5c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	bf28      	it	cs
 8006c62:	2501      	movcs	r5, #1
 8006c64:	e004      	b.n	8006c70 <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 8006c66:	4a0f      	ldr	r2, [pc, #60]	; (8006ca4 <xTaskIncrementTick+0x12c>)
 8006c68:	6813      	ldr	r3, [r2, #0]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006c6e:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8006c70:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <xTaskIncrementTick+0x130>)
 8006c72:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8006c74:	2b00      	cmp	r3, #0
}
 8006c76:	bf0c      	ite	eq
 8006c78:	4628      	moveq	r0, r5
 8006c7a:	2001      	movne	r0, #1
 8006c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c80:	20001bb0 	.word	0x20001bb0
 8006c84:	20001c2c 	.word	0x20001c2c
 8006c88:	2000173c 	.word	0x2000173c
 8006c8c:	20001740 	.word	0x20001740
 8006c90:	20001be8 	.word	0x20001be8
 8006c94:	20001be4 	.word	0x20001be4
 8006c98:	20001bb8 	.word	0x20001bb8
 8006c9c:	20001744 	.word	0x20001744
 8006ca0:	20001738 	.word	0x20001738
 8006ca4:	20001bac 	.word	0x20001bac
 8006ca8:	20001c30 	.word	0x20001c30

08006cac <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006cac:	4b38      	ldr	r3, [pc, #224]	; (8006d90 <xTaskResumeAll+0xe4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	b943      	cbnz	r3, 8006cc4 <xTaskResumeAll+0x18>
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	e7fe      	b.n	8006cc2 <xTaskResumeAll+0x16>
{
 8006cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006cc8:	f000 fdd4 	bl	8007874 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006ccc:	4b30      	ldr	r3, [pc, #192]	; (8006d90 <xTaskResumeAll+0xe4>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	3a01      	subs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d149      	bne.n	8006d6e <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006cda:	4b2e      	ldr	r3, [pc, #184]	; (8006d94 <xTaskResumeAll+0xe8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d04b      	beq.n	8006d7a <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ce2:	4b2d      	ldr	r3, [pc, #180]	; (8006d98 <xTaskResumeAll+0xec>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d04b      	beq.n	8006d82 <xTaskResumeAll+0xd6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006cea:	4e2b      	ldr	r6, [pc, #172]	; (8006d98 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8006cec:	4f2b      	ldr	r7, [pc, #172]	; (8006d9c <xTaskResumeAll+0xf0>)
 8006cee:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8006da0 <xTaskResumeAll+0xf4>
 8006cf2:	e002      	b.n	8006cfa <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cf4:	6833      	ldr	r3, [r6, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d041      	beq.n	8006d7e <xTaskResumeAll+0xd2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006cfa:	68f3      	ldr	r3, [r6, #12]
 8006cfc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cfe:	f104 0018 	add.w	r0, r4, #24
 8006d02:	f7fe ff8b 	bl	8005c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d06:	1d25      	adds	r5, r4, #4
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f7fe ff87 	bl	8005c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	4298      	cmp	r0, r3
 8006d14:	bf88      	it	hi
 8006d16:	6038      	strhi	r0, [r7, #0]
 8006d18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8006d22:	f7fe ff57 	bl	8005bd4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d26:	4b1f      	ldr	r3, [pc, #124]	; (8006da4 <xTaskResumeAll+0xf8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3e0      	bcc.n	8006cf4 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8006d32:	4b1d      	ldr	r3, [pc, #116]	; (8006da8 <xTaskResumeAll+0xfc>)
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	e7dc      	b.n	8006cf4 <xTaskResumeAll+0x48>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d3a:	3c01      	subs	r4, #1
 8006d3c:	d005      	beq.n	8006d4a <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8006d3e:	f7ff ff1b 	bl	8006b78 <xTaskIncrementTick>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d0f9      	beq.n	8006d3a <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8006d46:	6035      	str	r5, [r6, #0]
 8006d48:	e7f7      	b.n	8006d3a <xTaskResumeAll+0x8e>
						uxPendedTicks = 0;
 8006d4a:	4b18      	ldr	r3, [pc, #96]	; (8006dac <xTaskResumeAll+0x100>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006d50:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <xTaskResumeAll+0xfc>)
 8006d52:	681c      	ldr	r4, [r3, #0]
 8006d54:	b164      	cbz	r4, 8006d70 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8006d56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006d6a:	2401      	movs	r4, #1
 8006d6c:	e000      	b.n	8006d70 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8006d6e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006d70:	f000 fda2 	bl	80078b8 <vPortExitCritical>
}
 8006d74:	4620      	mov	r0, r4
 8006d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8006d7a:	2400      	movs	r4, #0
 8006d7c:	e7f8      	b.n	8006d70 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8006d7e:	f7ff fccb 	bl	8006718 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <xTaskResumeAll+0x100>)
 8006d84:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d86:	2c00      	cmp	r4, #0
 8006d88:	d0e2      	beq.n	8006d50 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006d8a:	4e07      	ldr	r6, [pc, #28]	; (8006da8 <xTaskResumeAll+0xfc>)
 8006d8c:	2501      	movs	r5, #1
 8006d8e:	e7d6      	b.n	8006d3e <xTaskResumeAll+0x92>
 8006d90:	20001bb0 	.word	0x20001bb0
 8006d94:	20001ba4 	.word	0x20001ba4
 8006d98:	20001bec 	.word	0x20001bec
 8006d9c:	20001bb8 	.word	0x20001bb8
 8006da0:	20001744 	.word	0x20001744
 8006da4:	20001738 	.word	0x20001738
 8006da8:	20001c30 	.word	0x20001c30
 8006dac:	20001bac 	.word	0x20001bac

08006db0 <vTaskDelayUntil>:
	{
 8006db0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8006db2:	b158      	cbz	r0, 8006dcc <vTaskDelayUntil+0x1c>
 8006db4:	460c      	mov	r4, r1
 8006db6:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8006db8:	b989      	cbnz	r1, 8006dde <vTaskDelayUntil+0x2e>
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	e7fe      	b.n	8006dca <vTaskDelayUntil+0x1a>
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8006ddc:	e7fe      	b.n	8006ddc <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <vTaskDelayUntil+0x98>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	b143      	cbz	r3, 8006df6 <vTaskDelayUntil+0x46>
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	e7fe      	b.n	8006df4 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8006df6:	f7ff feb1 	bl	8006b5c <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <vTaskDelayUntil+0x9c>)
 8006dfc:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006dfe:	682b      	ldr	r3, [r5, #0]
 8006e00:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 8006e02:	4283      	cmp	r3, r0
 8006e04:	d907      	bls.n	8006e16 <vTaskDelayUntil+0x66>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006e06:	42a3      	cmp	r3, r4
 8006e08:	d801      	bhi.n	8006e0e <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8006e0a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006e0c:	e00e      	b.n	8006e2c <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006e0e:	42a0      	cmp	r0, r4
 8006e10:	d307      	bcc.n	8006e22 <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 8006e12:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006e14:	e00a      	b.n	8006e2c <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	d803      	bhi.n	8006e22 <vTaskDelayUntil+0x72>
 8006e1a:	42a0      	cmp	r0, r4
 8006e1c:	d301      	bcc.n	8006e22 <vTaskDelayUntil+0x72>
			*pxPreviousWakeTime = xTimeToWake;
 8006e1e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8006e20:	e004      	b.n	8006e2c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8006e22:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006e24:	2100      	movs	r1, #0
 8006e26:	1a20      	subs	r0, r4, r0
 8006e28:	f7ff fda8 	bl	800697c <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8006e2c:	f7ff ff3e 	bl	8006cac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006e30:	b948      	cbnz	r0, 8006e46 <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 8006e32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
	}
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20001bb0 	.word	0x20001bb0
 8006e4c:	20001c2c 	.word	0x20001c2c

08006e50 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e50:	4b22      	ldr	r3, [pc, #136]	; (8006edc <vTaskSwitchContext+0x8c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	b11b      	cbz	r3, 8006e5e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006e56:	4b22      	ldr	r3, [pc, #136]	; (8006ee0 <vTaskSwitchContext+0x90>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006e5e:	4b20      	ldr	r3, [pc, #128]	; (8006ee0 <vTaskSwitchContext+0x90>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e64:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <vTaskSwitchContext+0x94>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006e6c:	0092      	lsls	r2, r2, #2
 8006e6e:	491e      	ldr	r1, [pc, #120]	; (8006ee8 <vTaskSwitchContext+0x98>)
 8006e70:	588a      	ldr	r2, [r1, r2]
 8006e72:	b98a      	cbnz	r2, 8006e98 <vTaskSwitchContext+0x48>
 8006e74:	b13b      	cbz	r3, 8006e86 <vTaskSwitchContext+0x36>
 8006e76:	3b01      	subs	r3, #1
 8006e78:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006e7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006e80:	b952      	cbnz	r2, 8006e98 <vTaskSwitchContext+0x48>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f7      	bne.n	8006e76 <vTaskSwitchContext+0x26>
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	e7fe      	b.n	8006e96 <vTaskSwitchContext+0x46>
 8006e98:	4a13      	ldr	r2, [pc, #76]	; (8006ee8 <vTaskSwitchContext+0x98>)
 8006e9a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006e9e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006ea2:	6848      	ldr	r0, [r1, #4]
 8006ea4:	6840      	ldr	r0, [r0, #4]
 8006ea6:	6048      	str	r0, [r1, #4]
 8006ea8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006eac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006eb0:	3208      	adds	r2, #8
 8006eb2:	4290      	cmp	r0, r2
 8006eb4:	d00b      	beq.n	8006ece <vTaskSwitchContext+0x7e>
 8006eb6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006eba:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <vTaskSwitchContext+0x98>)
 8006ebc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006ec0:	6852      	ldr	r2, [r2, #4]
 8006ec2:	68d1      	ldr	r1, [r2, #12]
 8006ec4:	4a09      	ldr	r2, [pc, #36]	; (8006eec <vTaskSwitchContext+0x9c>)
 8006ec6:	6011      	str	r1, [r2, #0]
 8006ec8:	4a06      	ldr	r2, [pc, #24]	; (8006ee4 <vTaskSwitchContext+0x94>)
 8006eca:	6013      	str	r3, [r2, #0]
}
 8006ecc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ece:	6840      	ldr	r0, [r0, #4]
 8006ed0:	4a05      	ldr	r2, [pc, #20]	; (8006ee8 <vTaskSwitchContext+0x98>)
 8006ed2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006ed6:	6050      	str	r0, [r2, #4]
 8006ed8:	e7ed      	b.n	8006eb6 <vTaskSwitchContext+0x66>
 8006eda:	bf00      	nop
 8006edc:	20001bb0 	.word	0x20001bb0
 8006ee0:	20001c30 	.word	0x20001c30
 8006ee4:	20001bb8 	.word	0x20001bb8
 8006ee8:	20001744 	.word	0x20001744
 8006eec:	20001738 	.word	0x20001738

08006ef0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006ef0:	b158      	cbz	r0, 8006f0a <vTaskPlaceOnEventList+0x1a>
{
 8006ef2:	b510      	push	{r4, lr}
 8006ef4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <vTaskPlaceOnEventList+0x2c>)
 8006ef8:	6811      	ldr	r1, [r2, #0]
 8006efa:	3118      	adds	r1, #24
 8006efc:	f7fe fe75 	bl	8005bea <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f00:	2101      	movs	r1, #1
 8006f02:	4620      	mov	r0, r4
 8006f04:	f7ff fd3a 	bl	800697c <prvAddCurrentTaskToDelayedList>
}
 8006f08:	bd10      	pop	{r4, pc}
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006f1a:	e7fe      	b.n	8006f1a <vTaskPlaceOnEventList+0x2a>
 8006f1c:	20001738 	.word	0x20001738

08006f20 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8006f20:	b170      	cbz	r0, 8006f40 <vTaskPlaceOnUnorderedEventList+0x20>
{
 8006f22:	b510      	push	{r4, lr}
 8006f24:	4614      	mov	r4, r2
 8006f26:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <vTaskPlaceOnUnorderedEventList+0x50>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	b98b      	cbnz	r3, 8006f52 <vTaskPlaceOnUnorderedEventList+0x32>
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	e7fe      	b.n	8006f3e <vTaskPlaceOnUnorderedEventList+0x1e>
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8006f50:	e7fe      	b.n	8006f50 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006f52:	4b08      	ldr	r3, [pc, #32]	; (8006f74 <vTaskPlaceOnUnorderedEventList+0x54>)
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006f5a:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f5c:	6819      	ldr	r1, [r3, #0]
 8006f5e:	3118      	adds	r1, #24
 8006f60:	4610      	mov	r0, r2
 8006f62:	f7fe fe37 	bl	8005bd4 <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f66:	2101      	movs	r1, #1
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7ff fd07 	bl	800697c <prvAddCurrentTaskToDelayedList>
}
 8006f6e:	bd10      	pop	{r4, pc}
 8006f70:	20001bb0 	.word	0x20001bb0
 8006f74:	20001738 	.word	0x20001738

08006f78 <vTaskPlaceOnEventListRestricted>:
	{
 8006f78:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006f7a:	b178      	cbz	r0, 8006f9c <vTaskPlaceOnEventListRestricted+0x24>
 8006f7c:	460d      	mov	r5, r1
 8006f7e:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f80:	4a0b      	ldr	r2, [pc, #44]	; (8006fb0 <vTaskPlaceOnEventListRestricted+0x38>)
 8006f82:	6811      	ldr	r1, [r2, #0]
 8006f84:	3118      	adds	r1, #24
 8006f86:	f7fe fe25 	bl	8005bd4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006f8a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	bf0c      	ite	eq
 8006f90:	4628      	moveq	r0, r5
 8006f92:	f04f 30ff 	movne.w	r0, #4294967295
 8006f96:	f7ff fcf1 	bl	800697c <prvAddCurrentTaskToDelayedList>
	}
 8006f9a:	bd38      	pop	{r3, r4, r5, pc}
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006fac:	e7fe      	b.n	8006fac <vTaskPlaceOnEventListRestricted+0x34>
 8006fae:	bf00      	nop
 8006fb0:	20001738 	.word	0x20001738

08006fb4 <xTaskRemoveFromEventList>:
{
 8006fb4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006fb6:	68c3      	ldr	r3, [r0, #12]
 8006fb8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006fba:	b32c      	cbz	r4, 8007008 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fbc:	f104 0518 	add.w	r5, r4, #24
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f7fe fe2b 	bl	8005c1c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc6:	4b17      	ldr	r3, [pc, #92]	; (8007024 <xTaskRemoveFromEventList+0x70>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	bb33      	cbnz	r3, 800701a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fcc:	1d25      	adds	r5, r4, #4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	f7fe fe24 	bl	8005c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fd4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006fd6:	4b14      	ldr	r3, [pc, #80]	; (8007028 <xTaskRemoveFromEventList+0x74>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4298      	cmp	r0, r3
 8006fdc:	bf84      	itt	hi
 8006fde:	4b12      	ldrhi	r3, [pc, #72]	; (8007028 <xTaskRemoveFromEventList+0x74>)
 8006fe0:	6018      	strhi	r0, [r3, #0]
 8006fe2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4b10      	ldr	r3, [pc, #64]	; (800702c <xTaskRemoveFromEventList+0x78>)
 8006fea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006fee:	f7fe fdf1 	bl	8005bd4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <xTaskRemoveFromEventList+0x7c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006ffc:	bf83      	ittte	hi
 8006ffe:	2001      	movhi	r0, #1
 8007000:	4b0c      	ldrhi	r3, [pc, #48]	; (8007034 <xTaskRemoveFromEventList+0x80>)
 8007002:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007004:	2000      	movls	r0, #0
}
 8007006:	bd38      	pop	{r3, r4, r5, pc}
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8007018:	e7fe      	b.n	8007018 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800701a:	4629      	mov	r1, r5
 800701c:	4806      	ldr	r0, [pc, #24]	; (8007038 <xTaskRemoveFromEventList+0x84>)
 800701e:	f7fe fdd9 	bl	8005bd4 <vListInsertEnd>
 8007022:	e7e6      	b.n	8006ff2 <xTaskRemoveFromEventList+0x3e>
 8007024:	20001bb0 	.word	0x20001bb0
 8007028:	20001bb8 	.word	0x20001bb8
 800702c:	20001744 	.word	0x20001744
 8007030:	20001738 	.word	0x20001738
 8007034:	20001c30 	.word	0x20001c30
 8007038:	20001bec 	.word	0x20001bec

0800703c <vTaskRemoveFromUnorderedEventList>:
{
 800703c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800703e:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <vTaskRemoveFromUnorderedEventList+0x74>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	b943      	cbnz	r3, 8007056 <vTaskRemoveFromUnorderedEventList+0x1a>
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	e7fe      	b.n	8007054 <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007056:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800705a:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800705c:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 800705e:	b1f4      	cbz	r4, 800709e <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8007060:	f7fe fddc 	bl	8005c1c <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007064:	1d25      	adds	r5, r4, #4
 8007066:	4628      	mov	r0, r5
 8007068:	f7fe fdd8 	bl	8005c1c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800706c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800706e:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <vTaskRemoveFromUnorderedEventList+0x78>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4298      	cmp	r0, r3
 8007074:	bf84      	itt	hi
 8007076:	4b0f      	ldrhi	r3, [pc, #60]	; (80070b4 <vTaskRemoveFromUnorderedEventList+0x78>)
 8007078:	6018      	strhi	r0, [r3, #0]
 800707a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800707e:	4629      	mov	r1, r5
 8007080:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8007082:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007086:	f7fe fda5 	bl	8005bd4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <vTaskRemoveFromUnorderedEventList+0x80>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	429a      	cmp	r2, r3
 8007094:	d902      	bls.n	800709c <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <vTaskRemoveFromUnorderedEventList+0x84>)
 8007098:	2201      	movs	r2, #1
 800709a:	601a      	str	r2, [r3, #0]
}
 800709c:	bd38      	pop	{r3, r4, r5, pc}
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80070ae:	e7fe      	b.n	80070ae <vTaskRemoveFromUnorderedEventList+0x72>
 80070b0:	20001bb0 	.word	0x20001bb0
 80070b4:	20001bb8 	.word	0x20001bb8
 80070b8:	20001744 	.word	0x20001744
 80070bc:	20001738 	.word	0x20001738
 80070c0:	20001c30 	.word	0x20001c30

080070c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80070c4:	4b03      	ldr	r3, [pc, #12]	; (80070d4 <vTaskInternalSetTimeOutState+0x10>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80070ca:	4b03      	ldr	r3, [pc, #12]	; (80070d8 <vTaskInternalSetTimeOutState+0x14>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6043      	str	r3, [r0, #4]
}
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20001be8 	.word	0x20001be8
 80070d8:	20001c2c 	.word	0x20001c2c

080070dc <xTaskCheckForTimeOut>:
{
 80070dc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
 80070de:	b1d0      	cbz	r0, 8007116 <xTaskCheckForTimeOut+0x3a>
 80070e0:	460c      	mov	r4, r1
 80070e2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80070e4:	b301      	cbz	r1, 8007128 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 80070e6:	f000 fbc5 	bl	8007874 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80070ea:	4b1b      	ldr	r3, [pc, #108]	; (8007158 <xTaskCheckForTimeOut+0x7c>)
 80070ec:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d029      	beq.n	800714a <xTaskCheckForTimeOut+0x6e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070f6:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070f8:	4818      	ldr	r0, [pc, #96]	; (800715c <xTaskCheckForTimeOut+0x80>)
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	f8d5 c000 	ldr.w	ip, [r5]
 8007100:	4584      	cmp	ip, r0
 8007102:	d001      	beq.n	8007108 <xTaskCheckForTimeOut+0x2c>
 8007104:	4291      	cmp	r1, r2
 8007106:	d925      	bls.n	8007154 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007108:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800710a:	4283      	cmp	r3, r0
 800710c:	d815      	bhi.n	800713a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8007112:	2401      	movs	r4, #1
 8007114:	e01a      	b.n	800714c <xTaskCheckForTimeOut+0x70>
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8007126:	e7fe      	b.n	8007126 <xTaskCheckForTimeOut+0x4a>
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007138:	e7fe      	b.n	8007138 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	440b      	add	r3, r1
 800713e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007140:	4628      	mov	r0, r5
 8007142:	f7ff ffbf 	bl	80070c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007146:	2400      	movs	r4, #0
 8007148:	e000      	b.n	800714c <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800714a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800714c:	f000 fbb4 	bl	80078b8 <vPortExitCritical>
}
 8007150:	4620      	mov	r0, r4
 8007152:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8007154:	2401      	movs	r4, #1
 8007156:	e7f9      	b.n	800714c <xTaskCheckForTimeOut+0x70>
 8007158:	20001c2c 	.word	0x20001c2c
 800715c:	20001be8 	.word	0x20001be8

08007160 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007160:	4b01      	ldr	r3, [pc, #4]	; (8007168 <vTaskMissedYield+0x8>)
 8007162:	2201      	movs	r2, #1
 8007164:	601a      	str	r2, [r3, #0]
}
 8007166:	4770      	bx	lr
 8007168:	20001c30 	.word	0x20001c30

0800716c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800716c:	4b01      	ldr	r3, [pc, #4]	; (8007174 <xTaskGetCurrentTaskHandle+0x8>)
 800716e:	6818      	ldr	r0, [r3, #0]
	}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20001738 	.word	0x20001738

08007178 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <xTaskGetSchedulerState+0x18>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	b133      	cbz	r3, 800718c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <xTaskGetSchedulerState+0x1c>)
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	fab0 f080 	clz	r0, r0
 8007186:	0940      	lsrs	r0, r0, #5
 8007188:	0040      	lsls	r0, r0, #1
 800718a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800718c:	2001      	movs	r0, #1
	}
 800718e:	4770      	bx	lr
 8007190:	20001c00 	.word	0x20001c00
 8007194:	20001bb0 	.word	0x20001bb0

08007198 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8007198:	2800      	cmp	r0, #0
 800719a:	d040      	beq.n	800721e <xTaskPriorityInherit+0x86>
	{
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80071a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80071a2:	4a20      	ldr	r2, [pc, #128]	; (8007224 <xTaskPriorityInherit+0x8c>)
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d22f      	bcs.n	800720c <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071ac:	6982      	ldr	r2, [r0, #24]
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	db05      	blt.n	80071be <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071b2:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <xTaskPriorityInherit+0x8c>)
 80071b4:	6812      	ldr	r2, [r2, #0]
 80071b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071b8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80071bc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80071be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071c2:	4a19      	ldr	r2, [pc, #100]	; (8007228 <xTaskPriorityInherit+0x90>)
 80071c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80071c8:	6962      	ldr	r2, [r4, #20]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d005      	beq.n	80071da <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071ce:	4b15      	ldr	r3, [pc, #84]	; (8007224 <xTaskPriorityInherit+0x8c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80071d6:	2001      	movs	r0, #1
 80071d8:	e020      	b.n	800721c <xTaskPriorityInherit+0x84>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071da:	1d25      	adds	r5, r4, #4
 80071dc:	4628      	mov	r0, r5
 80071de:	f7fe fd1d 	bl	8005c1c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <xTaskPriorityInherit+0x8c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80071e8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80071ea:	4b10      	ldr	r3, [pc, #64]	; (800722c <xTaskPriorityInherit+0x94>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4298      	cmp	r0, r3
 80071f0:	d809      	bhi.n	8007206 <xTaskPriorityInherit+0x6e>
 80071f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80071f6:	4629      	mov	r1, r5
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <xTaskPriorityInherit+0x90>)
 80071fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071fe:	f7fe fce9 	bl	8005bd4 <vListInsertEnd>
				xReturn = pdTRUE;
 8007202:	2001      	movs	r0, #1
 8007204:	e00a      	b.n	800721c <xTaskPriorityInherit+0x84>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <xTaskPriorityInherit+0x94>)
 8007208:	6018      	str	r0, [r3, #0]
 800720a:	e7f2      	b.n	80071f2 <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <xTaskPriorityInherit+0x8c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	4298      	cmp	r0, r3
 8007216:	bf2c      	ite	cs
 8007218:	2000      	movcs	r0, #0
 800721a:	2001      	movcc	r0, #1
	}
 800721c:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800721e:	2000      	movs	r0, #0
	}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20001738 	.word	0x20001738
 8007228:	20001744 	.word	0x20001744
 800722c:	20001bb8 	.word	0x20001bb8

08007230 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007230:	2800      	cmp	r0, #0
 8007232:	d03b      	beq.n	80072ac <xTaskPriorityDisinherit+0x7c>
	{
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007238:	4b1e      	ldr	r3, [pc, #120]	; (80072b4 <xTaskPriorityDisinherit+0x84>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4283      	cmp	r3, r0
 800723e:	d008      	beq.n	8007252 <xTaskPriorityDisinherit+0x22>
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	e7fe      	b.n	8007250 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8007252:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007254:	b943      	cbnz	r3, 8007268 <xTaskPriorityDisinherit+0x38>
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	e7fe      	b.n	8007266 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007268:	3b01      	subs	r3, #1
 800726a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800726c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800726e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007270:	4291      	cmp	r1, r2
 8007272:	d01d      	beq.n	80072b0 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007274:	b10b      	cbz	r3, 800727a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8007276:	2000      	movs	r0, #0
	}
 8007278:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800727a:	1d05      	adds	r5, r0, #4
 800727c:	4628      	mov	r0, r5
 800727e:	f7fe fccd 	bl	8005c1c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007282:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007284:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007286:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800728a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <xTaskPriorityDisinherit+0x88>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4298      	cmp	r0, r3
 8007292:	bf84      	itt	hi
 8007294:	4b08      	ldrhi	r3, [pc, #32]	; (80072b8 <xTaskPriorityDisinherit+0x88>)
 8007296:	6018      	strhi	r0, [r3, #0]
 8007298:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800729c:	4629      	mov	r1, r5
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <xTaskPriorityDisinherit+0x8c>)
 80072a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80072a4:	f7fe fc96 	bl	8005bd4 <vListInsertEnd>
					xReturn = pdTRUE;
 80072a8:	2001      	movs	r0, #1
 80072aa:	e7e5      	b.n	8007278 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80072ac:	2000      	movs	r0, #0
	}
 80072ae:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80072b0:	2000      	movs	r0, #0
 80072b2:	e7e1      	b.n	8007278 <xTaskPriorityDisinherit+0x48>
 80072b4:	20001738 	.word	0x20001738
 80072b8:	20001bb8 	.word	0x20001bb8
 80072bc:	20001744 	.word	0x20001744

080072c0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d046      	beq.n	8007352 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80072c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80072ca:	b943      	cbnz	r3, 80072de <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	e7fe      	b.n	80072dc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072de:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80072e0:	4291      	cmp	r1, r2
 80072e2:	bf38      	it	cc
 80072e4:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072e6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80072e8:	428a      	cmp	r2, r1
 80072ea:	d001      	beq.n	80072f0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d000      	beq.n	80072f2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80072f2:	4b18      	ldr	r3, [pc, #96]	; (8007354 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4283      	cmp	r3, r0
 80072f8:	d022      	beq.n	8007340 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80072fa:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072fc:	6983      	ldr	r3, [r0, #24]
 80072fe:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007300:	bfa4      	itt	ge
 8007302:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 8007306:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007308:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800730e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007312:	6942      	ldr	r2, [r0, #20]
 8007314:	429a      	cmp	r2, r3
 8007316:	d1eb      	bne.n	80072f0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007318:	1d05      	adds	r5, r0, #4
 800731a:	4628      	mov	r0, r5
 800731c:	f7fe fc7e 	bl	8005c1c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007320:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007322:	4b0e      	ldr	r3, [pc, #56]	; (800735c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4298      	cmp	r0, r3
 8007328:	bf84      	itt	hi
 800732a:	4b0c      	ldrhi	r3, [pc, #48]	; (800735c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800732c:	6018      	strhi	r0, [r3, #0]
 800732e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007332:	4629      	mov	r1, r5
 8007334:	4b08      	ldr	r3, [pc, #32]	; (8007358 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007336:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800733a:	f7fe fc4b 	bl	8005bd4 <vListInsertEnd>
	}
 800733e:	e7d7      	b.n	80072f0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007350:	e7fe      	b.n	8007350 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8007352:	4770      	bx	lr
 8007354:	20001738 	.word	0x20001738
 8007358:	20001744 	.word	0x20001744
 800735c:	20001bb8 	.word	0x20001bb8

08007360 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007360:	4b04      	ldr	r3, [pc, #16]	; (8007374 <uxTaskResetEventItemValue+0x14>)
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	6990      	ldr	r0, [r2, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007366:	6819      	ldr	r1, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800736c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007370:	6193      	str	r3, [r2, #24]
}
 8007372:	4770      	bx	lr
 8007374:	20001738 	.word	0x20001738

08007378 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <pvTaskIncrementMutexHeldCount+0x18>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	b123      	cbz	r3, 8007388 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <pvTaskIncrementMutexHeldCount+0x18>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007384:	3301      	adds	r3, #1
 8007386:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8007388:	4b01      	ldr	r3, [pc, #4]	; (8007390 <pvTaskIncrementMutexHeldCount+0x18>)
 800738a:	6818      	ldr	r0, [r3, #0]
	}
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20001738 	.word	0x20001738

08007394 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007394:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007396:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007398:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800739a:	4291      	cmp	r1, r2
 800739c:	d80c      	bhi.n	80073b8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	6983      	ldr	r3, [r0, #24]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d301      	bcc.n	80073aa <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073a6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80073a8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073aa:	1d01      	adds	r1, r0, #4
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <prvInsertTimerInActiveList+0x40>)
 80073ae:	6818      	ldr	r0, [r3, #0]
 80073b0:	f7fe fc1b 	bl	8005bea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80073b4:	2000      	movs	r0, #0
 80073b6:	e7f7      	b.n	80073a8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d201      	bcs.n	80073c0 <prvInsertTimerInActiveList+0x2c>
 80073bc:	4299      	cmp	r1, r3
 80073be:	d206      	bcs.n	80073ce <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073c0:	1d01      	adds	r1, r0, #4
 80073c2:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <prvInsertTimerInActiveList+0x44>)
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	f7fe fc10 	bl	8005bea <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80073ca:	2000      	movs	r0, #0
 80073cc:	e7ec      	b.n	80073a8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80073ce:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80073d0:	e7ea      	b.n	80073a8 <prvInsertTimerInActiveList+0x14>
 80073d2:	bf00      	nop
 80073d4:	20001c38 	.word	0x20001c38
 80073d8:	20001c34 	.word	0x20001c34

080073dc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073dc:	b530      	push	{r4, r5, lr}
 80073de:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073e0:	f000 fa48 	bl	8007874 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <prvCheckForValidListAndQueue+0x50>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	b11b      	cbz	r3, 80073f2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ea:	f000 fa65 	bl	80078b8 <vPortExitCritical>
}
 80073ee:	b003      	add	sp, #12
 80073f0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80073f2:	4d0f      	ldr	r5, [pc, #60]	; (8007430 <prvCheckForValidListAndQueue+0x54>)
 80073f4:	4628      	mov	r0, r5
 80073f6:	f7fe fbdf 	bl	8005bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073fa:	4c0e      	ldr	r4, [pc, #56]	; (8007434 <prvCheckForValidListAndQueue+0x58>)
 80073fc:	4620      	mov	r0, r4
 80073fe:	f7fe fbdb 	bl	8005bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <prvCheckForValidListAndQueue+0x5c>)
 8007404:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007406:	4b0d      	ldr	r3, [pc, #52]	; (800743c <prvCheckForValidListAndQueue+0x60>)
 8007408:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800740a:	2300      	movs	r3, #0
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <prvCheckForValidListAndQueue+0x64>)
 8007410:	4a0c      	ldr	r2, [pc, #48]	; (8007444 <prvCheckForValidListAndQueue+0x68>)
 8007412:	2110      	movs	r1, #16
 8007414:	200a      	movs	r0, #10
 8007416:	f7fe fce8 	bl	8005dea <xQueueGenericCreateStatic>
 800741a:	4b04      	ldr	r3, [pc, #16]	; (800742c <prvCheckForValidListAndQueue+0x50>)
 800741c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800741e:	2800      	cmp	r0, #0
 8007420:	d0e3      	beq.n	80073ea <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007422:	4909      	ldr	r1, [pc, #36]	; (8007448 <prvCheckForValidListAndQueue+0x6c>)
 8007424:	f7ff f910 	bl	8006648 <vQueueAddToRegistry>
 8007428:	e7df      	b.n	80073ea <prvCheckForValidListAndQueue+0xe>
 800742a:	bf00      	nop
 800742c:	20001d58 	.word	0x20001d58
 8007430:	20001cdc 	.word	0x20001cdc
 8007434:	20001cf0 	.word	0x20001cf0
 8007438:	20001c34 	.word	0x20001c34
 800743c:	20001c38 	.word	0x20001c38
 8007440:	20001d08 	.word	0x20001d08
 8007444:	20001c3c 	.word	0x20001c3c
 8007448:	08009a68 	.word	0x08009a68

0800744c <xTimerCreateTimerTask>:
{
 800744c:	b510      	push	{r4, lr}
 800744e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007450:	f7ff ffc4 	bl	80073dc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8007454:	4b12      	ldr	r3, [pc, #72]	; (80074a0 <xTimerCreateTimerTask+0x54>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	b1cb      	cbz	r3, 800748e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800745a:	2400      	movs	r4, #0
 800745c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800745e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007460:	aa07      	add	r2, sp, #28
 8007462:	a906      	add	r1, sp, #24
 8007464:	a805      	add	r0, sp, #20
 8007466:	f7fe fa87 	bl	8005978 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800746a:	9b05      	ldr	r3, [sp, #20]
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	9b06      	ldr	r3, [sp, #24]
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	2302      	movs	r3, #2
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	4623      	mov	r3, r4
 8007478:	9a07      	ldr	r2, [sp, #28]
 800747a:	490a      	ldr	r1, [pc, #40]	; (80074a4 <xTimerCreateTimerTask+0x58>)
 800747c:	480a      	ldr	r0, [pc, #40]	; (80074a8 <xTimerCreateTimerTask+0x5c>)
 800747e:	f7ff fabb 	bl	80069f8 <xTaskCreateStatic>
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <xTimerCreateTimerTask+0x60>)
 8007484:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8007486:	b110      	cbz	r0, 800748e <xTimerCreateTimerTask+0x42>
}
 8007488:	2001      	movs	r0, #1
 800748a:	b008      	add	sp, #32
 800748c:	bd10      	pop	{r4, pc}
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800749e:	e7fe      	b.n	800749e <xTimerCreateTimerTask+0x52>
 80074a0:	20001d58 	.word	0x20001d58
 80074a4:	08009a70 	.word	0x08009a70
 80074a8:	080075b9 	.word	0x080075b9
 80074ac:	20001d5c 	.word	0x20001d5c

080074b0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80074b0:	b1d8      	cbz	r0, 80074ea <xTimerGenericCommand+0x3a>
 80074b2:	469c      	mov	ip, r3
 80074b4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80074b6:	4815      	ldr	r0, [pc, #84]	; (800750c <xTimerGenericCommand+0x5c>)
 80074b8:	6800      	ldr	r0, [r0, #0]
 80074ba:	b328      	cbz	r0, 8007508 <xTimerGenericCommand+0x58>
{
 80074bc:	b500      	push	{lr}
 80074be:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80074c0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074c2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80074c4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074c6:	2905      	cmp	r1, #5
 80074c8:	dc18      	bgt.n	80074fc <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074ca:	f7ff fe55 	bl	8007178 <xTaskGetSchedulerState>
 80074ce:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	bf0c      	ite	eq
 80074d6:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074d8:	461a      	movne	r2, r3
 80074da:	4669      	mov	r1, sp
 80074dc:	480b      	ldr	r0, [pc, #44]	; (800750c <xTimerGenericCommand+0x5c>)
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	f7fe fd3e 	bl	8005f60 <xQueueGenericSend>
}
 80074e4:	b005      	add	sp, #20
 80074e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80074fa:	e7fe      	b.n	80074fa <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074fc:	2300      	movs	r3, #0
 80074fe:	4662      	mov	r2, ip
 8007500:	4669      	mov	r1, sp
 8007502:	f7fe fe3f 	bl	8006184 <xQueueGenericSendFromISR>
 8007506:	e7ed      	b.n	80074e4 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8007508:	2000      	movs	r0, #0
}
 800750a:	4770      	bx	lr
 800750c:	20001d58 	.word	0x20001d58

08007510 <prvSampleTimeNow>:
{
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8007518:	f7ff fb28 	bl	8006b6c <xTaskGetTickCount>
 800751c:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 800751e:	4b23      	ldr	r3, [pc, #140]	; (80075ac <prvSampleTimeNow+0x9c>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4283      	cmp	r3, r0
 8007524:	d808      	bhi.n	8007538 <prvSampleTimeNow+0x28>
 8007526:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 8007528:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 800752c:	4b1f      	ldr	r3, [pc, #124]	; (80075ac <prvSampleTimeNow+0x9c>)
 800752e:	601e      	str	r6, [r3, #0]
}
 8007530:	4630      	mov	r0, r6
 8007532:	b002      	add	sp, #8
 8007534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007538:	4d1d      	ldr	r5, [pc, #116]	; (80075b0 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800753a:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	b35a      	cbz	r2, 800759c <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007548:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800754a:	f104 0904 	add.w	r9, r4, #4
 800754e:	4648      	mov	r0, r9
 8007550:	f7fe fb64 	bl	8005c1c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007556:	4620      	mov	r0, r4
 8007558:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800755a:	69e3      	ldr	r3, [r4, #28]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d1ee      	bne.n	800753e <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007560:	69a3      	ldr	r3, [r4, #24]
 8007562:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8007564:	429f      	cmp	r7, r3
 8007566:	d206      	bcs.n	8007576 <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007568:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800756a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800756c:	4649      	mov	r1, r9
 800756e:	6828      	ldr	r0, [r5, #0]
 8007570:	f7fe fb3b 	bl	8005bea <vListInsert>
 8007574:	e7e3      	b.n	800753e <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007576:	f8cd 8000 	str.w	r8, [sp]
 800757a:	4643      	mov	r3, r8
 800757c:	463a      	mov	r2, r7
 800757e:	4641      	mov	r1, r8
 8007580:	4620      	mov	r0, r4
 8007582:	f7ff ff95 	bl	80074b0 <xTimerGenericCommand>
				configASSERT( xResult );
 8007586:	2800      	cmp	r0, #0
 8007588:	d1d9      	bne.n	800753e <prvSampleTimeNow+0x2e>
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	e7fe      	b.n	800759a <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 800759c:	4a05      	ldr	r2, [pc, #20]	; (80075b4 <prvSampleTimeNow+0xa4>)
 800759e:	6810      	ldr	r0, [r2, #0]
 80075a0:	4903      	ldr	r1, [pc, #12]	; (80075b0 <prvSampleTimeNow+0xa0>)
 80075a2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80075a4:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e7be      	b.n	8007528 <prvSampleTimeNow+0x18>
 80075aa:	bf00      	nop
 80075ac:	20001d04 	.word	0x20001d04
 80075b0:	20001c34 	.word	0x20001c34
 80075b4:	20001c38 	.word	0x20001c38

080075b8 <prvTimerTask>:
{
 80075b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075bc:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075be:	4e74      	ldr	r6, [pc, #464]	; (8007790 <prvTimerTask+0x1d8>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075c0:	4d74      	ldr	r5, [pc, #464]	; (8007794 <prvTimerTask+0x1dc>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075c2:	4f75      	ldr	r7, [pc, #468]	; (8007798 <prvTimerTask+0x1e0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075c4:	6833      	ldr	r3, [r6, #0]
 80075c6:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 80075ca:	f1b8 0f00 	cmp.w	r8, #0
 80075ce:	d00f      	beq.n	80075f0 <prvTimerTask+0x38>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80075d6:	f7ff fac1 	bl	8006b5c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075da:	a804      	add	r0, sp, #16
 80075dc:	f7ff ff98 	bl	8007510 <prvSampleTimeNow>
 80075e0:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80075e2:	9b04      	ldr	r3, [sp, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d154      	bne.n	8007692 <prvTimerTask+0xda>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075e8:	4580      	cmp	r8, r0
 80075ea:	d923      	bls.n	8007634 <prvTimerTask+0x7c>
 80075ec:	2200      	movs	r2, #0
 80075ee:	e00d      	b.n	800760c <prvTimerTask+0x54>
	vTaskSuspendAll();
 80075f0:	f7ff fab4 	bl	8006b5c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075f4:	a804      	add	r0, sp, #16
 80075f6:	f7ff ff8b 	bl	8007510 <prvSampleTimeNow>
 80075fa:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80075fc:	9b04      	ldr	r3, [sp, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d147      	bne.n	8007692 <prvTimerTask+0xda>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	fab2 f282 	clz	r2, r2
 800760a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800760c:	eba8 0104 	sub.w	r1, r8, r4
 8007610:	6828      	ldr	r0, [r5, #0]
 8007612:	f7ff f859 	bl	80066c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007616:	f7ff fb49 	bl	8006cac <xTaskResumeAll>
 800761a:	2800      	cmp	r0, #0
 800761c:	d13b      	bne.n	8007696 <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
 800761e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007626:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	e030      	b.n	8007696 <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8007634:	f7ff fb3a 	bl	8006cac <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007638:	6833      	ldr	r3, [r6, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007640:	f109 0004 	add.w	r0, r9, #4
 8007644:	f7fe faea 	bl	8005c1c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007648:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d004      	beq.n	800765a <prvTimerTask+0xa2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007650:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8007654:	4648      	mov	r0, r9
 8007656:	4798      	blx	r3
}
 8007658:	e01d      	b.n	8007696 <prvTimerTask+0xde>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800765a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800765e:	4643      	mov	r3, r8
 8007660:	4622      	mov	r2, r4
 8007662:	4441      	add	r1, r8
 8007664:	4648      	mov	r0, r9
 8007666:	f7ff fe95 	bl	8007394 <prvInsertTimerInActiveList>
 800766a:	2800      	cmp	r0, #0
 800766c:	d0f0      	beq.n	8007650 <prvTimerTask+0x98>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800766e:	2100      	movs	r1, #0
 8007670:	9100      	str	r1, [sp, #0]
 8007672:	460b      	mov	r3, r1
 8007674:	4642      	mov	r2, r8
 8007676:	4648      	mov	r0, r9
 8007678:	f7ff ff1a 	bl	80074b0 <xTimerGenericCommand>
			configASSERT( xResult );
 800767c:	2800      	cmp	r0, #0
 800767e:	d1e7      	bne.n	8007650 <prvTimerTask+0x98>
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	e7fe      	b.n	8007690 <prvTimerTask+0xd8>
			( void ) xTaskResumeAll();
 8007692:	f7ff fb0b 	bl	8006cac <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007696:	2400      	movs	r4, #0
}
 8007698:	e006      	b.n	80076a8 <prvTimerTask+0xf0>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800769a:	9907      	ldr	r1, [sp, #28]
 800769c:	9806      	ldr	r0, [sp, #24]
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076a2:	9b04      	ldr	r3, [sp, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	da09      	bge.n	80076bc <prvTimerTask+0x104>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076a8:	4622      	mov	r2, r4
 80076aa:	a904      	add	r1, sp, #16
 80076ac:	6828      	ldr	r0, [r5, #0]
 80076ae:	f7fe fdcf 	bl	8006250 <xQueueReceive>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	d086      	beq.n	80075c4 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076b6:	9b04      	ldr	r3, [sp, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dbee      	blt.n	800769a <prvTimerTask+0xe2>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076c0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80076c4:	b11b      	cbz	r3, 80076ce <prvTimerTask+0x116>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076c6:	f108 0004 	add.w	r0, r8, #4
 80076ca:	f7fe faa7 	bl	8005c1c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ce:	a803      	add	r0, sp, #12
 80076d0:	f7ff ff1e 	bl	8007510 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80076d4:	9b04      	ldr	r3, [sp, #16]
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d8e6      	bhi.n	80076a8 <prvTimerTask+0xf0>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <prvTimerTask+0x128>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007709 	.word	0x08007709
 80076e4:	08007709 	.word	0x08007709
 80076e8:	08007709 	.word	0x08007709
 80076ec:	080076a9 	.word	0x080076a9
 80076f0:	08007757 	.word	0x08007757
 80076f4:	0800777f 	.word	0x0800777f
 80076f8:	08007709 	.word	0x08007709
 80076fc:	08007709 	.word	0x08007709
 8007700:	080076a9 	.word	0x080076a9
 8007704:	08007757 	.word	0x08007757
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007708:	9b05      	ldr	r3, [sp, #20]
 800770a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800770e:	4602      	mov	r2, r0
 8007710:	4419      	add	r1, r3
 8007712:	4640      	mov	r0, r8
 8007714:	f7ff fe3e 	bl	8007394 <prvInsertTimerInActiveList>
 8007718:	2800      	cmp	r0, #0
 800771a:	d0c5      	beq.n	80076a8 <prvTimerTask+0xf0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800771c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007720:	4640      	mov	r0, r8
 8007722:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007724:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d1bd      	bne.n	80076a8 <prvTimerTask+0xf0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800772c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8007730:	9400      	str	r4, [sp, #0]
 8007732:	4623      	mov	r3, r4
 8007734:	9905      	ldr	r1, [sp, #20]
 8007736:	440a      	add	r2, r1
 8007738:	4621      	mov	r1, r4
 800773a:	4640      	mov	r0, r8
 800773c:	f7ff feb8 	bl	80074b0 <xTimerGenericCommand>
							configASSERT( xResult );
 8007740:	2800      	cmp	r0, #0
 8007742:	d1b1      	bne.n	80076a8 <prvTimerTask+0xf0>
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	e7fe      	b.n	8007754 <prvTimerTask+0x19c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007756:	9905      	ldr	r1, [sp, #20]
 8007758:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800775c:	b131      	cbz	r1, 800776c <prvTimerTask+0x1b4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800775e:	4603      	mov	r3, r0
 8007760:	4602      	mov	r2, r0
 8007762:	4401      	add	r1, r0
 8007764:	4640      	mov	r0, r8
 8007766:	f7ff fe15 	bl	8007394 <prvInsertTimerInActiveList>
					break;
 800776a:	e79d      	b.n	80076a8 <prvTimerTask+0xf0>
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800777c:	e7fe      	b.n	800777c <prvTimerTask+0x1c4>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800777e:	f898 302c 	ldrb.w	r3, [r8, #44]	; 0x2c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d190      	bne.n	80076a8 <prvTimerTask+0xf0>
							vPortFree( pxTimer );
 8007786:	4640      	mov	r0, r8
 8007788:	f000 fa54 	bl	8007c34 <vPortFree>
 800778c:	e78c      	b.n	80076a8 <prvTimerTask+0xf0>
 800778e:	bf00      	nop
 8007790:	20001c34 	.word	0x20001c34
 8007794:	20001d58 	.word	0x20001d58
 8007798:	20001c38 	.word	0x20001c38

0800779c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800779c:	b510      	push	{r4, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	4614      	mov	r4, r2
 80077a2:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80077a4:	f06f 0301 	mvn.w	r3, #1
 80077a8:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80077aa:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80077ac:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80077ae:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077b0:	2300      	movs	r3, #0
 80077b2:	4669      	mov	r1, sp
 80077b4:	4802      	ldr	r0, [pc, #8]	; (80077c0 <xTimerPendFunctionCallFromISR+0x24>)
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	f7fe fce4 	bl	8006184 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 80077bc:	b004      	add	sp, #16
 80077be:	bd10      	pop	{r4, pc}
 80077c0:	20001d58 	.word	0x20001d58

080077c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <prvTaskExitError+0x3c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d2:	d008      	beq.n	80077e6 <prvTaskExitError+0x22>
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	e7fe      	b.n	80077e4 <prvTaskExitError+0x20>
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0fc      	beq.n	80077f6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80077fc:	b002      	add	sp, #8
 80077fe:	4770      	bx	lr
 8007800:	200008b4 	.word	0x200008b4

08007804 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007804:	4806      	ldr	r0, [pc, #24]	; (8007820 <prvPortStartFirstTask+0x1c>)
 8007806:	6800      	ldr	r0, [r0, #0]
 8007808:	6800      	ldr	r0, [r0, #0]
 800780a:	f380 8808 	msr	MSP, r0
 800780e:	b662      	cpsie	i
 8007810:	b661      	cpsie	f
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	df00      	svc	0
 800781c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800781e:	0000      	.short	0x0000
 8007820:	e000ed08 	.word	0xe000ed08

08007824 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007828:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800782c:	f021 0101 	bic.w	r1, r1, #1
 8007830:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <pxPortInitialiseStack+0x20>)
 8007836:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800783a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800783e:	3840      	subs	r0, #64	; 0x40
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	080077c5 	.word	0x080077c5
	...

08007850 <SVC_Handler>:
	__asm volatile (
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <pxCurrentTCBConst2>)
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800785a:	f380 8809 	msr	PSP, r0
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8811 	msr	BASEPRI, r0
 800786a:	f04e 0e0d 	orr.w	lr, lr, #13
 800786e:	4770      	bx	lr

08007870 <pxCurrentTCBConst2>:
 8007870:	20001738 	.word	0x20001738

08007874 <vPortEnterCritical>:
 8007874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007884:	4a0b      	ldr	r2, [pc, #44]	; (80078b4 <vPortEnterCritical+0x40>)
 8007886:	6813      	ldr	r3, [r2, #0]
 8007888:	3301      	adds	r3, #1
 800788a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800788c:	2b01      	cmp	r3, #1
 800788e:	d000      	beq.n	8007892 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007890:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007892:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007896:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800789a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800789e:	d0f7      	beq.n	8007890 <vPortEnterCritical+0x1c>
 80078a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a4:	f383 8811 	msr	BASEPRI, r3
 80078a8:	f3bf 8f6f 	isb	sy
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	e7fe      	b.n	80078b0 <vPortEnterCritical+0x3c>
 80078b2:	bf00      	nop
 80078b4:	200008b4 	.word	0x200008b4

080078b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80078b8:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <vPortExitCritical+0x28>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	b943      	cbnz	r3, 80078d0 <vPortExitCritical+0x18>
 80078be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	e7fe      	b.n	80078ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80078d0:	3b01      	subs	r3, #1
 80078d2:	4a03      	ldr	r2, [pc, #12]	; (80078e0 <vPortExitCritical+0x28>)
 80078d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078d6:	b90b      	cbnz	r3, 80078dc <vPortExitCritical+0x24>
	__asm volatile
 80078d8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	200008b4 	.word	0x200008b4
	...

080078f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078f0:	f3ef 8009 	mrs	r0, PSP
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <pxCurrentTCBConst>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007900:	6010      	str	r0, [r2, #0]
 8007902:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007906:	f04f 0050 	mov.w	r0, #80	; 0x50
 800790a:	f380 8811 	msr	BASEPRI, r0
 800790e:	f7ff fa9f 	bl	8006e50 <vTaskSwitchContext>
 8007912:	f04f 0000 	mov.w	r0, #0
 8007916:	f380 8811 	msr	BASEPRI, r0
 800791a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	6808      	ldr	r0, [r1, #0]
 8007922:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007926:	f380 8809 	msr	PSP, r0
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	4770      	bx	lr

08007930 <pxCurrentTCBConst>:
 8007930:	20001738 	.word	0x20001738

08007934 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007934:	b508      	push	{r3, lr}
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007946:	f7ff f917 	bl	8006b78 <xTaskIncrementTick>
 800794a:	b128      	cbz	r0, 8007958 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800794c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007954:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007958:	2300      	movs	r3, #0
 800795a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800795e:	bd08      	pop	{r3, pc}

08007960 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007960:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007964:	2300      	movs	r3, #0
 8007966:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007968:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <vPortSetupTimerInterrupt+0x20>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4905      	ldr	r1, [pc, #20]	; (8007984 <vPortSetupTimerInterrupt+0x24>)
 8007970:	fba1 1303 	umull	r1, r3, r1, r3
 8007974:	099b      	lsrs	r3, r3, #6
 8007976:	3b01      	subs	r3, #1
 8007978:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800797a:	2307      	movs	r3, #7
 800797c:	6113      	str	r3, [r2, #16]
}
 800797e:	4770      	bx	lr
 8007980:	20000020 	.word	0x20000020
 8007984:	10624dd3 	.word	0x10624dd3

08007988 <xPortStartScheduler>:
{
 8007988:	b510      	push	{r4, lr}
 800798a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800798c:	4b2c      	ldr	r3, [pc, #176]	; (8007a40 <xPortStartScheduler+0xb8>)
 800798e:	781a      	ldrb	r2, [r3, #0]
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007994:	22ff      	movs	r2, #255	; 0xff
 8007996:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079a8:	4a26      	ldr	r2, [pc, #152]	; (8007a44 <xPortStartScheduler+0xbc>)
 80079aa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ac:	4b26      	ldr	r3, [pc, #152]	; (8007a48 <xPortStartScheduler+0xc0>)
 80079ae:	2207      	movs	r2, #7
 80079b0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80079ba:	d013      	beq.n	80079e4 <xPortStartScheduler+0x5c>
 80079bc:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079be:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ca:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80079ce:	4610      	mov	r0, r2
 80079d0:	3a01      	subs	r2, #1
 80079d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80079d6:	d1f2      	bne.n	80079be <xPortStartScheduler+0x36>
 80079d8:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <xPortStartScheduler+0xc0>)
 80079da:	6010      	str	r0, [r2, #0]
 80079dc:	f88d 3003 	strb.w	r3, [sp, #3]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079e0:	2803      	cmp	r0, #3
 80079e2:	d008      	beq.n	80079f6 <xPortStartScheduler+0x6e>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	e7fe      	b.n	80079f4 <xPortStartScheduler+0x6c>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <xPortStartScheduler+0xc0>)
 80079f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80079fc:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	4a0f      	ldr	r2, [pc, #60]	; (8007a40 <xPortStartScheduler+0xb8>)
 8007a04:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a0a:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007a0e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007a12:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a16:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007a1a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007a1e:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007a22:	f7ff ff9d 	bl	8007960 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007a26:	2400      	movs	r4, #0
 8007a28:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <xPortStartScheduler+0xc4>)
 8007a2a:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007a2c:	f7ff feea 	bl	8007804 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007a30:	f7ff fa0e 	bl	8006e50 <vTaskSwitchContext>
	prvTaskExitError();
 8007a34:	f7ff fec6 	bl	80077c4 <prvTaskExitError>
}
 8007a38:	4620      	mov	r0, r4
 8007a3a:	b002      	add	sp, #8
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	e000e400 	.word	0xe000e400
 8007a44:	20001d60 	.word	0x20001d60
 8007a48:	20001d64 	.word	0x20001d64
 8007a4c:	200008b4 	.word	0x200008b4

08007a50 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a50:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a54:	2b0f      	cmp	r3, #15
 8007a56:	d90f      	bls.n	8007a78 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a58:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <vPortValidateInterruptPriority+0x50>)
 8007a5a:	5c9b      	ldrb	r3, [r3, r2]
 8007a5c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a5e:	4a11      	ldr	r2, [pc, #68]	; (8007aa4 <vPortValidateInterruptPriority+0x54>)
 8007a60:	7812      	ldrb	r2, [r2, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d908      	bls.n	8007a78 <vPortValidateInterruptPriority+0x28>
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	e7fe      	b.n	8007a76 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007a7c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007a80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a84:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <vPortValidateInterruptPriority+0x58>)
 8007a86:	6812      	ldr	r2, [r2, #0]
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d908      	bls.n	8007a9e <vPortValidateInterruptPriority+0x4e>
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	e7fe      	b.n	8007a9c <vPortValidateInterruptPriority+0x4c>
	}
 8007a9e:	4770      	bx	lr
 8007aa0:	e000e3f0 	.word	0xe000e3f0
 8007aa4:	20001d60 	.word	0x20001d60
 8007aa8:	20001d64 	.word	0x20001d64

08007aac <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007aac:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aae:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <prvInsertBlockIntoFreeList+0x54>)
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4283      	cmp	r3, r0
 8007ab6:	d3fb      	bcc.n	8007ab0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ab8:	6854      	ldr	r4, [r2, #4]
 8007aba:	1911      	adds	r1, r2, r4
 8007abc:	4288      	cmp	r0, r1
 8007abe:	d009      	beq.n	8007ad4 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ac0:	6844      	ldr	r4, [r0, #4]
 8007ac2:	1901      	adds	r1, r0, r4
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	d00f      	beq.n	8007ae8 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ac8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007aca:	4282      	cmp	r2, r0
 8007acc:	d000      	beq.n	8007ad0 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ace:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ad0:	bc10      	pop	{r4}
 8007ad2:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ad4:	6841      	ldr	r1, [r0, #4]
 8007ad6:	4421      	add	r1, r4
 8007ad8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ada:	460c      	mov	r4, r1
 8007adc:	4411      	add	r1, r2
 8007ade:	428b      	cmp	r3, r1
 8007ae0:	d001      	beq.n	8007ae6 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ae2:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 8007ae4:	e7f4      	b.n	8007ad0 <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ae6:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ae8:	4906      	ldr	r1, [pc, #24]	; (8007b04 <prvInsertBlockIntoFreeList+0x58>)
 8007aea:	6809      	ldr	r1, [r1, #0]
 8007aec:	428b      	cmp	r3, r1
 8007aee:	d005      	beq.n	8007afc <prvInsertBlockIntoFreeList+0x50>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4423      	add	r3, r4
 8007af4:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	e7e5      	b.n	8007ac8 <prvInsertBlockIntoFreeList+0x1c>
 8007afc:	460b      	mov	r3, r1
 8007afe:	e7e3      	b.n	8007ac8 <prvInsertBlockIntoFreeList+0x1c>
 8007b00:	20002d18 	.word	0x20002d18
 8007b04:	20001d68 	.word	0x20001d68

08007b08 <pvPortMalloc>:
{
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007b0c:	f7ff f826 	bl	8006b5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007b10:	4b42      	ldr	r3, [pc, #264]	; (8007c1c <pvPortMalloc+0x114>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	b1b3      	cbz	r3, 8007b44 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b16:	4b42      	ldr	r3, [pc, #264]	; (8007c20 <pvPortMalloc+0x118>)
 8007b18:	681d      	ldr	r5, [r3, #0]
 8007b1a:	4225      	tst	r5, r4
 8007b1c:	d179      	bne.n	8007c12 <pvPortMalloc+0x10a>
			if( xWantedSize > 0 )
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	d077      	beq.n	8007c12 <pvPortMalloc+0x10a>
				xWantedSize += xHeapStructSize;
 8007b22:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b26:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b2a:	bf1c      	itt	ne
 8007b2c:	f022 0207 	bicne.w	r2, r2, #7
 8007b30:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b32:	2a00      	cmp	r2, #0
 8007b34:	d06d      	beq.n	8007c12 <pvPortMalloc+0x10a>
 8007b36:	4b3b      	ldr	r3, [pc, #236]	; (8007c24 <pvPortMalloc+0x11c>)
 8007b38:	681e      	ldr	r6, [r3, #0]
 8007b3a:	4296      	cmp	r6, r2
 8007b3c:	d369      	bcc.n	8007c12 <pvPortMalloc+0x10a>
				pxBlock = xStart.pxNextFreeBlock;
 8007b3e:	493a      	ldr	r1, [pc, #232]	; (8007c28 <pvPortMalloc+0x120>)
 8007b40:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b42:	e027      	b.n	8007b94 <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8007b44:	4a39      	ldr	r2, [pc, #228]	; (8007c2c <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b46:	f012 0f07 	tst.w	r2, #7
 8007b4a:	d007      	beq.n	8007b5c <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b4c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b4e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b52:	f502 627a 	add.w	r2, r2, #4000	; 0xfa0
 8007b56:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b58:	460a      	mov	r2, r1
 8007b5a:	e001      	b.n	8007b60 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b5c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b60:	4831      	ldr	r0, [pc, #196]	; (8007c28 <pvPortMalloc+0x120>)
 8007b62:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b64:	2100      	movs	r1, #0
 8007b66:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b68:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007b6a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b6c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007b70:	482a      	ldr	r0, [pc, #168]	; (8007c1c <pvPortMalloc+0x114>)
 8007b72:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007b74:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b76:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b78:	1a99      	subs	r1, r3, r2
 8007b7a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b7c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b7e:	4b2c      	ldr	r3, [pc, #176]	; (8007c30 <pvPortMalloc+0x128>)
 8007b80:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b82:	4b28      	ldr	r3, [pc, #160]	; (8007c24 <pvPortMalloc+0x11c>)
 8007b84:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b86:	4b26      	ldr	r3, [pc, #152]	; (8007c20 <pvPortMalloc+0x118>)
 8007b88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b8c:	601a      	str	r2, [r3, #0]
}
 8007b8e:	e7c2      	b.n	8007b16 <pvPortMalloc+0xe>
 8007b90:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b92:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b94:	6863      	ldr	r3, [r4, #4]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d202      	bcs.n	8007ba0 <pvPortMalloc+0x98>
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f7      	bne.n	8007b90 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8007ba0:	4b1e      	ldr	r3, [pc, #120]	; (8007c1c <pvPortMalloc+0x114>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	d034      	beq.n	8007c12 <pvPortMalloc+0x10a>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ba8:	680f      	ldr	r7, [r1, #0]
 8007baa:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bb0:	6863      	ldr	r3, [r4, #4]
 8007bb2:	1a9b      	subs	r3, r3, r2
 8007bb4:	2b10      	cmp	r3, #16
 8007bb6:	d910      	bls.n	8007bda <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bb8:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bba:	f010 0f07 	tst.w	r0, #7
 8007bbe:	d008      	beq.n	8007bd2 <pvPortMalloc+0xca>
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	e7fe      	b.n	8007bd0 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bd2:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bd4:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bd6:	f7ff ff69 	bl	8007aac <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	1af6      	subs	r6, r6, r3
 8007bde:	4a11      	ldr	r2, [pc, #68]	; (8007c24 <pvPortMalloc+0x11c>)
 8007be0:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007be2:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <pvPortMalloc+0x128>)
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007be8:	bf3c      	itt	cc
 8007bea:	4a11      	ldrcc	r2, [pc, #68]	; (8007c30 <pvPortMalloc+0x128>)
 8007bec:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bee:	431d      	orrs	r5, r3
 8007bf0:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007bf6:	f7ff f859 	bl	8006cac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bfa:	f017 0f07 	tst.w	r7, #7
 8007bfe:	d00b      	beq.n	8007c18 <pvPortMalloc+0x110>
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	e7fe      	b.n	8007c10 <pvPortMalloc+0x108>
	( void ) xTaskResumeAll();
 8007c12:	f7ff f84b 	bl	8006cac <xTaskResumeAll>
 8007c16:	2700      	movs	r7, #0
}
 8007c18:	4638      	mov	r0, r7
 8007c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1c:	20001d68 	.word	0x20001d68
 8007c20:	20002d0c 	.word	0x20002d0c
 8007c24:	20002d10 	.word	0x20002d10
 8007c28:	20002d18 	.word	0x20002d18
 8007c2c:	20001d6c 	.word	0x20001d6c
 8007c30:	20002d14 	.word	0x20002d14

08007c34 <vPortFree>:
	if( pv != NULL )
 8007c34:	b378      	cbz	r0, 8007c96 <vPortFree+0x62>
{
 8007c36:	b510      	push	{r4, lr}
 8007c38:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007c3e:	4a16      	ldr	r2, [pc, #88]	; (8007c98 <vPortFree+0x64>)
 8007c40:	6812      	ldr	r2, [r2, #0]
 8007c42:	4213      	tst	r3, r2
 8007c44:	d108      	bne.n	8007c58 <vPortFree+0x24>
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	e7fe      	b.n	8007c56 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c58:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007c5c:	b141      	cbz	r1, 8007c70 <vPortFree+0x3c>
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	e7fe      	b.n	8007c6e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c70:	ea23 0302 	bic.w	r3, r3, r2
 8007c74:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007c78:	f7fe ff70 	bl	8006b5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c7c:	4a07      	ldr	r2, [pc, #28]	; (8007c9c <vPortFree+0x68>)
 8007c7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007c82:	6811      	ldr	r1, [r2, #0]
 8007c84:	440b      	add	r3, r1
 8007c86:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c88:	f1a4 0008 	sub.w	r0, r4, #8
 8007c8c:	f7ff ff0e 	bl	8007aac <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007c90:	f7ff f80c 	bl	8006cac <xTaskResumeAll>
}
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	4770      	bx	lr
 8007c98:	20002d0c 	.word	0x20002d0c
 8007c9c:	20002d10 	.word	0x20002d10

08007ca0 <__itoa>:
 8007ca0:	1e93      	subs	r3, r2, #2
 8007ca2:	2b22      	cmp	r3, #34	; 0x22
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	d904      	bls.n	8007cb4 <__itoa+0x14>
 8007caa:	2300      	movs	r3, #0
 8007cac:	461c      	mov	r4, r3
 8007cae:	700b      	strb	r3, [r1, #0]
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bd10      	pop	{r4, pc}
 8007cb4:	2a0a      	cmp	r2, #10
 8007cb6:	d109      	bne.n	8007ccc <__itoa+0x2c>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	da07      	bge.n	8007ccc <__itoa+0x2c>
 8007cbc:	232d      	movs	r3, #45	; 0x2d
 8007cbe:	700b      	strb	r3, [r1, #0]
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4240      	negs	r0, r0
 8007cc4:	4421      	add	r1, r4
 8007cc6:	f000 f843 	bl	8007d50 <__utoa>
 8007cca:	e7f1      	b.n	8007cb0 <__itoa+0x10>
 8007ccc:	2100      	movs	r1, #0
 8007cce:	e7f9      	b.n	8007cc4 <__itoa+0x24>

08007cd0 <itoa>:
 8007cd0:	f7ff bfe6 	b.w	8007ca0 <__itoa>

08007cd4 <rand>:
 8007cd4:	4b16      	ldr	r3, [pc, #88]	; (8007d30 <rand+0x5c>)
 8007cd6:	b510      	push	{r4, lr}
 8007cd8:	681c      	ldr	r4, [r3, #0]
 8007cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007cdc:	b9b3      	cbnz	r3, 8007d0c <rand+0x38>
 8007cde:	2018      	movs	r0, #24
 8007ce0:	f000 fa76 	bl	80081d0 <malloc>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	6320      	str	r0, [r4, #48]	; 0x30
 8007ce8:	b920      	cbnz	r0, 8007cf4 <rand+0x20>
 8007cea:	2152      	movs	r1, #82	; 0x52
 8007cec:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <rand+0x60>)
 8007cee:	4812      	ldr	r0, [pc, #72]	; (8007d38 <rand+0x64>)
 8007cf0:	f000 fa08 	bl	8008104 <__assert_func>
 8007cf4:	4911      	ldr	r1, [pc, #68]	; (8007d3c <rand+0x68>)
 8007cf6:	4b12      	ldr	r3, [pc, #72]	; (8007d40 <rand+0x6c>)
 8007cf8:	e9c0 1300 	strd	r1, r3, [r0]
 8007cfc:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <rand+0x70>)
 8007cfe:	2100      	movs	r1, #0
 8007d00:	6083      	str	r3, [r0, #8]
 8007d02:	230b      	movs	r3, #11
 8007d04:	8183      	strh	r3, [r0, #12]
 8007d06:	2001      	movs	r0, #1
 8007d08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007d0c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007d0e:	480e      	ldr	r0, [pc, #56]	; (8007d48 <rand+0x74>)
 8007d10:	690b      	ldr	r3, [r1, #16]
 8007d12:	694c      	ldr	r4, [r1, #20]
 8007d14:	4358      	muls	r0, r3
 8007d16:	4a0d      	ldr	r2, [pc, #52]	; (8007d4c <rand+0x78>)
 8007d18:	fb02 0004 	mla	r0, r2, r4, r0
 8007d1c:	fba3 3202 	umull	r3, r2, r3, r2
 8007d20:	3301      	adds	r3, #1
 8007d22:	eb40 0002 	adc.w	r0, r0, r2
 8007d26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007d2a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d2e:	bd10      	pop	{r4, pc}
 8007d30:	20000910 	.word	0x20000910
 8007d34:	08009a78 	.word	0x08009a78
 8007d38:	08009a8f 	.word	0x08009a8f
 8007d3c:	abcd330e 	.word	0xabcd330e
 8007d40:	e66d1234 	.word	0xe66d1234
 8007d44:	0005deec 	.word	0x0005deec
 8007d48:	5851f42d 	.word	0x5851f42d
 8007d4c:	4c957f2d 	.word	0x4c957f2d

08007d50 <__utoa>:
 8007d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d52:	b08b      	sub	sp, #44	; 0x2c
 8007d54:	4605      	mov	r5, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	466e      	mov	r6, sp
 8007d5a:	4c1d      	ldr	r4, [pc, #116]	; (8007dd0 <__utoa+0x80>)
 8007d5c:	f104 0c20 	add.w	ip, r4, #32
 8007d60:	4637      	mov	r7, r6
 8007d62:	6820      	ldr	r0, [r4, #0]
 8007d64:	6861      	ldr	r1, [r4, #4]
 8007d66:	3408      	adds	r4, #8
 8007d68:	c703      	stmia	r7!, {r0, r1}
 8007d6a:	4564      	cmp	r4, ip
 8007d6c:	463e      	mov	r6, r7
 8007d6e:	d1f7      	bne.n	8007d60 <__utoa+0x10>
 8007d70:	7921      	ldrb	r1, [r4, #4]
 8007d72:	6820      	ldr	r0, [r4, #0]
 8007d74:	7139      	strb	r1, [r7, #4]
 8007d76:	1e91      	subs	r1, r2, #2
 8007d78:	2922      	cmp	r1, #34	; 0x22
 8007d7a:	6038      	str	r0, [r7, #0]
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	d904      	bls.n	8007d8c <__utoa+0x3c>
 8007d82:	7019      	strb	r1, [r3, #0]
 8007d84:	460b      	mov	r3, r1
 8007d86:	4618      	mov	r0, r3
 8007d88:	b00b      	add	sp, #44	; 0x2c
 8007d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d8c:	1e58      	subs	r0, r3, #1
 8007d8e:	4684      	mov	ip, r0
 8007d90:	fbb5 f7f2 	udiv	r7, r5, r2
 8007d94:	fb02 5617 	mls	r6, r2, r7, r5
 8007d98:	3628      	adds	r6, #40	; 0x28
 8007d9a:	446e      	add	r6, sp
 8007d9c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007da0:	460c      	mov	r4, r1
 8007da2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007da6:	462e      	mov	r6, r5
 8007da8:	42b2      	cmp	r2, r6
 8007daa:	463d      	mov	r5, r7
 8007dac:	f101 0101 	add.w	r1, r1, #1
 8007db0:	d9ee      	bls.n	8007d90 <__utoa+0x40>
 8007db2:	2200      	movs	r2, #0
 8007db4:	545a      	strb	r2, [r3, r1]
 8007db6:	1919      	adds	r1, r3, r4
 8007db8:	1aa5      	subs	r5, r4, r2
 8007dba:	42aa      	cmp	r2, r5
 8007dbc:	dae3      	bge.n	8007d86 <__utoa+0x36>
 8007dbe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007dc2:	780e      	ldrb	r6, [r1, #0]
 8007dc4:	3201      	adds	r2, #1
 8007dc6:	7006      	strb	r6, [r0, #0]
 8007dc8:	f801 5901 	strb.w	r5, [r1], #-1
 8007dcc:	e7f4      	b.n	8007db8 <__utoa+0x68>
 8007dce:	bf00      	nop
 8007dd0:	08009ae7 	.word	0x08009ae7

08007dd4 <std>:
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	4604      	mov	r4, r0
 8007dda:	e9c0 3300 	strd	r3, r3, [r0]
 8007dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007de2:	6083      	str	r3, [r0, #8]
 8007de4:	8181      	strh	r1, [r0, #12]
 8007de6:	6643      	str	r3, [r0, #100]	; 0x64
 8007de8:	81c2      	strh	r2, [r0, #14]
 8007dea:	6183      	str	r3, [r0, #24]
 8007dec:	4619      	mov	r1, r3
 8007dee:	2208      	movs	r2, #8
 8007df0:	305c      	adds	r0, #92	; 0x5c
 8007df2:	f000 f8f4 	bl	8007fde <memset>
 8007df6:	4b0d      	ldr	r3, [pc, #52]	; (8007e2c <std+0x58>)
 8007df8:	6224      	str	r4, [r4, #32]
 8007dfa:	6263      	str	r3, [r4, #36]	; 0x24
 8007dfc:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <std+0x5c>)
 8007dfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <std+0x60>)
 8007e02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e04:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <std+0x64>)
 8007e06:	6323      	str	r3, [r4, #48]	; 0x30
 8007e08:	4b0c      	ldr	r3, [pc, #48]	; (8007e3c <std+0x68>)
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d006      	beq.n	8007e1c <std+0x48>
 8007e0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007e12:	4294      	cmp	r4, r2
 8007e14:	d002      	beq.n	8007e1c <std+0x48>
 8007e16:	33d0      	adds	r3, #208	; 0xd0
 8007e18:	429c      	cmp	r4, r3
 8007e1a:	d105      	bne.n	8007e28 <std+0x54>
 8007e1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e24:	f000 b954 	b.w	80080d0 <__retarget_lock_init_recursive>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	bf00      	nop
 8007e2c:	08007f59 	.word	0x08007f59
 8007e30:	08007f7b 	.word	0x08007f7b
 8007e34:	08007fb3 	.word	0x08007fb3
 8007e38:	08007fd7 	.word	0x08007fd7
 8007e3c:	20002d20 	.word	0x20002d20

08007e40 <stdio_exit_handler>:
 8007e40:	4a02      	ldr	r2, [pc, #8]	; (8007e4c <stdio_exit_handler+0xc>)
 8007e42:	4903      	ldr	r1, [pc, #12]	; (8007e50 <stdio_exit_handler+0x10>)
 8007e44:	4803      	ldr	r0, [pc, #12]	; (8007e54 <stdio_exit_handler+0x14>)
 8007e46:	f000 b869 	b.w	8007f1c <_fwalk_sglue>
 8007e4a:	bf00      	nop
 8007e4c:	200008b8 	.word	0x200008b8
 8007e50:	0800843d 	.word	0x0800843d
 8007e54:	200008c4 	.word	0x200008c4

08007e58 <cleanup_stdio>:
 8007e58:	6841      	ldr	r1, [r0, #4]
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <cleanup_stdio+0x34>)
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	4299      	cmp	r1, r3
 8007e60:	4604      	mov	r4, r0
 8007e62:	d001      	beq.n	8007e68 <cleanup_stdio+0x10>
 8007e64:	f000 faea 	bl	800843c <_fflush_r>
 8007e68:	68a1      	ldr	r1, [r4, #8]
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <cleanup_stdio+0x38>)
 8007e6c:	4299      	cmp	r1, r3
 8007e6e:	d002      	beq.n	8007e76 <cleanup_stdio+0x1e>
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fae3 	bl	800843c <_fflush_r>
 8007e76:	68e1      	ldr	r1, [r4, #12]
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <cleanup_stdio+0x3c>)
 8007e7a:	4299      	cmp	r1, r3
 8007e7c:	d004      	beq.n	8007e88 <cleanup_stdio+0x30>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e84:	f000 bada 	b.w	800843c <_fflush_r>
 8007e88:	bd10      	pop	{r4, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20002d20 	.word	0x20002d20
 8007e90:	20002d88 	.word	0x20002d88
 8007e94:	20002df0 	.word	0x20002df0

08007e98 <global_stdio_init.part.0>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <global_stdio_init.part.0+0x30>)
 8007e9c:	4c0b      	ldr	r4, [pc, #44]	; (8007ecc <global_stdio_init.part.0+0x34>)
 8007e9e:	4a0c      	ldr	r2, [pc, #48]	; (8007ed0 <global_stdio_init.part.0+0x38>)
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	2104      	movs	r1, #4
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f7ff ff94 	bl	8007dd4 <std>
 8007eac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	2109      	movs	r1, #9
 8007eb4:	f7ff ff8e 	bl	8007dd4 <std>
 8007eb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec2:	2112      	movs	r1, #18
 8007ec4:	f7ff bf86 	b.w	8007dd4 <std>
 8007ec8:	20002e58 	.word	0x20002e58
 8007ecc:	20002d20 	.word	0x20002d20
 8007ed0:	08007e41 	.word	0x08007e41

08007ed4 <__sfp_lock_acquire>:
 8007ed4:	4801      	ldr	r0, [pc, #4]	; (8007edc <__sfp_lock_acquire+0x8>)
 8007ed6:	f000 b8fc 	b.w	80080d2 <__retarget_lock_acquire_recursive>
 8007eda:	bf00      	nop
 8007edc:	20002e61 	.word	0x20002e61

08007ee0 <__sfp_lock_release>:
 8007ee0:	4801      	ldr	r0, [pc, #4]	; (8007ee8 <__sfp_lock_release+0x8>)
 8007ee2:	f000 b8f7 	b.w	80080d4 <__retarget_lock_release_recursive>
 8007ee6:	bf00      	nop
 8007ee8:	20002e61 	.word	0x20002e61

08007eec <__sinit>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	4604      	mov	r4, r0
 8007ef0:	f7ff fff0 	bl	8007ed4 <__sfp_lock_acquire>
 8007ef4:	6a23      	ldr	r3, [r4, #32]
 8007ef6:	b11b      	cbz	r3, 8007f00 <__sinit+0x14>
 8007ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efc:	f7ff bff0 	b.w	8007ee0 <__sfp_lock_release>
 8007f00:	4b04      	ldr	r3, [pc, #16]	; (8007f14 <__sinit+0x28>)
 8007f02:	6223      	str	r3, [r4, #32]
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <__sinit+0x2c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1f5      	bne.n	8007ef8 <__sinit+0xc>
 8007f0c:	f7ff ffc4 	bl	8007e98 <global_stdio_init.part.0>
 8007f10:	e7f2      	b.n	8007ef8 <__sinit+0xc>
 8007f12:	bf00      	nop
 8007f14:	08007e59 	.word	0x08007e59
 8007f18:	20002e58 	.word	0x20002e58

08007f1c <_fwalk_sglue>:
 8007f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f20:	4607      	mov	r7, r0
 8007f22:	4688      	mov	r8, r1
 8007f24:	4614      	mov	r4, r2
 8007f26:	2600      	movs	r6, #0
 8007f28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007f30:	d505      	bpl.n	8007f3e <_fwalk_sglue+0x22>
 8007f32:	6824      	ldr	r4, [r4, #0]
 8007f34:	2c00      	cmp	r4, #0
 8007f36:	d1f7      	bne.n	8007f28 <_fwalk_sglue+0xc>
 8007f38:	4630      	mov	r0, r6
 8007f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d907      	bls.n	8007f54 <_fwalk_sglue+0x38>
 8007f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	d003      	beq.n	8007f54 <_fwalk_sglue+0x38>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4638      	mov	r0, r7
 8007f50:	47c0      	blx	r8
 8007f52:	4306      	orrs	r6, r0
 8007f54:	3568      	adds	r5, #104	; 0x68
 8007f56:	e7e9      	b.n	8007f2c <_fwalk_sglue+0x10>

08007f58 <__sread>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f60:	f000 f868 	bl	8008034 <_read_r>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	bfab      	itete	ge
 8007f68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f6a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f6c:	181b      	addge	r3, r3, r0
 8007f6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f72:	bfac      	ite	ge
 8007f74:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f76:	81a3      	strhlt	r3, [r4, #12]
 8007f78:	bd10      	pop	{r4, pc}

08007f7a <__swrite>:
 8007f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7e:	461f      	mov	r7, r3
 8007f80:	898b      	ldrh	r3, [r1, #12]
 8007f82:	4605      	mov	r5, r0
 8007f84:	05db      	lsls	r3, r3, #23
 8007f86:	460c      	mov	r4, r1
 8007f88:	4616      	mov	r6, r2
 8007f8a:	d505      	bpl.n	8007f98 <__swrite+0x1e>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f94:	f000 f83c 	bl	8008010 <_lseek_r>
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa0:	81a3      	strh	r3, [r4, #12]
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	463b      	mov	r3, r7
 8007fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fae:	f000 b853 	b.w	8008058 <_write_r>

08007fb2 <__sseek>:
 8007fb2:	b510      	push	{r4, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fba:	f000 f829 	bl	8008010 <_lseek_r>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	bf15      	itete	ne
 8007fc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fce:	81a3      	strheq	r3, [r4, #12]
 8007fd0:	bf18      	it	ne
 8007fd2:	81a3      	strhne	r3, [r4, #12]
 8007fd4:	bd10      	pop	{r4, pc}

08007fd6 <__sclose>:
 8007fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fda:	f000 b809 	b.w	8007ff0 <_close_r>

08007fde <memset>:
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d100      	bne.n	8007fe8 <memset+0xa>
 8007fe6:	4770      	bx	lr
 8007fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8007fec:	e7f9      	b.n	8007fe2 <memset+0x4>
	...

08007ff0 <_close_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	4d05      	ldr	r5, [pc, #20]	; (800800c <_close_r+0x1c>)
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	f7fa fba8 	bl	8002750 <_close>
 8008000:	1c43      	adds	r3, r0, #1
 8008002:	d102      	bne.n	800800a <_close_r+0x1a>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	b103      	cbz	r3, 800800a <_close_r+0x1a>
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	20002e5c 	.word	0x20002e5c

08008010 <_lseek_r>:
 8008010:	b538      	push	{r3, r4, r5, lr}
 8008012:	4604      	mov	r4, r0
 8008014:	4608      	mov	r0, r1
 8008016:	4611      	mov	r1, r2
 8008018:	2200      	movs	r2, #0
 800801a:	4d05      	ldr	r5, [pc, #20]	; (8008030 <_lseek_r+0x20>)
 800801c:	602a      	str	r2, [r5, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	f7fa fba0 	bl	8002764 <_lseek>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_lseek_r+0x1e>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_lseek_r+0x1e>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	20002e5c 	.word	0x20002e5c

08008034 <_read_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	4604      	mov	r4, r0
 8008038:	4608      	mov	r0, r1
 800803a:	4611      	mov	r1, r2
 800803c:	2200      	movs	r2, #0
 800803e:	4d05      	ldr	r5, [pc, #20]	; (8008054 <_read_r+0x20>)
 8008040:	602a      	str	r2, [r5, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	f7fa fb6a 	bl	800271c <_read>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	d102      	bne.n	8008052 <_read_r+0x1e>
 800804c:	682b      	ldr	r3, [r5, #0]
 800804e:	b103      	cbz	r3, 8008052 <_read_r+0x1e>
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	20002e5c 	.word	0x20002e5c

08008058 <_write_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	2200      	movs	r2, #0
 8008062:	4d05      	ldr	r5, [pc, #20]	; (8008078 <_write_r+0x20>)
 8008064:	602a      	str	r2, [r5, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	f7fa fb65 	bl	8002736 <_write>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_write_r+0x1e>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_write_r+0x1e>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	20002e5c 	.word	0x20002e5c

0800807c <__errno>:
 800807c:	4b01      	ldr	r3, [pc, #4]	; (8008084 <__errno+0x8>)
 800807e:	6818      	ldr	r0, [r3, #0]
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000910 	.word	0x20000910

08008088 <__libc_init_array>:
 8008088:	b570      	push	{r4, r5, r6, lr}
 800808a:	2600      	movs	r6, #0
 800808c:	4d0c      	ldr	r5, [pc, #48]	; (80080c0 <__libc_init_array+0x38>)
 800808e:	4c0d      	ldr	r4, [pc, #52]	; (80080c4 <__libc_init_array+0x3c>)
 8008090:	1b64      	subs	r4, r4, r5
 8008092:	10a4      	asrs	r4, r4, #2
 8008094:	42a6      	cmp	r6, r4
 8008096:	d109      	bne.n	80080ac <__libc_init_array+0x24>
 8008098:	f000 fe62 	bl	8008d60 <_init>
 800809c:	2600      	movs	r6, #0
 800809e:	4d0a      	ldr	r5, [pc, #40]	; (80080c8 <__libc_init_array+0x40>)
 80080a0:	4c0a      	ldr	r4, [pc, #40]	; (80080cc <__libc_init_array+0x44>)
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	42a6      	cmp	r6, r4
 80080a8:	d105      	bne.n	80080b6 <__libc_init_array+0x2e>
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b0:	4798      	blx	r3
 80080b2:	3601      	adds	r6, #1
 80080b4:	e7ee      	b.n	8008094 <__libc_init_array+0xc>
 80080b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ba:	4798      	blx	r3
 80080bc:	3601      	adds	r6, #1
 80080be:	e7f2      	b.n	80080a6 <__libc_init_array+0x1e>
 80080c0:	08009b7c 	.word	0x08009b7c
 80080c4:	08009b7c 	.word	0x08009b7c
 80080c8:	08009b7c 	.word	0x08009b7c
 80080cc:	08009b80 	.word	0x08009b80

080080d0 <__retarget_lock_init_recursive>:
 80080d0:	4770      	bx	lr

080080d2 <__retarget_lock_acquire_recursive>:
 80080d2:	4770      	bx	lr

080080d4 <__retarget_lock_release_recursive>:
 80080d4:	4770      	bx	lr

080080d6 <strcpy>:
 80080d6:	4603      	mov	r3, r0
 80080d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080dc:	f803 2b01 	strb.w	r2, [r3], #1
 80080e0:	2a00      	cmp	r2, #0
 80080e2:	d1f9      	bne.n	80080d8 <strcpy+0x2>
 80080e4:	4770      	bx	lr

080080e6 <memcpy>:
 80080e6:	440a      	add	r2, r1
 80080e8:	4291      	cmp	r1, r2
 80080ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80080ee:	d100      	bne.n	80080f2 <memcpy+0xc>
 80080f0:	4770      	bx	lr
 80080f2:	b510      	push	{r4, lr}
 80080f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080f8:	4291      	cmp	r1, r2
 80080fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fe:	d1f9      	bne.n	80080f4 <memcpy+0xe>
 8008100:	bd10      	pop	{r4, pc}
	...

08008104 <__assert_func>:
 8008104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008106:	4614      	mov	r4, r2
 8008108:	461a      	mov	r2, r3
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <__assert_func+0x2c>)
 800810c:	4605      	mov	r5, r0
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68d8      	ldr	r0, [r3, #12]
 8008112:	b14c      	cbz	r4, 8008128 <__assert_func+0x24>
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <__assert_func+0x30>)
 8008116:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800811a:	9100      	str	r1, [sp, #0]
 800811c:	462b      	mov	r3, r5
 800811e:	4906      	ldr	r1, [pc, #24]	; (8008138 <__assert_func+0x34>)
 8008120:	f000 f9b4 	bl	800848c <fiprintf>
 8008124:	f000 f9d4 	bl	80084d0 <abort>
 8008128:	4b04      	ldr	r3, [pc, #16]	; (800813c <__assert_func+0x38>)
 800812a:	461c      	mov	r4, r3
 800812c:	e7f3      	b.n	8008116 <__assert_func+0x12>
 800812e:	bf00      	nop
 8008130:	20000910 	.word	0x20000910
 8008134:	08009b0c 	.word	0x08009b0c
 8008138:	08009b19 	.word	0x08009b19
 800813c:	08009b47 	.word	0x08009b47

08008140 <_free_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4605      	mov	r5, r0
 8008144:	2900      	cmp	r1, #0
 8008146:	d040      	beq.n	80081ca <_free_r+0x8a>
 8008148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800814c:	1f0c      	subs	r4, r1, #4
 800814e:	2b00      	cmp	r3, #0
 8008150:	bfb8      	it	lt
 8008152:	18e4      	addlt	r4, r4, r3
 8008154:	f000 f8e4 	bl	8008320 <__malloc_lock>
 8008158:	4a1c      	ldr	r2, [pc, #112]	; (80081cc <_free_r+0x8c>)
 800815a:	6813      	ldr	r3, [r2, #0]
 800815c:	b933      	cbnz	r3, 800816c <_free_r+0x2c>
 800815e:	6063      	str	r3, [r4, #4]
 8008160:	6014      	str	r4, [r2, #0]
 8008162:	4628      	mov	r0, r5
 8008164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008168:	f000 b8e0 	b.w	800832c <__malloc_unlock>
 800816c:	42a3      	cmp	r3, r4
 800816e:	d908      	bls.n	8008182 <_free_r+0x42>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	1821      	adds	r1, r4, r0
 8008174:	428b      	cmp	r3, r1
 8008176:	bf01      	itttt	eq
 8008178:	6819      	ldreq	r1, [r3, #0]
 800817a:	685b      	ldreq	r3, [r3, #4]
 800817c:	1809      	addeq	r1, r1, r0
 800817e:	6021      	streq	r1, [r4, #0]
 8008180:	e7ed      	b.n	800815e <_free_r+0x1e>
 8008182:	461a      	mov	r2, r3
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	b10b      	cbz	r3, 800818c <_free_r+0x4c>
 8008188:	42a3      	cmp	r3, r4
 800818a:	d9fa      	bls.n	8008182 <_free_r+0x42>
 800818c:	6811      	ldr	r1, [r2, #0]
 800818e:	1850      	adds	r0, r2, r1
 8008190:	42a0      	cmp	r0, r4
 8008192:	d10b      	bne.n	80081ac <_free_r+0x6c>
 8008194:	6820      	ldr	r0, [r4, #0]
 8008196:	4401      	add	r1, r0
 8008198:	1850      	adds	r0, r2, r1
 800819a:	4283      	cmp	r3, r0
 800819c:	6011      	str	r1, [r2, #0]
 800819e:	d1e0      	bne.n	8008162 <_free_r+0x22>
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4408      	add	r0, r1
 80081a6:	6010      	str	r0, [r2, #0]
 80081a8:	6053      	str	r3, [r2, #4]
 80081aa:	e7da      	b.n	8008162 <_free_r+0x22>
 80081ac:	d902      	bls.n	80081b4 <_free_r+0x74>
 80081ae:	230c      	movs	r3, #12
 80081b0:	602b      	str	r3, [r5, #0]
 80081b2:	e7d6      	b.n	8008162 <_free_r+0x22>
 80081b4:	6820      	ldr	r0, [r4, #0]
 80081b6:	1821      	adds	r1, r4, r0
 80081b8:	428b      	cmp	r3, r1
 80081ba:	bf01      	itttt	eq
 80081bc:	6819      	ldreq	r1, [r3, #0]
 80081be:	685b      	ldreq	r3, [r3, #4]
 80081c0:	1809      	addeq	r1, r1, r0
 80081c2:	6021      	streq	r1, [r4, #0]
 80081c4:	6063      	str	r3, [r4, #4]
 80081c6:	6054      	str	r4, [r2, #4]
 80081c8:	e7cb      	b.n	8008162 <_free_r+0x22>
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	20002e64 	.word	0x20002e64

080081d0 <malloc>:
 80081d0:	4b02      	ldr	r3, [pc, #8]	; (80081dc <malloc+0xc>)
 80081d2:	4601      	mov	r1, r0
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	f000 b823 	b.w	8008220 <_malloc_r>
 80081da:	bf00      	nop
 80081dc:	20000910 	.word	0x20000910

080081e0 <sbrk_aligned>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	4e0e      	ldr	r6, [pc, #56]	; (800821c <sbrk_aligned+0x3c>)
 80081e4:	460c      	mov	r4, r1
 80081e6:	6831      	ldr	r1, [r6, #0]
 80081e8:	4605      	mov	r5, r0
 80081ea:	b911      	cbnz	r1, 80081f2 <sbrk_aligned+0x12>
 80081ec:	f000 f960 	bl	80084b0 <_sbrk_r>
 80081f0:	6030      	str	r0, [r6, #0]
 80081f2:	4621      	mov	r1, r4
 80081f4:	4628      	mov	r0, r5
 80081f6:	f000 f95b 	bl	80084b0 <_sbrk_r>
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d00a      	beq.n	8008214 <sbrk_aligned+0x34>
 80081fe:	1cc4      	adds	r4, r0, #3
 8008200:	f024 0403 	bic.w	r4, r4, #3
 8008204:	42a0      	cmp	r0, r4
 8008206:	d007      	beq.n	8008218 <sbrk_aligned+0x38>
 8008208:	1a21      	subs	r1, r4, r0
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f950 	bl	80084b0 <_sbrk_r>
 8008210:	3001      	adds	r0, #1
 8008212:	d101      	bne.n	8008218 <sbrk_aligned+0x38>
 8008214:	f04f 34ff 	mov.w	r4, #4294967295
 8008218:	4620      	mov	r0, r4
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	20002e68 	.word	0x20002e68

08008220 <_malloc_r>:
 8008220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008224:	1ccd      	adds	r5, r1, #3
 8008226:	f025 0503 	bic.w	r5, r5, #3
 800822a:	3508      	adds	r5, #8
 800822c:	2d0c      	cmp	r5, #12
 800822e:	bf38      	it	cc
 8008230:	250c      	movcc	r5, #12
 8008232:	2d00      	cmp	r5, #0
 8008234:	4607      	mov	r7, r0
 8008236:	db01      	blt.n	800823c <_malloc_r+0x1c>
 8008238:	42a9      	cmp	r1, r5
 800823a:	d905      	bls.n	8008248 <_malloc_r+0x28>
 800823c:	230c      	movs	r3, #12
 800823e:	2600      	movs	r6, #0
 8008240:	603b      	str	r3, [r7, #0]
 8008242:	4630      	mov	r0, r6
 8008244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800831c <_malloc_r+0xfc>
 800824c:	f000 f868 	bl	8008320 <__malloc_lock>
 8008250:	f8d8 3000 	ldr.w	r3, [r8]
 8008254:	461c      	mov	r4, r3
 8008256:	bb5c      	cbnz	r4, 80082b0 <_malloc_r+0x90>
 8008258:	4629      	mov	r1, r5
 800825a:	4638      	mov	r0, r7
 800825c:	f7ff ffc0 	bl	80081e0 <sbrk_aligned>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	4604      	mov	r4, r0
 8008264:	d155      	bne.n	8008312 <_malloc_r+0xf2>
 8008266:	f8d8 4000 	ldr.w	r4, [r8]
 800826a:	4626      	mov	r6, r4
 800826c:	2e00      	cmp	r6, #0
 800826e:	d145      	bne.n	80082fc <_malloc_r+0xdc>
 8008270:	2c00      	cmp	r4, #0
 8008272:	d048      	beq.n	8008306 <_malloc_r+0xe6>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	4631      	mov	r1, r6
 8008278:	4638      	mov	r0, r7
 800827a:	eb04 0903 	add.w	r9, r4, r3
 800827e:	f000 f917 	bl	80084b0 <_sbrk_r>
 8008282:	4581      	cmp	r9, r0
 8008284:	d13f      	bne.n	8008306 <_malloc_r+0xe6>
 8008286:	6821      	ldr	r1, [r4, #0]
 8008288:	4638      	mov	r0, r7
 800828a:	1a6d      	subs	r5, r5, r1
 800828c:	4629      	mov	r1, r5
 800828e:	f7ff ffa7 	bl	80081e0 <sbrk_aligned>
 8008292:	3001      	adds	r0, #1
 8008294:	d037      	beq.n	8008306 <_malloc_r+0xe6>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	442b      	add	r3, r5
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	f8d8 3000 	ldr.w	r3, [r8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d038      	beq.n	8008316 <_malloc_r+0xf6>
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	42a2      	cmp	r2, r4
 80082a8:	d12b      	bne.n	8008302 <_malloc_r+0xe2>
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	e00f      	b.n	80082d0 <_malloc_r+0xb0>
 80082b0:	6822      	ldr	r2, [r4, #0]
 80082b2:	1b52      	subs	r2, r2, r5
 80082b4:	d41f      	bmi.n	80082f6 <_malloc_r+0xd6>
 80082b6:	2a0b      	cmp	r2, #11
 80082b8:	d917      	bls.n	80082ea <_malloc_r+0xca>
 80082ba:	1961      	adds	r1, r4, r5
 80082bc:	42a3      	cmp	r3, r4
 80082be:	6025      	str	r5, [r4, #0]
 80082c0:	bf18      	it	ne
 80082c2:	6059      	strne	r1, [r3, #4]
 80082c4:	6863      	ldr	r3, [r4, #4]
 80082c6:	bf08      	it	eq
 80082c8:	f8c8 1000 	streq.w	r1, [r8]
 80082cc:	5162      	str	r2, [r4, r5]
 80082ce:	604b      	str	r3, [r1, #4]
 80082d0:	4638      	mov	r0, r7
 80082d2:	f104 060b 	add.w	r6, r4, #11
 80082d6:	f000 f829 	bl	800832c <__malloc_unlock>
 80082da:	f026 0607 	bic.w	r6, r6, #7
 80082de:	1d23      	adds	r3, r4, #4
 80082e0:	1af2      	subs	r2, r6, r3
 80082e2:	d0ae      	beq.n	8008242 <_malloc_r+0x22>
 80082e4:	1b9b      	subs	r3, r3, r6
 80082e6:	50a3      	str	r3, [r4, r2]
 80082e8:	e7ab      	b.n	8008242 <_malloc_r+0x22>
 80082ea:	42a3      	cmp	r3, r4
 80082ec:	6862      	ldr	r2, [r4, #4]
 80082ee:	d1dd      	bne.n	80082ac <_malloc_r+0x8c>
 80082f0:	f8c8 2000 	str.w	r2, [r8]
 80082f4:	e7ec      	b.n	80082d0 <_malloc_r+0xb0>
 80082f6:	4623      	mov	r3, r4
 80082f8:	6864      	ldr	r4, [r4, #4]
 80082fa:	e7ac      	b.n	8008256 <_malloc_r+0x36>
 80082fc:	4634      	mov	r4, r6
 80082fe:	6876      	ldr	r6, [r6, #4]
 8008300:	e7b4      	b.n	800826c <_malloc_r+0x4c>
 8008302:	4613      	mov	r3, r2
 8008304:	e7cc      	b.n	80082a0 <_malloc_r+0x80>
 8008306:	230c      	movs	r3, #12
 8008308:	4638      	mov	r0, r7
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	f000 f80e 	bl	800832c <__malloc_unlock>
 8008310:	e797      	b.n	8008242 <_malloc_r+0x22>
 8008312:	6025      	str	r5, [r4, #0]
 8008314:	e7dc      	b.n	80082d0 <_malloc_r+0xb0>
 8008316:	605b      	str	r3, [r3, #4]
 8008318:	deff      	udf	#255	; 0xff
 800831a:	bf00      	nop
 800831c:	20002e64 	.word	0x20002e64

08008320 <__malloc_lock>:
 8008320:	4801      	ldr	r0, [pc, #4]	; (8008328 <__malloc_lock+0x8>)
 8008322:	f7ff bed6 	b.w	80080d2 <__retarget_lock_acquire_recursive>
 8008326:	bf00      	nop
 8008328:	20002e60 	.word	0x20002e60

0800832c <__malloc_unlock>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__malloc_unlock+0x8>)
 800832e:	f7ff bed1 	b.w	80080d4 <__retarget_lock_release_recursive>
 8008332:	bf00      	nop
 8008334:	20002e60 	.word	0x20002e60

08008338 <__sflush_r>:
 8008338:	898a      	ldrh	r2, [r1, #12]
 800833a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833c:	4605      	mov	r5, r0
 800833e:	0710      	lsls	r0, r2, #28
 8008340:	460c      	mov	r4, r1
 8008342:	d457      	bmi.n	80083f4 <__sflush_r+0xbc>
 8008344:	684b      	ldr	r3, [r1, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dc04      	bgt.n	8008354 <__sflush_r+0x1c>
 800834a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800834c:	2b00      	cmp	r3, #0
 800834e:	dc01      	bgt.n	8008354 <__sflush_r+0x1c>
 8008350:	2000      	movs	r0, #0
 8008352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008356:	2e00      	cmp	r6, #0
 8008358:	d0fa      	beq.n	8008350 <__sflush_r+0x18>
 800835a:	2300      	movs	r3, #0
 800835c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008360:	682f      	ldr	r7, [r5, #0]
 8008362:	6a21      	ldr	r1, [r4, #32]
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	d032      	beq.n	80083ce <__sflush_r+0x96>
 8008368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	075a      	lsls	r2, r3, #29
 800836e:	d505      	bpl.n	800837c <__sflush_r+0x44>
 8008370:	6863      	ldr	r3, [r4, #4]
 8008372:	1ac0      	subs	r0, r0, r3
 8008374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008376:	b10b      	cbz	r3, 800837c <__sflush_r+0x44>
 8008378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800837a:	1ac0      	subs	r0, r0, r3
 800837c:	2300      	movs	r3, #0
 800837e:	4602      	mov	r2, r0
 8008380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008382:	4628      	mov	r0, r5
 8008384:	6a21      	ldr	r1, [r4, #32]
 8008386:	47b0      	blx	r6
 8008388:	1c43      	adds	r3, r0, #1
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	d106      	bne.n	800839c <__sflush_r+0x64>
 800838e:	6829      	ldr	r1, [r5, #0]
 8008390:	291d      	cmp	r1, #29
 8008392:	d82b      	bhi.n	80083ec <__sflush_r+0xb4>
 8008394:	4a28      	ldr	r2, [pc, #160]	; (8008438 <__sflush_r+0x100>)
 8008396:	410a      	asrs	r2, r1
 8008398:	07d6      	lsls	r6, r2, #31
 800839a:	d427      	bmi.n	80083ec <__sflush_r+0xb4>
 800839c:	2200      	movs	r2, #0
 800839e:	6062      	str	r2, [r4, #4]
 80083a0:	6922      	ldr	r2, [r4, #16]
 80083a2:	04d9      	lsls	r1, r3, #19
 80083a4:	6022      	str	r2, [r4, #0]
 80083a6:	d504      	bpl.n	80083b2 <__sflush_r+0x7a>
 80083a8:	1c42      	adds	r2, r0, #1
 80083aa:	d101      	bne.n	80083b0 <__sflush_r+0x78>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b903      	cbnz	r3, 80083b2 <__sflush_r+0x7a>
 80083b0:	6560      	str	r0, [r4, #84]	; 0x54
 80083b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b4:	602f      	str	r7, [r5, #0]
 80083b6:	2900      	cmp	r1, #0
 80083b8:	d0ca      	beq.n	8008350 <__sflush_r+0x18>
 80083ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083be:	4299      	cmp	r1, r3
 80083c0:	d002      	beq.n	80083c8 <__sflush_r+0x90>
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7ff febc 	bl	8008140 <_free_r>
 80083c8:	2000      	movs	r0, #0
 80083ca:	6360      	str	r0, [r4, #52]	; 0x34
 80083cc:	e7c1      	b.n	8008352 <__sflush_r+0x1a>
 80083ce:	2301      	movs	r3, #1
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b0      	blx	r6
 80083d4:	1c41      	adds	r1, r0, #1
 80083d6:	d1c8      	bne.n	800836a <__sflush_r+0x32>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0c5      	beq.n	800836a <__sflush_r+0x32>
 80083de:	2b1d      	cmp	r3, #29
 80083e0:	d001      	beq.n	80083e6 <__sflush_r+0xae>
 80083e2:	2b16      	cmp	r3, #22
 80083e4:	d101      	bne.n	80083ea <__sflush_r+0xb2>
 80083e6:	602f      	str	r7, [r5, #0]
 80083e8:	e7b2      	b.n	8008350 <__sflush_r+0x18>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	e7ae      	b.n	8008352 <__sflush_r+0x1a>
 80083f4:	690f      	ldr	r7, [r1, #16]
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	d0aa      	beq.n	8008350 <__sflush_r+0x18>
 80083fa:	0793      	lsls	r3, r2, #30
 80083fc:	bf18      	it	ne
 80083fe:	2300      	movne	r3, #0
 8008400:	680e      	ldr	r6, [r1, #0]
 8008402:	bf08      	it	eq
 8008404:	694b      	ldreq	r3, [r1, #20]
 8008406:	1bf6      	subs	r6, r6, r7
 8008408:	600f      	str	r7, [r1, #0]
 800840a:	608b      	str	r3, [r1, #8]
 800840c:	2e00      	cmp	r6, #0
 800840e:	dd9f      	ble.n	8008350 <__sflush_r+0x18>
 8008410:	4633      	mov	r3, r6
 8008412:	463a      	mov	r2, r7
 8008414:	4628      	mov	r0, r5
 8008416:	6a21      	ldr	r1, [r4, #32]
 8008418:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800841c:	47e0      	blx	ip
 800841e:	2800      	cmp	r0, #0
 8008420:	dc06      	bgt.n	8008430 <__sflush_r+0xf8>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	e790      	b.n	8008352 <__sflush_r+0x1a>
 8008430:	4407      	add	r7, r0
 8008432:	1a36      	subs	r6, r6, r0
 8008434:	e7ea      	b.n	800840c <__sflush_r+0xd4>
 8008436:	bf00      	nop
 8008438:	dfbffffe 	.word	0xdfbffffe

0800843c <_fflush_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	4605      	mov	r5, r0
 8008442:	460c      	mov	r4, r1
 8008444:	b913      	cbnz	r3, 800844c <_fflush_r+0x10>
 8008446:	2500      	movs	r5, #0
 8008448:	4628      	mov	r0, r5
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	b118      	cbz	r0, 8008456 <_fflush_r+0x1a>
 800844e:	6a03      	ldr	r3, [r0, #32]
 8008450:	b90b      	cbnz	r3, 8008456 <_fflush_r+0x1a>
 8008452:	f7ff fd4b 	bl	8007eec <__sinit>
 8008456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f3      	beq.n	8008446 <_fflush_r+0xa>
 800845e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008460:	07d0      	lsls	r0, r2, #31
 8008462:	d404      	bmi.n	800846e <_fflush_r+0x32>
 8008464:	0599      	lsls	r1, r3, #22
 8008466:	d402      	bmi.n	800846e <_fflush_r+0x32>
 8008468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846a:	f7ff fe32 	bl	80080d2 <__retarget_lock_acquire_recursive>
 800846e:	4628      	mov	r0, r5
 8008470:	4621      	mov	r1, r4
 8008472:	f7ff ff61 	bl	8008338 <__sflush_r>
 8008476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008478:	4605      	mov	r5, r0
 800847a:	07da      	lsls	r2, r3, #31
 800847c:	d4e4      	bmi.n	8008448 <_fflush_r+0xc>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	059b      	lsls	r3, r3, #22
 8008482:	d4e1      	bmi.n	8008448 <_fflush_r+0xc>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f7ff fe25 	bl	80080d4 <__retarget_lock_release_recursive>
 800848a:	e7dd      	b.n	8008448 <_fflush_r+0xc>

0800848c <fiprintf>:
 800848c:	b40e      	push	{r1, r2, r3}
 800848e:	b503      	push	{r0, r1, lr}
 8008490:	4601      	mov	r1, r0
 8008492:	ab03      	add	r3, sp, #12
 8008494:	4805      	ldr	r0, [pc, #20]	; (80084ac <fiprintf+0x20>)
 8008496:	f853 2b04 	ldr.w	r2, [r3], #4
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	f000 f845 	bl	800852c <_vfiprintf_r>
 80084a2:	b002      	add	sp, #8
 80084a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084a8:	b003      	add	sp, #12
 80084aa:	4770      	bx	lr
 80084ac:	20000910 	.word	0x20000910

080084b0 <_sbrk_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	2300      	movs	r3, #0
 80084b4:	4d05      	ldr	r5, [pc, #20]	; (80084cc <_sbrk_r+0x1c>)
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	f7fa f954 	bl	8002768 <_sbrk>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_sbrk_r+0x1a>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_sbrk_r+0x1a>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	20002e5c 	.word	0x20002e5c

080084d0 <abort>:
 80084d0:	2006      	movs	r0, #6
 80084d2:	b508      	push	{r3, lr}
 80084d4:	f000 fb96 	bl	8008c04 <raise>
 80084d8:	2001      	movs	r0, #1
 80084da:	f7fa f919 	bl	8002710 <_exit>

080084de <__sfputc_r>:
 80084de:	6893      	ldr	r3, [r2, #8]
 80084e0:	b410      	push	{r4}
 80084e2:	3b01      	subs	r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	6093      	str	r3, [r2, #8]
 80084e8:	da07      	bge.n	80084fa <__sfputc_r+0x1c>
 80084ea:	6994      	ldr	r4, [r2, #24]
 80084ec:	42a3      	cmp	r3, r4
 80084ee:	db01      	blt.n	80084f4 <__sfputc_r+0x16>
 80084f0:	290a      	cmp	r1, #10
 80084f2:	d102      	bne.n	80084fa <__sfputc_r+0x1c>
 80084f4:	bc10      	pop	{r4}
 80084f6:	f000 bac7 	b.w	8008a88 <__swbuf_r>
 80084fa:	6813      	ldr	r3, [r2, #0]
 80084fc:	1c58      	adds	r0, r3, #1
 80084fe:	6010      	str	r0, [r2, #0]
 8008500:	7019      	strb	r1, [r3, #0]
 8008502:	4608      	mov	r0, r1
 8008504:	bc10      	pop	{r4}
 8008506:	4770      	bx	lr

08008508 <__sfputs_r>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	4606      	mov	r6, r0
 800850c:	460f      	mov	r7, r1
 800850e:	4614      	mov	r4, r2
 8008510:	18d5      	adds	r5, r2, r3
 8008512:	42ac      	cmp	r4, r5
 8008514:	d101      	bne.n	800851a <__sfputs_r+0x12>
 8008516:	2000      	movs	r0, #0
 8008518:	e007      	b.n	800852a <__sfputs_r+0x22>
 800851a:	463a      	mov	r2, r7
 800851c:	4630      	mov	r0, r6
 800851e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008522:	f7ff ffdc 	bl	80084de <__sfputc_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d1f3      	bne.n	8008512 <__sfputs_r+0xa>
 800852a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800852c <_vfiprintf_r>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	460d      	mov	r5, r1
 8008532:	4614      	mov	r4, r2
 8008534:	4698      	mov	r8, r3
 8008536:	4606      	mov	r6, r0
 8008538:	b09d      	sub	sp, #116	; 0x74
 800853a:	b118      	cbz	r0, 8008544 <_vfiprintf_r+0x18>
 800853c:	6a03      	ldr	r3, [r0, #32]
 800853e:	b90b      	cbnz	r3, 8008544 <_vfiprintf_r+0x18>
 8008540:	f7ff fcd4 	bl	8007eec <__sinit>
 8008544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008546:	07d9      	lsls	r1, r3, #31
 8008548:	d405      	bmi.n	8008556 <_vfiprintf_r+0x2a>
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	059a      	lsls	r2, r3, #22
 800854e:	d402      	bmi.n	8008556 <_vfiprintf_r+0x2a>
 8008550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008552:	f7ff fdbe 	bl	80080d2 <__retarget_lock_acquire_recursive>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	071b      	lsls	r3, r3, #28
 800855a:	d501      	bpl.n	8008560 <_vfiprintf_r+0x34>
 800855c:	692b      	ldr	r3, [r5, #16]
 800855e:	b99b      	cbnz	r3, 8008588 <_vfiprintf_r+0x5c>
 8008560:	4629      	mov	r1, r5
 8008562:	4630      	mov	r0, r6
 8008564:	f000 face 	bl	8008b04 <__swsetup_r>
 8008568:	b170      	cbz	r0, 8008588 <_vfiprintf_r+0x5c>
 800856a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800856c:	07dc      	lsls	r4, r3, #31
 800856e:	d504      	bpl.n	800857a <_vfiprintf_r+0x4e>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	b01d      	add	sp, #116	; 0x74
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	0598      	lsls	r0, r3, #22
 800857e:	d4f7      	bmi.n	8008570 <_vfiprintf_r+0x44>
 8008580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008582:	f7ff fda7 	bl	80080d4 <__retarget_lock_release_recursive>
 8008586:	e7f3      	b.n	8008570 <_vfiprintf_r+0x44>
 8008588:	2300      	movs	r3, #0
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	2320      	movs	r3, #32
 800858e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008592:	2330      	movs	r3, #48	; 0x30
 8008594:	f04f 0901 	mov.w	r9, #1
 8008598:	f8cd 800c 	str.w	r8, [sp, #12]
 800859c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800874c <_vfiprintf_r+0x220>
 80085a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085a4:	4623      	mov	r3, r4
 80085a6:	469a      	mov	sl, r3
 80085a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ac:	b10a      	cbz	r2, 80085b2 <_vfiprintf_r+0x86>
 80085ae:	2a25      	cmp	r2, #37	; 0x25
 80085b0:	d1f9      	bne.n	80085a6 <_vfiprintf_r+0x7a>
 80085b2:	ebba 0b04 	subs.w	fp, sl, r4
 80085b6:	d00b      	beq.n	80085d0 <_vfiprintf_r+0xa4>
 80085b8:	465b      	mov	r3, fp
 80085ba:	4622      	mov	r2, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	4630      	mov	r0, r6
 80085c0:	f7ff ffa2 	bl	8008508 <__sfputs_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	f000 80a9 	beq.w	800871c <_vfiprintf_r+0x1f0>
 80085ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085cc:	445a      	add	r2, fp
 80085ce:	9209      	str	r2, [sp, #36]	; 0x24
 80085d0:	f89a 3000 	ldrb.w	r3, [sl]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 80a1 	beq.w	800871c <_vfiprintf_r+0x1f0>
 80085da:	2300      	movs	r3, #0
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e4:	f10a 0a01 	add.w	sl, sl, #1
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085f0:	931a      	str	r3, [sp, #104]	; 0x68
 80085f2:	4654      	mov	r4, sl
 80085f4:	2205      	movs	r2, #5
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	4854      	ldr	r0, [pc, #336]	; (800874c <_vfiprintf_r+0x220>)
 80085fc:	f000 fb1e 	bl	8008c3c <memchr>
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	b9d8      	cbnz	r0, 800863c <_vfiprintf_r+0x110>
 8008604:	06d1      	lsls	r1, r2, #27
 8008606:	bf44      	itt	mi
 8008608:	2320      	movmi	r3, #32
 800860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800860e:	0713      	lsls	r3, r2, #28
 8008610:	bf44      	itt	mi
 8008612:	232b      	movmi	r3, #43	; 0x2b
 8008614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008618:	f89a 3000 	ldrb.w	r3, [sl]
 800861c:	2b2a      	cmp	r3, #42	; 0x2a
 800861e:	d015      	beq.n	800864c <_vfiprintf_r+0x120>
 8008620:	4654      	mov	r4, sl
 8008622:	2000      	movs	r0, #0
 8008624:	f04f 0c0a 	mov.w	ip, #10
 8008628:	9a07      	ldr	r2, [sp, #28]
 800862a:	4621      	mov	r1, r4
 800862c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008630:	3b30      	subs	r3, #48	; 0x30
 8008632:	2b09      	cmp	r3, #9
 8008634:	d94d      	bls.n	80086d2 <_vfiprintf_r+0x1a6>
 8008636:	b1b0      	cbz	r0, 8008666 <_vfiprintf_r+0x13a>
 8008638:	9207      	str	r2, [sp, #28]
 800863a:	e014      	b.n	8008666 <_vfiprintf_r+0x13a>
 800863c:	eba0 0308 	sub.w	r3, r0, r8
 8008640:	fa09 f303 	lsl.w	r3, r9, r3
 8008644:	4313      	orrs	r3, r2
 8008646:	46a2      	mov	sl, r4
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	e7d2      	b.n	80085f2 <_vfiprintf_r+0xc6>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	1d19      	adds	r1, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	9103      	str	r1, [sp, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfbb      	ittet	lt
 8008658:	425b      	neglt	r3, r3
 800865a:	f042 0202 	orrlt.w	r2, r2, #2
 800865e:	9307      	strge	r3, [sp, #28]
 8008660:	9307      	strlt	r3, [sp, #28]
 8008662:	bfb8      	it	lt
 8008664:	9204      	strlt	r2, [sp, #16]
 8008666:	7823      	ldrb	r3, [r4, #0]
 8008668:	2b2e      	cmp	r3, #46	; 0x2e
 800866a:	d10c      	bne.n	8008686 <_vfiprintf_r+0x15a>
 800866c:	7863      	ldrb	r3, [r4, #1]
 800866e:	2b2a      	cmp	r3, #42	; 0x2a
 8008670:	d134      	bne.n	80086dc <_vfiprintf_r+0x1b0>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	3402      	adds	r4, #2
 8008676:	1d1a      	adds	r2, r3, #4
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	9203      	str	r2, [sp, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	bfb8      	it	lt
 8008680:	f04f 33ff 	movlt.w	r3, #4294967295
 8008684:	9305      	str	r3, [sp, #20]
 8008686:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008750 <_vfiprintf_r+0x224>
 800868a:	2203      	movs	r2, #3
 800868c:	4650      	mov	r0, sl
 800868e:	7821      	ldrb	r1, [r4, #0]
 8008690:	f000 fad4 	bl	8008c3c <memchr>
 8008694:	b138      	cbz	r0, 80086a6 <_vfiprintf_r+0x17a>
 8008696:	2240      	movs	r2, #64	; 0x40
 8008698:	9b04      	ldr	r3, [sp, #16]
 800869a:	eba0 000a 	sub.w	r0, r0, sl
 800869e:	4082      	lsls	r2, r0
 80086a0:	4313      	orrs	r3, r2
 80086a2:	3401      	adds	r4, #1
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086aa:	2206      	movs	r2, #6
 80086ac:	4829      	ldr	r0, [pc, #164]	; (8008754 <_vfiprintf_r+0x228>)
 80086ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086b2:	f000 fac3 	bl	8008c3c <memchr>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d03f      	beq.n	800873a <_vfiprintf_r+0x20e>
 80086ba:	4b27      	ldr	r3, [pc, #156]	; (8008758 <_vfiprintf_r+0x22c>)
 80086bc:	bb1b      	cbnz	r3, 8008706 <_vfiprintf_r+0x1da>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	3307      	adds	r3, #7
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	3308      	adds	r3, #8
 80086c8:	9303      	str	r3, [sp, #12]
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	443b      	add	r3, r7
 80086ce:	9309      	str	r3, [sp, #36]	; 0x24
 80086d0:	e768      	b.n	80085a4 <_vfiprintf_r+0x78>
 80086d2:	460c      	mov	r4, r1
 80086d4:	2001      	movs	r0, #1
 80086d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086da:	e7a6      	b.n	800862a <_vfiprintf_r+0xfe>
 80086dc:	2300      	movs	r3, #0
 80086de:	f04f 0c0a 	mov.w	ip, #10
 80086e2:	4619      	mov	r1, r3
 80086e4:	3401      	adds	r4, #1
 80086e6:	9305      	str	r3, [sp, #20]
 80086e8:	4620      	mov	r0, r4
 80086ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ee:	3a30      	subs	r2, #48	; 0x30
 80086f0:	2a09      	cmp	r2, #9
 80086f2:	d903      	bls.n	80086fc <_vfiprintf_r+0x1d0>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0c6      	beq.n	8008686 <_vfiprintf_r+0x15a>
 80086f8:	9105      	str	r1, [sp, #20]
 80086fa:	e7c4      	b.n	8008686 <_vfiprintf_r+0x15a>
 80086fc:	4604      	mov	r4, r0
 80086fe:	2301      	movs	r3, #1
 8008700:	fb0c 2101 	mla	r1, ip, r1, r2
 8008704:	e7f0      	b.n	80086e8 <_vfiprintf_r+0x1bc>
 8008706:	ab03      	add	r3, sp, #12
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	462a      	mov	r2, r5
 800870c:	4630      	mov	r0, r6
 800870e:	4b13      	ldr	r3, [pc, #76]	; (800875c <_vfiprintf_r+0x230>)
 8008710:	a904      	add	r1, sp, #16
 8008712:	f3af 8000 	nop.w
 8008716:	4607      	mov	r7, r0
 8008718:	1c78      	adds	r0, r7, #1
 800871a:	d1d6      	bne.n	80086ca <_vfiprintf_r+0x19e>
 800871c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800871e:	07d9      	lsls	r1, r3, #31
 8008720:	d405      	bmi.n	800872e <_vfiprintf_r+0x202>
 8008722:	89ab      	ldrh	r3, [r5, #12]
 8008724:	059a      	lsls	r2, r3, #22
 8008726:	d402      	bmi.n	800872e <_vfiprintf_r+0x202>
 8008728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800872a:	f7ff fcd3 	bl	80080d4 <__retarget_lock_release_recursive>
 800872e:	89ab      	ldrh	r3, [r5, #12]
 8008730:	065b      	lsls	r3, r3, #25
 8008732:	f53f af1d 	bmi.w	8008570 <_vfiprintf_r+0x44>
 8008736:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008738:	e71c      	b.n	8008574 <_vfiprintf_r+0x48>
 800873a:	ab03      	add	r3, sp, #12
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	462a      	mov	r2, r5
 8008740:	4630      	mov	r0, r6
 8008742:	4b06      	ldr	r3, [pc, #24]	; (800875c <_vfiprintf_r+0x230>)
 8008744:	a904      	add	r1, sp, #16
 8008746:	f000 f87d 	bl	8008844 <_printf_i>
 800874a:	e7e4      	b.n	8008716 <_vfiprintf_r+0x1ea>
 800874c:	08009b48 	.word	0x08009b48
 8008750:	08009b4e 	.word	0x08009b4e
 8008754:	08009b52 	.word	0x08009b52
 8008758:	00000000 	.word	0x00000000
 800875c:	08008509 	.word	0x08008509

08008760 <_printf_common>:
 8008760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008764:	4616      	mov	r6, r2
 8008766:	4699      	mov	r9, r3
 8008768:	688a      	ldr	r2, [r1, #8]
 800876a:	690b      	ldr	r3, [r1, #16]
 800876c:	4607      	mov	r7, r0
 800876e:	4293      	cmp	r3, r2
 8008770:	bfb8      	it	lt
 8008772:	4613      	movlt	r3, r2
 8008774:	6033      	str	r3, [r6, #0]
 8008776:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800877a:	460c      	mov	r4, r1
 800877c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008780:	b10a      	cbz	r2, 8008786 <_printf_common+0x26>
 8008782:	3301      	adds	r3, #1
 8008784:	6033      	str	r3, [r6, #0]
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	0699      	lsls	r1, r3, #26
 800878a:	bf42      	ittt	mi
 800878c:	6833      	ldrmi	r3, [r6, #0]
 800878e:	3302      	addmi	r3, #2
 8008790:	6033      	strmi	r3, [r6, #0]
 8008792:	6825      	ldr	r5, [r4, #0]
 8008794:	f015 0506 	ands.w	r5, r5, #6
 8008798:	d106      	bne.n	80087a8 <_printf_common+0x48>
 800879a:	f104 0a19 	add.w	sl, r4, #25
 800879e:	68e3      	ldr	r3, [r4, #12]
 80087a0:	6832      	ldr	r2, [r6, #0]
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	42ab      	cmp	r3, r5
 80087a6:	dc2b      	bgt.n	8008800 <_printf_common+0xa0>
 80087a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087ac:	1e13      	subs	r3, r2, #0
 80087ae:	6822      	ldr	r2, [r4, #0]
 80087b0:	bf18      	it	ne
 80087b2:	2301      	movne	r3, #1
 80087b4:	0692      	lsls	r2, r2, #26
 80087b6:	d430      	bmi.n	800881a <_printf_common+0xba>
 80087b8:	4649      	mov	r1, r9
 80087ba:	4638      	mov	r0, r7
 80087bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087c0:	47c0      	blx	r8
 80087c2:	3001      	adds	r0, #1
 80087c4:	d023      	beq.n	800880e <_printf_common+0xae>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	6922      	ldr	r2, [r4, #16]
 80087ca:	f003 0306 	and.w	r3, r3, #6
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	bf14      	ite	ne
 80087d2:	2500      	movne	r5, #0
 80087d4:	6833      	ldreq	r3, [r6, #0]
 80087d6:	f04f 0600 	mov.w	r6, #0
 80087da:	bf08      	it	eq
 80087dc:	68e5      	ldreq	r5, [r4, #12]
 80087de:	f104 041a 	add.w	r4, r4, #26
 80087e2:	bf08      	it	eq
 80087e4:	1aed      	subeq	r5, r5, r3
 80087e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80087ea:	bf08      	it	eq
 80087ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f0:	4293      	cmp	r3, r2
 80087f2:	bfc4      	itt	gt
 80087f4:	1a9b      	subgt	r3, r3, r2
 80087f6:	18ed      	addgt	r5, r5, r3
 80087f8:	42b5      	cmp	r5, r6
 80087fa:	d11a      	bne.n	8008832 <_printf_common+0xd2>
 80087fc:	2000      	movs	r0, #0
 80087fe:	e008      	b.n	8008812 <_printf_common+0xb2>
 8008800:	2301      	movs	r3, #1
 8008802:	4652      	mov	r2, sl
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	47c0      	blx	r8
 800880a:	3001      	adds	r0, #1
 800880c:	d103      	bne.n	8008816 <_printf_common+0xb6>
 800880e:	f04f 30ff 	mov.w	r0, #4294967295
 8008812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008816:	3501      	adds	r5, #1
 8008818:	e7c1      	b.n	800879e <_printf_common+0x3e>
 800881a:	2030      	movs	r0, #48	; 0x30
 800881c:	18e1      	adds	r1, r4, r3
 800881e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008828:	4422      	add	r2, r4
 800882a:	3302      	adds	r3, #2
 800882c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008830:	e7c2      	b.n	80087b8 <_printf_common+0x58>
 8008832:	2301      	movs	r3, #1
 8008834:	4622      	mov	r2, r4
 8008836:	4649      	mov	r1, r9
 8008838:	4638      	mov	r0, r7
 800883a:	47c0      	blx	r8
 800883c:	3001      	adds	r0, #1
 800883e:	d0e6      	beq.n	800880e <_printf_common+0xae>
 8008840:	3601      	adds	r6, #1
 8008842:	e7d9      	b.n	80087f8 <_printf_common+0x98>

08008844 <_printf_i>:
 8008844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	7e0f      	ldrb	r7, [r1, #24]
 800884a:	4691      	mov	r9, r2
 800884c:	2f78      	cmp	r7, #120	; 0x78
 800884e:	4680      	mov	r8, r0
 8008850:	460c      	mov	r4, r1
 8008852:	469a      	mov	sl, r3
 8008854:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800885a:	d807      	bhi.n	800886c <_printf_i+0x28>
 800885c:	2f62      	cmp	r7, #98	; 0x62
 800885e:	d80a      	bhi.n	8008876 <_printf_i+0x32>
 8008860:	2f00      	cmp	r7, #0
 8008862:	f000 80d5 	beq.w	8008a10 <_printf_i+0x1cc>
 8008866:	2f58      	cmp	r7, #88	; 0x58
 8008868:	f000 80c1 	beq.w	80089ee <_printf_i+0x1aa>
 800886c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008874:	e03a      	b.n	80088ec <_printf_i+0xa8>
 8008876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800887a:	2b15      	cmp	r3, #21
 800887c:	d8f6      	bhi.n	800886c <_printf_i+0x28>
 800887e:	a101      	add	r1, pc, #4	; (adr r1, 8008884 <_printf_i+0x40>)
 8008880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008884:	080088dd 	.word	0x080088dd
 8008888:	080088f1 	.word	0x080088f1
 800888c:	0800886d 	.word	0x0800886d
 8008890:	0800886d 	.word	0x0800886d
 8008894:	0800886d 	.word	0x0800886d
 8008898:	0800886d 	.word	0x0800886d
 800889c:	080088f1 	.word	0x080088f1
 80088a0:	0800886d 	.word	0x0800886d
 80088a4:	0800886d 	.word	0x0800886d
 80088a8:	0800886d 	.word	0x0800886d
 80088ac:	0800886d 	.word	0x0800886d
 80088b0:	080089f7 	.word	0x080089f7
 80088b4:	0800891d 	.word	0x0800891d
 80088b8:	080089b1 	.word	0x080089b1
 80088bc:	0800886d 	.word	0x0800886d
 80088c0:	0800886d 	.word	0x0800886d
 80088c4:	08008a19 	.word	0x08008a19
 80088c8:	0800886d 	.word	0x0800886d
 80088cc:	0800891d 	.word	0x0800891d
 80088d0:	0800886d 	.word	0x0800886d
 80088d4:	0800886d 	.word	0x0800886d
 80088d8:	080089b9 	.word	0x080089b9
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	1d1a      	adds	r2, r3, #4
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	602a      	str	r2, [r5, #0]
 80088e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0a0      	b.n	8008a32 <_printf_i+0x1ee>
 80088f0:	6820      	ldr	r0, [r4, #0]
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	0607      	lsls	r7, r0, #24
 80088f6:	f103 0104 	add.w	r1, r3, #4
 80088fa:	6029      	str	r1, [r5, #0]
 80088fc:	d501      	bpl.n	8008902 <_printf_i+0xbe>
 80088fe:	681e      	ldr	r6, [r3, #0]
 8008900:	e003      	b.n	800890a <_printf_i+0xc6>
 8008902:	0646      	lsls	r6, r0, #25
 8008904:	d5fb      	bpl.n	80088fe <_printf_i+0xba>
 8008906:	f9b3 6000 	ldrsh.w	r6, [r3]
 800890a:	2e00      	cmp	r6, #0
 800890c:	da03      	bge.n	8008916 <_printf_i+0xd2>
 800890e:	232d      	movs	r3, #45	; 0x2d
 8008910:	4276      	negs	r6, r6
 8008912:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008916:	230a      	movs	r3, #10
 8008918:	4859      	ldr	r0, [pc, #356]	; (8008a80 <_printf_i+0x23c>)
 800891a:	e012      	b.n	8008942 <_printf_i+0xfe>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	1d19      	adds	r1, r3, #4
 8008922:	6029      	str	r1, [r5, #0]
 8008924:	0605      	lsls	r5, r0, #24
 8008926:	d501      	bpl.n	800892c <_printf_i+0xe8>
 8008928:	681e      	ldr	r6, [r3, #0]
 800892a:	e002      	b.n	8008932 <_printf_i+0xee>
 800892c:	0641      	lsls	r1, r0, #25
 800892e:	d5fb      	bpl.n	8008928 <_printf_i+0xe4>
 8008930:	881e      	ldrh	r6, [r3, #0]
 8008932:	2f6f      	cmp	r7, #111	; 0x6f
 8008934:	bf0c      	ite	eq
 8008936:	2308      	moveq	r3, #8
 8008938:	230a      	movne	r3, #10
 800893a:	4851      	ldr	r0, [pc, #324]	; (8008a80 <_printf_i+0x23c>)
 800893c:	2100      	movs	r1, #0
 800893e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008942:	6865      	ldr	r5, [r4, #4]
 8008944:	2d00      	cmp	r5, #0
 8008946:	bfa8      	it	ge
 8008948:	6821      	ldrge	r1, [r4, #0]
 800894a:	60a5      	str	r5, [r4, #8]
 800894c:	bfa4      	itt	ge
 800894e:	f021 0104 	bicge.w	r1, r1, #4
 8008952:	6021      	strge	r1, [r4, #0]
 8008954:	b90e      	cbnz	r6, 800895a <_printf_i+0x116>
 8008956:	2d00      	cmp	r5, #0
 8008958:	d04b      	beq.n	80089f2 <_printf_i+0x1ae>
 800895a:	4615      	mov	r5, r2
 800895c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008960:	fb03 6711 	mls	r7, r3, r1, r6
 8008964:	5dc7      	ldrb	r7, [r0, r7]
 8008966:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800896a:	4637      	mov	r7, r6
 800896c:	42bb      	cmp	r3, r7
 800896e:	460e      	mov	r6, r1
 8008970:	d9f4      	bls.n	800895c <_printf_i+0x118>
 8008972:	2b08      	cmp	r3, #8
 8008974:	d10b      	bne.n	800898e <_printf_i+0x14a>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	07de      	lsls	r6, r3, #31
 800897a:	d508      	bpl.n	800898e <_printf_i+0x14a>
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	6861      	ldr	r1, [r4, #4]
 8008980:	4299      	cmp	r1, r3
 8008982:	bfde      	ittt	le
 8008984:	2330      	movle	r3, #48	; 0x30
 8008986:	f805 3c01 	strble.w	r3, [r5, #-1]
 800898a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800898e:	1b52      	subs	r2, r2, r5
 8008990:	6122      	str	r2, [r4, #16]
 8008992:	464b      	mov	r3, r9
 8008994:	4621      	mov	r1, r4
 8008996:	4640      	mov	r0, r8
 8008998:	f8cd a000 	str.w	sl, [sp]
 800899c:	aa03      	add	r2, sp, #12
 800899e:	f7ff fedf 	bl	8008760 <_printf_common>
 80089a2:	3001      	adds	r0, #1
 80089a4:	d14a      	bne.n	8008a3c <_printf_i+0x1f8>
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295
 80089aa:	b004      	add	sp, #16
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b0:	6823      	ldr	r3, [r4, #0]
 80089b2:	f043 0320 	orr.w	r3, r3, #32
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	2778      	movs	r7, #120	; 0x78
 80089ba:	4832      	ldr	r0, [pc, #200]	; (8008a84 <_printf_i+0x240>)
 80089bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	6829      	ldr	r1, [r5, #0]
 80089c4:	061f      	lsls	r7, r3, #24
 80089c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80089ca:	d402      	bmi.n	80089d2 <_printf_i+0x18e>
 80089cc:	065f      	lsls	r7, r3, #25
 80089ce:	bf48      	it	mi
 80089d0:	b2b6      	uxthmi	r6, r6
 80089d2:	07df      	lsls	r7, r3, #31
 80089d4:	bf48      	it	mi
 80089d6:	f043 0320 	orrmi.w	r3, r3, #32
 80089da:	6029      	str	r1, [r5, #0]
 80089dc:	bf48      	it	mi
 80089de:	6023      	strmi	r3, [r4, #0]
 80089e0:	b91e      	cbnz	r6, 80089ea <_printf_i+0x1a6>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	f023 0320 	bic.w	r3, r3, #32
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	2310      	movs	r3, #16
 80089ec:	e7a6      	b.n	800893c <_printf_i+0xf8>
 80089ee:	4824      	ldr	r0, [pc, #144]	; (8008a80 <_printf_i+0x23c>)
 80089f0:	e7e4      	b.n	80089bc <_printf_i+0x178>
 80089f2:	4615      	mov	r5, r2
 80089f4:	e7bd      	b.n	8008972 <_printf_i+0x12e>
 80089f6:	682b      	ldr	r3, [r5, #0]
 80089f8:	6826      	ldr	r6, [r4, #0]
 80089fa:	1d18      	adds	r0, r3, #4
 80089fc:	6961      	ldr	r1, [r4, #20]
 80089fe:	6028      	str	r0, [r5, #0]
 8008a00:	0635      	lsls	r5, r6, #24
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	d501      	bpl.n	8008a0a <_printf_i+0x1c6>
 8008a06:	6019      	str	r1, [r3, #0]
 8008a08:	e002      	b.n	8008a10 <_printf_i+0x1cc>
 8008a0a:	0670      	lsls	r0, r6, #25
 8008a0c:	d5fb      	bpl.n	8008a06 <_printf_i+0x1c2>
 8008a0e:	8019      	strh	r1, [r3, #0]
 8008a10:	2300      	movs	r3, #0
 8008a12:	4615      	mov	r5, r2
 8008a14:	6123      	str	r3, [r4, #16]
 8008a16:	e7bc      	b.n	8008992 <_printf_i+0x14e>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	1d1a      	adds	r2, r3, #4
 8008a1e:	602a      	str	r2, [r5, #0]
 8008a20:	681d      	ldr	r5, [r3, #0]
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	4628      	mov	r0, r5
 8008a26:	f000 f909 	bl	8008c3c <memchr>
 8008a2a:	b108      	cbz	r0, 8008a30 <_printf_i+0x1ec>
 8008a2c:	1b40      	subs	r0, r0, r5
 8008a2e:	6060      	str	r0, [r4, #4]
 8008a30:	6863      	ldr	r3, [r4, #4]
 8008a32:	6123      	str	r3, [r4, #16]
 8008a34:	2300      	movs	r3, #0
 8008a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a3a:	e7aa      	b.n	8008992 <_printf_i+0x14e>
 8008a3c:	462a      	mov	r2, r5
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	47d0      	blx	sl
 8008a46:	3001      	adds	r0, #1
 8008a48:	d0ad      	beq.n	80089a6 <_printf_i+0x162>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	079b      	lsls	r3, r3, #30
 8008a4e:	d413      	bmi.n	8008a78 <_printf_i+0x234>
 8008a50:	68e0      	ldr	r0, [r4, #12]
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	4298      	cmp	r0, r3
 8008a56:	bfb8      	it	lt
 8008a58:	4618      	movlt	r0, r3
 8008a5a:	e7a6      	b.n	80089aa <_printf_i+0x166>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4632      	mov	r2, r6
 8008a60:	4649      	mov	r1, r9
 8008a62:	4640      	mov	r0, r8
 8008a64:	47d0      	blx	sl
 8008a66:	3001      	adds	r0, #1
 8008a68:	d09d      	beq.n	80089a6 <_printf_i+0x162>
 8008a6a:	3501      	adds	r5, #1
 8008a6c:	68e3      	ldr	r3, [r4, #12]
 8008a6e:	9903      	ldr	r1, [sp, #12]
 8008a70:	1a5b      	subs	r3, r3, r1
 8008a72:	42ab      	cmp	r3, r5
 8008a74:	dcf2      	bgt.n	8008a5c <_printf_i+0x218>
 8008a76:	e7eb      	b.n	8008a50 <_printf_i+0x20c>
 8008a78:	2500      	movs	r5, #0
 8008a7a:	f104 0619 	add.w	r6, r4, #25
 8008a7e:	e7f5      	b.n	8008a6c <_printf_i+0x228>
 8008a80:	08009b59 	.word	0x08009b59
 8008a84:	08009b6a 	.word	0x08009b6a

08008a88 <__swbuf_r>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	460e      	mov	r6, r1
 8008a8c:	4614      	mov	r4, r2
 8008a8e:	4605      	mov	r5, r0
 8008a90:	b118      	cbz	r0, 8008a9a <__swbuf_r+0x12>
 8008a92:	6a03      	ldr	r3, [r0, #32]
 8008a94:	b90b      	cbnz	r3, 8008a9a <__swbuf_r+0x12>
 8008a96:	f7ff fa29 	bl	8007eec <__sinit>
 8008a9a:	69a3      	ldr	r3, [r4, #24]
 8008a9c:	60a3      	str	r3, [r4, #8]
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	071a      	lsls	r2, r3, #28
 8008aa2:	d525      	bpl.n	8008af0 <__swbuf_r+0x68>
 8008aa4:	6923      	ldr	r3, [r4, #16]
 8008aa6:	b31b      	cbz	r3, 8008af0 <__swbuf_r+0x68>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	6922      	ldr	r2, [r4, #16]
 8008aac:	b2f6      	uxtb	r6, r6
 8008aae:	1a98      	subs	r0, r3, r2
 8008ab0:	6963      	ldr	r3, [r4, #20]
 8008ab2:	4637      	mov	r7, r6
 8008ab4:	4283      	cmp	r3, r0
 8008ab6:	dc04      	bgt.n	8008ac2 <__swbuf_r+0x3a>
 8008ab8:	4621      	mov	r1, r4
 8008aba:	4628      	mov	r0, r5
 8008abc:	f7ff fcbe 	bl	800843c <_fflush_r>
 8008ac0:	b9e0      	cbnz	r0, 8008afc <__swbuf_r+0x74>
 8008ac2:	68a3      	ldr	r3, [r4, #8]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	60a3      	str	r3, [r4, #8]
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	1c5a      	adds	r2, r3, #1
 8008acc:	6022      	str	r2, [r4, #0]
 8008ace:	701e      	strb	r6, [r3, #0]
 8008ad0:	6962      	ldr	r2, [r4, #20]
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d004      	beq.n	8008ae2 <__swbuf_r+0x5a>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	07db      	lsls	r3, r3, #31
 8008adc:	d506      	bpl.n	8008aec <__swbuf_r+0x64>
 8008ade:	2e0a      	cmp	r6, #10
 8008ae0:	d104      	bne.n	8008aec <__swbuf_r+0x64>
 8008ae2:	4621      	mov	r1, r4
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f7ff fca9 	bl	800843c <_fflush_r>
 8008aea:	b938      	cbnz	r0, 8008afc <__swbuf_r+0x74>
 8008aec:	4638      	mov	r0, r7
 8008aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af0:	4621      	mov	r1, r4
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 f806 	bl	8008b04 <__swsetup_r>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d0d5      	beq.n	8008aa8 <__swbuf_r+0x20>
 8008afc:	f04f 37ff 	mov.w	r7, #4294967295
 8008b00:	e7f4      	b.n	8008aec <__swbuf_r+0x64>
	...

08008b04 <__swsetup_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4b2a      	ldr	r3, [pc, #168]	; (8008bb0 <__swsetup_r+0xac>)
 8008b08:	4605      	mov	r5, r0
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	460c      	mov	r4, r1
 8008b0e:	b118      	cbz	r0, 8008b18 <__swsetup_r+0x14>
 8008b10:	6a03      	ldr	r3, [r0, #32]
 8008b12:	b90b      	cbnz	r3, 8008b18 <__swsetup_r+0x14>
 8008b14:	f7ff f9ea 	bl	8007eec <__sinit>
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b1e:	0718      	lsls	r0, r3, #28
 8008b20:	d422      	bmi.n	8008b68 <__swsetup_r+0x64>
 8008b22:	06d9      	lsls	r1, r3, #27
 8008b24:	d407      	bmi.n	8008b36 <__swsetup_r+0x32>
 8008b26:	2309      	movs	r3, #9
 8008b28:	602b      	str	r3, [r5, #0]
 8008b2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	e034      	b.n	8008ba0 <__swsetup_r+0x9c>
 8008b36:	0758      	lsls	r0, r3, #29
 8008b38:	d512      	bpl.n	8008b60 <__swsetup_r+0x5c>
 8008b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b3c:	b141      	cbz	r1, 8008b50 <__swsetup_r+0x4c>
 8008b3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b42:	4299      	cmp	r1, r3
 8008b44:	d002      	beq.n	8008b4c <__swsetup_r+0x48>
 8008b46:	4628      	mov	r0, r5
 8008b48:	f7ff fafa 	bl	8008140 <_free_r>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	6363      	str	r3, [r4, #52]	; 0x34
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	6063      	str	r3, [r4, #4]
 8008b5c:	6923      	ldr	r3, [r4, #16]
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	f043 0308 	orr.w	r3, r3, #8
 8008b66:	81a3      	strh	r3, [r4, #12]
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	b94b      	cbnz	r3, 8008b80 <__swsetup_r+0x7c>
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b76:	d003      	beq.n	8008b80 <__swsetup_r+0x7c>
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4628      	mov	r0, r5
 8008b7c:	f000 f891 	bl	8008ca2 <__smakebuf_r>
 8008b80:	89a0      	ldrh	r0, [r4, #12]
 8008b82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b86:	f010 0301 	ands.w	r3, r0, #1
 8008b8a:	d00a      	beq.n	8008ba2 <__swsetup_r+0x9e>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60a3      	str	r3, [r4, #8]
 8008b90:	6963      	ldr	r3, [r4, #20]
 8008b92:	425b      	negs	r3, r3
 8008b94:	61a3      	str	r3, [r4, #24]
 8008b96:	6923      	ldr	r3, [r4, #16]
 8008b98:	b943      	cbnz	r3, 8008bac <__swsetup_r+0xa8>
 8008b9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b9e:	d1c4      	bne.n	8008b2a <__swsetup_r+0x26>
 8008ba0:	bd38      	pop	{r3, r4, r5, pc}
 8008ba2:	0781      	lsls	r1, r0, #30
 8008ba4:	bf58      	it	pl
 8008ba6:	6963      	ldrpl	r3, [r4, #20]
 8008ba8:	60a3      	str	r3, [r4, #8]
 8008baa:	e7f4      	b.n	8008b96 <__swsetup_r+0x92>
 8008bac:	2000      	movs	r0, #0
 8008bae:	e7f7      	b.n	8008ba0 <__swsetup_r+0x9c>
 8008bb0:	20000910 	.word	0x20000910

08008bb4 <_raise_r>:
 8008bb4:	291f      	cmp	r1, #31
 8008bb6:	b538      	push	{r3, r4, r5, lr}
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	d904      	bls.n	8008bc8 <_raise_r+0x14>
 8008bbe:	2316      	movs	r3, #22
 8008bc0:	6003      	str	r3, [r0, #0]
 8008bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008bca:	b112      	cbz	r2, 8008bd2 <_raise_r+0x1e>
 8008bcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bd0:	b94b      	cbnz	r3, 8008be6 <_raise_r+0x32>
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 f830 	bl	8008c38 <_getpid_r>
 8008bd8:	462a      	mov	r2, r5
 8008bda:	4601      	mov	r1, r0
 8008bdc:	4620      	mov	r0, r4
 8008bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008be2:	f000 b817 	b.w	8008c14 <_kill_r>
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d00a      	beq.n	8008c00 <_raise_r+0x4c>
 8008bea:	1c59      	adds	r1, r3, #1
 8008bec:	d103      	bne.n	8008bf6 <_raise_r+0x42>
 8008bee:	2316      	movs	r3, #22
 8008bf0:	6003      	str	r3, [r0, #0]
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	e7e7      	b.n	8008bc6 <_raise_r+0x12>
 8008bf6:	2400      	movs	r4, #0
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008bfe:	4798      	blx	r3
 8008c00:	2000      	movs	r0, #0
 8008c02:	e7e0      	b.n	8008bc6 <_raise_r+0x12>

08008c04 <raise>:
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <raise+0xc>)
 8008c06:	4601      	mov	r1, r0
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	f7ff bfd3 	b.w	8008bb4 <_raise_r>
 8008c0e:	bf00      	nop
 8008c10:	20000910 	.word	0x20000910

08008c14 <_kill_r>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	2300      	movs	r3, #0
 8008c18:	4d06      	ldr	r5, [pc, #24]	; (8008c34 <_kill_r+0x20>)
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	4611      	mov	r1, r2
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	f7f9 fd6d 	bl	8002700 <_kill>
 8008c26:	1c43      	adds	r3, r0, #1
 8008c28:	d102      	bne.n	8008c30 <_kill_r+0x1c>
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	b103      	cbz	r3, 8008c30 <_kill_r+0x1c>
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	bd38      	pop	{r3, r4, r5, pc}
 8008c32:	bf00      	nop
 8008c34:	20002e5c 	.word	0x20002e5c

08008c38 <_getpid_r>:
 8008c38:	f7f9 bd60 	b.w	80026fc <_getpid>

08008c3c <memchr>:
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	b2c9      	uxtb	r1, r1
 8008c42:	4402      	add	r2, r0
 8008c44:	4293      	cmp	r3, r2
 8008c46:	4618      	mov	r0, r3
 8008c48:	d101      	bne.n	8008c4e <memchr+0x12>
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e003      	b.n	8008c56 <memchr+0x1a>
 8008c4e:	7804      	ldrb	r4, [r0, #0]
 8008c50:	3301      	adds	r3, #1
 8008c52:	428c      	cmp	r4, r1
 8008c54:	d1f6      	bne.n	8008c44 <memchr+0x8>
 8008c56:	bd10      	pop	{r4, pc}

08008c58 <__swhatbuf_r>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c60:	4615      	mov	r5, r2
 8008c62:	2900      	cmp	r1, #0
 8008c64:	461e      	mov	r6, r3
 8008c66:	b096      	sub	sp, #88	; 0x58
 8008c68:	da0c      	bge.n	8008c84 <__swhatbuf_r+0x2c>
 8008c6a:	89a3      	ldrh	r3, [r4, #12]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c72:	bf0c      	ite	eq
 8008c74:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c78:	2340      	movne	r3, #64	; 0x40
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	6031      	str	r1, [r6, #0]
 8008c7e:	602b      	str	r3, [r5, #0]
 8008c80:	b016      	add	sp, #88	; 0x58
 8008c82:	bd70      	pop	{r4, r5, r6, pc}
 8008c84:	466a      	mov	r2, sp
 8008c86:	f000 f849 	bl	8008d1c <_fstat_r>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	dbed      	blt.n	8008c6a <__swhatbuf_r+0x12>
 8008c8e:	9901      	ldr	r1, [sp, #4]
 8008c90:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c94:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c98:	4259      	negs	r1, r3
 8008c9a:	4159      	adcs	r1, r3
 8008c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca0:	e7eb      	b.n	8008c7a <__swhatbuf_r+0x22>

08008ca2 <__smakebuf_r>:
 8008ca2:	898b      	ldrh	r3, [r1, #12]
 8008ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca6:	079d      	lsls	r5, r3, #30
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	d507      	bpl.n	8008cbe <__smakebuf_r+0x1c>
 8008cae:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	6163      	str	r3, [r4, #20]
 8008cba:	b002      	add	sp, #8
 8008cbc:	bd70      	pop	{r4, r5, r6, pc}
 8008cbe:	466a      	mov	r2, sp
 8008cc0:	ab01      	add	r3, sp, #4
 8008cc2:	f7ff ffc9 	bl	8008c58 <__swhatbuf_r>
 8008cc6:	9900      	ldr	r1, [sp, #0]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7ff faa8 	bl	8008220 <_malloc_r>
 8008cd0:	b948      	cbnz	r0, 8008ce6 <__smakebuf_r+0x44>
 8008cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd6:	059a      	lsls	r2, r3, #22
 8008cd8:	d4ef      	bmi.n	8008cba <__smakebuf_r+0x18>
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	f043 0302 	orr.w	r3, r3, #2
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	e7e3      	b.n	8008cae <__smakebuf_r+0xc>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	6020      	str	r0, [r4, #0]
 8008cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	9b00      	ldr	r3, [sp, #0]
 8008cf2:	6120      	str	r0, [r4, #16]
 8008cf4:	6163      	str	r3, [r4, #20]
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	b15b      	cbz	r3, 8008d12 <__smakebuf_r+0x70>
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d00:	f000 f81e 	bl	8008d40 <_isatty_r>
 8008d04:	b128      	cbz	r0, 8008d12 <__smakebuf_r+0x70>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	81a3      	strh	r3, [r4, #12]
 8008d12:	89a3      	ldrh	r3, [r4, #12]
 8008d14:	431d      	orrs	r5, r3
 8008d16:	81a5      	strh	r5, [r4, #12]
 8008d18:	e7cf      	b.n	8008cba <__smakebuf_r+0x18>
	...

08008d1c <_fstat_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	2300      	movs	r3, #0
 8008d20:	4d06      	ldr	r5, [pc, #24]	; (8008d3c <_fstat_r+0x20>)
 8008d22:	4604      	mov	r4, r0
 8008d24:	4608      	mov	r0, r1
 8008d26:	4611      	mov	r1, r2
 8008d28:	602b      	str	r3, [r5, #0]
 8008d2a:	f7f9 fd14 	bl	8002756 <_fstat>
 8008d2e:	1c43      	adds	r3, r0, #1
 8008d30:	d102      	bne.n	8008d38 <_fstat_r+0x1c>
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	b103      	cbz	r3, 8008d38 <_fstat_r+0x1c>
 8008d36:	6023      	str	r3, [r4, #0]
 8008d38:	bd38      	pop	{r3, r4, r5, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20002e5c 	.word	0x20002e5c

08008d40 <_isatty_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	2300      	movs	r3, #0
 8008d44:	4d05      	ldr	r5, [pc, #20]	; (8008d5c <_isatty_r+0x1c>)
 8008d46:	4604      	mov	r4, r0
 8008d48:	4608      	mov	r0, r1
 8008d4a:	602b      	str	r3, [r5, #0]
 8008d4c:	f7f9 fd08 	bl	8002760 <_isatty>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_isatty_r+0x1a>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_isatty_r+0x1a>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	20002e5c 	.word	0x20002e5c

08008d60 <_init>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	bf00      	nop
 8008d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d66:	bc08      	pop	{r3}
 8008d68:	469e      	mov	lr, r3
 8008d6a:	4770      	bx	lr

08008d6c <_fini>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr
