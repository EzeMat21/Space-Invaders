
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ffc  08009ffc  00020914  2**0
                  CONTENTS
  4 .ARM          00000000  08009ffc  08009ffc  00020914  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ffc  08009ffc  00020914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a000  0800a000  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000914  20000000  0800a004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002594  20000914  0800a918  00020914  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002ea8  0800a918  00022ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020914  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002093d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000279cf  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d84  00000000  00000000  0004834f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00012a03  00000000  00000000  0004d0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a20  00000000  00000000  0005fad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016c2  00000000  00000000  000614f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bf3b  00000000  00000000  00062bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a2a8  00000000  00000000  0007eaf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e24a  00000000  00000000  000a8d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005700  00000000  00000000  00146fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0014c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000914 	.word	0x20000914
 800012c:	00000000 	.word	0x00000000
 8000130:	080091d8 	.word	0x080091d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000918 	.word	0x20000918
 800014c:	080091d8 	.word	0x080091d8

08000150 <getPlayer>:
//uint8_t bases[3][16];

//----------------------------------------------------------------------------------------------------------------------------------------------


player_t getPlayer(){
 8000150:	4603      	mov	r3, r0

	return Player;
 8000152:	4a03      	ldr	r2, [pc, #12]	; (8000160 <getPlayer+0x10>)
 8000154:	ca03      	ldmia	r2!, {r0, r1}
 8000156:	6018      	str	r0, [r3, #0]
 8000158:	6059      	str	r1, [r3, #4]
}
 800015a:	4618      	mov	r0, r3
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200009a4 	.word	0x200009a4

08000164 <getDisparo>:

disparo_t *getDisparo(){
	return &Disparo;
}
 8000164:	4800      	ldr	r0, [pc, #0]	; (8000168 <getDisparo+0x4>)
 8000166:	4770      	bx	lr
 8000168:	2000099c 	.word	0x2000099c

0800016c <getDisparoAliens>:

disparo_t getDisparoAliens(){
 800016c:	b082      	sub	sp, #8
	return Disparo_Aliens;
 800016e:	4b0b      	ldr	r3, [pc, #44]	; (800019c <getDisparoAliens+0x30>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	9301      	str	r3, [sp, #4]
 8000174:	2000      	movs	r0, #0
 8000176:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800017a:	f363 0007 	bfi	r0, r3, #0, #8
 800017e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000182:	f363 200f 	bfi	r0, r3, #8, #8
 8000186:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800018a:	f363 4017 	bfi	r0, r3, #16, #8
 800018e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000192:	f363 601f 	bfi	r0, r3, #24, #8
}
 8000196:	b002      	add	sp, #8
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	200009a0 	.word	0x200009a0

080001a0 <actualizarPantalla>:

//----------------------------------------------------------------------------------------------------------------------------------------------


void actualizarPantalla(){
 80001a0:	b508      	push	{r3, lr}

    SSD1306_UpdateScreen(); // update screen
 80001a2:	f002 f9f3 	bl	800258c <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f001 fec4 	bl	8001f34 <SSD1306_Fill>
}
 80001ac:	bd08      	pop	{r3, pc}
	...

080001b0 <playerInit>:


void playerInit(){

	Player.posicion_X = 64;
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <playerInit+0x18>)
 80001b2:	2240      	movs	r2, #64	; 0x40
 80001b4:	701a      	strb	r2, [r3, #0]
	Player.vivo = true;
 80001b6:	2201      	movs	r2, #1
 80001b8:	705a      	strb	r2, [r3, #1]
	Player.puntaje = 0;
 80001ba:	2100      	movs	r1, #0
 80001bc:	8099      	strh	r1, [r3, #4]
	Player.vidas = 5;
 80001be:	2105      	movs	r1, #5
 80001c0:	7099      	strb	r1, [r3, #2]
	Player.nivel = 1;
 80001c2:	719a      	strb	r2, [r3, #6]

}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200009a4 	.word	0x200009a4

080001cc <plotPlayer>:

void plotPlayer(uint8_t direccion){
 80001cc:	b500      	push	{lr}
 80001ce:	b083      	sub	sp, #12

	if(Player.vivo == true){
 80001d0:	4b1b      	ldr	r3, [pc, #108]	; (8000240 <plotPlayer+0x74>)
 80001d2:	785b      	ldrb	r3, [r3, #1]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d127      	bne.n	8000228 <plotPlayer+0x5c>

		if(direccion == derecha){
 80001d8:	2802      	cmp	r0, #2
 80001da:	d00e      	beq.n	80001fa <plotPlayer+0x2e>
			else{
				Player.posicion_X = Player.posicion_X + 4;
			}

		}
		else if(direccion == izquierda){
 80001dc:	2803      	cmp	r0, #3
 80001de:	d018      	beq.n	8000212 <plotPlayer+0x46>
			else{
				Player.posicion_X = Player.posicion_X - 4;
			}
		}

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave, 8,8,1);
 80001e0:	2301      	movs	r3, #1
 80001e2:	9301      	str	r3, [sp, #4]
 80001e4:	2308      	movs	r3, #8
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	4a16      	ldr	r2, [pc, #88]	; (8000244 <plotPlayer+0x78>)
 80001ea:	2138      	movs	r1, #56	; 0x38
 80001ec:	4814      	ldr	r0, [pc, #80]	; (8000240 <plotPlayer+0x74>)
 80001ee:	7800      	ldrb	r0, [r0, #0]
 80001f0:	f001 fed8 	bl	8001fa4 <SSD1306_DrawBitmap>

		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
	}


}
 80001f4:	b003      	add	sp, #12
 80001f6:	f85d fb04 	ldr.w	pc, [sp], #4
			if(Player.posicion_X >= 120){
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <plotPlayer+0x74>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b77      	cmp	r3, #119	; 0x77
 8000200:	d903      	bls.n	800020a <plotPlayer+0x3e>
				Player.posicion_X = 120;
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <plotPlayer+0x74>)
 8000204:	2278      	movs	r2, #120	; 0x78
 8000206:	701a      	strb	r2, [r3, #0]
 8000208:	e7ea      	b.n	80001e0 <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X + 4;
 800020a:	3304      	adds	r3, #4
 800020c:	4a0c      	ldr	r2, [pc, #48]	; (8000240 <plotPlayer+0x74>)
 800020e:	7013      	strb	r3, [r2, #0]
 8000210:	e7e6      	b.n	80001e0 <plotPlayer+0x14>
			if(Player.posicion_X <= 0){
 8000212:	4b0b      	ldr	r3, [pc, #44]	; (8000240 <plotPlayer+0x74>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	b91b      	cbnz	r3, 8000220 <plotPlayer+0x54>
				Player.posicion_X = 0;
 8000218:	4b09      	ldr	r3, [pc, #36]	; (8000240 <plotPlayer+0x74>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]
 800021e:	e7df      	b.n	80001e0 <plotPlayer+0x14>
				Player.posicion_X = Player.posicion_X - 4;
 8000220:	3b04      	subs	r3, #4
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <plotPlayer+0x74>)
 8000224:	7013      	strb	r3, [r2, #0]
 8000226:	e7db      	b.n	80001e0 <plotPlayer+0x14>
		SSD1306_DrawBitmap(Player.posicion_X, 56, nave_explotada, 8,8,1);
 8000228:	2301      	movs	r3, #1
 800022a:	9301      	str	r3, [sp, #4]
 800022c:	2308      	movs	r3, #8
 800022e:	9300      	str	r3, [sp, #0]
 8000230:	4a05      	ldr	r2, [pc, #20]	; (8000248 <plotPlayer+0x7c>)
 8000232:	2138      	movs	r1, #56	; 0x38
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <plotPlayer+0x74>)
 8000236:	7800      	ldrb	r0, [r0, #0]
 8000238:	f001 feb4 	bl	8001fa4 <SSD1306_DrawBitmap>
}
 800023c:	e7da      	b.n	80001f4 <plotPlayer+0x28>
 800023e:	bf00      	nop
 8000240:	200009a4 	.word	0x200009a4
 8000244:	080099d8 	.word	0x080099d8
 8000248:	080099e0 	.word	0x080099e0

0800024c <InvaderInit>:



void InvaderInit(){

	movimiento_Aliens.orientacion = mov_derecha;
 800024c:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <InvaderInit+0x7c>)
 800024e:	f04f 0c00 	mov.w	ip, #0
 8000252:	f883 c000 	strb.w	ip, [r3]
	movimiento_Aliens.alien_columna_derecha = NUM_ALIEN_COLUMNA - 1;
 8000256:	2206      	movs	r2, #6
 8000258:	715a      	strb	r2, [r3, #5]
	movimiento_Aliens.alien_columna_izquierda = 0;
 800025a:	f883 c004 	strb.w	ip, [r3, #4]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800025e:	f1bc 0f02 	cmp.w	ip, #2
 8000262:	d82f      	bhi.n	80002c4 <InvaderInit+0x78>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000264:	2300      	movs	r3, #0
 8000266:	2b06      	cmp	r3, #6
 8000268:	d827      	bhi.n	80002ba <InvaderInit+0x6e>
void InvaderInit(){
 800026a:	b410      	push	{r4}
			Alien[y][x].posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 800026c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000270:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8000274:	320b      	adds	r2, #11
 8000276:	4c15      	ldr	r4, [pc, #84]	; (80002cc <InvaderInit+0x80>)
 8000278:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800027c:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 8000280:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000284:	4401      	add	r1, r0
 8000286:	1860      	adds	r0, r4, r1
 8000288:	5462      	strb	r2, [r4, r1]
			Alien[y][x].posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 800028a:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 800028e:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8000292:	7042      	strb	r2, [r0, #1]
			Alien[y][x].vivo = true;
 8000294:	2201      	movs	r2, #1
 8000296:	7082      	strb	r2, [r0, #2]
			Alien[y][x].conteo_explosion = 2;
 8000298:	2202      	movs	r2, #2
 800029a:	7102      	strb	r2, [r0, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800029c:	3301      	adds	r3, #1
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b06      	cmp	r3, #6
 80002a2:	d9e3      	bls.n	800026c <InvaderInit+0x20>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002a4:	f10c 0c01 	add.w	ip, ip, #1
 80002a8:	fa5f fc8c 	uxtb.w	ip, ip
 80002ac:	f1bc 0f02 	cmp.w	ip, #2
 80002b0:	d801      	bhi.n	80002b6 <InvaderInit+0x6a>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	e7f4      	b.n	80002a0 <InvaderInit+0x54>
		}
	}

}
 80002b6:	bc10      	pop	{r4}
 80002b8:	4770      	bx	lr
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002ba:	f10c 0c01 	add.w	ip, ip, #1
 80002be:	fa5f fc8c 	uxtb.w	ip, ip
 80002c2:	e7cc      	b.n	800025e <InvaderInit+0x12>
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	200009ec 	.word	0x200009ec
 80002cc:	20000930 	.word	0x20000930

080002d0 <plotAliens>:

void plotAliens(){
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	b083      	sub	sp, #12

	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(movimiento_Aliens.conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80002d4:	4ba8      	ldr	r3, [pc, #672]	; (8000578 <plotAliens+0x2a8>)
 80002d6:	785c      	ldrb	r4, [r3, #1]
 80002d8:	4ba8      	ldr	r3, [pc, #672]	; (800057c <plotAliens+0x2ac>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	fbb4 f0f3 	udiv	r0, r4, r3
 80002e0:	fb03 4010 	mls	r0, r3, r0, r4
 80002e4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80002e8:	d121      	bne.n	800032e <plotAliens+0x5e>

		movimiento_Aliens.animacion = !movimiento_Aliens.animacion;
 80002ea:	4aa3      	ldr	r2, [pc, #652]	; (8000578 <plotAliens+0x2a8>)
 80002ec:	78d3      	ldrb	r3, [r2, #3]
 80002ee:	fab3 f383 	clz	r3, r3
 80002f2:	095b      	lsrs	r3, r3, #5
 80002f4:	70d3      	strb	r3, [r2, #3]

			switch(movimiento_Aliens.orientacion){
 80002f6:	7817      	ldrb	r7, [r2, #0]
 80002f8:	2f00      	cmp	r7, #0
 80002fa:	d034      	beq.n	8000366 <plotAliens+0x96>
 80002fc:	2f01      	cmp	r7, #1
 80002fe:	d049      	beq.n	8000394 <plotAliens+0xc4>
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (Alien[0][movimiento_Aliens.alien_columna_derecha].posicion_X + TAMANO_ALIEN_BOTTOM) > 127){
 8000300:	4b9d      	ldr	r3, [pc, #628]	; (8000578 <plotAliens+0x2a8>)
 8000302:	795b      	ldrb	r3, [r3, #5]
 8000304:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000308:	4a9d      	ldr	r2, [pc, #628]	; (8000580 <plotAliens+0x2b0>)
 800030a:	56d3      	ldrsb	r3, [r2, r3]
 800030c:	2b73      	cmp	r3, #115	; 0x73
 800030e:	dd02      	ble.n	8000316 <plotAliens+0x46>

				movimiento_Aliens.orientacion = mov_izquierda;
 8000310:	4b99      	ldr	r3, [pc, #612]	; (8000578 <plotAliens+0x2a8>)
 8000312:	2201      	movs	r2, #1
 8000314:	701a      	strb	r2, [r3, #0]
			}


			if( (Alien[0][movimiento_Aliens.alien_columna_izquierda].posicion_X) < 0){
 8000316:	4b98      	ldr	r3, [pc, #608]	; (8000578 <plotAliens+0x2a8>)
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800031e:	4a98      	ldr	r2, [pc, #608]	; (8000580 <plotAliens+0x2b0>)
 8000320:	56d3      	ldrsb	r3, [r2, r3]
 8000322:	2b00      	cmp	r3, #0
 8000324:	db38      	blt.n	8000398 <plotAliens+0xc8>
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(movimiento_Aliens.conteo_bajada == 10){
 8000326:	4b94      	ldr	r3, [pc, #592]	; (8000578 <plotAliens+0x2a8>)
 8000328:	789b      	ldrb	r3, [r3, #2]
 800032a:	2b0a      	cmp	r3, #10
 800032c:	d056      	beq.n	80003dc <plotAliens+0x10c>
				}
			}

	}

	movimiento_Aliens.conteo_horizontal = movimiento_Aliens.conteo_horizontal + 1;
 800032e:	3401      	adds	r4, #1
 8000330:	4b91      	ldr	r3, [pc, #580]	; (8000578 <plotAliens+0x2a8>)
 8000332:	705c      	strb	r4, [r3, #1]
	uint8_t conteo_columna_derecha = 0;
	uint8_t conteo_columna_izquierda = 0;

	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000334:	2500      	movs	r5, #0
	uint8_t conteo_columna_izquierda = 0;
 8000336:	462f      	mov	r7, r5
	uint8_t conteo_columna_derecha = 0;
 8000338:	462e      	mov	r6, r5
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800033a:	e131      	b.n	80005a0 <plotAliens+0x2d0>
								Alien[y][x].posicion_X  = Alien[y][x].posicion_X + 2;
 800033c:	4d90      	ldr	r5, [pc, #576]	; (8000580 <plotAliens+0x2b0>)
 800033e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000342:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000346:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800034a:	440a      	add	r2, r1
 800034c:	5ca9      	ldrb	r1, [r5, r2]
 800034e:	3102      	adds	r1, #2
 8000350:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000352:	3301      	adds	r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b06      	cmp	r3, #6
 8000358:	d9f0      	bls.n	800033c <plotAliens+0x6c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800035a:	3601      	adds	r6, #1
 800035c:	b2f6      	uxtb	r6, r6
 800035e:	2e02      	cmp	r6, #2
 8000360:	d8ce      	bhi.n	8000300 <plotAliens+0x30>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000362:	463b      	mov	r3, r7
 8000364:	e7f7      	b.n	8000356 <plotAliens+0x86>
			switch(movimiento_Aliens.orientacion){
 8000366:	463e      	mov	r6, r7
 8000368:	e7f9      	b.n	800035e <plotAliens+0x8e>
								Alien[y][x].posicion_X  = Alien[y][x].posicion_X - 2;
 800036a:	4d85      	ldr	r5, [pc, #532]	; (8000580 <plotAliens+0x2b0>)
 800036c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8000370:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8000374:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000378:	440a      	add	r2, r1
 800037a:	5ca9      	ldrb	r1, [r5, r2]
 800037c:	3902      	subs	r1, #2
 800037e:	54a9      	strb	r1, [r5, r2]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000380:	3301      	adds	r3, #1
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b06      	cmp	r3, #6
 8000386:	d9f0      	bls.n	800036a <plotAliens+0x9a>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000388:	3601      	adds	r6, #1
 800038a:	b2f6      	uxtb	r6, r6
 800038c:	2e02      	cmp	r6, #2
 800038e:	d8b7      	bhi.n	8000300 <plotAliens+0x30>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000390:	4603      	mov	r3, r0
 8000392:	e7f7      	b.n	8000384 <plotAliens+0xb4>
			switch(movimiento_Aliens.orientacion){
 8000394:	4606      	mov	r6, r0
 8000396:	e7f9      	b.n	800038c <plotAliens+0xbc>
				movimiento_Aliens.orientacion = mov_derecha;
 8000398:	4b77      	ldr	r3, [pc, #476]	; (8000578 <plotAliens+0x2a8>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
				movimiento_Aliens.conteo_bajada = movimiento_Aliens.conteo_bajada + 1;
 800039e:	789a      	ldrb	r2, [r3, #2]
 80003a0:	3201      	adds	r2, #1
 80003a2:	709a      	strb	r2, [r3, #2]
 80003a4:	e7bf      	b.n	8000326 <plotAliens+0x56>
						Alien[y][x].posicion_Y  = Alien[y][x].posicion_Y + dificultad.velocidad_bajada;
 80003a6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80003aa:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80003ae:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80003b2:	4411      	add	r1, r2
 80003b4:	4a72      	ldr	r2, [pc, #456]	; (8000580 <plotAliens+0x2b0>)
 80003b6:	440a      	add	r2, r1
 80003b8:	7851      	ldrb	r1, [r2, #1]
 80003ba:	4e70      	ldr	r6, [pc, #448]	; (800057c <plotAliens+0x2ac>)
 80003bc:	7876      	ldrb	r6, [r6, #1]
 80003be:	4431      	add	r1, r6
 80003c0:	7051      	strb	r1, [r2, #1]
						movimiento_Aliens.conteo_bajada = 0;
 80003c2:	4a6d      	ldr	r2, [pc, #436]	; (8000578 <plotAliens+0x2a8>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	7091      	strb	r1, [r2, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003c8:	3301      	adds	r3, #1
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b06      	cmp	r3, #6
 80003ce:	d9ea      	bls.n	80003a6 <plotAliens+0xd6>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003d0:	3501      	adds	r5, #1
 80003d2:	b2ed      	uxtb	r5, r5
 80003d4:	2d02      	cmp	r5, #2
 80003d6:	d8aa      	bhi.n	800032e <plotAliens+0x5e>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003d8:	4603      	mov	r3, r0
 80003da:	e7f7      	b.n	80003cc <plotAliens+0xfc>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003dc:	4605      	mov	r5, r0
 80003de:	e7f9      	b.n	80003d4 <plotAliens+0x104>

				if(Alien[y][movimiento_Aliens.alien_columna_derecha].vivo == false){
					conteo_columna_derecha++;
				}

				else if(Alien[y][movimiento_Aliens.alien_columna_izquierda].vivo == false){
 80003e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80003e4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80003e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80003ec:	441a      	add	r2, r3
 80003ee:	4b64      	ldr	r3, [pc, #400]	; (8000580 <plotAliens+0x2b0>)
 80003f0:	4413      	add	r3, r2
 80003f2:	789b      	ldrb	r3, [r3, #2]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	f040 80e9 	bne.w	80005cc <plotAliens+0x2fc>
					conteo_columna_izquierda++;
 80003fa:	3701      	adds	r7, #1
 80003fc:	b2ff      	uxtb	r7, r7
 80003fe:	e0e5      	b.n	80005cc <plotAliens+0x2fc>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){

					switch(y){

					case 0:
						if(Alien[y][x].vivo == true){
 8000400:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000404:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000408:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800040c:	440a      	add	r2, r1
 800040e:	495c      	ldr	r1, [pc, #368]	; (8000580 <plotAliens+0x2b0>)
 8000410:	440a      	add	r2, r1
 8000412:	7892      	ldrb	r2, [r2, #2]
 8000414:	2a01      	cmp	r2, #1
 8000416:	d030      	beq.n	800047a <plotAliens+0x1aa>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000418:	3401      	adds	r4, #1
 800041a:	b2e4      	uxtb	r4, r4
 800041c:	2c06      	cmp	r4, #6
 800041e:	f200 80bd 	bhi.w	800059c <plotAliens+0x2cc>
					switch(y){
 8000422:	2d00      	cmp	r5, #0
 8000424:	d0ec      	beq.n	8000400 <plotAliens+0x130>
 8000426:	2d01      	cmp	r5, #1
 8000428:	d055      	beq.n	80004d6 <plotAliens+0x206>
								//movimiento_Aliens.animacion = true;
							}
						}
						break;
					default:
						if(Alien[y][x].vivo == true){
 800042a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800042e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000432:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8000436:	440a      	add	r2, r1
 8000438:	4951      	ldr	r1, [pc, #324]	; (8000580 <plotAliens+0x2b0>)
 800043a:	440a      	add	r2, r1
 800043c:	7892      	ldrb	r2, [r2, #2]
 800043e:	2a01      	cmp	r2, #1
 8000440:	d1ea      	bne.n	8000418 <plotAliens+0x148>
							if(movimiento_Aliens.animacion == true ){
 8000442:	4a4d      	ldr	r2, [pc, #308]	; (8000578 <plotAliens+0x2a8>)
 8000444:	78d2      	ldrb	r2, [r2, #3]
 8000446:	2a01      	cmp	r2, #1
 8000448:	f000 8081 	beq.w	800054e <plotAliens+0x27e>
								SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,InvaderBottomGfx,16,8,1);
							}
							else{
								SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,InvaderBottomGfx2,16,8,1);
 800044c:	f8df c130 	ldr.w	ip, [pc, #304]	; 8000580 <plotAliens+0x2b0>
 8000450:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8000454:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000458:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800045c:	4418      	add	r0, r3
 800045e:	eb0c 0100 	add.w	r1, ip, r0
 8000462:	2301      	movs	r3, #1
 8000464:	9301      	str	r3, [sp, #4]
 8000466:	2308      	movs	r3, #8
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2310      	movs	r3, #16
 800046c:	4a45      	ldr	r2, [pc, #276]	; (8000584 <plotAliens+0x2b4>)
 800046e:	7849      	ldrb	r1, [r1, #1]
 8000470:	f91c 0000 	ldrsb.w	r0, [ip, r0]
 8000474:	f001 fd96 	bl	8001fa4 <SSD1306_DrawBitmap>
 8000478:	e7ce      	b.n	8000418 <plotAliens+0x148>
							if(movimiento_Aliens.animacion == true ){
 800047a:	4a3f      	ldr	r2, [pc, #252]	; (8000578 <plotAliens+0x2a8>)
 800047c:	78d2      	ldrb	r2, [r2, #3]
 800047e:	2a01      	cmp	r2, #1
 8000480:	d015      	beq.n	80004ae <plotAliens+0x1de>
								SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,InvaderTopGfx2,8,8,1);
 8000482:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8000580 <plotAliens+0x2b0>
 8000486:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800048a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800048e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000492:	4418      	add	r0, r3
 8000494:	eb0c 0100 	add.w	r1, ip, r0
 8000498:	2301      	movs	r3, #1
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	2308      	movs	r3, #8
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	4a39      	ldr	r2, [pc, #228]	; (8000588 <plotAliens+0x2b8>)
 80004a2:	7849      	ldrb	r1, [r1, #1]
 80004a4:	f91c 0000 	ldrsb.w	r0, [ip, r0]
 80004a8:	f001 fd7c 	bl	8001fa4 <SSD1306_DrawBitmap>
 80004ac:	e7b4      	b.n	8000418 <plotAliens+0x148>
								SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,InvaderTopGfx,8,8,1);
 80004ae:	468c      	mov	ip, r1
 80004b0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80004b4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80004b8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80004bc:	4418      	add	r0, r3
 80004be:	4401      	add	r1, r0
 80004c0:	2301      	movs	r3, #1
 80004c2:	9301      	str	r3, [sp, #4]
 80004c4:	2308      	movs	r3, #8
 80004c6:	9300      	str	r3, [sp, #0]
 80004c8:	4a30      	ldr	r2, [pc, #192]	; (800058c <plotAliens+0x2bc>)
 80004ca:	7849      	ldrb	r1, [r1, #1]
 80004cc:	f91c 0000 	ldrsb.w	r0, [ip, r0]
 80004d0:	f001 fd68 	bl	8001fa4 <SSD1306_DrawBitmap>
 80004d4:	e7a0      	b.n	8000418 <plotAliens+0x148>
						if(Alien[y][x].vivo == true){
 80004d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80004da:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80004de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80004e2:	440a      	add	r2, r1
 80004e4:	4926      	ldr	r1, [pc, #152]	; (8000580 <plotAliens+0x2b0>)
 80004e6:	440a      	add	r2, r1
 80004e8:	7892      	ldrb	r2, [r2, #2]
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	d194      	bne.n	8000418 <plotAliens+0x148>
							if(movimiento_Aliens.animacion == true ){
 80004ee:	4a22      	ldr	r2, [pc, #136]	; (8000578 <plotAliens+0x2a8>)
 80004f0:	78d2      	ldrb	r2, [r2, #3]
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	d016      	beq.n	8000524 <plotAliens+0x254>
								SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,InvaderMiddleGfx2,16,8,1);
 80004f6:	f8df c088 	ldr.w	ip, [pc, #136]	; 8000580 <plotAliens+0x2b0>
 80004fa:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80004fe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000502:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000506:	4418      	add	r0, r3
 8000508:	eb0c 0100 	add.w	r1, ip, r0
 800050c:	2301      	movs	r3, #1
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	2308      	movs	r3, #8
 8000512:	9300      	str	r3, [sp, #0]
 8000514:	2310      	movs	r3, #16
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <plotAliens+0x2c0>)
 8000518:	7849      	ldrb	r1, [r1, #1]
 800051a:	f91c 0000 	ldrsb.w	r0, [ip, r0]
 800051e:	f001 fd41 	bl	8001fa4 <SSD1306_DrawBitmap>
 8000522:	e779      	b.n	8000418 <plotAliens+0x148>
								SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,InvaderMiddleGfx,16,8,1);
 8000524:	468c      	mov	ip, r1
 8000526:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800052a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800052e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000532:	4418      	add	r0, r3
 8000534:	4401      	add	r1, r0
 8000536:	2301      	movs	r3, #1
 8000538:	9301      	str	r3, [sp, #4]
 800053a:	2308      	movs	r3, #8
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2310      	movs	r3, #16
 8000540:	4a14      	ldr	r2, [pc, #80]	; (8000594 <plotAliens+0x2c4>)
 8000542:	7849      	ldrb	r1, [r1, #1]
 8000544:	f91c 0000 	ldrsb.w	r0, [ip, r0]
 8000548:	f001 fd2c 	bl	8001fa4 <SSD1306_DrawBitmap>
 800054c:	e764      	b.n	8000418 <plotAliens+0x148>
								SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,InvaderBottomGfx,16,8,1);
 800054e:	468c      	mov	ip, r1
 8000550:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8000554:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8000558:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800055c:	4418      	add	r0, r3
 800055e:	4401      	add	r1, r0
 8000560:	2301      	movs	r3, #1
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2308      	movs	r3, #8
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	2310      	movs	r3, #16
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <plotAliens+0x2c8>)
 800056c:	7849      	ldrb	r1, [r1, #1]
 800056e:	f91c 0000 	ldrsb.w	r0, [ip, r0]
 8000572:	f001 fd17 	bl	8001fa4 <SSD1306_DrawBitmap>
 8000576:	e74f      	b.n	8000418 <plotAliens+0x148>
 8000578:	200009ec 	.word	0x200009ec
 800057c:	200009e8 	.word	0x200009e8
 8000580:	20000930 	.word	0x20000930
 8000584:	08009988 	.word	0x08009988
 8000588:	080099c0 	.word	0x080099c0
 800058c:	080099b8 	.word	0x080099b8
 8000590:	080099a8 	.word	0x080099a8
 8000594:	08009998 	.word	0x08009998
 8000598:	08009978 	.word	0x08009978
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800059c:	3501      	adds	r5, #1
 800059e:	b2ed      	uxtb	r5, r5
 80005a0:	2d02      	cmp	r5, #2
 80005a2:	d815      	bhi.n	80005d0 <plotAliens+0x300>
			if(movimiento_Aliens.alien_columna_derecha != movimiento_Aliens.alien_columna_izquierda){
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <plotAliens+0x320>)
 80005a6:	7953      	ldrb	r3, [r2, #5]
 80005a8:	7912      	ldrb	r2, [r2, #4]
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d00e      	beq.n	80005cc <plotAliens+0x2fc>
				if(Alien[y][movimiento_Aliens.alien_columna_derecha].vivo == false){
 80005ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80005b2:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80005b6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80005ba:	440b      	add	r3, r1
 80005bc:	490d      	ldr	r1, [pc, #52]	; (80005f4 <plotAliens+0x324>)
 80005be:	440b      	add	r3, r1
 80005c0:	789b      	ldrb	r3, [r3, #2]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f47f af0c 	bne.w	80003e0 <plotAliens+0x110>
					conteo_columna_derecha++;
 80005c8:	3601      	adds	r6, #1
 80005ca:	b2f6      	uxtb	r6, r6
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80005cc:	2400      	movs	r4, #0
 80005ce:	e725      	b.n	800041c <plotAliens+0x14c>

		}

		//uint8_t debug1, debug2;

		if(conteo_columna_derecha == NUM_ALIEN_FILA){
 80005d0:	2e03      	cmp	r6, #3
 80005d2:	d003      	beq.n	80005dc <plotAliens+0x30c>
			movimiento_Aliens.alien_columna_derecha = movimiento_Aliens.alien_columna_derecha - 1;

		}

		if(conteo_columna_izquierda == NUM_ALIEN_FILA){
 80005d4:	2f03      	cmp	r7, #3
 80005d6:	d006      	beq.n	80005e6 <plotAliens+0x316>
			debug1 = movimiento_Aliens.alien_columna_derecha;
			debug2 = movimiento_Aliens.alien_columna_izquierda;
		}*/


}
 80005d8:	b003      	add	sp, #12
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			movimiento_Aliens.alien_columna_derecha = movimiento_Aliens.alien_columna_derecha - 1;
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <plotAliens+0x320>)
 80005de:	7953      	ldrb	r3, [r2, #5]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	7153      	strb	r3, [r2, #5]
 80005e4:	e7f6      	b.n	80005d4 <plotAliens+0x304>
			movimiento_Aliens.alien_columna_izquierda = movimiento_Aliens.alien_columna_izquierda + 1;
 80005e6:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <plotAliens+0x320>)
 80005e8:	7913      	ldrb	r3, [r2, #4]
 80005ea:	3301      	adds	r3, #1
 80005ec:	7113      	strb	r3, [r2, #4]
}
 80005ee:	e7f3      	b.n	80005d8 <plotAliens+0x308>
 80005f0:	200009ec 	.word	0x200009ec
 80005f4:	20000930 	.word	0x20000930

080005f8 <disparoInit>:


void disparoInit(){

	//Inicializacion del disparo del Player
	Disparo.posicion_x = 0;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <disparoInit+0x18>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80005fe:	2132      	movs	r1, #50	; 0x32
 8000600:	7059      	strb	r1, [r3, #1]
	Disparo.disparo = false;
 8000602:	709a      	strb	r2, [r3, #2]
	Disparo.numero_disparos = 0;
 8000604:	70da      	strb	r2, [r3, #3]

	//Inicializacion del Disparo de los Aliens
	Disparo_Aliens.numero_disparos = 21;
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <disparoInit+0x1c>)
 8000608:	2215      	movs	r2, #21
 800060a:	70da      	strb	r2, [r3, #3]
}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000099c 	.word	0x2000099c
 8000614:	200009a0 	.word	0x200009a0

08000618 <disparar>:


void disparar(){
 8000618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800061c:	b083      	sub	sp, #12


			if(Disparo.numero_disparos == 1){
 800061e:	4b78      	ldr	r3, [pc, #480]	; (8000800 <disparar+0x1e8>)
 8000620:	78db      	ldrb	r3, [r3, #3]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d006      	beq.n	8000634 <disparar+0x1c>
				Disparo.disparo = true;
				Disparo.posicion_x = Player.posicion_X;
			}


			if(Disparo.disparo == true){
 8000626:	4b76      	ldr	r3, [pc, #472]	; (8000800 <disparar+0x1e8>)
 8000628:	789b      	ldrb	r3, [r3, #2]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d009      	beq.n	8000642 <disparar+0x2a>
					tamano_alien = TAMANO_ALIEN_BOTTOM;
					break;

				}

				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800062e:	f04f 0800 	mov.w	r8, #0
 8000632:	e0d2      	b.n	80007da <disparar+0x1c2>
				Disparo.disparo = true;
 8000634:	4b72      	ldr	r3, [pc, #456]	; (8000800 <disparar+0x1e8>)
 8000636:	2201      	movs	r2, #1
 8000638:	709a      	strb	r2, [r3, #2]
				Disparo.posicion_x = Player.posicion_X;
 800063a:	4a72      	ldr	r2, [pc, #456]	; (8000804 <disparar+0x1ec>)
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e7f1      	b.n	8000626 <disparar+0xe>
				SSD1306_DrawLine(Disparo.posicion_x + 4, Disparo.posicion_y, Disparo.posicion_x + 4, Disparo.posicion_y + 2, 1);
 8000642:	4c6f      	ldr	r4, [pc, #444]	; (8000800 <disparar+0x1e8>)
 8000644:	7820      	ldrb	r0, [r4, #0]
 8000646:	3004      	adds	r0, #4
 8000648:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800064c:	b289      	uxth	r1, r1
 800064e:	1c8b      	adds	r3, r1, #2
 8000650:	2201      	movs	r2, #1
 8000652:	9200      	str	r2, [sp, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	4602      	mov	r2, r0
 8000658:	f001 fd53 	bl	8002102 <SSD1306_DrawLine>
				Disparo.posicion_y = Disparo.posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800065c:	7863      	ldrb	r3, [r4, #1]
 800065e:	3b04      	subs	r3, #4
 8000660:	b25b      	sxtb	r3, r3
 8000662:	7063      	strb	r3, [r4, #1]
				if(Disparo.posicion_y <= 0){
 8000664:	2b00      	cmp	r3, #0
 8000666:	dce2      	bgt.n	800062e <disparar+0x16>
					Disparo.disparo = false;
 8000668:	2200      	movs	r2, #0
 800066a:	70a2      	strb	r2, [r4, #2]
					Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 800066c:	2132      	movs	r1, #50	; 0x32
 800066e:	7061      	strb	r1, [r4, #1]
					Disparo.numero_disparos = 0;
 8000670:	70e2      	strb	r2, [r4, #3]
 8000672:	e7dc      	b.n	800062e <disparar+0x16>
					tamano_alien = TAMANO_ALIEN_MIDDLE;
 8000674:	270b      	movs	r7, #11
 8000676:	e0bd      	b.n	80007f4 <disparar+0x1dc>
				switch(y){
 8000678:	2708      	movs	r7, #8
 800067a:	e0bb      	b.n	80007f4 <disparar+0x1dc>
									switch(y){
									case 0:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP+ (PUNTAJE_ADICIONAL*Player.nivel));
										break;
									case 1:
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_MIDDLE + (PUNTAJE_ADICIONAL*Player.nivel));
 800067c:	f8df c184 	ldr.w	ip, [pc, #388]	; 8000804 <disparar+0x1ec>
 8000680:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 8000684:	f89c 2006 	ldrb.w	r2, [ip, #6]
 8000688:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800068c:	4413      	add	r3, r2
 800068e:	3314      	adds	r3, #20
 8000690:	f8ac 3004 	strh.w	r3, [ip, #4]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(Alien[y][x].explosion == true){
 8000694:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000698:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800069c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80006a0:	4413      	add	r3, r2
 80006a2:	4a59      	ldr	r2, [pc, #356]	; (8000808 <disparar+0x1f0>)
 80006a4:	4413      	add	r3, r2
 80006a6:	78db      	ldrb	r3, [r3, #3]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d077      	beq.n	800079c <disparar+0x184>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80006ac:	3401      	adds	r4, #1
 80006ae:	b2e4      	uxtb	r4, r4
 80006b0:	2c06      	cmp	r4, #6
 80006b2:	f200 808e 	bhi.w	80007d2 <disparar+0x1ba>
					if( (Disparo.posicion_x + 1 >= Alien[y][x].posicion_X) &  (Disparo.posicion_x + 1 <= (Alien[y][x].posicion_X + tamano_alien)) & ((Disparo.posicion_y) >= Alien[y][x].posicion_Y) & (Disparo.posicion_y <= Alien[y][x].posicion_Y + tamano_alien)){
 80006b6:	4952      	ldr	r1, [pc, #328]	; (8000800 <disparar+0x1e8>)
 80006b8:	f891 c000 	ldrb.w	ip, [r1]
 80006bc:	f10c 0e01 	add.w	lr, ip, #1
 80006c0:	4626      	mov	r6, r4
 80006c2:	4851      	ldr	r0, [pc, #324]	; (8000808 <disparar+0x1f0>)
 80006c4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80006c8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80006cc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80006d0:	4413      	add	r3, r2
 80006d2:	18c2      	adds	r2, r0, r3
 80006d4:	56c0      	ldrsb	r0, [r0, r3]
 80006d6:	eb00 0907 	add.w	r9, r0, r7
 80006da:	4586      	cmp	lr, r0
 80006dc:	bfb4      	ite	lt
 80006de:	2300      	movlt	r3, #0
 80006e0:	2301      	movge	r3, #1
 80006e2:	45cc      	cmp	ip, r9
 80006e4:	bfa8      	it	ge
 80006e6:	2300      	movge	r3, #0
 80006e8:	f991 c001 	ldrsb.w	ip, [r1, #1]
 80006ec:	7851      	ldrb	r1, [r2, #1]
 80006ee:	187a      	adds	r2, r7, r1
 80006f0:	4594      	cmp	ip, r2
 80006f2:	bfcc      	ite	gt
 80006f4:	2200      	movgt	r2, #0
 80006f6:	2201      	movle	r2, #1
 80006f8:	458c      	cmp	ip, r1
 80006fa:	bfb4      	ite	lt
 80006fc:	2300      	movlt	r3, #0
 80006fe:	f003 0301 	andge.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0c6      	beq.n	8000694 <disparar+0x7c>
 8000706:	2a00      	cmp	r2, #0
 8000708:	d0c4      	beq.n	8000694 <disparar+0x7c>
								if(Alien[y][x].vivo == true){
 800070a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800070e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8000712:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000716:	4413      	add	r3, r2
 8000718:	4a3b      	ldr	r2, [pc, #236]	; (8000808 <disparar+0x1f0>)
 800071a:	4413      	add	r3, r2
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d1b8      	bne.n	8000694 <disparar+0x7c>
									Alien[y][x].vivo = false;
 8000722:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000726:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800072a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800072e:	4413      	add	r3, r2
 8000730:	4a35      	ldr	r2, [pc, #212]	; (8000808 <disparar+0x1f0>)
 8000732:	4413      	add	r3, r2
 8000734:	2200      	movs	r2, #0
 8000736:	709a      	strb	r2, [r3, #2]
									Alien[y][x].explosion = true;
 8000738:	f04f 0c01 	mov.w	ip, #1
 800073c:	f883 c003 	strb.w	ip, [r3, #3]
									Disparo.disparo = false;
 8000740:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <disparar+0x1e8>)
 8000742:	709a      	strb	r2, [r3, #2]
									Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 8000744:	f04f 0c32 	mov.w	ip, #50	; 0x32
 8000748:	f883 c001 	strb.w	ip, [r3, #1]
									Disparo.numero_disparos = 0;
 800074c:	70da      	strb	r2, [r3, #3]
									Disparo_Aliens.numero_disparos = Disparo_Aliens.numero_disparos - 1;
 800074e:	4a2f      	ldr	r2, [pc, #188]	; (800080c <disparar+0x1f4>)
 8000750:	78d3      	ldrb	r3, [r2, #3]
 8000752:	3b01      	subs	r3, #1
 8000754:	70d3      	strb	r3, [r2, #3]
									switch(y){
 8000756:	f1b8 0f01 	cmp.w	r8, #1
 800075a:	d08f      	beq.n	800067c <disparar+0x64>
 800075c:	f1b8 0f02 	cmp.w	r8, #2
 8000760:	d00f      	beq.n	8000782 <disparar+0x16a>
 8000762:	f1b8 0f00 	cmp.w	r8, #0
 8000766:	d195      	bne.n	8000694 <disparar+0x7c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_TOP+ (PUNTAJE_ADICIONAL*Player.nivel));
 8000768:	f8df c098 	ldr.w	ip, [pc, #152]	; 8000804 <disparar+0x1ec>
 800076c:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 8000770:	f89c 2006 	ldrb.w	r2, [ip, #6]
 8000774:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000778:	4413      	add	r3, r2
 800077a:	331e      	adds	r3, #30
 800077c:	f8ac 3004 	strh.w	r3, [ip, #4]
										break;
 8000780:	e788      	b.n	8000694 <disparar+0x7c>
										Player.puntaje = (Player.puntaje) + (PUNTAJE_ALIEN_BOTTOM+ (PUNTAJE_ADICIONAL*Player.nivel));
 8000782:	f8df c080 	ldr.w	ip, [pc, #128]	; 8000804 <disparar+0x1ec>
 8000786:	f8bc 3004 	ldrh.w	r3, [ip, #4]
 800078a:	f89c 2006 	ldrb.w	r2, [ip, #6]
 800078e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000792:	4413      	add	r3, r2
 8000794:	330a      	adds	r3, #10
 8000796:	f8ac 3004 	strh.w	r3, [ip, #4]
										break;
 800079a:	e77b      	b.n	8000694 <disparar+0x7c>
						SSD1306_DrawBitmap(Alien[y][x].posicion_X, Alien[y][x].posicion_Y,explosion,16,8,1);
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	2308      	movs	r3, #8
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2310      	movs	r3, #16
 80007a4:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <disparar+0x1f8>)
 80007a6:	f001 fbfd 	bl	8001fa4 <SSD1306_DrawBitmap>
						Alien[y][x].conteo_explosion = Alien[y][x].conteo_explosion - 1;
 80007aa:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80007ae:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80007b2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80007b6:	4413      	add	r3, r2
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <disparar+0x1f0>)
 80007ba:	441a      	add	r2, r3
 80007bc:	7913      	ldrb	r3, [r2, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	7113      	strb	r3, [r2, #4]

						if(Alien[y][x].conteo_explosion == 0){
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f47f af71 	bne.w	80006ac <disparar+0x94>
							Alien[y][x].explosion = false;
 80007ca:	4613      	mov	r3, r2
 80007cc:	2200      	movs	r2, #0
 80007ce:	70da      	strb	r2, [r3, #3]
 80007d0:	e76c      	b.n	80006ac <disparar+0x94>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80007d2:	f108 0801 	add.w	r8, r8, #1
 80007d6:	fa5f f888 	uxtb.w	r8, r8
 80007da:	f1b8 0f02 	cmp.w	r8, #2
 80007de:	d80b      	bhi.n	80007f8 <disparar+0x1e0>
				switch(y){
 80007e0:	4645      	mov	r5, r8
 80007e2:	f1b8 0f01 	cmp.w	r8, #1
 80007e6:	f43f af45 	beq.w	8000674 <disparar+0x5c>
 80007ea:	f1b8 0f02 	cmp.w	r8, #2
 80007ee:	f47f af43 	bne.w	8000678 <disparar+0x60>
					tamano_alien = TAMANO_ALIEN_BOTTOM;
 80007f2:	270c      	movs	r7, #12
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80007f4:	2400      	movs	r4, #0
 80007f6:	e75b      	b.n	80006b0 <disparar+0x98>
						}
					}
				}
			}
}
 80007f8:	b003      	add	sp, #12
 80007fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80007fe:	bf00      	nop
 8000800:	2000099c 	.word	0x2000099c
 8000804:	200009a4 	.word	0x200009a4
 8000808:	20000930 	.word	0x20000930
 800080c:	200009a0 	.word	0x200009a0
 8000810:	080099c8 	.word	0x080099c8

08000814 <disparoAliens>:


void disparoAliens(){


	if(Disparo_Aliens.numero_disparos != 0){	//Si no hay aliens vivos.
 8000814:	4b41      	ldr	r3, [pc, #260]	; (800091c <disparoAliens+0x108>)
 8000816:	78db      	ldrb	r3, [r3, #3]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d07e      	beq.n	800091a <disparoAliens+0x106>
void disparoAliens(){
 800081c:	b510      	push	{r4, lr}
 800081e:	b082      	sub	sp, #8

				if(Disparo_Aliens.disparo == true){
 8000820:	4b3e      	ldr	r3, [pc, #248]	; (800091c <disparoAliens+0x108>)
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d043      	beq.n	80008b0 <disparoAliens+0x9c>
					uint8_t flag = false;

					while(flag != true){


						uint8_t fila = rand() % NUM_ALIEN_FILA;
 8000828:	f007 fc90 	bl	800814c <rand>
 800082c:	4c3c      	ldr	r4, [pc, #240]	; (8000920 <disparoAliens+0x10c>)
 800082e:	fb84 3400 	smull	r3, r4, r4, r0
 8000832:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
 8000836:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800083a:	1b04      	subs	r4, r0, r4
						uint8_t columna = rand() % NUM_ALIEN_COLUMNA;
 800083c:	f007 fc86 	bl	800814c <rand>
 8000840:	4a38      	ldr	r2, [pc, #224]	; (8000924 <disparoAliens+0x110>)
 8000842:	fb82 3200 	smull	r3, r2, r2, r0
 8000846:	4402      	add	r2, r0
 8000848:	17c3      	asrs	r3, r0, #31
 800084a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800084e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000852:	1ac3      	subs	r3, r0, r3

						if(Alien[fila][columna].vivo == true){
 8000854:	b2e4      	uxtb	r4, r4
 8000856:	b2db      	uxtb	r3, r3
 8000858:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800085c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000860:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8000864:	4411      	add	r1, r2
 8000866:	4a30      	ldr	r2, [pc, #192]	; (8000928 <disparoAliens+0x114>)
 8000868:	440a      	add	r2, r1
 800086a:	7892      	ldrb	r2, [r2, #2]
 800086c:	2a01      	cmp	r2, #1
 800086e:	d1db      	bne.n	8000828 <disparoAliens+0x14>
							flag = true;
							Disparo_Aliens.disparo = true;
 8000870:	4a2a      	ldr	r2, [pc, #168]	; (800091c <disparoAliens+0x108>)
 8000872:	2101      	movs	r1, #1
 8000874:	7091      	strb	r1, [r2, #2]

							Disparo_Aliens.posicion_x = Alien[fila][columna].posicion_X + (TAMANO_ALIEN/2);
 8000876:	492c      	ldr	r1, [pc, #176]	; (8000928 <disparoAliens+0x114>)
 8000878:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800087c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8000880:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8000884:	4423      	add	r3, r4
 8000886:	18c8      	adds	r0, r1, r3
 8000888:	5ccb      	ldrb	r3, [r1, r3]
 800088a:	3304      	adds	r3, #4
 800088c:	7013      	strb	r3, [r2, #0]
							Disparo_Aliens.posicion_y = Alien[fila][columna].posicion_Y + (TAMANO_ALIEN/2);
 800088e:	7843      	ldrb	r3, [r0, #1]
 8000890:	3304      	adds	r3, #4
 8000892:	7053      	strb	r3, [r2, #1]
						}

					}
				}

				SSD1306_DrawBitmap(Disparo_Aliens.posicion_x, Disparo_Aliens.posicion_y, AlienBombGfx, 2, 4, 1);
 8000894:	4821      	ldr	r0, [pc, #132]	; (800091c <disparoAliens+0x108>)
 8000896:	2301      	movs	r3, #1
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	2304      	movs	r3, #4
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2302      	movs	r3, #2
 80008a0:	4a22      	ldr	r2, [pc, #136]	; (800092c <disparoAliens+0x118>)
 80008a2:	f990 1001 	ldrsb.w	r1, [r0, #1]
 80008a6:	7800      	ldrb	r0, [r0, #0]
 80008a8:	f001 fb7c 	bl	8001fa4 <SSD1306_DrawBitmap>

	}

}
 80008ac:	b002      	add	sp, #8
 80008ae:	bd10      	pop	{r4, pc}
					Disparo_Aliens.posicion_y = Disparo_Aliens.posicion_y + dificultad.velocidad_disparo_aliens;
 80008b0:	4a1a      	ldr	r2, [pc, #104]	; (800091c <disparoAliens+0x108>)
 80008b2:	7853      	ldrb	r3, [r2, #1]
 80008b4:	491e      	ldr	r1, [pc, #120]	; (8000930 <disparoAliens+0x11c>)
 80008b6:	7889      	ldrb	r1, [r1, #2]
 80008b8:	440b      	add	r3, r1
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	7053      	strb	r3, [r2, #1]
					if( (Disparo_Aliens.posicion_x + 1 >= Player.posicion_X) &  (Disparo_Aliens.posicion_x + 1 <= Player.posicion_X + 6) & ((Disparo_Aliens.posicion_y) >= TOTAL_PIXELES_Y-TAMANO_NAVE_Y) & (Disparo.posicion_y <= TOTAL_PIXELES_Y)){
 80008be:	7811      	ldrb	r1, [r2, #0]
 80008c0:	1c4a      	adds	r2, r1, #1
 80008c2:	481c      	ldr	r0, [pc, #112]	; (8000934 <disparoAliens+0x120>)
 80008c4:	7800      	ldrb	r0, [r0, #0]
 80008c6:	1d44      	adds	r4, r0, #5
 80008c8:	4282      	cmp	r2, r0
 80008ca:	bfb4      	ite	lt
 80008cc:	2200      	movlt	r2, #0
 80008ce:	2201      	movge	r2, #1
 80008d0:	42a1      	cmp	r1, r4
 80008d2:	bfc8      	it	gt
 80008d4:	2200      	movgt	r2, #0
 80008d6:	4918      	ldr	r1, [pc, #96]	; (8000938 <disparoAliens+0x124>)
 80008d8:	f991 1001 	ldrsb.w	r1, [r1, #1]
 80008dc:	2940      	cmp	r1, #64	; 0x40
 80008de:	bfcc      	ite	gt
 80008e0:	2100      	movgt	r1, #0
 80008e2:	2101      	movle	r1, #1
 80008e4:	2b37      	cmp	r3, #55	; 0x37
 80008e6:	bfd4      	ite	le
 80008e8:	2200      	movle	r2, #0
 80008ea:	f002 0201 	andgt.w	r2, r2, #1
 80008ee:	b172      	cbz	r2, 800090e <disparoAliens+0xfa>
 80008f0:	b169      	cbz	r1, 800090e <disparoAliens+0xfa>
						Disparo_Aliens.disparo = false;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <disparoAliens+0x108>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	709a      	strb	r2, [r3, #2]
						Player.vidas = Player.vidas - 1;
 80008f8:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <disparoAliens+0x120>)
 80008fa:	7893      	ldrb	r3, [r2, #2]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	7093      	strb	r3, [r2, #2]
						if(Player.vidas == 0){
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1c6      	bne.n	8000894 <disparoAliens+0x80>
							Player.vivo = false;
 8000906:	4613      	mov	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	705a      	strb	r2, [r3, #1]
 800090c:	e7c2      	b.n	8000894 <disparoAliens+0x80>
					else if(Disparo_Aliens.posicion_y >= 60){
 800090e:	2b3b      	cmp	r3, #59	; 0x3b
 8000910:	ddc0      	ble.n	8000894 <disparoAliens+0x80>
						Disparo_Aliens.disparo = false;
 8000912:	4b02      	ldr	r3, [pc, #8]	; (800091c <disparoAliens+0x108>)
 8000914:	2200      	movs	r2, #0
 8000916:	709a      	strb	r2, [r3, #2]
 8000918:	e7bc      	b.n	8000894 <disparoAliens+0x80>
 800091a:	4770      	bx	lr
 800091c:	200009a0 	.word	0x200009a0
 8000920:	55555556 	.word	0x55555556
 8000924:	92492493 	.word	0x92492493
 8000928:	20000930 	.word	0x20000930
 800092c:	08009964 	.word	0x08009964
 8000930:	200009e8 	.word	0x200009e8
 8000934:	200009a4 	.word	0x200009a4
 8000938:	2000099c 	.word	0x2000099c

0800093c <plotBases>:


void plotBases(){
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	b087      	sub	sp, #28

	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE1, LIMITE_ABAJO_BASE, bases[0].buffer, 16, 8, 1);
 8000940:	4c6e      	ldr	r4, [pc, #440]	; (8000afc <plotBases+0x1c0>)
 8000942:	2601      	movs	r6, #1
 8000944:	9601      	str	r6, [sp, #4]
 8000946:	2508      	movs	r5, #8
 8000948:	9500      	str	r5, [sp, #0]
 800094a:	2310      	movs	r3, #16
 800094c:	4622      	mov	r2, r4
 800094e:	212d      	movs	r1, #45	; 0x2d
 8000950:	4618      	mov	r0, r3
 8000952:	f001 fb27 	bl	8001fa4 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE2, LIMITE_ABAJO_BASE, bases[1].buffer, 16, 8, 1);
 8000956:	9601      	str	r6, [sp, #4]
 8000958:	9500      	str	r5, [sp, #0]
 800095a:	2310      	movs	r3, #16
 800095c:	f104 0214 	add.w	r2, r4, #20
 8000960:	212d      	movs	r1, #45	; 0x2d
 8000962:	2038      	movs	r0, #56	; 0x38
 8000964:	f001 fb1e 	bl	8001fa4 <SSD1306_DrawBitmap>
	SSD1306_DrawBitmap(LIMITE_IZQ_X_BASE3, LIMITE_ABAJO_BASE, bases[2].buffer, 16, 8, 1);
 8000968:	9601      	str	r6, [sp, #4]
 800096a:	9500      	str	r5, [sp, #0]
 800096c:	2310      	movs	r3, #16
 800096e:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000972:	212d      	movs	r1, #45	; 0x2d
 8000974:	2060      	movs	r0, #96	; 0x60
 8000976:	f001 fb15 	bl	8001fa4 <SSD1306_DrawBitmap>
	//Colisiones

	uint16_t resultado_or[3];


	for(uint8_t i=0;i<3;i++){
 800097a:	2200      	movs	r2, #0
 800097c:	e026      	b.n	80009cc <plotBases+0x90>
			if(j % 2 == 0){	//Me fijo si una columna entera del lado izquierdo esta destruido.

				resultado_or[i] = (resultado_or[i] | (bases[i].buffer[j] <<8)) ;
			}
			else{
				resultado_or[i] = resultado_or[i] | (bases[i].buffer[j]);
 800097e:	a906      	add	r1, sp, #24
 8000980:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 8000984:	f83e 1c08 	ldrh.w	r1, [lr, #-8]
 8000988:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 800098c:	485b      	ldr	r0, [pc, #364]	; (8000afc <plotBases+0x1c0>)
 800098e:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8000992:	5cc0      	ldrb	r0, [r0, r3]
 8000994:	4301      	orrs	r1, r0
 8000996:	f82e 1c08 	strh.w	r1, [lr, #-8]
		for(uint8_t j=0; j<16;j++){
 800099a:	3301      	adds	r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d812      	bhi.n	80009c8 <plotBases+0x8c>
			if(j % 2 == 0){	//Me fijo si una columna entera del lado izquierdo esta destruido.
 80009a2:	f013 0f01 	tst.w	r3, #1
 80009a6:	d1ea      	bne.n	800097e <plotBases+0x42>
				resultado_or[i] = (resultado_or[i] | (bases[i].buffer[j] <<8)) ;
 80009a8:	a906      	add	r1, sp, #24
 80009aa:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 80009ae:	f83e 1c08 	ldrh.w	r1, [lr, #-8]
 80009b2:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 80009b6:	4851      	ldr	r0, [pc, #324]	; (8000afc <plotBases+0x1c0>)
 80009b8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80009bc:	5cc0      	ldrb	r0, [r0, r3]
 80009be:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80009c2:	f82e 1c08 	strh.w	r1, [lr, #-8]
 80009c6:	e7e8      	b.n	800099a <plotBases+0x5e>
	for(uint8_t i=0;i<3;i++){
 80009c8:	3201      	adds	r2, #1
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	2a02      	cmp	r2, #2
 80009ce:	d801      	bhi.n	80009d4 <plotBases+0x98>
		for(uint8_t j=0; j<16;j++){
 80009d0:	2300      	movs	r3, #0
 80009d2:	e7e4      	b.n	800099e <plotBases+0x62>
		}
	}



	const uint8_t limites_izquierda[] = {LIMITE_IZQ_X_BASE1, LIMITE_IZQ_X_BASE2, LIMITE_IZQ_X_BASE3};
 80009d4:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <plotBases+0x1c4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80009dc:	0c1b      	lsrs	r3, r3, #16
 80009de:	f88d 300e 	strb.w	r3, [sp, #14]
	const uint8_t limites_derecha[] = {LIMITE_DER_X_BASE1, LIMITE_DER_X_BASE2, LIMITE_DER_X_BASE3};
 80009e2:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <plotBases+0x1c8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80009ea:	0c1b      	lsrs	r3, r3, #16
 80009ec:	f88d 300a 	strb.w	r3, [sp, #10]

	if((Disparo.posicion_y >= LIMITE_ARRIBA_BASE) &  (Disparo.posicion_y < LIMITE_ABAJO_BASE)){
 80009f0:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <plotBases+0x1cc>)
 80009f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80009f6:	3b26      	subs	r3, #38	; 0x26
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d97b      	bls.n	8000af6 <plotBases+0x1ba>





}
 80009fe:	b007      	add	sp, #28
 8000a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
						resultado = resultado + (1 << (OFFSET_DESPLAZAMIENTO + j - desplazamiento));
 8000a02:	f102 030f 	add.w	r3, r2, #15
 8000a06:	1b5b      	subs	r3, r3, r5
 8000a08:	2101      	movs	r1, #1
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4433      	add	r3, r6
 8000a12:	b29b      	uxth	r3, r3
						resultado = resultado + (1 << (OFFSET_DESPLAZAMIENTO - j - desplazamiento));
 8000a14:	f1c2 060f 	rsb	r6, r2, #15
 8000a18:	1b76      	subs	r6, r6, r5
 8000a1a:	40b1      	lsls	r1, r6
 8000a1c:	b289      	uxth	r1, r1
 8000a1e:	440b      	add	r3, r1
 8000a20:	b29e      	uxth	r6, r3
					for(uint8_t j=0;j<desplazamiento_horiz; j++){
 8000a22:	3201      	adds	r2, #1
 8000a24:	b2d2      	uxtb	r2, r2
 8000a26:	4282      	cmp	r2, r0
 8000a28:	d3eb      	bcc.n	8000a02 <plotBases+0xc6>
					for(uint8_t j=0; j<16;j++){
 8000a2a:	2300      	movs	r3, #0
					uint8_t conteo = 0;
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	e003      	b.n	8000a38 <plotBases+0xfc>
							if(conteo == 3){
 8000a30:	2803      	cmp	r0, #3
 8000a32:	d0e4      	beq.n	80009fe <plotBases+0xc2>
					for(uint8_t j=0; j<16;j++){
 8000a34:	3301      	adds	r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d8e0      	bhi.n	80009fe <plotBases+0xc2>
						if(j % 2 != 0){
 8000a3c:	f013 0f01 	tst.w	r3, #1
 8000a40:	d0f8      	beq.n	8000a34 <plotBases+0xf8>
							bases_16bits = (bases[i].buffer[15-j]<<8) + (bases[i].buffer[15-j+1] & 0xff);
 8000a42:	f1c3 0c0f 	rsb	ip, r3, #15
 8000a46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000a4a:	492c      	ldr	r1, [pc, #176]	; (8000afc <plotBases+0x1c0>)
 8000a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000a50:	f811 200c 	ldrb.w	r2, [r1, ip]
 8000a54:	f1c3 0510 	rsb	r5, r3, #16
 8000a58:	5d49      	ldrb	r1, [r1, r5]
 8000a5a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
							if( (bases_16bits & resultado) != 0){
 8000a5e:	4231      	tst	r1, r6
 8000a60:	d0e6      	beq.n	8000a30 <plotBases+0xf4>
								bases[i].buffer[15-j] = bases[i].buffer[15-j] & ~(resultado>>8);
 8000a62:	ea6f 2116 	mvn.w	r1, r6, lsr #8
 8000a66:	b249      	sxtb	r1, r1
 8000a68:	4011      	ands	r1, r2
 8000a6a:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <plotBases+0x1c0>)
 8000a70:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8000a74:	f802 100c 	strb.w	r1, [r2, ip]
								bases[i].buffer[15-j+1] = bases[i].buffer[15-j+1] & ~(resultado);
 8000a78:	5d51      	ldrb	r1, [r2, r5]
 8000a7a:	43f7      	mvns	r7, r6
 8000a7c:	b27f      	sxtb	r7, r7
 8000a7e:	4039      	ands	r1, r7
 8000a80:	5551      	strb	r1, [r2, r5]
								conteo++;
 8000a82:	3001      	adds	r0, #1
 8000a84:	b2c0      	uxtb	r0, r0
 8000a86:	e7d3      	b.n	8000a30 <plotBases+0xf4>
		for (int i = 0; i < 3; ++i) {
 8000a88:	3401      	adds	r4, #1
 8000a8a:	2c02      	cmp	r4, #2
 8000a8c:	dcb7      	bgt.n	80009fe <plotBases+0xc2>
			if ((Disparo.posicion_x + POS_OFF_DISPARO_PLAYER) >= limites_izquierda[i] &&
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <plotBases+0x1cc>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	1d19      	adds	r1, r3, #4
 8000a94:	f104 0218 	add.w	r2, r4, #24
 8000a98:	446a      	add	r2, sp
 8000a9a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	dbf2      	blt.n	8000a88 <plotBases+0x14c>
				(Disparo.posicion_x + POS_OFF_DISPARO_PLAYER) <= limites_derecha[i]) {
 8000aa2:	1cd9      	adds	r1, r3, #3
 8000aa4:	f104 0018 	add.w	r0, r4, #24
 8000aa8:	4468      	add	r0, sp
 8000aaa:	f810 0c10 	ldrb.w	r0, [r0, #-16]
			if ((Disparo.posicion_x + POS_OFF_DISPARO_PLAYER) >= limites_izquierda[i] &&
 8000aae:	4281      	cmp	r1, r0
 8000ab0:	daea      	bge.n	8000a88 <plotBases+0x14c>
				uint8_t desplazamiento = (Disparo.posicion_x + POS_OFF_DISPARO_PLAYER) - limites_izquierda[i];
 8000ab2:	1a9d      	subs	r5, r3, r2
 8000ab4:	b2ed      	uxtb	r5, r5
 8000ab6:	3504      	adds	r5, #4
 8000ab8:	b2ed      	uxtb	r5, r5
				uint16_t resultado = 1 << (OFFSET_DESPLAZAMIENTO - desplazamiento);
 8000aba:	f1c5 020f 	rsb	r2, r5, #15
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4093      	lsls	r3, r2
 8000ac2:	b29e      	uxth	r6, r3
				if ((resultado & resultado_or[i]) != 0) {
 8000ac4:	aa06      	add	r2, sp, #24
 8000ac6:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8000aca:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8000ace:	4213      	tst	r3, r2
 8000ad0:	d095      	beq.n	80009fe <plotBases+0xc2>
					Disparo.disparo = false;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <plotBases+0x1cc>)
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	709f      	strb	r7, [r3, #2]
					Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 8000ad8:	2232      	movs	r2, #50	; 0x32
 8000ada:	705a      	strb	r2, [r3, #1]
					Disparo.numero_disparos = 0;
 8000adc:	70df      	strb	r7, [r3, #3]
					uint8_t desplazamiento_horiz = (rand() % RANDOM_MAX_2) + 1;
 8000ade:	f007 fb35 	bl	800814c <rand>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	b2d8      	uxtb	r0, r3
 8000aee:	3001      	adds	r0, #1
 8000af0:	b2c0      	uxtb	r0, r0
					for(uint8_t j=0;j<desplazamiento_horiz; j++){
 8000af2:	463a      	mov	r2, r7
 8000af4:	e797      	b.n	8000a26 <plotBases+0xea>
		for (int i = 0; i < 3; ++i) {
 8000af6:	2400      	movs	r4, #0
 8000af8:	e7c7      	b.n	8000a8a <plotBases+0x14e>
 8000afa:	bf00      	nop
 8000afc:	200009ac 	.word	0x200009ac
 8000b00:	0800995c 	.word	0x0800995c
 8000b04:	08009960 	.word	0x08009960
 8000b08:	2000099c 	.word	0x2000099c

08000b0c <BasesInit>:

void BasesInit(){

	for(uint8_t i=0;i<3;i++){
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	e00f      	b.n	8000b30 <BasesInit+0x24>
		for(uint8_t j=0; j<16; j++){

			bases[i].buffer[j] = BaseGfx[j];
 8000b10:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <BasesInit+0x30>)
 8000b12:	f812 c003 	ldrb.w	ip, [r2, r3]
 8000b16:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8000b1a:	0091      	lsls	r1, r2, #2
 8000b1c:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <BasesInit+0x34>)
 8000b1e:	440a      	add	r2, r1
 8000b20:	f802 c003 	strb.w	ip, [r2, r3]
		for(uint8_t j=0; j<16; j++){
 8000b24:	3301      	adds	r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d9f1      	bls.n	8000b10 <BasesInit+0x4>
	for(uint8_t i=0;i<3;i++){
 8000b2c:	3001      	adds	r0, #1
 8000b2e:	b2c0      	uxtb	r0, r0
 8000b30:	2802      	cmp	r0, #2
 8000b32:	d801      	bhi.n	8000b38 <BasesInit+0x2c>
		for(uint8_t j=0; j<16; j++){
 8000b34:	2300      	movs	r3, #0
 8000b36:	e7f7      	b.n	8000b28 <BasesInit+0x1c>
		}
	}

}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	08009968 	.word	0x08009968
 8000b40:	200009ac 	.word	0x200009ac

08000b44 <Dificultad_Init>:

void Dificultad_Init(){

	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 8;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <Dificultad_Init+0x10>)
 8000b46:	2208      	movs	r2, #8
 8000b48:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	705a      	strb	r2, [r3, #1]
	dificultad.velocidad_disparo_aliens = 3;
 8000b4e:	2203      	movs	r2, #3
 8000b50:	709a      	strb	r2, [r3, #2]
}
 8000b52:	4770      	bx	lr
 8000b54:	200009e8 	.word	0x200009e8

08000b58 <AumentoNivel>:

void AumentoNivel(){

	//Incremento de la dificultad (Aumento de la velocidad de los aliens y la velocidad de disparo)
	//Se aumenta la dificultad.
	dificultad.velocidad_horizontal = 6;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <AumentoNivel+0x20>)
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 2;
 8000b5e:	2202      	movs	r2, #2
 8000b60:	705a      	strb	r2, [r3, #1]
	dificultad.velocidad_disparo_aliens = 3;
 8000b62:	2203      	movs	r2, #3
 8000b64:	709a      	strb	r2, [r3, #2]


	//Se Reinicializa el Player.
	Player.posicion_X = 64;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <AumentoNivel+0x24>)
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	701a      	strb	r2, [r3, #0]
	Player.vivo = true;
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	705a      	strb	r2, [r3, #1]
	Player.nivel = Player.nivel + 1;
 8000b70:	799a      	ldrb	r2, [r3, #6]
 8000b72:	3201      	adds	r2, #1
 8000b74:	719a      	strb	r2, [r3, #6]

}
 8000b76:	4770      	bx	lr
 8000b78:	200009e8 	.word	0x200009e8
 8000b7c:	200009a4 	.word	0x200009a4

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b84:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	2400      	movs	r4, #0
 8000b88:	9404      	str	r4, [sp, #16]
 8000b8a:	9405      	str	r4, [sp, #20]
 8000b8c:	9406      	str	r4, [sp, #24]
 8000b8e:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <MX_GPIO_Init+0xe0>)
 8000b92:	699a      	ldr	r2, [r3, #24]
 8000b94:	f042 0210 	orr.w	r2, r2, #16
 8000b98:	619a      	str	r2, [r3, #24]
 8000b9a:	699a      	ldr	r2, [r3, #24]
 8000b9c:	f002 0210 	and.w	r2, r2, #16
 8000ba0:	9200      	str	r2, [sp, #0]
 8000ba2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	f042 0220 	orr.w	r2, r2, #32
 8000baa:	619a      	str	r2, [r3, #24]
 8000bac:	699a      	ldr	r2, [r3, #24]
 8000bae:	f002 0220 	and.w	r2, r2, #32
 8000bb2:	9201      	str	r2, [sp, #4]
 8000bb4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	f042 0204 	orr.w	r2, r2, #4
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	699a      	ldr	r2, [r3, #24]
 8000bc0:	f002 0204 	and.w	r2, r2, #4
 8000bc4:	9202      	str	r2, [sp, #8]
 8000bc6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	699a      	ldr	r2, [r3, #24]
 8000bca:	f042 0208 	orr.w	r2, r2, #8
 8000bce:	619a      	str	r2, [r3, #24]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	9303      	str	r3, [sp, #12]
 8000bd8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bda:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8000c64 <MX_GPIO_Init+0xe4>
 8000bde:	4622      	mov	r2, r4
 8000be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be4:	4648      	mov	r0, r9
 8000be6:	f002 fc72 	bl	80034ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bea:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8000c68 <MX_GPIO_Init+0xe8>
 8000bee:	4622      	mov	r2, r4
 8000bf0:	f24c 0120 	movw	r1, #49184	; 0xc020
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	f002 fc6a 	bl	80034ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000bfa:	4e1c      	ldr	r6, [pc, #112]	; (8000c6c <MX_GPIO_Init+0xec>)
 8000bfc:	4622      	mov	r2, r4
 8000bfe:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000c02:	4630      	mov	r0, r6
 8000c04:	f002 fc63 	bl	80034ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2501      	movs	r5, #1
 8000c10:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2702      	movs	r7, #2
 8000c16:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	a904      	add	r1, sp, #16
 8000c1a:	4648      	mov	r0, r9
 8000c1c:	f002 fb3e 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c20:	2304      	movs	r3, #4
 8000c22:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	a904      	add	r1, sp, #16
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f002 fb36 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 8000c30:	f24c 0320 	movw	r3, #49184	; 0xc020
 8000c34:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	a904      	add	r1, sp, #16
 8000c3e:	4640      	mov	r0, r8
 8000c40:	f002 fb2c 	bl	800329c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000c48:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	a904      	add	r1, sp, #16
 8000c52:	4630      	mov	r0, r6
 8000c54:	f002 fb22 	bl	800329c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c58:	b009      	add	sp, #36	; 0x24
 8000c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c5e:	bf00      	nop
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	40010800 	.word	0x40010800

08000c70 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	b082      	sub	sp, #8

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c74:	f006 f9a6 	bl	8006fc4 <xTaskGetTickCount>
 8000c78:	9000      	str	r0, [sp, #0]
 8000c7a:	e02b      	b.n	8000cd4 <entryJoystick+0x64>
	  HAL_ADC_Stop(&hadc2);

	  if(val_x > 2200){
		  joystick.x_value = derecha;
	  }
	  else if(val_x < 1600){
 8000c7c:	f5b6 6fc8 	cmp.w	r6, #1600	; 0x640
 8000c80:	d203      	bcs.n	8000c8a <entryJoystick+0x1a>
		  joystick.x_value = izquierda;
 8000c82:	2303      	movs	r3, #3
 8000c84:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c88:	e049      	b.n	8000d1e <entryJoystick+0xae>
	  }
	  else{
		  joystick.x_value = nulo;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c90:	e045      	b.n	8000d1e <entryJoystick+0xae>


	  if(val_y > 2200){
		  joystick.y_value = abajo;
	  }
	  else if(val_y < 1600){
 8000c92:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8000c96:	d24a      	bcs.n	8000d2e <entryJoystick+0xbe>
		  joystick.y_value = arriba;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f88d 3005 	strb.w	r3, [sp, #5]
		  joystick.y_value = nulo;
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000c9e:	2104      	movs	r1, #4
 8000ca0:	4827      	ldr	r0, [pc, #156]	; (8000d40 <entryJoystick+0xd0>)
 8000ca2:	f002 fc0d 	bl	80034c0 <HAL_GPIO_ReadPin>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d145      	bne.n	8000d36 <entryJoystick+0xc6>
		  joystick.boton = true;
 8000caa:	2301      	movs	r3, #1
 8000cac:	f88d 3006 	strb.w	r3, [sp, #6]
	  else{
		  joystick.boton = false;
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	a901      	add	r1, sp, #4
 8000cb6:	4823      	ldr	r0, [pc, #140]	; (8000d44 <entryJoystick+0xd4>)
 8000cb8:	6800      	ldr	r0, [r0, #0]
 8000cba:	f004 ffab 	bl	8005c14 <osMessageQueuePut>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cbe:	b128      	cbz	r0, 8000ccc <entryJoystick+0x5c>
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4820      	ldr	r0, [pc, #128]	; (8000d48 <entryJoystick+0xd8>)
 8000cc8:	f002 fc01 	bl	80034ce <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000ccc:	2132      	movs	r1, #50	; 0x32
 8000cce:	4668      	mov	r0, sp
 8000cd0:	f006 fa86 	bl	80071e0 <vTaskDelayUntil>
	  HAL_ADC_Start(&hadc1);
 8000cd4:	4c1d      	ldr	r4, [pc, #116]	; (8000d4c <entryJoystick+0xdc>)
 8000cd6:	4620      	mov	r0, r4
 8000cd8:	f002 f94a 	bl	8002f70 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000cdc:	210a      	movs	r1, #10
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f001 ff9c 	bl	8002c1c <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f002 f85b 	bl	8002da0 <HAL_ADC_GetValue>
 8000cea:	b286      	uxth	r6, r0
	  HAL_ADC_Stop(&hadc1);
 8000cec:	4620      	mov	r0, r4
 8000cee:	f002 fa63 	bl	80031b8 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc2);
 8000cf2:	4c17      	ldr	r4, [pc, #92]	; (8000d50 <entryJoystick+0xe0>)
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f002 f93b 	bl	8002f70 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000cfa:	210a      	movs	r1, #10
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f001 ff8d 	bl	8002c1c <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000d02:	4620      	mov	r0, r4
 8000d04:	f002 f84c 	bl	8002da0 <HAL_ADC_GetValue>
 8000d08:	b285      	uxth	r5, r0
	  HAL_ADC_Stop(&hadc2);
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f002 fa54 	bl	80031b8 <HAL_ADC_Stop>
	  if(val_x > 2200){
 8000d10:	f640 0398 	movw	r3, #2200	; 0x898
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d9b1      	bls.n	8000c7c <entryJoystick+0xc>
		  joystick.x_value = derecha;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	f88d 3004 	strb.w	r3, [sp, #4]
	  if(val_y > 2200){
 8000d1e:	f640 0398 	movw	r3, #2200	; 0x898
 8000d22:	429d      	cmp	r5, r3
 8000d24:	d9b5      	bls.n	8000c92 <entryJoystick+0x22>
		  joystick.y_value = abajo;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f88d 3005 	strb.w	r3, [sp, #5]
 8000d2c:	e7b7      	b.n	8000c9e <entryJoystick+0x2e>
		  joystick.y_value = nulo;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	f88d 3005 	strb.w	r3, [sp, #5]
 8000d34:	e7b3      	b.n	8000c9e <entryJoystick+0x2e>
		  joystick.boton = false;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f88d 3006 	strb.w	r3, [sp, #6]
 8000d3c:	e7b8      	b.n	8000cb0 <entryJoystick+0x40>
 8000d3e:	bf00      	nop
 8000d40:	40010800 	.word	0x40010800
 8000d44:	20000bbc 	.word	0x20000bbc
 8000d48:	40011000 	.word	0x40011000
 8000d4c:	20000a08 	.word	0x20000a08
 8000d50:	20000a38 	.word	0x20000a38

08000d54 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000d54:	b500      	push	{lr}
 8000d56:	b083      	sub	sp, #12

	//vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000d58:	f000 fce8 	bl	800172c <menuInit>
 8000d5c:	e005      	b.n	8000d6a <entryPantalla+0x16>

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <entryPantalla+0x4c>)
 8000d66:	f002 fbb2 	bl	80034ce <HAL_GPIO_WritePin>
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	2200      	movs	r2, #0
 8000d70:	a901      	add	r1, sp, #4
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <entryPantalla+0x50>)
 8000d74:	6800      	ldr	r0, [r0, #0]
 8000d76:	f004 ff9d 	bl	8005cb4 <osMessageQueueGet>
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000d7a:	2800      	cmp	r0, #0
 8000d7c:	d1ef      	bne.n	8000d5e <entryPantalla+0xa>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <entryPantalla+0x4c>)
 8000d86:	f002 fba2 	bl	80034ce <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000d8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8000d8e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8000d92:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000d96:	f000 fd0d 	bl	80017b4 <menuActualizar>
		actualizarPantalla();
 8000d9a:	f7ff fa01 	bl	80001a0 <actualizarPantalla>
 8000d9e:	e7e4      	b.n	8000d6a <entryPantalla+0x16>
 8000da0:	40011000 	.word	0x40011000
 8000da4:	20000bbc 	.word	0x20000bbc

08000da8 <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000da8:	b508      	push	{r3, lr}
	//vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );

	uint8_t permutaciones;

	//Se leen los datos desde la memoria.
	memoriaInit();
 8000daa:	f000 fb77 	bl	800149c <memoriaInit>

  /* Infinite loop */
  for(;;)
  {
	  //Espero la notificacion 1 desde la tarea Pantalla/Menu (desde el menu de guardado de nombre) para sincronizar el ordenamiento y guardado del nuevo puntaje.
	  uint32_t flags = osEventFlagsWait(notificationFlag, NOTIFICATION_VALUE, osFlagsWaitAny, osWaitForever);
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	2200      	movs	r2, #0
 8000db4:	2101      	movs	r1, #1
 8000db6:	4807      	ldr	r0, [pc, #28]	; (8000dd4 <entryMemoria+0x2c>)
 8000db8:	6800      	ldr	r0, [r0, #0]
 8000dba:	f004 fd39 	bl	8005830 <osEventFlagsWait>

	      // Realiza acciones basadas en la notificación recibida
	      if (flags == NOTIFICATION_VALUE)
 8000dbe:	2801      	cmp	r0, #1
 8000dc0:	d1f5      	bne.n	8000dae <entryMemoria+0x6>
	      {

				permutaciones = Ordenamiento_Puntajes();
 8000dc2:	f000 fc41 	bl	8001648 <Ordenamiento_Puntajes>
				//writeNuevosPuntajes(permutaciones);

	    	  //Envio la notificacion 2 para que la tarea PantallaTask pueda pasar del menu guardado_nombre al menu de puntajes una vez que los puntajes ya se encuentran ordenadas y guardadas, ya que sin esta segunda sincronizacion, puede pasarse al menu puntajes sin que estos se encuentren ordenados. El ordenado se realiza en esta tarea MemoriaTask ya que las escrituras de puntajes se realizan solo en esta tarea.
	    	  osEventFlagsSet(notificationFlag2, NOTIFICATION_VALUE2);
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <entryMemoria+0x30>)
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	f004 fcf2 	bl	80057b4 <osEventFlagsSet>
 8000dd0:	e7ed      	b.n	8000dae <entryMemoria+0x6>
 8000dd2:	bf00      	nop
 8000dd4:	20000bb0 	.word	0x20000bb0
 8000dd8:	20000bb4 	.word	0x20000bb4

08000ddc <entrySonido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySonido */
void entrySonido(void *argument)
{
 8000ddc:	b508      	push	{r3, lr}
 8000dde:	e005      	b.n	8000dec <entrySonido+0x10>
  /* Infinite loop */
  for(;;)
  {
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick

	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de6:	481d      	ldr	r0, [pc, #116]	; (8000e5c <entrySonido+0x80>)
 8000de8:	f002 fb71 	bl	80034ce <HAL_GPIO_WritePin>
	  osStatus_t res = osMessageQueueGet(queueSonidoMenuHandle, &musica, 0, osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	2200      	movs	r2, #0
 8000df2:	491b      	ldr	r1, [pc, #108]	; (8000e60 <entrySonido+0x84>)
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <entrySonido+0x88>)
 8000df6:	6800      	ldr	r0, [r0, #0]
 8000df8:	f004 ff5c 	bl	8005cb4 <osMessageQueueGet>
	  if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000dfc:	2800      	cmp	r0, #0
 8000dfe:	d1ef      	bne.n	8000de0 <entrySonido+0x4>

	  else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e06:	4815      	ldr	r0, [pc, #84]	; (8000e5c <entrySonido+0x80>)
 8000e08:	f002 fb61 	bl	80034ce <HAL_GPIO_WritePin>

			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4816      	ldr	r0, [pc, #88]	; (8000e68 <entrySonido+0x8c>)
 8000e10:	f004 fb64 	bl	80054dc <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000e14:	4815      	ldr	r0, [pc, #84]	; (8000e6c <entrySonido+0x90>)
 8000e16:	f004 f84b 	bl	8004eb0 <HAL_TIM_Base_Stop_IT>

			//musica = musica_;

		  switch(musica){
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <entrySonido+0x84>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d018      	beq.n	8000e54 <entrySonido+0x78>
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d008      	beq.n	8000e38 <entrySonido+0x5c>
 8000e26:	b18b      	cbz	r3, 8000e4c <entrySonido+0x70>
		  default:
			  break;

		  }

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	480f      	ldr	r0, [pc, #60]	; (8000e68 <entrySonido+0x8c>)
 8000e2c:	f004 fae8 	bl	8005400 <HAL_TIM_PWM_Start>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000e30:	480e      	ldr	r0, [pc, #56]	; (8000e6c <entrySonido+0x90>)
 8000e32:	f004 f809 	bl	8004e48 <HAL_TIM_Base_Start_IT>
 8000e36:	e7d9      	b.n	8000dec <entrySonido+0x10>
				tonos = f622;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <entrySonido+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
				conteo_musica = VECES_622HZ;
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <entrySonido+0x98>)
 8000e40:	22aa      	movs	r2, #170	; 0xaa
 8000e42:	701a      	strb	r2, [r3, #0]
				puntero_musica = tono_622hz;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <entrySonido+0x9c>)
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <entrySonido+0xa0>)
 8000e48:	601a      	str	r2, [r3, #0]
			  break;
 8000e4a:	e7ed      	b.n	8000e28 <entrySonido+0x4c>
			  puntero_musica = audio_disparo;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <entrySonido+0x9c>)
 8000e4e:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <entrySonido+0xa4>)
 8000e50:	601a      	str	r2, [r3, #0]
			  break;
 8000e52:	e7e9      	b.n	8000e28 <entrySonido+0x4c>
			  puntero_musica = audio_explosion;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <entrySonido+0x9c>)
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <entrySonido+0xa8>)
 8000e58:	601a      	str	r2, [r3, #0]
			  break;
 8000e5a:	e7e5      	b.n	8000e28 <entrySonido+0x4c>
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	20000ba4 	.word	0x20000ba4
 8000e64:	20000bc0 	.word	0x20000bc0
 8000e68:	20000b14 	.word	0x20000b14
 8000e6c:	20000b5c 	.word	0x20000b5c
 8000e70:	20000bc4 	.word	0x20000bc4
 8000e74:	20000a04 	.word	0x20000a04
 8000e78:	20000bb8 	.word	0x20000bb8
 8000e7c:	20000540 	.word	0x20000540
 8000e80:	20000024 	.word	0x20000024
 8000e84:	200002a0 	.word	0x200002a0

08000e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b510      	push	{r4, lr}
 8000e8a:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e8c:	6802      	ldr	r2, [r0, #0]
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d004      	beq.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */


  if (htim->Instance == TIM3) {
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	4b5a      	ldr	r3, [pc, #360]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d003      	beq.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x1c>
						 break;
				 }
  }

  /* USER CODE END Callback 1 */
}
 8000e9c:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8000e9e:	f001 fe97 	bl	8002bd0 <HAL_IncTick>
 8000ea2:	e7f7      	b.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0xc>
		TIM2->CCR1 = *puntero_musica >> 1;
 8000ea4:	4957      	ldr	r1, [pc, #348]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ea6:	680b      	ldr	r3, [r1, #0]
 8000ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000eac:	0852      	lsrs	r2, r2, #1
 8000eae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eb2:	6342      	str	r2, [r0, #52]	; 0x34
		puntero_musica++;
 8000eb4:	600b      	str	r3, [r1, #0]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000eb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eba:	f500 3084 	add.w	r0, r0, #67584	; 0x10800
 8000ebe:	f002 fb0c 	bl	80034da <HAL_GPIO_TogglePin>
		switch(musica){
 8000ec2:	4b51      	ldr	r3, [pc, #324]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	f000 8089 	beq.w	8000fde <HAL_TIM_PeriodElapsedCallback+0x156>
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d00f      	beq.n	8000ef0 <HAL_TIM_PeriodElapsedCallback+0x68>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e3      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_disparo){
 8000ed4:	4b4b      	ldr	r3, [pc, #300]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d1dd      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	484b      	ldr	r0, [pc, #300]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ee4:	f004 fafa 	bl	80054dc <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000ee8:	484a      	ldr	r0, [pc, #296]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000eea:	f003 ffe1 	bl	8004eb0 <HAL_TIM_Base_Stop_IT>
 8000eee:	e7d5      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
								switch(tonos){
 8000ef0:	4b49      	ldr	r3, [pc, #292]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d02d      	beq.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0xce>
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d03a      	beq.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0xec>
 8000efe:	b173      	cbz	r3, 8000f1e <HAL_TIM_PeriodElapsedCallback+0x96>
									if(puntero_musica == puntero_musica_final_tonos){
 8000f00:	4b40      	ldr	r3, [pc, #256]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b45      	ldr	r3, [pc, #276]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d10e      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tonos_variables;
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f10:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f12:	4a44      	ldr	r2, [pc, #272]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f14:	7813      	ldrb	r3, [r2, #0]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	7013      	strb	r3, [r2, #0]
 8000f1c:	e005      	b.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f622){
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b41      	ldr	r3, [pc, #260]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d00c      	beq.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0xbc>
									if(conteo_musica == 0){
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1b4      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
										switch(tonos){
 8000f32:	4b39      	ldr	r3, [pc, #228]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d8af      	bhi.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
 8000f3c:	e8df f003 	tbb	[pc, r3]
 8000f40:	473d3329 	.word	0x473d3329
											puntero_musica = tono_622hz;
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f46:	4a39      	ldr	r2, [pc, #228]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f48:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f4a:	4a36      	ldr	r2, [pc, #216]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f4c:	7813      	ldrb	r3, [r2, #0]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	7013      	strb	r3, [r2, #0]
 8000f54:	e7e9      	b.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f587){
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d1e3      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_587hz;
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f64:	4a33      	ldr	r2, [pc, #204]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f66:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f68:	4a2e      	ldr	r2, [pc, #184]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f6a:	7813      	ldrb	r3, [r2, #0]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	7013      	strb	r3, [r2, #0]
 8000f72:	e7da      	b.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
									if(puntero_musica == puntero_musica_final_f554){
 8000f74:	4b23      	ldr	r3, [pc, #140]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d1d4      	bne.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_554hz;
 8000f80:	4b20      	ldr	r3, [pc, #128]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f82:	4a2e      	ldr	r2, [pc, #184]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f84:	601a      	str	r2, [r3, #0]
											conteo_musica--;
 8000f86:	4a27      	ldr	r2, [pc, #156]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f88:	7813      	ldrb	r3, [r2, #0]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	7013      	strb	r3, [r2, #0]
 8000f90:	e7cb      	b.n	8000f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
											puntero_musica = tono_587hz;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f96:	601a      	str	r2, [r3, #0]
											tonos = f587;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_587HZ;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000fa0:	22a0      	movs	r2, #160	; 0xa0
 8000fa2:	701a      	strb	r2, [r3, #0]
											break;
 8000fa4:	e77a      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tono_554hz;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fa8:	4a24      	ldr	r2, [pc, #144]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000faa:	601a      	str	r2, [r3, #0]
											tonos = f554;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fae:	2202      	movs	r2, #2
 8000fb0:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_554HZ;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000fb4:	2296      	movs	r2, #150	; 0x96
 8000fb6:	701a      	strb	r2, [r3, #0]
											break;
 8000fb8:	e770      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
											puntero_musica = tonos_variables;
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fbc:	4a18      	ldr	r2, [pc, #96]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000fbe:	601a      	str	r2, [r3, #0]
											tonos = variables;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	701a      	strb	r2, [r3, #0]
											conteo_musica = VECES_TONOS_VARIABLES;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000fc8:	220a      	movs	r2, #10
 8000fca:	701a      	strb	r2, [r3, #0]
											break;
 8000fcc:	e766      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
											HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fd2:	f004 fa83 	bl	80054dc <HAL_TIM_PWM_Stop>
											HAL_TIM_Base_Stop_IT(&htim3);
 8000fd6:	480f      	ldr	r0, [pc, #60]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000fd8:	f003 ff6a 	bl	8004eb0 <HAL_TIM_Base_Stop_IT>
											break;
 8000fdc:	e75e      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
						 if(puntero_musica == puntero_final_explosion){
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	f47f af58 	bne.w	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
								HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000fec:	2100      	movs	r1, #0
 8000fee:	4808      	ldr	r0, [pc, #32]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ff0:	f004 fa74 	bl	80054dc <HAL_TIM_PWM_Stop>
								HAL_TIM_Base_Stop_IT(&htim3);
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ff6:	f003 ff5b 	bl	8004eb0 <HAL_TIM_Base_Stop_IT>
}
 8000ffa:	e74f      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x14>
 8000ffc:	40000800 	.word	0x40000800
 8001000:	40000400 	.word	0x40000400
 8001004:	20000bb8 	.word	0x20000bb8
 8001008:	20000ba4 	.word	0x20000ba4
 800100c:	20000008 	.word	0x20000008
 8001010:	20000b14 	.word	0x20000b14
 8001014:	20000b5c 	.word	0x20000b5c
 8001018:	20000bc4 	.word	0x20000bc4
 800101c:	2000001c 	.word	0x2000001c
 8001020:	20000550 	.word	0x20000550
 8001024:	20000a04 	.word	0x20000a04
 8001028:	20000018 	.word	0x20000018
 800102c:	20000540 	.word	0x20000540
 8001030:	20000014 	.word	0x20000014
 8001034:	20000530 	.word	0x20000530
 8001038:	20000010 	.word	0x20000010
 800103c:	20000520 	.word	0x20000520
 8001040:	2000000c 	.word	0x2000000c

08001044 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001046:	e7fe      	b.n	8001046 <Error_Handler+0x2>

08001048 <MX_ADC1_Init>:
{
 8001048:	b500      	push	{lr}
 800104a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800104c:	2300      	movs	r3, #0
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8001054:	4810      	ldr	r0, [pc, #64]	; (8001098 <MX_ADC1_Init+0x50>)
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <MX_ADC1_Init+0x54>)
 8001058:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800105a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800105c:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001064:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001068:	2301      	movs	r3, #1
 800106a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106c:	f002 f820 	bl	80030b0 <HAL_ADC_Init>
 8001070:	b968      	cbnz	r0, 800108e <MX_ADC1_Init+0x46>
  sConfig.Channel = ADC_CHANNEL_3;
 8001072:	2303      	movs	r3, #3
 8001074:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001076:	2301      	movs	r3, #1
 8001078:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800107a:	2300      	movs	r3, #0
 800107c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	a901      	add	r1, sp, #4
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_ADC1_Init+0x50>)
 8001082:	f001 fe91 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8001086:	b920      	cbnz	r0, 8001092 <MX_ADC1_Init+0x4a>
}
 8001088:	b005      	add	sp, #20
 800108a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800108e:	f7ff ffd9 	bl	8001044 <Error_Handler>
    Error_Handler();
 8001092:	f7ff ffd7 	bl	8001044 <Error_Handler>
 8001096:	bf00      	nop
 8001098:	20000a08 	.word	0x20000a08
 800109c:	40012400 	.word	0x40012400

080010a0 <MX_I2C1_Init>:
{
 80010a0:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80010a2:	480a      	ldr	r0, [pc, #40]	; (80010cc <MX_I2C1_Init+0x2c>)
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <MX_I2C1_Init+0x30>)
 80010a6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x34>)
 80010aa:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	2300      	movs	r3, #0
 80010ae:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b6:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b8:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010be:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	f002 fba6 	bl	8003810 <HAL_I2C_Init>
 80010c4:	b900      	cbnz	r0, 80010c8 <MX_I2C1_Init+0x28>
}
 80010c6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010c8:	f7ff ffbc 	bl	8001044 <Error_Handler>
 80010cc:	20000a68 	.word	0x20000a68
 80010d0:	40005400 	.word	0x40005400
 80010d4:	00061a80 	.word	0x00061a80

080010d8 <MX_SPI1_Init>:
{
 80010d8:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_SPI1_Init+0x38>)
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <MX_SPI1_Init+0x3c>)
 80010de:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010e4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	2300      	movs	r3, #0
 80010e8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ea:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ec:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ee:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80010f6:	2228      	movs	r2, #40	; 0x28
 80010f8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fa:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fe:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001100:	230a      	movs	r3, #10
 8001102:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001104:	f003 fad6 	bl	80046b4 <HAL_SPI_Init>
 8001108:	b900      	cbnz	r0, 800110c <MX_SPI1_Init+0x34>
}
 800110a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800110c:	f7ff ff9a 	bl	8001044 <Error_Handler>
 8001110:	20000abc 	.word	0x20000abc
 8001114:	40013000 	.word	0x40013000

08001118 <MX_ADC2_Init>:
{
 8001118:	b500      	push	{lr}
 800111a:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 800111c:	2300      	movs	r3, #0
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	9303      	str	r3, [sp, #12]
  hadc2.Instance = ADC2;
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_ADC2_Init+0x4c>)
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <MX_ADC2_Init+0x50>)
 8001128:	6002      	str	r2, [r0, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800112a:	6083      	str	r3, [r0, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800112c:	7303      	strb	r3, [r0, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800112e:	7503      	strb	r3, [r0, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001130:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001134:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001136:	6043      	str	r3, [r0, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800113c:	f001 ffb8 	bl	80030b0 <HAL_ADC_Init>
 8001140:	b960      	cbnz	r0, 800115c <MX_ADC2_Init+0x44>
  sConfig.Channel = ADC_CHANNEL_1;
 8001142:	2301      	movs	r3, #1
 8001144:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001146:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001148:	2300      	movs	r3, #0
 800114a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800114c:	a901      	add	r1, sp, #4
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_ADC2_Init+0x4c>)
 8001150:	f001 fe2a 	bl	8002da8 <HAL_ADC_ConfigChannel>
 8001154:	b920      	cbnz	r0, 8001160 <MX_ADC2_Init+0x48>
}
 8001156:	b005      	add	sp, #20
 8001158:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800115c:	f7ff ff72 	bl	8001044 <Error_Handler>
    Error_Handler();
 8001160:	f7ff ff70 	bl	8001044 <Error_Handler>
 8001164:	20000a38 	.word	0x20000a38
 8001168:	40012800 	.word	0x40012800

0800116c <MX_TIM2_Init>:
{
 800116c:	b500      	push	{lr}
 800116e:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001170:	2300      	movs	r3, #0
 8001172:	930a      	str	r3, [sp, #40]	; 0x28
 8001174:	930b      	str	r3, [sp, #44]	; 0x2c
 8001176:	930c      	str	r3, [sp, #48]	; 0x30
 8001178:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	9308      	str	r3, [sp, #32]
 800117c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	9302      	str	r3, [sp, #8]
 8001182:	9303      	str	r3, [sp, #12]
 8001184:	9304      	str	r3, [sp, #16]
 8001186:	9305      	str	r3, [sp, #20]
 8001188:	9306      	str	r3, [sp, #24]
 800118a:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <MX_TIM2_Init+0x98>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001192:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 1-1;
 8001194:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 255-1;
 8001198:	22fe      	movs	r2, #254	; 0xfe
 800119a:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011a0:	f003 ff9c 	bl	80050dc <HAL_TIM_Base_Init>
 80011a4:	bb20      	cbnz	r0, 80011f0 <MX_TIM2_Init+0x84>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011aa:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ac:	a90a      	add	r1, sp, #40	; 0x28
 80011ae:	4815      	ldr	r0, [pc, #84]	; (8001204 <MX_TIM2_Init+0x98>)
 80011b0:	f004 f898 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 80011b4:	b9f0      	cbnz	r0, 80011f4 <MX_TIM2_Init+0x88>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011b6:	4813      	ldr	r0, [pc, #76]	; (8001204 <MX_TIM2_Init+0x98>)
 80011b8:	f003 ffbc 	bl	8005134 <HAL_TIM_PWM_Init>
 80011bc:	b9e0      	cbnz	r0, 80011f8 <MX_TIM2_Init+0x8c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c4:	a908      	add	r1, sp, #32
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <MX_TIM2_Init+0x98>)
 80011c8:	f004 f9ca 	bl	8005560 <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	b9b0      	cbnz	r0, 80011fc <MX_TIM2_Init+0x90>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ce:	2360      	movs	r3, #96	; 0x60
 80011d0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80011d2:	2200      	movs	r2, #0
 80011d4:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d6:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d8:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011da:	a901      	add	r1, sp, #4
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <MX_TIM2_Init+0x98>)
 80011de:	f004 f807 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 80011e2:	b968      	cbnz	r0, 8001200 <MX_TIM2_Init+0x94>
  HAL_TIM_MspPostInit(&htim2);
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_TIM2_Init+0x98>)
 80011e6:	f001 fbc9 	bl	800297c <HAL_TIM_MspPostInit>
}
 80011ea:	b00f      	add	sp, #60	; 0x3c
 80011ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011f0:	f7ff ff28 	bl	8001044 <Error_Handler>
    Error_Handler();
 80011f4:	f7ff ff26 	bl	8001044 <Error_Handler>
    Error_Handler();
 80011f8:	f7ff ff24 	bl	8001044 <Error_Handler>
    Error_Handler();
 80011fc:	f7ff ff22 	bl	8001044 <Error_Handler>
    Error_Handler();
 8001200:	f7ff ff20 	bl	8001044 <Error_Handler>
 8001204:	20000b14 	.word	0x20000b14

08001208 <MX_TIM3_Init>:
{
 8001208:	b500      	push	{lr}
 800120a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120c:	2300      	movs	r3, #0
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	9303      	str	r3, [sp, #12]
 8001212:	9304      	str	r3, [sp, #16]
 8001214:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	9301      	str	r3, [sp, #4]
  htim3.Instance = TIM3;
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_TIM3_Init+0x60>)
 800121c:	4a13      	ldr	r2, [pc, #76]	; (800126c <MX_TIM3_Init+0x64>)
 800121e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 72-1;
 8001220:	2247      	movs	r2, #71	; 0x47
 8001222:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 125-1;
 8001226:	227c      	movs	r2, #124	; 0x7c
 8001228:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800122e:	f003 ff55 	bl	80050dc <HAL_TIM_Base_Init>
 8001232:	b990      	cbnz	r0, 800125a <MX_TIM3_Init+0x52>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800123a:	a902      	add	r1, sp, #8
 800123c:	480a      	ldr	r0, [pc, #40]	; (8001268 <MX_TIM3_Init+0x60>)
 800123e:	f004 f851 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 8001242:	b960      	cbnz	r0, 800125e <MX_TIM3_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800124a:	4669      	mov	r1, sp
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM3_Init+0x60>)
 800124e:	f004 f987 	bl	8005560 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	b930      	cbnz	r0, 8001262 <MX_TIM3_Init+0x5a>
}
 8001254:	b007      	add	sp, #28
 8001256:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800125a:	f7ff fef3 	bl	8001044 <Error_Handler>
    Error_Handler();
 800125e:	f7ff fef1 	bl	8001044 <Error_Handler>
    Error_Handler();
 8001262:	f7ff feef 	bl	8001044 <Error_Handler>
 8001266:	bf00      	nop
 8001268:	20000b5c 	.word	0x20000b5c
 800126c:	40000400 	.word	0x40000400

08001270 <SystemClock_Config>:
{
 8001270:	b500      	push	{lr}
 8001272:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001274:	2228      	movs	r2, #40	; 0x28
 8001276:	2100      	movs	r1, #0
 8001278:	eb0d 0002 	add.w	r0, sp, r2
 800127c:	f007 f8eb 	bl	8008456 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	2300      	movs	r3, #0
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	9306      	str	r3, [sp, #24]
 8001286:	9307      	str	r3, [sp, #28]
 8001288:	9308      	str	r3, [sp, #32]
 800128a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2201      	movs	r2, #1
 8001296:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2202      	movs	r2, #2
 80012a2:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012aa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	a80a      	add	r0, sp, #40	; 0x28
 80012ae:	f002 fd29 	bl	8003d04 <HAL_RCC_OscConfig>
 80012b2:	b9c8      	cbnz	r0, 80012e8 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2102      	movs	r1, #2
 80012ba:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c4:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c8:	a805      	add	r0, sp, #20
 80012ca:	f002 ff4d 	bl	8004168 <HAL_RCC_ClockConfig>
 80012ce:	b968      	cbnz	r0, 80012ec <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012d0:	2302      	movs	r3, #2
 80012d2:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80012d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012d8:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012da:	a801      	add	r0, sp, #4
 80012dc:	f003 f83e 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	b930      	cbnz	r0, 80012f0 <SystemClock_Config+0x80>
}
 80012e2:	b015      	add	sp, #84	; 0x54
 80012e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80012e8:	f7ff feac 	bl	8001044 <Error_Handler>
    Error_Handler();
 80012ec:	f7ff feaa 	bl	8001044 <Error_Handler>
    Error_Handler();
 80012f0:	f7ff fea8 	bl	8001044 <Error_Handler>

080012f4 <main>:
{
 80012f4:	b508      	push	{r3, lr}
  HAL_Init();
 80012f6:	f001 fc59 	bl	8002bac <HAL_Init>
  SystemClock_Config();
 80012fa:	f7ff ffb9 	bl	8001270 <SystemClock_Config>
  MX_GPIO_Init();
 80012fe:	f7ff fc3f 	bl	8000b80 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001302:	f7ff fea1 	bl	8001048 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001306:	f7ff fecb 	bl	80010a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800130a:	f7ff fee5 	bl	80010d8 <MX_SPI1_Init>
  MX_ADC2_Init();
 800130e:	f7ff ff03 	bl	8001118 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001312:	f7ff ff2b 	bl	800116c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001316:	f7ff ff77 	bl	8001208 <MX_TIM3_Init>
  osKernelInitialize();
 800131a:	f004 f959 	bl	80055d0 <osKernelInitialize>
  myMutexPuntajeHandle = osMutexNew(&myMutexPuntaje_attributes);
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <main+0xb0>)
 8001320:	f004 fad4 	bl	80058cc <osMutexNew>
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <main+0xb4>)
 8001326:	6018      	str	r0, [r3, #0]
  mySem01Handle = osSemaphoreNew(1, 1, &mySem01_attributes);
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <main+0xb8>)
 800132a:	2101      	movs	r1, #1
 800132c:	4608      	mov	r0, r1
 800132e:	f004 fba7 	bl	8005a80 <osSemaphoreNew>
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <main+0xbc>)
 8001334:	6018      	str	r0, [r3, #0]
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8001336:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <main+0xc0>)
 8001338:	2103      	movs	r1, #3
 800133a:	200a      	movs	r0, #10
 800133c:	f004 fc0c 	bl	8005b58 <osMessageQueueNew>
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <main+0xc4>)
 8001342:	6018      	str	r0, [r3, #0]
  queueSonidoMenuHandle = osMessageQueueNew (10, sizeof(musica_t), &queueSonidoMenu_attributes);
 8001344:	4a1d      	ldr	r2, [pc, #116]	; (80013bc <main+0xc8>)
 8001346:	2101      	movs	r1, #1
 8001348:	200a      	movs	r0, #10
 800134a:	f004 fc05 	bl	8005b58 <osMessageQueueNew>
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <main+0xcc>)
 8001350:	6018      	str	r0, [r3, #0]
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <main+0xd0>)
 8001354:	2100      	movs	r1, #0
 8001356:	481c      	ldr	r0, [pc, #112]	; (80013c8 <main+0xd4>)
 8001358:	f004 f982 	bl	8005660 <osThreadNew>
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <main+0xd8>)
 800135e:	6018      	str	r0, [r3, #0]
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <main+0xdc>)
 8001362:	2100      	movs	r1, #0
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <main+0xe0>)
 8001366:	f004 f97b 	bl	8005660 <osThreadNew>
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <main+0xe4>)
 800136c:	6018      	str	r0, [r3, #0]
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 800136e:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <main+0xe8>)
 8001370:	2100      	movs	r1, #0
 8001372:	481b      	ldr	r0, [pc, #108]	; (80013e0 <main+0xec>)
 8001374:	f004 f974 	bl	8005660 <osThreadNew>
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <main+0xf0>)
 800137a:	6018      	str	r0, [r3, #0]
  SonidoTaskHandle = osThreadNew(entrySonido, NULL, &SonidoTask_attributes);
 800137c:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <main+0xf4>)
 800137e:	2100      	movs	r1, #0
 8001380:	481a      	ldr	r0, [pc, #104]	; (80013ec <main+0xf8>)
 8001382:	f004 f96d 	bl	8005660 <osThreadNew>
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <main+0xfc>)
 8001388:	6018      	str	r0, [r3, #0]
  notificationFlag = osEventFlagsNew(NULL);
 800138a:	2000      	movs	r0, #0
 800138c:	f004 f9de 	bl	800574c <osEventFlagsNew>
 8001390:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <main+0x100>)
 8001392:	6018      	str	r0, [r3, #0]
  notificationFlag2 = osEventFlagsNew(NULL);
 8001394:	2000      	movs	r0, #0
 8001396:	f004 f9d9 	bl	800574c <osEventFlagsNew>
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <main+0x104>)
 800139c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800139e:	f004 f939 	bl	8005614 <osKernelStart>
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <main+0xae>
 80013a4:	08009ae8 	.word	0x08009ae8
 80013a8:	20000ba8 	.word	0x20000ba8
 80013ac:	08009af8 	.word	0x08009af8
 80013b0:	20000bac 	.word	0x20000bac
 80013b4:	08009b08 	.word	0x08009b08
 80013b8:	20000bbc 	.word	0x20000bbc
 80013bc:	08009b20 	.word	0x08009b20
 80013c0:	20000bc0 	.word	0x20000bc0
 80013c4:	08009a58 	.word	0x08009a58
 80013c8:	08000c71 	.word	0x08000c71
 80013cc:	200009f4 	.word	0x200009f4
 80013d0:	08009aa0 	.word	0x08009aa0
 80013d4:	08000d55 	.word	0x08000d55
 80013d8:	200009fc 	.word	0x200009fc
 80013dc:	08009a7c 	.word	0x08009a7c
 80013e0:	08000da9 	.word	0x08000da9
 80013e4:	200009f8 	.word	0x200009f8
 80013e8:	08009ac4 	.word	0x08009ac4
 80013ec:	08000ddd 	.word	0x08000ddd
 80013f0:	20000a00 	.word	0x20000a00
 80013f4:	20000bb0 	.word	0x20000bb0
 80013f8:	20000bb4 	.word	0x20000bb4

080013fc <getPuntajes>:

puntajes_t *getPuntajes(uint8_t indice){

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &Puntajes[indice];
}
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <getPuntajes+0x8>)
 80013fe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8001402:	4770      	bx	lr
 8001404:	20000bc8 	.word	0x20000bc8

08001408 <Read_all>:


	return ((dato_leido[0]<<1) + (dato_leido[1]>>7));
}

void Read_all(uint16_t address, uint16_t tamano, uint8_t *buffer){
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	4604      	mov	r4, r0
 800140e:	460e      	mov	r6, r1
 8001410:	4615      	mov	r5, r2


	uint8_t dato_actual, dato_anterior;


	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	2120      	movs	r1, #32
 8001416:	481f      	ldr	r0, [pc, #124]	; (8001494 <Read_all+0x8c>)
 8001418:	f002 f859 	bl	80034ce <HAL_GPIO_WritePin>

	uint8_t comando[2] = { ((uint16_t)READ<<3) + (address>>8 & 0xFF), address & 0xFF};
 800141c:	0a23      	lsrs	r3, r4, #8
 800141e:	3330      	adds	r3, #48	; 0x30
 8001420:	f88d 3004 	strb.w	r3, [sp, #4]
 8001424:	f88d 4005 	strb.w	r4, [sp, #5]
	HAL_SPI_Transmit(&hspi1, comando, 2, 100);
 8001428:	4c1b      	ldr	r4, [pc, #108]	; (8001498 <Read_all+0x90>)
 800142a:	2364      	movs	r3, #100	; 0x64
 800142c:	2202      	movs	r2, #2
 800142e:	a901      	add	r1, sp, #4
 8001430:	4620      	mov	r0, r4
 8001432:	f003 f99a 	bl	800476a <HAL_SPI_Transmit>

	HAL_Delay(10);
 8001436:	200a      	movs	r0, #10
 8001438:	f001 fbdc 	bl	8002bf4 <HAL_Delay>

	HAL_SPI_Receive(&hspi1, &dato_anterior, 1, HAL_MAX_DELAY);
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2201      	movs	r2, #1
 8001442:	f10d 0106 	add.w	r1, sp, #6
 8001446:	4620      	mov	r0, r4
 8001448:	f003 fb8d 	bl	8004b66 <HAL_SPI_Receive>


	for(uint16_t i=0; i< tamano; i++){
 800144c:	2400      	movs	r4, #0
 800144e:	e015      	b.n	800147c <Read_all+0x74>

		HAL_SPI_Receive(&hspi1, &dato_actual, 1, HAL_MAX_DELAY);
 8001450:	f04f 33ff 	mov.w	r3, #4294967295
 8001454:	2201      	movs	r2, #1
 8001456:	f10d 0107 	add.w	r1, sp, #7
 800145a:	480f      	ldr	r0, [pc, #60]	; (8001498 <Read_all+0x90>)
 800145c:	f003 fb83 	bl	8004b66 <HAL_SPI_Receive>
		*buffer = (dato_anterior<<1) + (dato_actual>>7);
 8001460:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800146c:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8001470:	f805 3b01 	strb.w	r3, [r5], #1
		buffer++;
		dato_anterior = dato_actual;
 8001474:	f88d 2006 	strb.w	r2, [sp, #6]
	for(uint16_t i=0; i< tamano; i++){
 8001478:	3401      	adds	r4, #1
 800147a:	b2a4      	uxth	r4, r4
 800147c:	42b4      	cmp	r4, r6
 800147e:	d3e7      	bcc.n	8001450 <Read_all+0x48>
		//HAL_Delay(1);
	}

	HAL_Delay(10);
 8001480:	200a      	movs	r0, #10
 8001482:	f001 fbb7 	bl	8002bf4 <HAL_Delay>

	HAL_GPIO_WritePin(CHIP_SELECT_PORT, CHIP_SELECT_PIN, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	2120      	movs	r1, #32
 800148a:	4802      	ldr	r0, [pc, #8]	; (8001494 <Read_all+0x8c>)
 800148c:	f002 f81f 	bl	80034ce <HAL_GPIO_WritePin>

}
 8001490:	b002      	add	sp, #8
 8001492:	bd70      	pop	{r4, r5, r6, pc}
 8001494:	40010c00 	.word	0x40010c00
 8001498:	20000abc 	.word	0x20000abc

0800149c <memoriaInit>:



void memoriaInit(){
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	b08c      	sub	sp, #48	; 0x30
 80014a0:	2500      	movs	r5, #0


		char buff_nombre[7];
		strcpy(buff_nombre, "      ");
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <memoriaInit+0x194>)
 80014a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014a8:	900a      	str	r0, [sp, #40]	; 0x28
 80014aa:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80014ae:	0c09      	lsrs	r1, r1, #16
 80014b0:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
		uint8_t puntaje_msb;

		uint8_t buffer[TAMANO_TOTAL_PUNTAJES];


		Read_all(address, TAMANO_TOTAL_PUNTAJES, buffer);
 80014b4:	466a      	mov	r2, sp
 80014b6:	2128      	movs	r1, #40	; 0x28
 80014b8:	4628      	mov	r0, r5
 80014ba:	f7ff ffa5 	bl	8001408 <Read_all>
		uint8_t i=0;
 80014be:	462c      	mov	r4, r5
		uint8_t permiso = true;
 80014c0:	2001      	movs	r0, #1
		uint8_t j = 0;
 80014c2:	4629      	mov	r1, r5
 80014c4:	e009      	b.n	80014da <memoriaInit+0x3e>

		do{

			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){

				puntaje_msb = buffer[i];
 80014c6:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80014ca:	446b      	add	r3, sp
 80014cc:	f813 5c30 	ldrb.w	r5, [r3, #-48]
					else{
						j++;
					}
				}
			}
			i++;
 80014d0:	3401      	adds	r4, #1
 80014d2:	b2e4      	uxtb	r4, r4

		}while(i != 40);
 80014d4:	2c28      	cmp	r4, #40	; 0x28
 80014d6:	f000 80a9 	beq.w	800162c <memoriaInit+0x190>
			if( (i==6) || (i==14) || (i==22) || (i==30) || (i==38) ){
 80014da:	2c06      	cmp	r4, #6
 80014dc:	d0f3      	beq.n	80014c6 <memoriaInit+0x2a>
 80014de:	2c07      	cmp	r4, #7
 80014e0:	d03c      	beq.n	800155c <memoriaInit+0xc0>
 80014e2:	d30e      	bcc.n	8001502 <memoriaInit+0x66>
 80014e4:	2c27      	cmp	r4, #39	; 0x27
 80014e6:	d80c      	bhi.n	8001502 <memoriaInit+0x66>
 80014e8:	2c0e      	cmp	r4, #14
 80014ea:	d30a      	bcc.n	8001502 <memoriaInit+0x66>
 80014ec:	f1a4 020e 	sub.w	r2, r4, #14
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	2301      	movs	r3, #1
 80014f4:	4093      	lsls	r3, r2
 80014f6:	f013 3f02 	tst.w	r3, #33686018	; 0x2020202
 80014fa:	d12f      	bne.n	800155c <memoriaInit+0xc0>
 80014fc:	f013 3f01 	tst.w	r3, #16843009	; 0x1010101
 8001500:	d1e1      	bne.n	80014c6 <memoriaInit+0x2a>
				if( (buff_nombre[j] != '\0') && permiso==true){
 8001502:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8001506:	446b      	add	r3, sp
 8001508:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0df      	beq.n	80014d0 <memoriaInit+0x34>
 8001510:	2801      	cmp	r0, #1
 8001512:	d1dd      	bne.n	80014d0 <memoriaInit+0x34>
					buff_nombre[j]  = buffer[i];;
 8001514:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001518:	446b      	add	r3, sp
 800151a:	f813 6c30 	ldrb.w	r6, [r3, #-48]
 800151e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8001522:	eb0d 0203 	add.w	r2, sp, r3
 8001526:	f802 6c08 	strb.w	r6, [r2, #-8]
					if(buff_nombre[j] == '\0'){
 800152a:	2e00      	cmp	r6, #0
 800152c:	d178      	bne.n	8001620 <memoriaInit+0x184>
						if((i>=0 && i<6)){
 800152e:	2c25      	cmp	r4, #37	; 0x25
 8001530:	d856      	bhi.n	80015e0 <memoriaInit+0x144>
 8001532:	e8df f004 	tbb	[pc, r4]
 8001536:	5151      	.short	0x5151
 8001538:	51515151 	.word	0x51515151
 800153c:	61615555 	.word	0x61615555
 8001540:	61616161 	.word	0x61616161
 8001544:	66665555 	.word	0x66665555
 8001548:	66666666 	.word	0x66666666
 800154c:	6b6b5555 	.word	0x6b6b5555
 8001550:	6b6b6b6b 	.word	0x6b6b6b6b
 8001554:	70705555 	.word	0x70705555
 8001558:	70707070 	.word	0x70707070
				puntaje_lsb = buffer[i];
 800155c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8001560:	446b      	add	r3, sp
 8001562:	f813 3c30 	ldrb.w	r3, [r3, #-48]
				switch(i){
 8001566:	1fe2      	subs	r2, r4, #7
 8001568:	2a20      	cmp	r2, #32
 800156a:	d85c      	bhi.n	8001626 <memoriaInit+0x18a>
 800156c:	e8df f002 	tbb	[pc, r2]
 8001570:	5b5b5b11 	.word	0x5b5b5b11
 8001574:	5b5b5b5b 	.word	0x5b5b5b5b
 8001578:	5b5b5b18 	.word	0x5b5b5b18
 800157c:	5b5b5b5b 	.word	0x5b5b5b5b
 8001580:	5b5b5b1f 	.word	0x5b5b5b1f
 8001584:	5b5b5b5b 	.word	0x5b5b5b5b
 8001588:	5b5b5b26 	.word	0x5b5b5b26
 800158c:	5b5b5b5b 	.word	0x5b5b5b5b
 8001590:	2d          	.byte	0x2d
 8001591:	00          	.byte	0x00
					Puntajes[0].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 8001592:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 8001596:	4a27      	ldr	r2, [pc, #156]	; (8001634 <memoriaInit+0x198>)
 8001598:	80d3      	strh	r3, [r2, #6]
				puntaje_msb = 0;
 800159a:	2500      	movs	r5, #0
				permiso = true;
 800159c:	2001      	movs	r0, #1
					break;
 800159e:	e797      	b.n	80014d0 <memoriaInit+0x34>
					Puntajes[1].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015a0:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015a4:	4a23      	ldr	r2, [pc, #140]	; (8001634 <memoriaInit+0x198>)
 80015a6:	81d3      	strh	r3, [r2, #14]
				puntaje_msb = 0;
 80015a8:	2500      	movs	r5, #0
				permiso = true;
 80015aa:	2001      	movs	r0, #1
					break;
 80015ac:	e790      	b.n	80014d0 <memoriaInit+0x34>
					Puntajes[2].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015ae:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015b2:	4a20      	ldr	r2, [pc, #128]	; (8001634 <memoriaInit+0x198>)
 80015b4:	82d3      	strh	r3, [r2, #22]
				puntaje_msb = 0;
 80015b6:	2500      	movs	r5, #0
				permiso = true;
 80015b8:	2001      	movs	r0, #1
					break;
 80015ba:	e789      	b.n	80014d0 <memoriaInit+0x34>
					Puntajes[3].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015bc:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <memoriaInit+0x198>)
 80015c2:	83d3      	strh	r3, [r2, #30]
				puntaje_msb = 0;
 80015c4:	2500      	movs	r5, #0
				permiso = true;
 80015c6:	2001      	movs	r0, #1
					break;
 80015c8:	e782      	b.n	80014d0 <memoriaInit+0x34>
					Puntajes[4].puntaje = (puntaje_msb<<8) + puntaje_lsb;
 80015ca:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <memoriaInit+0x198>)
 80015d0:	84d3      	strh	r3, [r2, #38]	; 0x26
				puntaje_msb = 0;
 80015d2:	2500      	movs	r5, #0
				permiso = true;
 80015d4:	2001      	movs	r0, #1
					break;
 80015d6:	e77b      	b.n	80014d0 <memoriaInit+0x34>
							strcpy(Puntajes[0].nombre, buff_nombre);
 80015d8:	a90a      	add	r1, sp, #40	; 0x28
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <memoriaInit+0x198>)
 80015dc:	f006 ffb7 	bl	800854e <strcpy>
						strcpy(buff_nombre, "      ");
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <memoriaInit+0x194>)
 80015e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80015e6:	900a      	str	r0, [sp, #40]	; 0x28
 80015e8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80015ec:	0c09      	lsrs	r1, r1, #16
 80015ee:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
						permiso = false;
 80015f2:	4630      	mov	r0, r6
						j = 0;
 80015f4:	4631      	mov	r1, r6
 80015f6:	e76b      	b.n	80014d0 <memoriaInit+0x34>
							strcpy(Puntajes[1].nombre, buff_nombre);
 80015f8:	a90a      	add	r1, sp, #40	; 0x28
 80015fa:	480f      	ldr	r0, [pc, #60]	; (8001638 <memoriaInit+0x19c>)
 80015fc:	f006 ffa7 	bl	800854e <strcpy>
 8001600:	e7ee      	b.n	80015e0 <memoriaInit+0x144>
							strcpy(Puntajes[2].nombre, buff_nombre);
 8001602:	a90a      	add	r1, sp, #40	; 0x28
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <memoriaInit+0x1a0>)
 8001606:	f006 ffa2 	bl	800854e <strcpy>
 800160a:	e7e9      	b.n	80015e0 <memoriaInit+0x144>
							strcpy(Puntajes[3].nombre, buff_nombre);
 800160c:	a90a      	add	r1, sp, #40	; 0x28
 800160e:	480c      	ldr	r0, [pc, #48]	; (8001640 <memoriaInit+0x1a4>)
 8001610:	f006 ff9d 	bl	800854e <strcpy>
 8001614:	e7e4      	b.n	80015e0 <memoriaInit+0x144>
							strcpy(Puntajes[4].nombre, buff_nombre);
 8001616:	a90a      	add	r1, sp, #40	; 0x28
 8001618:	480a      	ldr	r0, [pc, #40]	; (8001644 <memoriaInit+0x1a8>)
 800161a:	f006 ff98 	bl	800854e <strcpy>
 800161e:	e7df      	b.n	80015e0 <memoriaInit+0x144>
						j++;
 8001620:	3101      	adds	r1, #1
 8001622:	b2c9      	uxtb	r1, r1
 8001624:	e754      	b.n	80014d0 <memoriaInit+0x34>
				switch(i){
 8001626:	2500      	movs	r5, #0
 8001628:	2001      	movs	r0, #1
 800162a:	e751      	b.n	80014d0 <memoriaInit+0x34>


}
 800162c:	b00c      	add	sp, #48	; 0x30
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	08009b38 	.word	0x08009b38
 8001634:	20000bc8 	.word	0x20000bc8
 8001638:	20000bd0 	.word	0x20000bd0
 800163c:	20000bd8 	.word	0x20000bd8
 8001640:	20000be0 	.word	0x20000be0
 8001644:	20000be8 	.word	0x20000be8

08001648 <Ordenamiento_Puntajes>:
}


//Hay que corregir el ordenamiento de puntajes.

uint8_t Ordenamiento_Puntajes(){
 8001648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800164c:	b08e      	sub	sp, #56	; 0x38
	uint8_t indice_subvector = 1;
	uint16_t auxiliar;


	//Copio los nombres y los puntajes porque voy a reescribir getPuntajes()
	for(uint8_t i=0;i<5;i++){
 800164e:	2400      	movs	r4, #0
 8001650:	e011      	b.n	8001676 <Ordenamiento_Puntajes+0x2e>

		vector[i] = Puntajes[i].puntaje;
 8001652:	4935      	ldr	r1, [pc, #212]	; (8001728 <Ordenamiento_Puntajes+0xe0>)
 8001654:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8001658:	88ca      	ldrh	r2, [r1, #6]
 800165a:	ab0e      	add	r3, sp, #56	; 0x38
 800165c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8001660:	f823 2c0c 	strh.w	r2, [r3, #-12]
		strcpy(buff_nombre[i], Puntajes[i].nombre);
 8001664:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001668:	0058      	lsls	r0, r3, #1
 800166a:	ab03      	add	r3, sp, #12
 800166c:	4418      	add	r0, r3
 800166e:	f006 ff6e 	bl	800854e <strcpy>
	for(uint8_t i=0;i<5;i++){
 8001672:	3401      	adds	r4, #1
 8001674:	b2e4      	uxtb	r4, r4
 8001676:	2c04      	cmp	r4, #4
 8001678:	d9eb      	bls.n	8001652 <Ordenamiento_Puntajes+0xa>
	uint8_t indice_subvector = 1;
 800167a:	2001      	movs	r0, #1
	uint8_t permutaciones = 0;
 800167c:	2700      	movs	r7, #0
 800167e:	e01f      	b.n	80016c0 <Ordenamiento_Puntajes+0x78>
	}

	//Ordenamiento de mayor a menor xd.
	do{

			for(uint8_t j=indice_subvector; j > 0; j--){
 8001680:	3e01      	subs	r6, #1
 8001682:	b2f6      	uxtb	r6, r6
 8001684:	b1c6      	cbz	r6, 80016b8 <Ordenamiento_Puntajes+0x70>

					if(vector[j] > vector[j-1]){
 8001686:	ab0e      	add	r3, sp, #56	; 0x38
 8001688:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800168c:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8001690:	1e73      	subs	r3, r6, #1
 8001692:	aa0e      	add	r2, sp, #56	; 0x38
 8001694:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8001698:	f832 2c0c 	ldrh.w	r2, [r2, #-12]
 800169c:	4291      	cmp	r1, r2
 800169e:	d9ef      	bls.n	8001680 <Ordenamiento_Puntajes+0x38>

						auxiliar = vector[j-1];
						vector[j-1] = vector[j];
 80016a0:	ac0e      	add	r4, sp, #56	; 0x38
 80016a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80016a6:	f823 1c0c 	strh.w	r1, [r3, #-12]
						vector[j] = auxiliar;
 80016aa:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 80016ae:	f823 2c0c 	strh.w	r2, [r3, #-12]

						permutaciones++;
 80016b2:	3701      	adds	r7, #1
 80016b4:	b2ff      	uxtb	r7, r7
 80016b6:	e7e3      	b.n	8001680 <Ordenamiento_Puntajes+0x38>

					}

			}

		indice_subvector++;
 80016b8:	3001      	adds	r0, #1
 80016ba:	b2c0      	uxtb	r0, r0

	}while(indice_subvector != 5);
 80016bc:	2805      	cmp	r0, #5
 80016be:	d001      	beq.n	80016c4 <Ordenamiento_Puntajes+0x7c>
			for(uint8_t j=indice_subvector; j > 0; j--){
 80016c0:	4606      	mov	r6, r0
 80016c2:	e7df      	b.n	8001684 <Ordenamiento_Puntajes+0x3c>

	uint8_t finalizado;
	char buff_aux[6];


	for(uint8_t k=0;k<5;k++){
 80016c4:	4634      	mov	r4, r6
 80016c6:	e027      	b.n	8001718 <Ordenamiento_Puntajes+0xd0>

					Puntajes[j].puntaje = Puntajes[k].puntaje;
					Puntajes[k].puntaje = vector[k];
					finalizado = false;
				}
				j++;
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2db      	uxtb	r3, r3
				if(Puntajes[j].puntaje == vector[k]){
 80016cc:	4698      	mov	r8, r3
 80016ce:	4a16      	ldr	r2, [pc, #88]	; (8001728 <Ordenamiento_Puntajes+0xe0>)
 80016d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80016d4:	88d2      	ldrh	r2, [r2, #6]
 80016d6:	a90e      	add	r1, sp, #56	; 0x38
 80016d8:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80016dc:	f831 5c0c 	ldrh.w	r5, [r1, #-12]
 80016e0:	42aa      	cmp	r2, r5
 80016e2:	d1f1      	bne.n	80016c8 <Ordenamiento_Puntajes+0x80>
					strcpy(buff_aux, Puntajes[k].nombre);
 80016e4:	f8df a040 	ldr.w	sl, [pc, #64]	; 8001728 <Ordenamiento_Puntajes+0xe0>
 80016e8:	eb0a 09c4 	add.w	r9, sl, r4, lsl #3
 80016ec:	4649      	mov	r1, r9
 80016ee:	a801      	add	r0, sp, #4
 80016f0:	f006 ff2d 	bl	800854e <strcpy>
					strcpy(Puntajes[k].nombre, Puntajes[j].nombre);
 80016f4:	eb0a 08c8 	add.w	r8, sl, r8, lsl #3
 80016f8:	4641      	mov	r1, r8
 80016fa:	4648      	mov	r0, r9
 80016fc:	f006 ff27 	bl	800854e <strcpy>
					strcpy(Puntajes[j].nombre, buff_aux);
 8001700:	a901      	add	r1, sp, #4
 8001702:	4640      	mov	r0, r8
 8001704:	f006 ff23 	bl	800854e <strcpy>
					Puntajes[j].puntaje = Puntajes[k].puntaje;
 8001708:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800170c:	f8a8 3006 	strh.w	r3, [r8, #6]
					Puntajes[k].puntaje = vector[k];
 8001710:	f8a9 5006 	strh.w	r5, [r9, #6]
	for(uint8_t k=0;k<5;k++){
 8001714:	3401      	adds	r4, #1
 8001716:	b2e4      	uxtb	r4, r4
 8001718:	2c04      	cmp	r4, #4
 800171a:	d801      	bhi.n	8001720 <Ordenamiento_Puntajes+0xd8>
			uint8_t j=0;
 800171c:	4633      	mov	r3, r6
 800171e:	e7d5      	b.n	80016cc <Ordenamiento_Puntajes+0x84>
	}


	return permutaciones;

}
 8001720:	4638      	mov	r0, r7
 8001722:	b00e      	add	sp, #56	; 0x38
 8001724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001728:	20000bc8 	.word	0x20000bc8

0800172c <menuInit>:

menu_t menu;

extern musica_t musica;

void menuInit(){
 800172c:	b508      	push	{r3, lr}

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 800172e:	f000 ff59 	bl	80025e4 <SSD1306_Init>
	SSD1306_Clear();
 8001732:	f000 ff4f 	bl	80025d4 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8001736:	f000 ff29 	bl	800258c <SSD1306_UpdateScreen>

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 800173a:	f7fe fd39 	bl	80001b0 <playerInit>
	InvaderInit();
 800173e:	f7fe fd85 	bl	800024c <InvaderInit>
	disparoInit();
 8001742:	f7fe ff59 	bl	80005f8 <disparoInit>
	BasesInit();
 8001746:	f7ff f9e1 	bl	8000b0c <BasesInit>

	//Se inicializan las dificultades
	Dificultad_Init();
 800174a:	f7ff f9fb 	bl	8000b44 <Dificultad_Init>


	//Se inicializa el cursor de la pantalla principal.
	//menu.menuActual =  progresion_niveles;
	menu.menuActual = menu_principal;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <menuInit+0x3c>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
	//menu.menuActual = juego;
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001754:	2126      	movs	r1, #38	; 0x26
 8001756:	7059      	strb	r1, [r3, #1]


	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001758:	2109      	movs	r1, #9
 800175a:	7119      	strb	r1, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 800175c:	211b      	movs	r1, #27
 800175e:	7159      	strb	r1, [r3, #5]
	menu.GuardarNombre.indice = 0;
 8001760:	731a      	strb	r2, [r3, #12]



	//Para las variables de juego
	menu.juego.flag = 0;
 8001762:	f883 2020 	strb.w	r2, [r3, #32]


}
 8001766:	bd08      	pop	{r3, pc}
 8001768:	20000bf0 	.word	0x20000bf0

0800176c <menuReset>:
	}

}


void menuReset(){
 800176c:	b508      	push	{r3, lr}

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 800176e:	f7fe fd1f 	bl	80001b0 <playerInit>
	InvaderInit();
 8001772:	f7fe fd6b 	bl	800024c <InvaderInit>
	disparoInit();
 8001776:	f7fe ff3f 	bl	80005f8 <disparoInit>

	//Se reinician las dificultades al nivel 1
	Dificultad_Init();
 800177a:	f7ff f9e3 	bl	8000b44 <Dificultad_Init>


	//Para las variables de juego
	menu.juego.flag = 0;
 800177e:	4b03      	ldr	r3, [pc, #12]	; (800178c <menuReset+0x20>)
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2020 	strb.w	r2, [r3, #32]

	//Se inicializa el cursor de la pantalla principal.
	menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001786:	2226      	movs	r2, #38	; 0x26
 8001788:	705a      	strb	r2, [r3, #1]

}
 800178a:	bd08      	pop	{r3, pc}
 800178c:	20000bf0 	.word	0x20000bf0

08001790 <GuardarNombreReset>:


void GuardarNombreReset(){

	//Se inicializa el cursor de la pantalla Guardado de nombre
	menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <GuardarNombreReset+0x1c>)
 8001792:	2209      	movs	r2, #9
 8001794:	711a      	strb	r2, [r3, #4]
	menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001796:	221b      	movs	r2, #27
 8001798:	715a      	strb	r2, [r3, #5]
	menu.GuardarNombre.indice = 0;
 800179a:	2200      	movs	r2, #0
 800179c:	731a      	strb	r2, [r3, #12]
	strcpy(menu.GuardarNombre.nombre,"     ");
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <GuardarNombreReset+0x20>)
 80017a0:	6810      	ldr	r0, [r2, #0]
 80017a2:	f8c3 0006 	str.w	r0, [r3, #6]
 80017a6:	8892      	ldrh	r2, [r2, #4]
 80017a8:	815a      	strh	r2, [r3, #10]

}
 80017aa:	4770      	bx	lr
 80017ac:	20000bf0 	.word	0x20000bf0
 80017b0:	08009b40 	.word	0x08009b40

080017b4 <menuActualizar>:
void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 80017b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017b8:	b09a      	sub	sp, #104	; 0x68
 80017ba:	4680      	mov	r8, r0
 80017bc:	460e      	mov	r6, r1
 80017be:	4617      	mov	r7, r2
	switch(menu.menuActual){
 80017c0:	4bba      	ldr	r3, [pc, #744]	; (8001aac <menuActualizar+0x2f8>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	f200 823d 	bhi.w	8001c44 <menuActualizar+0x490>
 80017ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 80017ce:	0006      	.short	0x0006
 80017d0:	00dc0046 	.word	0x00dc0046
 80017d4:	018a0133 	.word	0x018a0133
 80017d8:	0392      	.short	0x0392
		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 80017da:	2401      	movs	r4, #1
 80017dc:	9401      	str	r4, [sp, #4]
 80017de:	2320      	movs	r3, #32
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2340      	movs	r3, #64	; 0x40
 80017e4:	4ab2      	ldr	r2, [pc, #712]	; (8001ab0 <menuActualizar+0x2fc>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	2023      	movs	r0, #35	; 0x23
 80017ea:	f000 fbdb 	bl	8001fa4 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(45, 35);
 80017ee:	2123      	movs	r1, #35	; 0x23
 80017f0:	202d      	movs	r0, #45	; 0x2d
 80017f2:	f000 fc21 	bl	8002038 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 80017f6:	4daf      	ldr	r5, [pc, #700]	; (8001ab4 <menuActualizar+0x300>)
 80017f8:	4622      	mov	r2, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	48ae      	ldr	r0, [pc, #696]	; (8001ab8 <menuActualizar+0x304>)
 80017fe:	f000 fc6f 	bl	80020e0 <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 8001802:	212d      	movs	r1, #45	; 0x2d
 8001804:	4608      	mov	r0, r1
 8001806:	f000 fc17 	bl	8002038 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 800180a:	4622      	mov	r2, r4
 800180c:	4629      	mov	r1, r5
 800180e:	48ab      	ldr	r0, [pc, #684]	; (8001abc <menuActualizar+0x308>)
 8001810:	f000 fc66 	bl	80020e0 <SSD1306_Puts>
		if(y == arriba){
 8001814:	b9be      	cbnz	r6, 8001846 <menuActualizar+0x92>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001816:	4ba5      	ldr	r3, [pc, #660]	; (8001aac <menuActualizar+0x2f8>)
 8001818:	2226      	movs	r2, #38	; 0x26
 800181a:	705a      	strb	r2, [r3, #1]
		SSD1306_DrawCircle(POSICION_CURSOR_X, menu.posicion_MenuPrincipal, 3, 1);
 800181c:	2301      	movs	r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	49a2      	ldr	r1, [pc, #648]	; (8001aac <menuActualizar+0x2f8>)
 8001822:	7849      	ldrb	r1, [r1, #1]
 8001824:	2027      	movs	r0, #39	; 0x27
 8001826:	f000 fd4b 	bl	80022c0 <SSD1306_DrawCircle>
		switch(boton){
 800182a:	2f01      	cmp	r7, #1
 800182c:	f040 820a 	bne.w	8001c44 <menuActualizar+0x490>
			if(menu.posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 8001830:	4b9e      	ldr	r3, [pc, #632]	; (8001aac <menuActualizar+0x2f8>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	2b26      	cmp	r3, #38	; 0x26
 8001836:	d00c      	beq.n	8001852 <menuActualizar+0x9e>
			else if(menu.posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8001838:	2b30      	cmp	r3, #48	; 0x30
 800183a:	f040 8203 	bne.w	8001c44 <menuActualizar+0x490>
			    menu.menuActual = puntajes;
 800183e:	4b9b      	ldr	r3, [pc, #620]	; (8001aac <menuActualizar+0x2f8>)
 8001840:	2203      	movs	r2, #3
 8001842:	701a      	strb	r2, [r3, #0]
 8001844:	e1fe      	b.n	8001c44 <menuActualizar+0x490>
		else if(y == abajo){
 8001846:	2e01      	cmp	r6, #1
 8001848:	d1e8      	bne.n	800181c <menuActualizar+0x68>
			menu.posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 800184a:	4b98      	ldr	r3, [pc, #608]	; (8001aac <menuActualizar+0x2f8>)
 800184c:	2230      	movs	r2, #48	; 0x30
 800184e:	705a      	strb	r2, [r3, #1]
 8001850:	e7e4      	b.n	800181c <menuActualizar+0x68>
				menu.menuActual = juego;
 8001852:	4b96      	ldr	r3, [pc, #600]	; (8001aac <menuActualizar+0x2f8>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
 8001858:	e1f4      	b.n	8001c44 <menuActualizar+0x490>
		uint8_t numero_aliens = getDisparoAliens().numero_disparos;
 800185a:	f7fe fc87 	bl	800016c <getDisparoAliens>
 800185e:	900b      	str	r0, [sp, #44]	; 0x2c
 8001860:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
		plotBases();
 8001864:	f7ff f86a 	bl	800093c <plotBases>
		plotPlayer(x);
 8001868:	4640      	mov	r0, r8
 800186a:	f7fe fcaf 	bl	80001cc <plotPlayer>
		plotAliens();
 800186e:	f7fe fd2f 	bl	80002d0 <plotAliens>
		disparoAliens();
 8001872:	f7fe ffcf 	bl	8000814 <disparoAliens>
		TickType_t Tiempo_Actual = xTaskGetTickCount();
 8001876:	f005 fba5 	bl	8006fc4 <xTaskGetTickCount>
 800187a:	4604      	mov	r4, r0
		if(menu.juego.flag == 0){
 800187c:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <menuActualizar+0x2f8>)
 800187e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001882:	b1fb      	cbz	r3, 80018c4 <menuActualizar+0x110>
		if(Tiempo_Actual - menu.juego.retrasoJuego_GameOver > pdMS_TO_TICKS(500)){
 8001884:	4b89      	ldr	r3, [pc, #548]	; (8001aac <menuActualizar+0x2f8>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	1ae4      	subs	r4, r4, r3
 800188a:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 800188e:	d902      	bls.n	8001896 <menuActualizar+0xe2>
			menu.menuActual = game_over;
 8001890:	4b86      	ldr	r3, [pc, #536]	; (8001aac <menuActualizar+0x2f8>)
 8001892:	2205      	movs	r2, #5
 8001894:	701a      	strb	r2, [r3, #0]
		if(boton == true && getPlayer().vivo == true ){
 8001896:	2f01      	cmp	r7, #1
 8001898:	d037      	beq.n	800190a <menuActualizar+0x156>
		disparar();
 800189a:	f7fe febd 	bl	8000618 <disparar>
		if(getDisparoAliens().numero_disparos != numero_aliens && getPlayer().vivo == true){
 800189e:	f7fe fc65 	bl	800016c <getDisparoAliens>
 80018a2:	9010      	str	r0, [sp, #64]	; 0x40
 80018a4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80018a8:	42ab      	cmp	r3, r5
 80018aa:	d153      	bne.n	8001954 <menuActualizar+0x1a0>
		if( getDisparoAliens().numero_disparos == 0){
 80018ac:	f7fe fc5e 	bl	800016c <getDisparoAliens>
 80018b0:	9013      	str	r0, [sp, #76]	; 0x4c
 80018b2:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 81c4 	bne.w	8001c44 <menuActualizar+0x490>
			menu.menuActual = progresion_niveles;
 80018bc:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <menuActualizar+0x2f8>)
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e1bf      	b.n	8001c44 <menuActualizar+0x490>
			if(getPlayer().vivo == false){
 80018c4:	a80c      	add	r0, sp, #48	; 0x30
 80018c6:	f7fe fc43 	bl	8000150 <getPlayer>
 80018ca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80018ce:	b113      	cbz	r3, 80018d6 <menuActualizar+0x122>
				menu.juego.retrasoJuego_GameOver = Tiempo_Actual;
 80018d0:	4b76      	ldr	r3, [pc, #472]	; (8001aac <menuActualizar+0x2f8>)
 80018d2:	61dc      	str	r4, [r3, #28]
 80018d4:	e7d6      	b.n	8001884 <menuActualizar+0xd0>
				menu.juego.retrasoJuego_GameOver = xTaskGetTickCount();
 80018d6:	f005 fb75 	bl	8006fc4 <xTaskGetTickCount>
 80018da:	4b74      	ldr	r3, [pc, #464]	; (8001aac <menuActualizar+0x2f8>)
 80018dc:	61d8      	str	r0, [r3, #28]
				menu.juego.flag = 1;
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2020 	strb.w	r2, [r3, #32]
				musica_t musica_ = gameover_;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f88d 3020 	strb.w	r3, [sp, #32]
				osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 80018ea:	2300      	movs	r3, #0
 80018ec:	461a      	mov	r2, r3
 80018ee:	a908      	add	r1, sp, #32
 80018f0:	4873      	ldr	r0, [pc, #460]	; (8001ac0 <menuActualizar+0x30c>)
 80018f2:	6800      	ldr	r0, [r0, #0]
 80018f4:	f004 f98e 	bl	8005c14 <osMessageQueuePut>
				if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d0c3      	beq.n	8001884 <menuActualizar+0xd0>
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001902:	4870      	ldr	r0, [pc, #448]	; (8001ac4 <menuActualizar+0x310>)
 8001904:	f001 fde3 	bl	80034ce <HAL_GPIO_WritePin>
 8001908:	e7bc      	b.n	8001884 <menuActualizar+0xd0>
		if(boton == true && getPlayer().vivo == true ){
 800190a:	a80e      	add	r0, sp, #56	; 0x38
 800190c:	f7fe fc20 	bl	8000150 <getPlayer>
 8001910:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8001914:	2b01      	cmp	r3, #1
 8001916:	d1c0      	bne.n	800189a <menuActualizar+0xe6>
				getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 8001918:	f7fe fc24 	bl	8000164 <getDisparo>
 800191c:	78c4      	ldrb	r4, [r0, #3]
 800191e:	f7fe fc21 	bl	8000164 <getDisparo>
 8001922:	3401      	adds	r4, #1
 8001924:	70c4      	strb	r4, [r0, #3]
				if(getDisparo()->numero_disparos == 1){
 8001926:	f7fe fc1d 	bl	8000164 <getDisparo>
 800192a:	78c3      	ldrb	r3, [r0, #3]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d1b4      	bne.n	800189a <menuActualizar+0xe6>
					musica_t musica_ = disparo_;
 8001930:	2200      	movs	r2, #0
 8001932:	f88d 2020 	strb.w	r2, [sp, #32]
					osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001936:	4613      	mov	r3, r2
 8001938:	a908      	add	r1, sp, #32
 800193a:	4861      	ldr	r0, [pc, #388]	; (8001ac0 <menuActualizar+0x30c>)
 800193c:	6800      	ldr	r0, [r0, #0]
 800193e:	f004 f969 	bl	8005c14 <osMessageQueuePut>
					if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001942:	2800      	cmp	r0, #0
 8001944:	d0a9      	beq.n	800189a <menuActualizar+0xe6>
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194c:	485d      	ldr	r0, [pc, #372]	; (8001ac4 <menuActualizar+0x310>)
 800194e:	f001 fdbe 	bl	80034ce <HAL_GPIO_WritePin>
 8001952:	e7a2      	b.n	800189a <menuActualizar+0xe6>
		if(getDisparoAliens().numero_disparos != numero_aliens && getPlayer().vivo == true){
 8001954:	a811      	add	r0, sp, #68	; 0x44
 8001956:	f7fe fbfb 	bl	8000150 <getPlayer>
 800195a:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800195e:	2b01      	cmp	r3, #1
 8001960:	d1a4      	bne.n	80018ac <menuActualizar+0xf8>
			musica_t musica_ = explosion_;
 8001962:	f88d 3020 	strb.w	r3, [sp, #32]
			osStatus_t res = osMessageQueuePut(queueSonidoMenuHandle, &musica_, 0, 0);
 8001966:	2300      	movs	r3, #0
 8001968:	461a      	mov	r2, r3
 800196a:	a908      	add	r1, sp, #32
 800196c:	4854      	ldr	r0, [pc, #336]	; (8001ac0 <menuActualizar+0x30c>)
 800196e:	6800      	ldr	r0, [r0, #0]
 8001970:	f004 f950 	bl	8005c14 <osMessageQueuePut>
			if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001974:	2800      	cmp	r0, #0
 8001976:	d099      	beq.n	80018ac <menuActualizar+0xf8>
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800197e:	4851      	ldr	r0, [pc, #324]	; (8001ac4 <menuActualizar+0x310>)
 8001980:	f001 fda5 	bl	80034ce <HAL_GPIO_WritePin>
 8001984:	e792      	b.n	80018ac <menuActualizar+0xf8>
		SSD1306_GotoXY(25, 15);
 8001986:	210f      	movs	r1, #15
 8001988:	2019      	movs	r0, #25
 800198a:	f000 fb55 	bl	8002038 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJE: ", &Font_7x10, 1);
 800198e:	4c49      	ldr	r4, [pc, #292]	; (8001ab4 <menuActualizar+0x300>)
 8001990:	2201      	movs	r2, #1
 8001992:	4621      	mov	r1, r4
 8001994:	484c      	ldr	r0, [pc, #304]	; (8001ac8 <menuActualizar+0x314>)
 8001996:	f000 fba3 	bl	80020e0 <SSD1306_Puts>
		SSD1306_GotoXY(25, 35);
 800199a:	2123      	movs	r1, #35	; 0x23
 800199c:	2019      	movs	r0, #25
 800199e:	f000 fb4b 	bl	8002038 <SSD1306_GotoXY>
		SSD1306_Puts("VIDAS", &Font_7x10, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	4621      	mov	r1, r4
 80019a6:	4849      	ldr	r0, [pc, #292]	; (8001acc <menuActualizar+0x318>)
 80019a8:	f000 fb9a 	bl	80020e0 <SSD1306_Puts>
		SSD1306_DrawBitmap(65, 34, vida, 8, 8, 1);
 80019ac:	2501      	movs	r5, #1
 80019ae:	9501      	str	r5, [sp, #4]
 80019b0:	2308      	movs	r3, #8
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <menuActualizar+0x31c>)
 80019b6:	2122      	movs	r1, #34	; 0x22
 80019b8:	2041      	movs	r0, #65	; 0x41
 80019ba:	f000 faf3 	bl	8001fa4 <SSD1306_DrawBitmap>
		SSD1306_GotoXY(74, 34);
 80019be:	2122      	movs	r1, #34	; 0x22
 80019c0:	204a      	movs	r0, #74	; 0x4a
 80019c2:	f000 fb39 	bl	8002038 <SSD1306_GotoXY>
		SSD1306_Putc(':', &Font_7x10, 1);
 80019c6:	462a      	mov	r2, r5
 80019c8:	4621      	mov	r1, r4
 80019ca:	203a      	movs	r0, #58	; 0x3a
 80019cc:	f000 fb3a 	bl	8002044 <SSD1306_Putc>
		SSD1306_GotoXY(90, 15);
 80019d0:	210f      	movs	r1, #15
 80019d2:	205a      	movs	r0, #90	; 0x5a
 80019d4:	f000 fb30 	bl	8002038 <SSD1306_GotoXY>
		itoa(getPlayer().puntaje,(char*)buffer_puntaje,10);
 80019d8:	a814      	add	r0, sp, #80	; 0x50
 80019da:	f7fe fbb9 	bl	8000150 <getPlayer>
 80019de:	220a      	movs	r2, #10
 80019e0:	a908      	add	r1, sp, #32
 80019e2:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 80019e6:	f006 fbaf 	bl	8008148 <itoa>
		SSD1306_Puts((char *)buffer_puntaje, &Font_7x10, 1);
 80019ea:	462a      	mov	r2, r5
 80019ec:	4621      	mov	r1, r4
 80019ee:	a808      	add	r0, sp, #32
 80019f0:	f000 fb76 	bl	80020e0 <SSD1306_Puts>
		SSD1306_GotoXY(90, 34);
 80019f4:	2122      	movs	r1, #34	; 0x22
 80019f6:	205a      	movs	r0, #90	; 0x5a
 80019f8:	f000 fb1e 	bl	8002038 <SSD1306_GotoXY>
		itoa(getPlayer().vidas, &cantidad_vidas,10);
 80019fc:	a816      	add	r0, sp, #88	; 0x58
 80019fe:	f7fe fba7 	bl	8000150 <getPlayer>
 8001a02:	220a      	movs	r2, #10
 8001a04:	a905      	add	r1, sp, #20
 8001a06:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
 8001a0a:	f006 fb9d 	bl	8008148 <itoa>
		SSD1306_Puts(&cantidad_vidas, &Font_7x10, 1);
 8001a0e:	462a      	mov	r2, r5
 8001a10:	4621      	mov	r1, r4
 8001a12:	a805      	add	r0, sp, #20
 8001a14:	f000 fb64 	bl	80020e0 <SSD1306_Puts>
		AumentoNivel();		//Aqui se reinicializa el player y se aumenta la dificultad del nivel.
 8001a18:	f7ff f89e 	bl	8000b58 <AumentoNivel>
		InvaderInit();
 8001a1c:	f7fe fc16 	bl	800024c <InvaderInit>
		disparoInit();
 8001a20:	f7fe fdea 	bl	80005f8 <disparoInit>
		BasesInit();
 8001a24:	f7ff f872 	bl	8000b0c <BasesInit>
		if(y == arriba){
 8001a28:	2e00      	cmp	r6, #0
 8001a2a:	f040 810b 	bne.w	8001c44 <menuActualizar+0x490>
			menu.menuActual = juego;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <menuActualizar+0x2f8>)
 8001a30:	701d      	strb	r5, [r3, #0]
 8001a32:	e107      	b.n	8001c44 <menuActualizar+0x490>
		SSD1306_GotoXY(35, 0);
 8001a34:	2100      	movs	r1, #0
 8001a36:	2023      	movs	r0, #35	; 0x23
 8001a38:	f000 fafe 	bl	8002038 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	491d      	ldr	r1, [pc, #116]	; (8001ab4 <menuActualizar+0x300>)
 8001a40:	481e      	ldr	r0, [pc, #120]	; (8001abc <menuActualizar+0x308>)
 8001a42:	f000 fb4d 	bl	80020e0 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001a46:	2400      	movs	r4, #0
 8001a48:	2c04      	cmp	r4, #4
 8001a4a:	d812      	bhi.n	8001a72 <menuActualizar+0x2be>
			posicion = j*10 + 13;
 8001a4c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001a50:	0049      	lsls	r1, r1, #1
 8001a52:	b2c9      	uxtb	r1, r1
 8001a54:	310d      	adds	r1, #13
			SSD1306_GotoXY(15, posicion);
 8001a56:	b2c9      	uxtb	r1, r1
 8001a58:	200f      	movs	r0, #15
 8001a5a:	f000 faed 	bl	8002038 <SSD1306_GotoXY>
			SSD1306_Puts(getPuntajes(j)->nombre, &Font_7x10, 1);
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f7ff fccc 	bl	80013fc <getPuntajes>
 8001a64:	2201      	movs	r2, #1
 8001a66:	4913      	ldr	r1, [pc, #76]	; (8001ab4 <menuActualizar+0x300>)
 8001a68:	f000 fb3a 	bl	80020e0 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001a6c:	3401      	adds	r4, #1
 8001a6e:	b2e4      	uxtb	r4, r4
 8001a70:	e7ea      	b.n	8001a48 <menuActualizar+0x294>
		for(uint8_t j=0; j<5;j++){
 8001a72:	2400      	movs	r4, #0
 8001a74:	2c04      	cmp	r4, #4
 8001a76:	d82d      	bhi.n	8001ad4 <menuActualizar+0x320>
			posicion = j*10 + 13;
 8001a78:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001a7c:	0049      	lsls	r1, r1, #1
 8001a7e:	b2c9      	uxtb	r1, r1
 8001a80:	310d      	adds	r1, #13
			SSD1306_GotoXY(90, posicion);
 8001a82:	b2c9      	uxtb	r1, r1
 8001a84:	205a      	movs	r0, #90	; 0x5a
 8001a86:	f000 fad7 	bl	8002038 <SSD1306_GotoXY>
			itoa(getPuntajes(j)->puntaje,(char*)buffer,10);
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff fcb6 	bl	80013fc <getPuntajes>
 8001a90:	220a      	movs	r2, #10
 8001a92:	a908      	add	r1, sp, #32
 8001a94:	88c0      	ldrh	r0, [r0, #6]
 8001a96:	f006 fb57 	bl	8008148 <itoa>
			SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <menuActualizar+0x300>)
 8001a9e:	a808      	add	r0, sp, #32
 8001aa0:	f000 fb1e 	bl	80020e0 <SSD1306_Puts>
		for(uint8_t j=0; j<5;j++){
 8001aa4:	3401      	adds	r4, #1
 8001aa6:	b2e4      	uxtb	r4, r4
 8001aa8:	e7e4      	b.n	8001a74 <menuActualizar+0x2c0>
 8001aaa:	bf00      	nop
 8001aac:	20000bf0 	.word	0x20000bf0
 8001ab0:	08009b90 	.word	0x08009b90
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	08009b48 	.word	0x08009b48
 8001abc:	08009b50 	.word	0x08009b50
 8001ac0:	20000bc0 	.word	0x20000bc0
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	08009b5c 	.word	0x08009b5c
 8001acc:	08009b68 	.word	0x08009b68
 8001ad0:	08009e98 	.word	0x08009e98
		switch(y){
 8001ad4:	2e00      	cmp	r6, #0
 8001ad6:	f040 80b5 	bne.w	8001c44 <menuActualizar+0x490>
				menu.menuActual = menu_principal;
 8001ada:	4bb0      	ldr	r3, [pc, #704]	; (8001d9c <menuActualizar+0x5e8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]
			break;
 8001ae0:	e0b0      	b.n	8001c44 <menuActualizar+0x490>
		char buff_qwerty[] = "qwertyuiop";
 8001ae2:	4aaf      	ldr	r2, [pc, #700]	; (8001da0 <menuActualizar+0x5ec>)
 8001ae4:	ab05      	add	r3, sp, #20
 8001ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae8:	c303      	stmia	r3!, {r0, r1}
 8001aea:	f823 2b02 	strh.w	r2, [r3], #2
 8001aee:	0c12      	lsrs	r2, r2, #16
 8001af0:	701a      	strb	r2, [r3, #0]
		char buff_asdf[] = "asdfghjkl@";
 8001af2:	4aac      	ldr	r2, [pc, #688]	; (8001da4 <menuActualizar+0x5f0>)
 8001af4:	ab08      	add	r3, sp, #32
 8001af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001af8:	c303      	stmia	r3!, {r0, r1}
 8001afa:	f823 2b02 	strh.w	r2, [r3], #2
 8001afe:	0c12      	lsrs	r2, r2, #16
 8001b00:	701a      	strb	r2, [r3, #0]
		char buff_zxc[] = "zxcvbnm";
 8001b02:	4aa9      	ldr	r2, [pc, #676]	; (8001da8 <menuActualizar+0x5f4>)
 8001b04:	ab03      	add	r3, sp, #12
 8001b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b0a:	e883 0003 	stmia.w	r3, {r0, r1}
		SSD1306_DrawRectangle(30, 0, 60, 15, 1);
 8001b0e:	2301      	movs	r3, #1
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	230f      	movs	r3, #15
 8001b14:	223c      	movs	r2, #60	; 0x3c
 8001b16:	2100      	movs	r1, #0
 8001b18:	201e      	movs	r0, #30
 8001b1a:	f000 fb92 	bl	8002242 <SSD1306_DrawRectangle>
			for(uint8_t i=0;i<10;i++){
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e022      	b.n	8001b68 <menuActualizar+0x3b4>
				posicion_x = i*(12) + 6;
 8001b22:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8001b26:	00a4      	lsls	r4, r4, #2
 8001b28:	b2e4      	uxtb	r4, r4
 8001b2a:	3406      	adds	r4, #6
				SSD1306_GotoXY(posicion_x, 23);
 8001b2c:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
 8001b30:	2117      	movs	r1, #23
 8001b32:	4620      	mov	r0, r4
 8001b34:	f000 fa80 	bl	8002038 <SSD1306_GotoXY>
				SSD1306_Putc(buff_qwerty[i], &Font_7x10, 1);
 8001b38:	f8df a270 	ldr.w	sl, [pc, #624]	; 8001dac <menuActualizar+0x5f8>
 8001b3c:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8001b40:	eb0d 0903 	add.w	r9, sp, r3
 8001b44:	2201      	movs	r2, #1
 8001b46:	4651      	mov	r1, sl
 8001b48:	f819 0c54 	ldrb.w	r0, [r9, #-84]
 8001b4c:	f000 fa7a 	bl	8002044 <SSD1306_Putc>
				SSD1306_GotoXY(posicion_x, 38);
 8001b50:	2126      	movs	r1, #38	; 0x26
 8001b52:	4620      	mov	r0, r4
 8001b54:	f000 fa70 	bl	8002038 <SSD1306_GotoXY>
				SSD1306_Putc(buff_asdf[i], &Font_7x10, 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4651      	mov	r1, sl
 8001b5c:	f819 0c48 	ldrb.w	r0, [r9, #-72]
 8001b60:	f000 fa70 	bl	8002044 <SSD1306_Putc>
			for(uint8_t i=0;i<10;i++){
 8001b64:	3501      	adds	r5, #1
 8001b66:	b2ed      	uxtb	r5, r5
 8001b68:	2d09      	cmp	r5, #9
 8001b6a:	d9da      	bls.n	8001b22 <menuActualizar+0x36e>
			for(uint8_t i=0;i<7;i++){
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	e014      	b.n	8001b9a <menuActualizar+0x3e6>
				posicion_x = i*(12) + 26;
 8001b70:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8001b74:	0080      	lsls	r0, r0, #2
 8001b76:	b2c0      	uxtb	r0, r0
 8001b78:	301a      	adds	r0, #26
				SSD1306_GotoXY(posicion_x, 53);
 8001b7a:	2135      	movs	r1, #53	; 0x35
 8001b7c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
 8001b80:	f000 fa5a 	bl	8002038 <SSD1306_GotoXY>
				SSD1306_Putc(buff_zxc[i], &Font_7x10, 1);
 8001b84:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8001b88:	446b      	add	r3, sp
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4987      	ldr	r1, [pc, #540]	; (8001dac <menuActualizar+0x5f8>)
 8001b8e:	f813 0c5c 	ldrb.w	r0, [r3, #-92]
 8001b92:	f000 fa57 	bl	8002044 <SSD1306_Putc>
			for(uint8_t i=0;i<7;i++){
 8001b96:	3401      	adds	r4, #1
 8001b98:	b2e4      	uxtb	r4, r4
 8001b9a:	2c06      	cmp	r4, #6
 8001b9c:	d9e8      	bls.n	8001b70 <menuActualizar+0x3bc>
			SSD1306_DrawRectangle(3, 50, 16, 16, 1);
 8001b9e:	2401      	movs	r4, #1
 8001ba0:	9400      	str	r4, [sp, #0]
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2132      	movs	r1, #50	; 0x32
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 fb4a 	bl	8002242 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(8, 53);
 8001bae:	2135      	movs	r1, #53	; 0x35
 8001bb0:	2008      	movs	r0, #8
 8001bb2:	f000 fa41 	bl	8002038 <SSD1306_GotoXY>
			SSD1306_Putc(borrar, &Font_7x10, 1);
 8001bb6:	4d7d      	ldr	r5, [pc, #500]	; (8001dac <menuActualizar+0x5f8>)
 8001bb8:	4622      	mov	r2, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	2078      	movs	r0, #120	; 0x78
 8001bbe:	f000 fa41 	bl	8002044 <SSD1306_Putc>
			SSD1306_DrawRectangle(108, 50, 16, 16, 1);
 8001bc2:	9400      	str	r4, [sp, #0]
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2132      	movs	r1, #50	; 0x32
 8001bca:	206c      	movs	r0, #108	; 0x6c
 8001bcc:	f000 fb39 	bl	8002242 <SSD1306_DrawRectangle>
			SSD1306_GotoXY(113, 53);
 8001bd0:	2135      	movs	r1, #53	; 0x35
 8001bd2:	2071      	movs	r0, #113	; 0x71
 8001bd4:	f000 fa30 	bl	8002038 <SSD1306_GotoXY>
			SSD1306_Putc(enter, &Font_7x10, 1);
 8001bd8:	4622      	mov	r2, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	203c      	movs	r0, #60	; 0x3c
 8001bde:	f000 fa31 	bl	8002044 <SSD1306_Putc>
			switch(y){
 8001be2:	b396      	cbz	r6, 8001c4a <menuActualizar+0x496>
 8001be4:	42a6      	cmp	r6, r4
 8001be6:	d132      	bne.n	8001c4e <menuActualizar+0x49a>
					mov = abajo;
 8001be8:	4634      	mov	r4, r6
			Timenow = xTaskGetTickCount();
 8001bea:	f005 f9eb 	bl	8006fc4 <xTaskGetTickCount>
			if((Timenow - menu.GuardarNombre.xLastWakeTime_y) > pdMS_TO_TICKS(150) && (y!=nulo)){
 8001bee:	4b6b      	ldr	r3, [pc, #428]	; (8001d9c <menuActualizar+0x5e8>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	1ac0      	subs	r0, r0, r3
 8001bf4:	2896      	cmp	r0, #150	; 0x96
 8001bf6:	d901      	bls.n	8001bfc <menuActualizar+0x448>
 8001bf8:	2e04      	cmp	r6, #4
 8001bfa:	d12a      	bne.n	8001c52 <menuActualizar+0x49e>
			Timenow = xTaskGetTickCount();
 8001bfc:	f005 f9e2 	bl	8006fc4 <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_x) > pdMS_TO_TICKS(100) && (x!=nulo) ){
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <menuActualizar+0x5e8>)
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	1ac0      	subs	r0, r0, r3
 8001c06:	2864      	cmp	r0, #100	; 0x64
 8001c08:	d902      	bls.n	8001c10 <menuActualizar+0x45c>
 8001c0a:	f1b8 0f04 	cmp.w	r8, #4
 8001c0e:	d17f      	bne.n	8001d10 <menuActualizar+0x55c>
			Timenow = xTaskGetTickCount();
 8001c10:	f005 f9d8 	bl	8006fc4 <xTaskGetTickCount>
		if((Timenow - menu.GuardarNombre.xLastWakeTime_boton) > pdMS_TO_TICKS(100) && (boton !=false) ){
 8001c14:	4b61      	ldr	r3, [pc, #388]	; (8001d9c <menuActualizar+0x5e8>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	1ac0      	subs	r0, r0, r3
 8001c1a:	2864      	cmp	r0, #100	; 0x64
 8001c1c:	d902      	bls.n	8001c24 <menuActualizar+0x470>
 8001c1e:	2f00      	cmp	r7, #0
 8001c20:	f040 80d0 	bne.w	8001dc4 <menuActualizar+0x610>
				SSD1306_DrawFilledCircle(menu.GuardarNombre.posicion_x,  menu.GuardarNombre.posicion_y, 5, 1);
 8001c24:	4c5d      	ldr	r4, [pc, #372]	; (8001d9c <menuActualizar+0x5e8>)
 8001c26:	2301      	movs	r3, #1
 8001c28:	2205      	movs	r2, #5
 8001c2a:	7961      	ldrb	r1, [r4, #5]
 8001c2c:	7920      	ldrb	r0, [r4, #4]
 8001c2e:	f000 fbe5 	bl	80023fc <SSD1306_DrawFilledCircle>
				SSD1306_GotoXY(43, 5);
 8001c32:	2105      	movs	r1, #5
 8001c34:	202b      	movs	r0, #43	; 0x2b
 8001c36:	f000 f9ff 	bl	8002038 <SSD1306_GotoXY>
				SSD1306_Puts(menu.GuardarNombre.nombre, &Font_7x10, 1);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	495b      	ldr	r1, [pc, #364]	; (8001dac <menuActualizar+0x5f8>)
 8001c3e:	1da0      	adds	r0, r4, #6
 8001c40:	f000 fa4e 	bl	80020e0 <SSD1306_Puts>
}
 8001c44:	b01a      	add	sp, #104	; 0x68
 8001c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c4a:	4634      	mov	r4, r6
 8001c4c:	e7cd      	b.n	8001bea <menuActualizar+0x436>
					mov = x;
 8001c4e:	4644      	mov	r4, r8
 8001c50:	e7cb      	b.n	8001bea <menuActualizar+0x436>
				menu.GuardarNombre.xLastWakeTime_y = xTaskGetTickCount();
 8001c52:	f005 f9b7 	bl	8006fc4 <xTaskGetTickCount>
 8001c56:	4b51      	ldr	r3, [pc, #324]	; (8001d9c <menuActualizar+0x5e8>)
 8001c58:	6158      	str	r0, [r3, #20]
			switch(mov){
 8001c5a:	b1cc      	cbz	r4, 8001c90 <menuActualizar+0x4dc>
 8001c5c:	2c01      	cmp	r4, #1
 8001c5e:	d1cd      	bne.n	8001bfc <menuActualizar+0x448>
					switch(menu.GuardarNombre.posicion_y){
 8001c60:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <menuActualizar+0x5e8>)
 8001c62:	795b      	ldrb	r3, [r3, #5]
 8001c64:	2b1b      	cmp	r3, #27
 8001c66:	d03e      	beq.n	8001ce6 <menuActualizar+0x532>
 8001c68:	2b2a      	cmp	r3, #42	; 0x2a
 8001c6a:	d1c7      	bne.n	8001bfc <menuActualizar+0x448>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y3;
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <menuActualizar+0x5e8>)
 8001c6e:	2239      	movs	r2, #57	; 0x39
 8001c70:	715a      	strb	r2, [r3, #5]
							div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X_INICIAL);
 8001c72:	791b      	ldrb	r3, [r3, #4]
 8001c74:	3b09      	subs	r3, #9
 8001c76:	b25b      	sxtb	r3, r3
							div = div/GUARDADO_OFFSET_X_CURSOR;
 8001c78:	4a4d      	ldr	r2, [pc, #308]	; (8001db0 <menuActualizar+0x5fc>)
 8001c7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c7e:	17db      	asrs	r3, r3, #31
 8001c80:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8001c84:	b25b      	sxtb	r3, r3
							if(div == 0){
 8001c86:	bb93      	cbnz	r3, 8001cee <menuActualizar+0x53a>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001c88:	4b44      	ldr	r3, [pc, #272]	; (8001d9c <menuActualizar+0x5e8>)
 8001c8a:	220b      	movs	r2, #11
 8001c8c:	711a      	strb	r2, [r3, #4]
 8001c8e:	e7b5      	b.n	8001bfc <menuActualizar+0x448>
					switch(menu.GuardarNombre.posicion_y){
 8001c90:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <menuActualizar+0x5e8>)
 8001c92:	795b      	ldrb	r3, [r3, #5]
 8001c94:	2b2a      	cmp	r3, #42	; 0x2a
 8001c96:	d01a      	beq.n	8001cce <menuActualizar+0x51a>
 8001c98:	2b39      	cmp	r3, #57	; 0x39
 8001c9a:	d1af      	bne.n	8001bfc <menuActualizar+0x448>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <menuActualizar+0x5e8>)
 8001c9e:	222a      	movs	r2, #42	; 0x2a
 8001ca0:	715a      	strb	r2, [r3, #5]
							if(menu.GuardarNombre.posicion_x >= GUARDADO_POSICION_X3_INICIAL ){
 8001ca2:	791b      	ldrb	r3, [r3, #4]
 8001ca4:	2b1b      	cmp	r3, #27
 8001ca6:	d91a      	bls.n	8001cde <menuActualizar+0x52a>
								div = menu.GuardarNombre.posicion_x - (GUARDADO_POSICION_X3_INICIAL);
 8001ca8:	3b1c      	subs	r3, #28
 8001caa:	b25b      	sxtb	r3, r3
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db12      	blt.n	8001cd6 <menuActualizar+0x522>
									div = div / GUARDADO_OFFSET_X_CURSOR;
 8001cb0:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <menuActualizar+0x5fc>)
 8001cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cb6:	17db      	asrs	r3, r3, #31
 8001cb8:	ebc3 0362 	rsb	r3, r3, r2, asr #1
 8001cbc:	b25b      	sxtb	r3, r3
									 menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL + (div+1)*GUARDADO_OFFSET_X_CURSOR ;
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	3309      	adds	r3, #9
 8001cc8:	4a34      	ldr	r2, [pc, #208]	; (8001d9c <menuActualizar+0x5e8>)
 8001cca:	7113      	strb	r3, [r2, #4]
 8001ccc:	e796      	b.n	8001bfc <menuActualizar+0x448>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y1;
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <menuActualizar+0x5e8>)
 8001cd0:	221b      	movs	r2, #27
 8001cd2:	715a      	strb	r2, [r3, #5]
							break;
 8001cd4:	e792      	b.n	8001bfc <menuActualizar+0x448>
								if(div < 0) menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <menuActualizar+0x5e8>)
 8001cd8:	2209      	movs	r2, #9
 8001cda:	711a      	strb	r2, [r3, #4]
 8001cdc:	e78e      	b.n	8001bfc <menuActualizar+0x448>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <menuActualizar+0x5e8>)
 8001ce0:	2209      	movs	r2, #9
 8001ce2:	711a      	strb	r2, [r3, #4]
 8001ce4:	e78a      	b.n	8001bfc <menuActualizar+0x448>
							menu.GuardarNombre.posicion_y = GUARDADO_POSICION_Y2;
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <menuActualizar+0x5e8>)
 8001ce8:	222a      	movs	r2, #42	; 0x2a
 8001cea:	715a      	strb	r2, [r3, #5]
							break;
 8001cec:	e786      	b.n	8001bfc <menuActualizar+0x448>
							else if(div == 8 || div == 9){
 8001cee:	f1a3 0208 	sub.w	r2, r3, #8
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	2a01      	cmp	r2, #1
 8001cf6:	d907      	bls.n	8001d08 <menuActualizar+0x554>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL + (div-1)*GUARDADO_OFFSET_X_CURSOR;
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	331c      	adds	r3, #28
 8001d02:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <menuActualizar+0x5e8>)
 8001d04:	7113      	strb	r3, [r2, #4]
 8001d06:	e779      	b.n	8001bfc <menuActualizar+0x448>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <menuActualizar+0x5e8>)
 8001d0a:	2274      	movs	r2, #116	; 0x74
 8001d0c:	711a      	strb	r2, [r3, #4]
 8001d0e:	e775      	b.n	8001bfc <menuActualizar+0x448>
			menu.GuardarNombre.xLastWakeTime_x= xTaskGetTickCount();
 8001d10:	f005 f958 	bl	8006fc4 <xTaskGetTickCount>
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <menuActualizar+0x5e8>)
 8001d16:	6118      	str	r0, [r3, #16]
			switch(mov){
 8001d18:	2c02      	cmp	r4, #2
 8001d1a:	d024      	beq.n	8001d66 <menuActualizar+0x5b2>
 8001d1c:	2c03      	cmp	r4, #3
 8001d1e:	f47f af77 	bne.w	8001c10 <menuActualizar+0x45c>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x - GUARDADO_OFFSET_X_CURSOR;
 8001d22:	461a      	mov	r2, r3
 8001d24:	791b      	ldrb	r3, [r3, #4]
 8001d26:	3b0c      	subs	r3, #12
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001d2c:	7952      	ldrb	r2, [r2, #5]
 8001d2e:	2a39      	cmp	r2, #57	; 0x39
 8001d30:	d006      	beq.n	8001d40 <menuActualizar+0x58c>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_INICIAL - GUARDADO_OFFSET_X_CURSOR)){
 8001d32:	2bfd      	cmp	r3, #253	; 0xfd
 8001d34:	f47f af6c 	bne.w	8001c10 <menuActualizar+0x45c>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_FINAL;
 8001d38:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <menuActualizar+0x5e8>)
 8001d3a:	2275      	movs	r2, #117	; 0x75
 8001d3c:	711a      	strb	r2, [r3, #4]
 8001d3e:	e767      	b.n	8001c10 <menuActualizar+0x45c>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_INICIAL - GUARDADO_OFFSET_X_CURSOR) ){
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d008      	beq.n	8001d56 <menuActualizar+0x5a2>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER - GUARDADO_OFFSET_X_CURSOR)){
 8001d44:	2b68      	cmp	r3, #104	; 0x68
 8001d46:	d00a      	beq.n	8001d5e <menuActualizar+0x5aa>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR - GUARDADO_OFFSET_X_CURSOR)){
 8001d48:	2bff      	cmp	r3, #255	; 0xff
 8001d4a:	f47f af61 	bne.w	8001c10 <menuActualizar+0x45c>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <menuActualizar+0x5e8>)
 8001d50:	220b      	movs	r2, #11
 8001d52:	711a      	strb	r2, [r3, #4]
 8001d54:	e75c      	b.n	8001c10 <menuActualizar+0x45c>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <menuActualizar+0x5e8>)
 8001d58:	220b      	movs	r2, #11
 8001d5a:	711a      	strb	r2, [r3, #4]
 8001d5c:	e758      	b.n	8001c10 <menuActualizar+0x45c>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_FINAL;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <menuActualizar+0x5e8>)
 8001d60:	2264      	movs	r2, #100	; 0x64
 8001d62:	711a      	strb	r2, [r3, #4]
 8001d64:	e754      	b.n	8001c10 <menuActualizar+0x45c>
					menu.GuardarNombre.posicion_x = menu.GuardarNombre.posicion_x + GUARDADO_OFFSET_X_CURSOR;
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <menuActualizar+0x5e8>)
 8001d68:	7913      	ldrb	r3, [r2, #4]
 8001d6a:	330c      	adds	r3, #12
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	7113      	strb	r3, [r2, #4]
					if(menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3){
 8001d70:	7952      	ldrb	r2, [r2, #5]
 8001d72:	2a39      	cmp	r2, #57	; 0x39
 8001d74:	d006      	beq.n	8001d84 <menuActualizar+0x5d0>
						if(menu.GuardarNombre.posicion_x > GUARDADO_POSICION_X_FINAL){
 8001d76:	2b75      	cmp	r3, #117	; 0x75
 8001d78:	f67f af4a 	bls.w	8001c10 <menuActualizar+0x45c>
								menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_INICIAL;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <menuActualizar+0x5e8>)
 8001d7e:	2209      	movs	r2, #9
 8001d80:	711a      	strb	r2, [r3, #4]
 8001d82:	e745      	b.n	8001c10 <menuActualizar+0x45c>
						if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X3_FINAL + GUARDADO_OFFSET_X_CURSOR)){
 8001d84:	2b70      	cmp	r3, #112	; 0x70
 8001d86:	d015      	beq.n	8001db4 <menuActualizar+0x600>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_ENTER + GUARDADO_OFFSET_X_CURSOR)){
 8001d88:	2b80      	cmp	r3, #128	; 0x80
 8001d8a:	d017      	beq.n	8001dbc <menuActualizar+0x608>
						else if(menu.GuardarNombre.posicion_x == (uint8_t)(GUARDADO_POSICION_X_BORRAR + GUARDADO_OFFSET_X_CURSOR)){
 8001d8c:	2b17      	cmp	r3, #23
 8001d8e:	f47f af3f 	bne.w	8001c10 <menuActualizar+0x45c>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X3_INICIAL;
 8001d92:	4b02      	ldr	r3, [pc, #8]	; (8001d9c <menuActualizar+0x5e8>)
 8001d94:	221c      	movs	r2, #28
 8001d96:	711a      	strb	r2, [r3, #4]
 8001d98:	e73a      	b.n	8001c10 <menuActualizar+0x45c>
 8001d9a:	bf00      	nop
 8001d9c:	20000bf0 	.word	0x20000bf0
 8001da0:	08009b70 	.word	0x08009b70
 8001da4:	08009b7c 	.word	0x08009b7c
 8001da8:	08009b88 	.word	0x08009b88
 8001dac:	20000000 	.word	0x20000000
 8001db0:	2aaaaaab 	.word	0x2aaaaaab
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_ENTER;
 8001db4:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <menuActualizar+0x764>)
 8001db6:	2274      	movs	r2, #116	; 0x74
 8001db8:	711a      	strb	r2, [r3, #4]
 8001dba:	e729      	b.n	8001c10 <menuActualizar+0x45c>
							menu.GuardarNombre.posicion_x = GUARDADO_POSICION_X_BORRAR;
 8001dbc:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <menuActualizar+0x764>)
 8001dbe:	220b      	movs	r2, #11
 8001dc0:	711a      	strb	r2, [r3, #4]
 8001dc2:	e725      	b.n	8001c10 <menuActualizar+0x45c>
			menu.GuardarNombre.xLastWakeTime_boton= xTaskGetTickCount();
 8001dc4:	f005 f8fe 	bl	8006fc4 <xTaskGetTickCount>
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <menuActualizar+0x764>)
 8001dca:	6198      	str	r0, [r3, #24]
			if((boton == true) && (menu.GuardarNombre.indice <= 5)){
 8001dcc:	2f01      	cmp	r7, #1
 8001dce:	f47f af29 	bne.w	8001c24 <menuActualizar+0x470>
 8001dd2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	f73f af24 	bgt.w	8001c24 <menuActualizar+0x470>
						if((menu.GuardarNombre.posicion_y != GUARDADO_POSICION_Y3)){
 8001ddc:	4a4e      	ldr	r2, [pc, #312]	; (8001f18 <menuActualizar+0x764>)
 8001dde:	7951      	ldrb	r1, [r2, #5]
 8001de0:	2939      	cmp	r1, #57	; 0x39
 8001de2:	d02f      	beq.n	8001e44 <menuActualizar+0x690>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X_INICIAL;
 8001de4:	7912      	ldrb	r2, [r2, #4]
 8001de6:	3a09      	subs	r2, #9
 8001de8:	b252      	sxtb	r2, r2
							div = div / (GUARDADO_OFFSET_X_CURSOR);
 8001dea:	484c      	ldr	r0, [pc, #304]	; (8001f1c <menuActualizar+0x768>)
 8001dec:	fb80 4002 	smull	r4, r0, r0, r2
 8001df0:	17d2      	asrs	r2, r2, #31
 8001df2:	ebc2 0260 	rsb	r2, r2, r0, asr #1
 8001df6:	b252      	sxtb	r2, r2
							if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y1)){
 8001df8:	291b      	cmp	r1, #27
 8001dfa:	d00d      	beq.n	8001e18 <menuActualizar+0x664>
							else if((menu.GuardarNombre.posicion_y == GUARDADO_POSICION_Y2)){
 8001dfc:	292a      	cmp	r1, #42	; 0x2a
 8001dfe:	d016      	beq.n	8001e2e <menuActualizar+0x67a>
						if(menu.GuardarNombre.indice > 5){
 8001e00:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <menuActualizar+0x764>)
 8001e02:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	f77f af0c 	ble.w	8001c24 <menuActualizar+0x470>
							menu.GuardarNombre.indice = 5;
 8001e0c:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <menuActualizar+0x764>)
 8001e0e:	2205      	movs	r2, #5
 8001e10:	731a      	strb	r2, [r3, #12]
							menu.GuardarNombre.nombre[5] = '\0';
 8001e12:	2200      	movs	r2, #0
 8001e14:	72da      	strb	r2, [r3, #11]
 8001e16:	e705      	b.n	8001c24 <menuActualizar+0x470>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_qwerty[div];
 8001e18:	3268      	adds	r2, #104	; 0x68
 8001e1a:	446a      	add	r2, sp
 8001e1c:	f812 0c54 	ldrb.w	r0, [r2, #-84]
 8001e20:	4a3d      	ldr	r2, [pc, #244]	; (8001f18 <menuActualizar+0x764>)
 8001e22:	18d1      	adds	r1, r2, r3
 8001e24:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	7313      	strb	r3, [r2, #12]
 8001e2c:	e7e8      	b.n	8001e00 <menuActualizar+0x64c>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_asdf[div];
 8001e2e:	3268      	adds	r2, #104	; 0x68
 8001e30:	446a      	add	r2, sp
 8001e32:	f812 0c48 	ldrb.w	r0, [r2, #-72]
 8001e36:	4a38      	ldr	r2, [pc, #224]	; (8001f18 <menuActualizar+0x764>)
 8001e38:	18d1      	adds	r1, r2, r3
 8001e3a:	7188      	strb	r0, [r1, #6]
								menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	7313      	strb	r3, [r2, #12]
 8001e42:	e7dd      	b.n	8001e00 <menuActualizar+0x64c>
							div = menu.GuardarNombre.posicion_x - GUARDADO_POSICION_X3_INICIAL;
 8001e44:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <menuActualizar+0x764>)
 8001e46:	7912      	ldrb	r2, [r2, #4]
 8001e48:	3a1c      	subs	r2, #28
 8001e4a:	b252      	sxtb	r2, r2
							if(div < 0){	//SI SE APRIETA EL BOTON BORRAR
 8001e4c:	2a00      	cmp	r2, #0
 8001e4e:	db0f      	blt.n	8001e70 <menuActualizar+0x6bc>
								div = div / GUARDADO_OFFSET_X_CURSOR;
 8001e50:	210c      	movs	r1, #12
 8001e52:	fb92 f2f1 	sdiv	r2, r2, r1
									if(div == 7){	//SI SE APRIETA EL BOTON ENTER
 8001e56:	2a07      	cmp	r2, #7
 8001e58:	d01c      	beq.n	8001e94 <menuActualizar+0x6e0>
										menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = buff_zxc[div];
 8001e5a:	3268      	adds	r2, #104	; 0x68
 8001e5c:	446a      	add	r2, sp
 8001e5e:	f812 0c5c 	ldrb.w	r0, [r2, #-92]
 8001e62:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <menuActualizar+0x764>)
 8001e64:	18d1      	adds	r1, r2, r3
 8001e66:	7188      	strb	r0, [r1, #6]
										menu.GuardarNombre.indice = menu.GuardarNombre.indice + 1;
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	7313      	strb	r3, [r2, #12]
 8001e6e:	e7c7      	b.n	8001e00 <menuActualizar+0x64c>
								menu.GuardarNombre.indice = menu.GuardarNombre.indice - 1;
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <menuActualizar+0x764>)
 8001e78:	7313      	strb	r3, [r2, #12]
								if(menu.GuardarNombre.indice < 0){
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db06      	blt.n	8001e8c <menuActualizar+0x6d8>
								menu.GuardarNombre.nombre[menu.GuardarNombre.indice] = '\0';
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <menuActualizar+0x764>)
 8001e80:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8001e84:	4413      	add	r3, r2
 8001e86:	2200      	movs	r2, #0
 8001e88:	719a      	strb	r2, [r3, #6]
 8001e8a:	e7b9      	b.n	8001e00 <menuActualizar+0x64c>
										menu.GuardarNombre.indice = 0;
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	2200      	movs	r2, #0
 8001e90:	731a      	strb	r2, [r3, #12]
 8001e92:	e7f4      	b.n	8001e7e <menuActualizar+0x6ca>
										if((menu.GuardarNombre.indice != 0 )){
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0b3      	beq.n	8001e00 <menuActualizar+0x64c>
											osMutexAcquire(myMutexPuntajeHandle, osWaitForever);
 8001e98:	4c21      	ldr	r4, [pc, #132]	; (8001f20 <menuActualizar+0x76c>)
 8001e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9e:	6820      	ldr	r0, [r4, #0]
 8001ea0:	f003 fd72 	bl	8005988 <osMutexAcquire>
											getPuntajes(4)->puntaje  = getPlayer().puntaje;
 8001ea4:	a818      	add	r0, sp, #96	; 0x60
 8001ea6:	f7fe f953 	bl	8000150 <getPlayer>
 8001eaa:	2004      	movs	r0, #4
 8001eac:	f7ff faa6 	bl	80013fc <getPuntajes>
 8001eb0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8001eb4:	80c3      	strh	r3, [r0, #6]
											strcpy(getPuntajes(4)->nombre,menu.GuardarNombre.nombre);
 8001eb6:	2004      	movs	r0, #4
 8001eb8:	f7ff faa0 	bl	80013fc <getPuntajes>
 8001ebc:	4919      	ldr	r1, [pc, #100]	; (8001f24 <menuActualizar+0x770>)
 8001ebe:	f006 fb46 	bl	800854e <strcpy>
											osMutexRelease(myMutexPuntajeHandle);
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	f003 fda2 	bl	8005a0c <osMutexRelease>
										    osEventFlagsSet(notificationFlag, NOTIFICATION_VALUE);
 8001ec8:	2101      	movs	r1, #1
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <menuActualizar+0x774>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	f003 fc71 	bl	80057b4 <osEventFlagsSet>
										    uint32_t flags = osEventFlagsWait(notificationFlag2, NOTIFICATION_VALUE2, osFlagsWaitAny, osWaitForever);
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4814      	ldr	r0, [pc, #80]	; (8001f2c <menuActualizar+0x778>)
 8001edc:	6800      	ldr	r0, [r0, #0]
 8001ede:	f003 fca7 	bl	8005830 <osEventFlagsWait>
										    if (flags == NOTIFICATION_VALUE2){
 8001ee2:	2802      	cmp	r0, #2
 8001ee4:	d18c      	bne.n	8001e00 <menuActualizar+0x64c>
										    	menuReset();
 8001ee6:	f7ff fc41 	bl	800176c <menuReset>
										    	menu.menuActual = puntajes;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <menuActualizar+0x764>)
 8001eec:	2203      	movs	r2, #3
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e786      	b.n	8001e00 <menuActualizar+0x64c>
		SSD1306_DrawBitmap(15, 10, game_over_figura, 100, 40, 1);
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	2328      	movs	r3, #40	; 0x28
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <menuActualizar+0x77c>)
 8001efe:	210a      	movs	r1, #10
 8001f00:	200f      	movs	r0, #15
 8001f02:	f000 f84f 	bl	8001fa4 <SSD1306_DrawBitmap>
		if(y == arriba){
 8001f06:	2e00      	cmp	r6, #0
 8001f08:	f47f ae9c 	bne.w	8001c44 <menuActualizar+0x490>
			GuardarNombreReset();
 8001f0c:	f7ff fc40 	bl	8001790 <GuardarNombreReset>
			menu.menuActual = guardar_nombre;
 8001f10:	4b01      	ldr	r3, [pc, #4]	; (8001f18 <menuActualizar+0x764>)
 8001f12:	2204      	movs	r2, #4
 8001f14:	701a      	strb	r2, [r3, #0]
}
 8001f16:	e695      	b.n	8001c44 <menuActualizar+0x490>
 8001f18:	20000bf0 	.word	0x20000bf0
 8001f1c:	2aaaaaab 	.word	0x2aaaaaab
 8001f20:	20000ba8 	.word	0x20000ba8
 8001f24:	20000bf6 	.word	0x20000bf6
 8001f28:	20000bb0 	.word	0x20000bb0
 8001f2c:	20000bb4 	.word	0x20000bb4
 8001f30:	08009c90 	.word	0x08009c90

08001f34 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001f34:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f36:	b930      	cbnz	r0, 8001f46 <SSD1306_Fill+0x12>
 8001f38:	2100      	movs	r1, #0
 8001f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <SSD1306_Fill+0x18>)
 8001f40:	f006 fa89 	bl	8008456 <memset>
}
 8001f44:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f46:	21ff      	movs	r1, #255	; 0xff
 8001f48:	e7f7      	b.n	8001f3a <SSD1306_Fill+0x6>
 8001f4a:	bf00      	nop
 8001f4c:	20000c1c 	.word	0x20000c1c

08001f50 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001f50:	287f      	cmp	r0, #127	; 0x7f
 8001f52:	d816      	bhi.n	8001f82 <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 8001f54:	293f      	cmp	r1, #63	; 0x3f
 8001f56:	d814      	bhi.n	8001f82 <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <SSD1306_DrawPixel+0x4c>)
 8001f5a:	791b      	ldrb	r3, [r3, #4]
 8001f5c:	b113      	cbz	r3, 8001f64 <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 8001f5e:	fab2 f282 	clz	r2, r2
 8001f62:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001f64:	2a01      	cmp	r2, #1
 8001f66:	d00d      	beq.n	8001f84 <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001f68:	08cb      	lsrs	r3, r1, #3
 8001f6a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001f6e:	f001 0107 	and.w	r1, r1, #7
 8001f72:	2301      	movs	r3, #1
 8001f74:	408b      	lsls	r3, r1
 8001f76:	43db      	mvns	r3, r3
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	4909      	ldr	r1, [pc, #36]	; (8001fa0 <SSD1306_DrawPixel+0x50>)
 8001f7c:	5c0a      	ldrb	r2, [r1, r0]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	540b      	strb	r3, [r1, r0]
	}
}
 8001f82:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001f84:	08cb      	lsrs	r3, r1, #3
 8001f86:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001f8a:	f001 0107 	and.w	r1, r1, #7
 8001f8e:	408a      	lsls	r2, r1
 8001f90:	4903      	ldr	r1, [pc, #12]	; (8001fa0 <SSD1306_DrawPixel+0x50>)
 8001f92:	5c0b      	ldrb	r3, [r1, r0]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	540b      	strb	r3, [r1, r0]
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000c14 	.word	0x20000c14
 8001fa0:	20000c1c 	.word	0x20000c1c

08001fa4 <SSD1306_DrawBitmap>:
{
 8001fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	4683      	mov	fp, r0
 8001fac:	4688      	mov	r8, r1
 8001fae:	4692      	mov	sl, r2
 8001fb0:	461e      	mov	r6, r3
 8001fb2:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8001fbc:	9300      	str	r3, [sp, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001fbe:	f116 0907 	adds.w	r9, r6, #7
 8001fc2:	d404      	bmi.n	8001fce <SSD1306_DrawBitmap+0x2a>
 8001fc4:	ea4f 09e9 	mov.w	r9, r9, asr #3
    for(int16_t j=0; j<h; j++, y++)
 8001fc8:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8001fca:	463d      	mov	r5, r7
    for(int16_t j=0; j<h; j++, y++)
 8001fcc:	e02c      	b.n	8002028 <SSD1306_DrawBitmap+0x84>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001fce:	f109 0907 	add.w	r9, r9, #7
 8001fd2:	e7f7      	b.n	8001fc4 <SSD1306_DrawBitmap+0x20>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001fd4:	fb09 f107 	mul.w	r1, r9, r7
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db12      	blt.n	8002004 <SSD1306_DrawBitmap+0x60>
 8001fde:	f342 02cf 	sbfx	r2, r2, #3, #16
 8001fe2:	188b      	adds	r3, r1, r2
 8001fe4:	f81a 5003 	ldrb.w	r5, [sl, r3]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8001fe8:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001fec:	d10c      	bne.n	8002008 <SSD1306_DrawBitmap+0x64>
        for(int16_t i=0; i<w; i++)
 8001fee:	3401      	adds	r4, #1
 8001ff0:	b223      	sxth	r3, r4
 8001ff2:	42b3      	cmp	r3, r6
 8001ff4:	da12      	bge.n	800201c <SSD1306_DrawBitmap+0x78>
            if(i & 7)
 8001ff6:	b29c      	uxth	r4, r3
 8001ff8:	f013 0f07 	tst.w	r3, #7
 8001ffc:	d0ea      	beq.n	8001fd4 <SSD1306_DrawBitmap+0x30>
               byte <<= 1;
 8001ffe:	006d      	lsls	r5, r5, #1
 8002000:	b2ed      	uxtb	r5, r5
 8002002:	e7f1      	b.n	8001fe8 <SSD1306_DrawBitmap+0x44>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002004:	1dda      	adds	r2, r3, #7
 8002006:	e7ea      	b.n	8001fde <SSD1306_DrawBitmap+0x3a>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002008:	eb04 000b 	add.w	r0, r4, fp
 800200c:	f89d 2000 	ldrb.w	r2, [sp]
 8002010:	fa1f f188 	uxth.w	r1, r8
 8002014:	b280      	uxth	r0, r0
 8002016:	f7ff ff9b 	bl	8001f50 <SSD1306_DrawPixel>
 800201a:	e7e8      	b.n	8001fee <SSD1306_DrawBitmap+0x4a>
    for(int16_t j=0; j<h; j++, y++)
 800201c:	3701      	adds	r7, #1
 800201e:	b23f      	sxth	r7, r7
 8002020:	f108 0801 	add.w	r8, r8, #1
 8002024:	fa0f f888 	sxth.w	r8, r8
 8002028:	9b01      	ldr	r3, [sp, #4]
 800202a:	429f      	cmp	r7, r3
 800202c:	da01      	bge.n	8002032 <SSD1306_DrawBitmap+0x8e>
        for(int16_t i=0; i<w; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	e7df      	b.n	8001ff2 <SSD1306_DrawBitmap+0x4e>
}
 8002032:	b003      	add	sp, #12
 8002034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002038 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002038:	4b01      	ldr	r3, [pc, #4]	; (8002040 <SSD1306_GotoXY+0x8>)
 800203a:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 800203c:	8059      	strh	r1, [r3, #2]
}
 800203e:	4770      	bx	lr
 8002040:	20000c14 	.word	0x20000c14

08002044 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002048:	4690      	mov	r8, r2
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <SSD1306_Putc+0x98>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	780a      	ldrb	r2, [r1, #0]
 8002050:	4413      	add	r3, r2
	if (
 8002052:	2b7f      	cmp	r3, #127	; 0x7f
 8002054:	dc3e      	bgt.n	80020d4 <SSD1306_Putc+0x90>
 8002056:	4681      	mov	r9, r0
 8002058:	460d      	mov	r5, r1
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <SSD1306_Putc+0x98>)
 800205c:	885b      	ldrh	r3, [r3, #2]
 800205e:	784a      	ldrb	r2, [r1, #1]
 8002060:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002062:	2b3f      	cmp	r3, #63	; 0x3f
 8002064:	dc38      	bgt.n	80020d8 <SSD1306_Putc+0x94>
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002066:	2600      	movs	r6, #0
 8002068:	e020      	b.n	80020ac <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <SSD1306_Putc+0x98>)
 800206c:	8818      	ldrh	r0, [r3, #0]
 800206e:	8859      	ldrh	r1, [r3, #2]
 8002070:	4431      	add	r1, r6
 8002072:	4420      	add	r0, r4
 8002074:	fab8 f288 	clz	r2, r8
 8002078:	0952      	lsrs	r2, r2, #5
 800207a:	b289      	uxth	r1, r1
 800207c:	b280      	uxth	r0, r0
 800207e:	f7ff ff67 	bl	8001f50 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002082:	3401      	adds	r4, #1
 8002084:	782b      	ldrb	r3, [r5, #0]
 8002086:	42a3      	cmp	r3, r4
 8002088:	d90f      	bls.n	80020aa <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 800208a:	fa07 f304 	lsl.w	r3, r7, r4
 800208e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002092:	d0ea      	beq.n	800206a <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <SSD1306_Putc+0x98>)
 8002096:	8818      	ldrh	r0, [r3, #0]
 8002098:	8859      	ldrh	r1, [r3, #2]
 800209a:	4431      	add	r1, r6
 800209c:	4420      	add	r0, r4
 800209e:	4642      	mov	r2, r8
 80020a0:	b289      	uxth	r1, r1
 80020a2:	b280      	uxth	r0, r0
 80020a4:	f7ff ff54 	bl	8001f50 <SSD1306_DrawPixel>
 80020a8:	e7eb      	b.n	8002082 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 80020aa:	3601      	adds	r6, #1
 80020ac:	786a      	ldrb	r2, [r5, #1]
 80020ae:	42b2      	cmp	r2, r6
 80020b0:	d908      	bls.n	80020c4 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80020b2:	6869      	ldr	r1, [r5, #4]
 80020b4:	f1a9 0320 	sub.w	r3, r9, #32
 80020b8:	fb02 6303 	mla	r3, r2, r3, r6
 80020bc:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 80020c0:	2400      	movs	r4, #0
 80020c2:	e7df      	b.n	8002084 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80020c4:	782b      	ldrb	r3, [r5, #0]
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <SSD1306_Putc+0x98>)
 80020c8:	8811      	ldrh	r1, [r2, #0]
 80020ca:	440b      	add	r3, r1
 80020cc:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 80020ce:	4648      	mov	r0, r9
}
 80020d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 80020d4:	2000      	movs	r0, #0
 80020d6:	e7fb      	b.n	80020d0 <SSD1306_Putc+0x8c>
 80020d8:	2000      	movs	r0, #0
 80020da:	e7f9      	b.n	80020d0 <SSD1306_Putc+0x8c>
 80020dc:	20000c14 	.word	0x20000c14

080020e0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	4604      	mov	r4, r0
 80020e4:	460e      	mov	r6, r1
 80020e6:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 80020e8:	e000      	b.n	80020ec <SSD1306_Puts+0xc>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 80020ea:	3401      	adds	r4, #1
	while (*str) {
 80020ec:	7820      	ldrb	r0, [r4, #0]
 80020ee:	b138      	cbz	r0, 8002100 <SSD1306_Puts+0x20>
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80020f0:	462a      	mov	r2, r5
 80020f2:	4631      	mov	r1, r6
 80020f4:	f7ff ffa6 	bl	8002044 <SSD1306_Putc>
 80020f8:	4603      	mov	r3, r0
 80020fa:	7820      	ldrb	r0, [r4, #0]
 80020fc:	4283      	cmp	r3, r0
 80020fe:	d0f4      	beq.n	80020ea <SSD1306_Puts+0xa>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8002100:	bd70      	pop	{r4, r5, r6, pc}

08002102 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002106:	b083      	sub	sp, #12
 8002108:	4604      	mov	r4, r0
 800210a:	460e      	mov	r6, r1
 800210c:	4617      	mov	r7, r2
 800210e:	4698      	mov	r8, r3
 8002110:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002114:	287f      	cmp	r0, #127	; 0x7f
 8002116:	d900      	bls.n	800211a <SSD1306_DrawLine+0x18>
		x0 = SSD1306_WIDTH - 1;
 8002118:	247f      	movs	r4, #127	; 0x7f
	}
	if (x1 >= SSD1306_WIDTH) {
 800211a:	2f7f      	cmp	r7, #127	; 0x7f
 800211c:	d900      	bls.n	8002120 <SSD1306_DrawLine+0x1e>
		x1 = SSD1306_WIDTH - 1;
 800211e:	277f      	movs	r7, #127	; 0x7f
	}
	if (y0 >= SSD1306_HEIGHT) {
 8002120:	2e3f      	cmp	r6, #63	; 0x3f
 8002122:	d900      	bls.n	8002126 <SSD1306_DrawLine+0x24>
		y0 = SSD1306_HEIGHT - 1;
 8002124:	263f      	movs	r6, #63	; 0x3f
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002126:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800212a:	d901      	bls.n	8002130 <SSD1306_DrawLine+0x2e>
		y1 = SSD1306_HEIGHT - 1;
 800212c:	f04f 083f 	mov.w	r8, #63	; 0x3f
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002130:	42bc      	cmp	r4, r7
 8002132:	d220      	bcs.n	8002176 <SSD1306_DrawLine+0x74>
 8002134:	eba7 0904 	sub.w	r9, r7, r4
 8002138:	fa0f f989 	sxth.w	r9, r9
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800213c:	4546      	cmp	r6, r8
 800213e:	d21f      	bcs.n	8002180 <SSD1306_DrawLine+0x7e>
 8002140:	eba8 0a06 	sub.w	sl, r8, r6
 8002144:	fa0f fa8a 	sxth.w	sl, sl
	sx = (x0 < x1) ? 1 : -1; 
 8002148:	42bc      	cmp	r4, r7
 800214a:	d21e      	bcs.n	800218a <SSD1306_DrawLine+0x88>
 800214c:	2301      	movs	r3, #1
 800214e:	461a      	mov	r2, r3
	sy = (y0 < y1) ? 1 : -1; 
 8002150:	4546      	cmp	r6, r8
 8002152:	d21e      	bcs.n	8002192 <SSD1306_DrawLine+0x90>
 8002154:	2301      	movs	r3, #1
 8002156:	9300      	str	r3, [sp, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002158:	45d1      	cmp	r9, sl
 800215a:	dd1e      	ble.n	800219a <SSD1306_DrawLine+0x98>
 800215c:	eb09 75d9 	add.w	r5, r9, r9, lsr #31
 8002160:	106d      	asrs	r5, r5, #1

	if (dx == 0) {
 8002162:	f1b9 0f00 	cmp.w	r9, #0
 8002166:	d01e      	beq.n	80021a6 <SSD1306_DrawLine+0xa4>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 8002168:	f1ba 0f00 	cmp.w	sl, #0
 800216c:	d034      	beq.n	80021d8 <SSD1306_DrawLine+0xd6>
 800216e:	f8cd 8004 	str.w	r8, [sp, #4]
 8002172:	4690      	mov	r8, r2
 8002174:	e054      	b.n	8002220 <SSD1306_DrawLine+0x11e>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002176:	eba4 0907 	sub.w	r9, r4, r7
 800217a:	fa0f f989 	sxth.w	r9, r9
 800217e:	e7dd      	b.n	800213c <SSD1306_DrawLine+0x3a>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002180:	eba6 0a08 	sub.w	sl, r6, r8
 8002184:	fa0f fa8a 	sxth.w	sl, sl
 8002188:	e7de      	b.n	8002148 <SSD1306_DrawLine+0x46>
	sx = (x0 < x1) ? 1 : -1; 
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	461a      	mov	r2, r3
 8002190:	e7de      	b.n	8002150 <SSD1306_DrawLine+0x4e>
	sy = (y0 < y1) ? 1 : -1; 
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	e7de      	b.n	8002158 <SSD1306_DrawLine+0x56>
	err = ((dx > dy) ? dx : -dy) / 2; 
 800219a:	eb0a 75da 	add.w	r5, sl, sl, lsr #31
 800219e:	106d      	asrs	r5, r5, #1
 80021a0:	426d      	negs	r5, r5
 80021a2:	b22d      	sxth	r5, r5
 80021a4:	e7dd      	b.n	8002162 <SSD1306_DrawLine+0x60>
		if (y1 < y0) {
 80021a6:	4546      	cmp	r6, r8
 80021a8:	d802      	bhi.n	80021b0 <SSD1306_DrawLine+0xae>
 80021aa:	4643      	mov	r3, r8
 80021ac:	46b0      	mov	r8, r6
 80021ae:	461e      	mov	r6, r3
		if (x1 < x0) {
 80021b0:	42bc      	cmp	r4, r7
 80021b2:	d800      	bhi.n	80021b6 <SSD1306_DrawLine+0xb4>
 80021b4:	4627      	mov	r7, r4
		for (i = y0; i <= y1; i++) {
 80021b6:	fa0f f888 	sxth.w	r8, r8
 80021ba:	e00a      	b.n	80021d2 <SSD1306_DrawLine+0xd0>
			SSD1306_DrawPixel(x0, i, c);
 80021bc:	fa1f f888 	uxth.w	r8, r8
 80021c0:	465a      	mov	r2, fp
 80021c2:	4641      	mov	r1, r8
 80021c4:	4638      	mov	r0, r7
 80021c6:	f7ff fec3 	bl	8001f50 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80021ca:	f108 0801 	add.w	r8, r8, #1
 80021ce:	fa0f f888 	sxth.w	r8, r8
 80021d2:	45b0      	cmp	r8, r6
 80021d4:	ddf2      	ble.n	80021bc <SSD1306_DrawLine+0xba>
 80021d6:	e017      	b.n	8002208 <SSD1306_DrawLine+0x106>
		if (y1 < y0) {
 80021d8:	4546      	cmp	r6, r8
 80021da:	d800      	bhi.n	80021de <SSD1306_DrawLine+0xdc>
 80021dc:	46b0      	mov	r8, r6
			tmp = y1;
			y1 = y0;
			y0 = tmp;
		}
		
		if (x1 < x0) {
 80021de:	42bc      	cmp	r4, r7
 80021e0:	d802      	bhi.n	80021e8 <SSD1306_DrawLine+0xe6>
 80021e2:	463b      	mov	r3, r7
 80021e4:	4627      	mov	r7, r4
 80021e6:	461c      	mov	r4, r3
			x1 = x0;
			x0 = tmp;
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80021e8:	b23f      	sxth	r7, r7
 80021ea:	e007      	b.n	80021fc <SSD1306_DrawLine+0xfa>
			SSD1306_DrawPixel(i, y0, c);
 80021ec:	b2bf      	uxth	r7, r7
 80021ee:	465a      	mov	r2, fp
 80021f0:	4641      	mov	r1, r8
 80021f2:	4638      	mov	r0, r7
 80021f4:	f7ff feac 	bl	8001f50 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80021f8:	3701      	adds	r7, #1
 80021fa:	b23f      	sxth	r7, r7
 80021fc:	42a7      	cmp	r7, r4
 80021fe:	ddf5      	ble.n	80021ec <SSD1306_DrawLine+0xea>
 8002200:	e002      	b.n	8002208 <SSD1306_DrawLine+0x106>
		return;
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
		if (x0 == x1 && y0 == y1) {
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	429e      	cmp	r6, r3
 8002206:	d112      	bne.n	800222e <SSD1306_DrawLine+0x12c>
		if (e2 < dy) {
			err += dx;
			y0 += sy;
		} 
	}
}
 8002208:	b003      	add	sp, #12
 800220a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220e:	462b      	mov	r3, r5
		if (e2 < dy) {
 8002210:	4555      	cmp	r5, sl
 8002212:	da04      	bge.n	800221e <SSD1306_DrawLine+0x11c>
			err += dx;
 8002214:	444b      	add	r3, r9
 8002216:	b21b      	sxth	r3, r3
			y0 += sy;
 8002218:	9a00      	ldr	r2, [sp, #0]
 800221a:	4416      	add	r6, r2
 800221c:	b2b6      	uxth	r6, r6
		if (x1 < x0) {
 800221e:	461d      	mov	r5, r3
		SSD1306_DrawPixel(x0, y0, c);
 8002220:	465a      	mov	r2, fp
 8002222:	4631      	mov	r1, r6
 8002224:	4620      	mov	r0, r4
 8002226:	f7ff fe93 	bl	8001f50 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 800222a:	42bc      	cmp	r4, r7
 800222c:	d0e9      	beq.n	8002202 <SSD1306_DrawLine+0x100>
		if (e2 > -dx) {
 800222e:	f1c9 0300 	rsb	r3, r9, #0
 8002232:	429d      	cmp	r5, r3
 8002234:	ddeb      	ble.n	800220e <SSD1306_DrawLine+0x10c>
			err -= dy;
 8002236:	eba5 030a 	sub.w	r3, r5, sl
 800223a:	b21b      	sxth	r3, r3
			x0 += sx;
 800223c:	4444      	add	r4, r8
 800223e:	b2a4      	uxth	r4, r4
 8002240:	e7e6      	b.n	8002210 <SSD1306_DrawLine+0x10e>

08002242 <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8002242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	f89d 8020 	ldrb.w	r8, [sp, #32]
	/* Check input parameters */
	if (
 800224c:	287f      	cmp	r0, #127	; 0x7f
 800224e:	d834      	bhi.n	80022ba <SSD1306_DrawRectangle+0x78>
 8002250:	4606      	mov	r6, r0
 8002252:	460f      	mov	r7, r1
 8002254:	461d      	mov	r5, r3
		x >= SSD1306_WIDTH ||
 8002256:	293f      	cmp	r1, #63	; 0x3f
 8002258:	d82f      	bhi.n	80022ba <SSD1306_DrawRectangle+0x78>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800225a:	1883      	adds	r3, r0, r2
 800225c:	2b7f      	cmp	r3, #127	; 0x7f
 800225e:	dd02      	ble.n	8002266 <SSD1306_DrawRectangle+0x24>
		w = SSD1306_WIDTH - x;
 8002260:	f1c0 0280 	rsb	r2, r0, #128	; 0x80
 8002264:	b292      	uxth	r2, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8002266:	197b      	adds	r3, r7, r5
 8002268:	2b3f      	cmp	r3, #63	; 0x3f
 800226a:	dd02      	ble.n	8002272 <SSD1306_DrawRectangle+0x30>
		h = SSD1306_HEIGHT - y;
 800226c:	f1c7 0540 	rsb	r5, r7, #64	; 0x40
 8002270:	b2ad      	uxth	r5, r5
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8002272:	1994      	adds	r4, r2, r6
 8002274:	b2a4      	uxth	r4, r4
 8002276:	f8cd 8000 	str.w	r8, [sp]
 800227a:	463b      	mov	r3, r7
 800227c:	4622      	mov	r2, r4
 800227e:	4639      	mov	r1, r7
 8002280:	4630      	mov	r0, r6
 8002282:	f7ff ff3e 	bl	8002102 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8002286:	443d      	add	r5, r7
 8002288:	b2ad      	uxth	r5, r5
 800228a:	f8cd 8000 	str.w	r8, [sp]
 800228e:	462b      	mov	r3, r5
 8002290:	4622      	mov	r2, r4
 8002292:	4629      	mov	r1, r5
 8002294:	4630      	mov	r0, r6
 8002296:	f7ff ff34 	bl	8002102 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 800229a:	f8cd 8000 	str.w	r8, [sp]
 800229e:	462b      	mov	r3, r5
 80022a0:	4632      	mov	r2, r6
 80022a2:	4639      	mov	r1, r7
 80022a4:	4630      	mov	r0, r6
 80022a6:	f7ff ff2c 	bl	8002102 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 80022aa:	f8cd 8000 	str.w	r8, [sp]
 80022ae:	462b      	mov	r3, r5
 80022b0:	4622      	mov	r2, r4
 80022b2:	4639      	mov	r1, r7
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff ff24 	bl	8002102 <SSD1306_DrawLine>
}
 80022ba:	b002      	add	sp, #8
 80022bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080022c0 <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80022c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c4:	b087      	sub	sp, #28
 80022c6:	9201      	str	r2, [sp, #4]
 80022c8:	461e      	mov	r6, r3
	int16_t f = 1 - r;
 80022ca:	b294      	uxth	r4, r2
 80022cc:	f1c4 0301 	rsb	r3, r4, #1
 80022d0:	fa0f f983 	sxth.w	r9, r3
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 80022d4:	ebc4 33c4 	rsb	r3, r4, r4, lsl #15
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	b21b      	sxth	r3, r3
 80022dc:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 80022de:	fa1f fb80 	uxth.w	fp, r0
 80022e2:	fa1f fa81 	uxth.w	sl, r1
 80022e6:	eb04 010a 	add.w	r1, r4, sl
 80022ea:	4632      	mov	r2, r6
 80022ec:	b289      	uxth	r1, r1
 80022ee:	4658      	mov	r0, fp
 80022f0:	f7ff fe2e 	bl	8001f50 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80022f4:	ebaa 0104 	sub.w	r1, sl, r4
 80022f8:	4632      	mov	r2, r6
 80022fa:	b289      	uxth	r1, r1
 80022fc:	4658      	mov	r0, fp
 80022fe:	f7ff fe27 	bl	8001f50 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002302:	eb04 000b 	add.w	r0, r4, fp
 8002306:	4632      	mov	r2, r6
 8002308:	4651      	mov	r1, sl
 800230a:	b280      	uxth	r0, r0
 800230c:	f7ff fe20 	bl	8001f50 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002310:	ebab 0004 	sub.w	r0, fp, r4
 8002314:	4632      	mov	r2, r6
 8002316:	4651      	mov	r1, sl
 8002318:	b280      	uxth	r0, r0
 800231a:	f7ff fe19 	bl	8001f50 <SSD1306_DrawPixel>
	int16_t x = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	9302      	str	r3, [sp, #8]
	int16_t ddF_x = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	9303      	str	r3, [sp, #12]

    while (x < y) {
 8002326:	e05e      	b.n	80023e6 <SSD1306_DrawCircle+0x126>
        if (f >= 0) {
            y--;
 8002328:	9b01      	ldr	r3, [sp, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	b21b      	sxth	r3, r3
 800232e:	9301      	str	r3, [sp, #4]
            ddF_y += 2;
 8002330:	9a05      	ldr	r2, [sp, #20]
 8002332:	3202      	adds	r2, #2
 8002334:	b293      	uxth	r3, r2
 8002336:	b212      	sxth	r2, r2
 8002338:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 800233a:	444b      	add	r3, r9
 800233c:	fa0f f983 	sxth.w	r9, r3
        }
        x++;
 8002340:	9b02      	ldr	r3, [sp, #8]
 8002342:	3301      	adds	r3, #1
 8002344:	b29d      	uxth	r5, r3
 8002346:	b21b      	sxth	r3, r3
 8002348:	9302      	str	r3, [sp, #8]
        ddF_x += 2;
 800234a:	9a03      	ldr	r2, [sp, #12]
 800234c:	3202      	adds	r2, #2
 800234e:	b293      	uxth	r3, r2
 8002350:	b212      	sxth	r2, r2
 8002352:	9203      	str	r2, [sp, #12]
        f += ddF_x;
 8002354:	444b      	add	r3, r9
 8002356:	fa0f f983 	sxth.w	r9, r3

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 800235a:	eb0b 0305 	add.w	r3, fp, r5
 800235e:	b29b      	uxth	r3, r3
 8002360:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8002364:	eb0a 0804 	add.w	r8, sl, r4
 8002368:	fa1f f888 	uxth.w	r8, r8
 800236c:	4632      	mov	r2, r6
 800236e:	4641      	mov	r1, r8
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fdec 	bl	8001f50 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8002378:	ebab 0705 	sub.w	r7, fp, r5
 800237c:	b2bf      	uxth	r7, r7
 800237e:	4632      	mov	r2, r6
 8002380:	4641      	mov	r1, r8
 8002382:	4638      	mov	r0, r7
 8002384:	f7ff fde4 	bl	8001f50 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8002388:	ebaa 0804 	sub.w	r8, sl, r4
 800238c:	fa1f f888 	uxth.w	r8, r8
 8002390:	4632      	mov	r2, r6
 8002392:	4641      	mov	r1, r8
 8002394:	9804      	ldr	r0, [sp, #16]
 8002396:	f7ff fddb 	bl	8001f50 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 800239a:	4632      	mov	r2, r6
 800239c:	4641      	mov	r1, r8
 800239e:	4638      	mov	r0, r7
 80023a0:	f7ff fdd6 	bl	8001f50 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 80023a4:	eb0b 0704 	add.w	r7, fp, r4
 80023a8:	b2bf      	uxth	r7, r7
 80023aa:	eb0a 0805 	add.w	r8, sl, r5
 80023ae:	fa1f f888 	uxth.w	r8, r8
 80023b2:	4632      	mov	r2, r6
 80023b4:	4641      	mov	r1, r8
 80023b6:	4638      	mov	r0, r7
 80023b8:	f7ff fdca 	bl	8001f50 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 80023bc:	ebab 0404 	sub.w	r4, fp, r4
 80023c0:	b2a4      	uxth	r4, r4
 80023c2:	4632      	mov	r2, r6
 80023c4:	4641      	mov	r1, r8
 80023c6:	4620      	mov	r0, r4
 80023c8:	f7ff fdc2 	bl	8001f50 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 80023cc:	ebaa 0505 	sub.w	r5, sl, r5
 80023d0:	b2ad      	uxth	r5, r5
 80023d2:	4632      	mov	r2, r6
 80023d4:	4629      	mov	r1, r5
 80023d6:	4638      	mov	r0, r7
 80023d8:	f7ff fdba 	bl	8001f50 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 80023dc:	4632      	mov	r2, r6
 80023de:	4629      	mov	r1, r5
 80023e0:	4620      	mov	r0, r4
 80023e2:	f7ff fdb5 	bl	8001f50 <SSD1306_DrawPixel>
    while (x < y) {
 80023e6:	9b02      	ldr	r3, [sp, #8]
 80023e8:	9a01      	ldr	r2, [sp, #4]
 80023ea:	4293      	cmp	r3, r2
 80023ec:	da03      	bge.n	80023f6 <SSD1306_DrawCircle+0x136>
        if (f >= 0) {
 80023ee:	f1b9 0f00 	cmp.w	r9, #0
 80023f2:	da99      	bge.n	8002328 <SSD1306_DrawCircle+0x68>
 80023f4:	e7a4      	b.n	8002340 <SSD1306_DrawCircle+0x80>
    }
}
 80023f6:	b007      	add	sp, #28
 80023f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023fc <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80023fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002400:	b087      	sub	sp, #28
 8002402:	9202      	str	r2, [sp, #8]
 8002404:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 8002406:	b295      	uxth	r5, r2
 8002408:	f1c5 0401 	rsb	r4, r5, #1
 800240c:	b224      	sxth	r4, r4
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
 800240e:	ebc5 33c5 	rsb	r3, r5, r5, lsl #15
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	b21b      	sxth	r3, r3
 8002416:	9305      	str	r3, [sp, #20]
	int16_t x = 0;
	int16_t y = r;

    SSD1306_DrawPixel(x0, y0 + r, c);
 8002418:	fa1f fb80 	uxth.w	fp, r0
 800241c:	b28f      	uxth	r7, r1
 800241e:	19e9      	adds	r1, r5, r7
 8002420:	4652      	mov	r2, sl
 8002422:	b289      	uxth	r1, r1
 8002424:	4658      	mov	r0, fp
 8002426:	f7ff fd93 	bl	8001f50 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 800242a:	1b79      	subs	r1, r7, r5
 800242c:	4652      	mov	r2, sl
 800242e:	b289      	uxth	r1, r1
 8002430:	4658      	mov	r0, fp
 8002432:	f7ff fd8d 	bl	8001f50 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8002436:	eb05 060b 	add.w	r6, r5, fp
 800243a:	b2b6      	uxth	r6, r6
 800243c:	4652      	mov	r2, sl
 800243e:	4639      	mov	r1, r7
 8002440:	4630      	mov	r0, r6
 8002442:	f7ff fd85 	bl	8001f50 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8002446:	ebab 0505 	sub.w	r5, fp, r5
 800244a:	b2ad      	uxth	r5, r5
 800244c:	4652      	mov	r2, sl
 800244e:	4639      	mov	r1, r7
 8002450:	4628      	mov	r0, r5
 8002452:	f7ff fd7d 	bl	8001f50 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8002456:	f8cd a000 	str.w	sl, [sp]
 800245a:	463b      	mov	r3, r7
 800245c:	4632      	mov	r2, r6
 800245e:	4639      	mov	r1, r7
 8002460:	4628      	mov	r0, r5
 8002462:	f7ff fe4e 	bl	8002102 <SSD1306_DrawLine>
	int16_t x = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	9303      	str	r3, [sp, #12]
	int16_t ddF_x = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	9304      	str	r3, [sp, #16]

    while (x < y) {
 800246e:	e04b      	b.n	8002508 <SSD1306_DrawFilledCircle+0x10c>
        if (f >= 0) {
            y--;
 8002470:	9b02      	ldr	r3, [sp, #8]
 8002472:	3b01      	subs	r3, #1
 8002474:	b21b      	sxth	r3, r3
 8002476:	9302      	str	r3, [sp, #8]
            ddF_y += 2;
 8002478:	9a05      	ldr	r2, [sp, #20]
 800247a:	3202      	adds	r2, #2
 800247c:	b293      	uxth	r3, r2
 800247e:	b212      	sxth	r2, r2
 8002480:	9205      	str	r2, [sp, #20]
            f += ddF_y;
 8002482:	4423      	add	r3, r4
 8002484:	b21c      	sxth	r4, r3
        }
        x++;
 8002486:	9b03      	ldr	r3, [sp, #12]
 8002488:	3301      	adds	r3, #1
 800248a:	b29d      	uxth	r5, r3
 800248c:	b21b      	sxth	r3, r3
 800248e:	9303      	str	r3, [sp, #12]
        ddF_x += 2;
 8002490:	9a04      	ldr	r2, [sp, #16]
 8002492:	3202      	adds	r2, #2
 8002494:	b293      	uxth	r3, r2
 8002496:	b212      	sxth	r2, r2
 8002498:	9204      	str	r2, [sp, #16]
        f += ddF_x;
 800249a:	4423      	add	r3, r4
 800249c:	b21c      	sxth	r4, r3

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 800249e:	ebab 0905 	sub.w	r9, fp, r5
 80024a2:	fa1f f989 	uxth.w	r9, r9
 80024a6:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80024aa:	19b9      	adds	r1, r7, r6
 80024ac:	b289      	uxth	r1, r1
 80024ae:	eb0b 0805 	add.w	r8, fp, r5
 80024b2:	fa1f f888 	uxth.w	r8, r8
 80024b6:	f8cd a000 	str.w	sl, [sp]
 80024ba:	460b      	mov	r3, r1
 80024bc:	4642      	mov	r2, r8
 80024be:	4648      	mov	r0, r9
 80024c0:	f7ff fe1f 	bl	8002102 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80024c4:	1bb9      	subs	r1, r7, r6
 80024c6:	b289      	uxth	r1, r1
 80024c8:	f8cd a000 	str.w	sl, [sp]
 80024cc:	460b      	mov	r3, r1
 80024ce:	464a      	mov	r2, r9
 80024d0:	4640      	mov	r0, r8
 80024d2:	f7ff fe16 	bl	8002102 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 80024d6:	eb0b 0806 	add.w	r8, fp, r6
 80024da:	fa1f f888 	uxth.w	r8, r8
 80024de:	1979      	adds	r1, r7, r5
 80024e0:	b289      	uxth	r1, r1
 80024e2:	ebab 0606 	sub.w	r6, fp, r6
 80024e6:	b2b6      	uxth	r6, r6
 80024e8:	f8cd a000 	str.w	sl, [sp]
 80024ec:	460b      	mov	r3, r1
 80024ee:	4632      	mov	r2, r6
 80024f0:	4640      	mov	r0, r8
 80024f2:	f7ff fe06 	bl	8002102 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80024f6:	1b79      	subs	r1, r7, r5
 80024f8:	b289      	uxth	r1, r1
 80024fa:	f8cd a000 	str.w	sl, [sp]
 80024fe:	460b      	mov	r3, r1
 8002500:	4632      	mov	r2, r6
 8002502:	4640      	mov	r0, r8
 8002504:	f7ff fdfd 	bl	8002102 <SSD1306_DrawLine>
    while (x < y) {
 8002508:	9b03      	ldr	r3, [sp, #12]
 800250a:	9a02      	ldr	r2, [sp, #8]
 800250c:	4293      	cmp	r3, r2
 800250e:	da02      	bge.n	8002516 <SSD1306_DrawFilledCircle+0x11a>
        if (f >= 0) {
 8002510:	2c00      	cmp	r4, #0
 8002512:	daad      	bge.n	8002470 <SSD1306_DrawFilledCircle+0x74>
 8002514:	e7b7      	b.n	8002486 <SSD1306_DrawFilledCircle+0x8a>
    }
}
 8002516:	b007      	add	sp, #28
 8002518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800251c <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800251c:	b500      	push	{lr}
 800251e:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 8002520:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 8002524:	f04f 0c00 	mov.w	ip, #0
 8002528:	e009      	b.n	800253e <ssd1306_I2C_WriteMulti+0x22>
dt[i+1] = data[i];
 800252a:	f10c 0e01 	add.w	lr, ip, #1
 800252e:	f812 100c 	ldrb.w	r1, [r2, ip]
 8002532:	f10d 0c08 	add.w	ip, sp, #8
 8002536:	f80c 100e 	strb.w	r1, [ip, lr]
for(i = 0; i < count; i++)
 800253a:	fa5f fc8e 	uxtb.w	ip, lr
 800253e:	fa1f fe8c 	uxth.w	lr, ip
 8002542:	459e      	cmp	lr, r3
 8002544:	d3f1      	bcc.n	800252a <ssd1306_I2C_WriteMulti+0xe>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002546:	3301      	adds	r3, #1
 8002548:	220a      	movs	r2, #10
 800254a:	9200      	str	r2, [sp, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	aa02      	add	r2, sp, #8
 8002550:	4601      	mov	r1, r0
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <ssd1306_I2C_WriteMulti+0x44>)
 8002554:	f001 fa3a 	bl	80039cc <HAL_I2C_Master_Transmit>
}
 8002558:	b043      	add	sp, #268	; 0x10c
 800255a:	f85d fb04 	ldr.w	pc, [sp], #4
 800255e:	bf00      	nop
 8002560:	20000a68 	.word	0x20000a68

08002564 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002564:	b500      	push	{lr}
 8002566:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 8002568:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 800256c:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002570:	230a      	movs	r3, #10
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2302      	movs	r3, #2
 8002576:	aa03      	add	r2, sp, #12
 8002578:	4601      	mov	r1, r0
 800257a:	4803      	ldr	r0, [pc, #12]	; (8002588 <ssd1306_I2C_Write+0x24>)
 800257c:	f001 fa26 	bl	80039cc <HAL_I2C_Master_Transmit>
}
 8002580:	b005      	add	sp, #20
 8002582:	f85d fb04 	ldr.w	pc, [sp], #4
 8002586:	bf00      	nop
 8002588:	20000a68 	.word	0x20000a68

0800258c <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 800258c:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 800258e:	2400      	movs	r4, #0
 8002590:	e01a      	b.n	80025c8 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002592:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	2100      	movs	r1, #0
 800259a:	2078      	movs	r0, #120	; 0x78
 800259c:	f7ff ffe2 	bl	8002564 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80025a0:	2200      	movs	r2, #0
 80025a2:	4611      	mov	r1, r2
 80025a4:	2078      	movs	r0, #120	; 0x78
 80025a6:	f7ff ffdd 	bl	8002564 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80025aa:	2210      	movs	r2, #16
 80025ac:	2100      	movs	r1, #0
 80025ae:	2078      	movs	r0, #120	; 0x78
 80025b0:	f7ff ffd8 	bl	8002564 <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <SSD1306_UpdateScreen+0x44>)
 80025b8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80025bc:	2140      	movs	r1, #64	; 0x40
 80025be:	2078      	movs	r0, #120	; 0x78
 80025c0:	f7ff ffac 	bl	800251c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80025c4:	3401      	adds	r4, #1
 80025c6:	b2e4      	uxtb	r4, r4
 80025c8:	2c07      	cmp	r4, #7
 80025ca:	d9e2      	bls.n	8002592 <SSD1306_UpdateScreen+0x6>
}
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	bf00      	nop
 80025d0:	20000c1c 	.word	0x20000c1c

080025d4 <SSD1306_Clear>:
{
 80025d4:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff fcac 	bl	8001f34 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80025dc:	f7ff ffd6 	bl	800258c <SSD1306_UpdateScreen>
}
 80025e0:	bd08      	pop	{r3, pc}
	...

080025e4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80025e4:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80025e6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80025ea:	2201      	movs	r2, #1
 80025ec:	2178      	movs	r1, #120	; 0x78
 80025ee:	4855      	ldr	r0, [pc, #340]	; (8002744 <SSD1306_Init+0x160>)
 80025f0:	f001 faa8 	bl	8003b44 <HAL_I2C_IsDeviceReady>
 80025f4:	2800      	cmp	r0, #0
 80025f6:	f040 80a3 	bne.w	8002740 <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 80025fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80025fe:	e000      	b.n	8002602 <SSD1306_Init+0x1e>
		p--;
 8002600:	3b01      	subs	r3, #1
	while(p>0)
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1fc      	bne.n	8002600 <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002606:	22ae      	movs	r2, #174	; 0xae
 8002608:	2100      	movs	r1, #0
 800260a:	2078      	movs	r0, #120	; 0x78
 800260c:	f7ff ffaa 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002610:	2220      	movs	r2, #32
 8002612:	2100      	movs	r1, #0
 8002614:	2078      	movs	r0, #120	; 0x78
 8002616:	f7ff ffa5 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800261a:	2210      	movs	r2, #16
 800261c:	2100      	movs	r1, #0
 800261e:	2078      	movs	r0, #120	; 0x78
 8002620:	f7ff ffa0 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002624:	22b0      	movs	r2, #176	; 0xb0
 8002626:	2100      	movs	r1, #0
 8002628:	2078      	movs	r0, #120	; 0x78
 800262a:	f7ff ff9b 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800262e:	22c8      	movs	r2, #200	; 0xc8
 8002630:	2100      	movs	r1, #0
 8002632:	2078      	movs	r0, #120	; 0x78
 8002634:	f7ff ff96 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002638:	2200      	movs	r2, #0
 800263a:	4611      	mov	r1, r2
 800263c:	2078      	movs	r0, #120	; 0x78
 800263e:	f7ff ff91 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002642:	2210      	movs	r2, #16
 8002644:	2100      	movs	r1, #0
 8002646:	2078      	movs	r0, #120	; 0x78
 8002648:	f7ff ff8c 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	2100      	movs	r1, #0
 8002650:	2078      	movs	r0, #120	; 0x78
 8002652:	f7ff ff87 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002656:	2281      	movs	r2, #129	; 0x81
 8002658:	2100      	movs	r1, #0
 800265a:	2078      	movs	r0, #120	; 0x78
 800265c:	f7ff ff82 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002660:	22ff      	movs	r2, #255	; 0xff
 8002662:	2100      	movs	r1, #0
 8002664:	2078      	movs	r0, #120	; 0x78
 8002666:	f7ff ff7d 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800266a:	22a1      	movs	r2, #161	; 0xa1
 800266c:	2100      	movs	r1, #0
 800266e:	2078      	movs	r0, #120	; 0x78
 8002670:	f7ff ff78 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002674:	22a6      	movs	r2, #166	; 0xa6
 8002676:	2100      	movs	r1, #0
 8002678:	2078      	movs	r0, #120	; 0x78
 800267a:	f7ff ff73 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800267e:	22a8      	movs	r2, #168	; 0xa8
 8002680:	2100      	movs	r1, #0
 8002682:	2078      	movs	r0, #120	; 0x78
 8002684:	f7ff ff6e 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002688:	223f      	movs	r2, #63	; 0x3f
 800268a:	2100      	movs	r1, #0
 800268c:	2078      	movs	r0, #120	; 0x78
 800268e:	f7ff ff69 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002692:	22a4      	movs	r2, #164	; 0xa4
 8002694:	2100      	movs	r1, #0
 8002696:	2078      	movs	r0, #120	; 0x78
 8002698:	f7ff ff64 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800269c:	22d3      	movs	r2, #211	; 0xd3
 800269e:	2100      	movs	r1, #0
 80026a0:	2078      	movs	r0, #120	; 0x78
 80026a2:	f7ff ff5f 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80026a6:	2200      	movs	r2, #0
 80026a8:	4611      	mov	r1, r2
 80026aa:	2078      	movs	r0, #120	; 0x78
 80026ac:	f7ff ff5a 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80026b0:	22d5      	movs	r2, #213	; 0xd5
 80026b2:	2100      	movs	r1, #0
 80026b4:	2078      	movs	r0, #120	; 0x78
 80026b6:	f7ff ff55 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80026ba:	22f0      	movs	r2, #240	; 0xf0
 80026bc:	2100      	movs	r1, #0
 80026be:	2078      	movs	r0, #120	; 0x78
 80026c0:	f7ff ff50 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80026c4:	22d9      	movs	r2, #217	; 0xd9
 80026c6:	2100      	movs	r1, #0
 80026c8:	2078      	movs	r0, #120	; 0x78
 80026ca:	f7ff ff4b 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80026ce:	2222      	movs	r2, #34	; 0x22
 80026d0:	2100      	movs	r1, #0
 80026d2:	2078      	movs	r0, #120	; 0x78
 80026d4:	f7ff ff46 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80026d8:	22da      	movs	r2, #218	; 0xda
 80026da:	2100      	movs	r1, #0
 80026dc:	2078      	movs	r0, #120	; 0x78
 80026de:	f7ff ff41 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80026e2:	2212      	movs	r2, #18
 80026e4:	2100      	movs	r1, #0
 80026e6:	2078      	movs	r0, #120	; 0x78
 80026e8:	f7ff ff3c 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80026ec:	22db      	movs	r2, #219	; 0xdb
 80026ee:	2100      	movs	r1, #0
 80026f0:	2078      	movs	r0, #120	; 0x78
 80026f2:	f7ff ff37 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80026f6:	2220      	movs	r2, #32
 80026f8:	2100      	movs	r1, #0
 80026fa:	2078      	movs	r0, #120	; 0x78
 80026fc:	f7ff ff32 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002700:	228d      	movs	r2, #141	; 0x8d
 8002702:	2100      	movs	r1, #0
 8002704:	2078      	movs	r0, #120	; 0x78
 8002706:	f7ff ff2d 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800270a:	2214      	movs	r2, #20
 800270c:	2100      	movs	r1, #0
 800270e:	2078      	movs	r0, #120	; 0x78
 8002710:	f7ff ff28 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002714:	22af      	movs	r2, #175	; 0xaf
 8002716:	2100      	movs	r1, #0
 8002718:	2078      	movs	r0, #120	; 0x78
 800271a:	f7ff ff23 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800271e:	222e      	movs	r2, #46	; 0x2e
 8002720:	2100      	movs	r1, #0
 8002722:	2078      	movs	r0, #120	; 0x78
 8002724:	f7ff ff1e 	bl	8002564 <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002728:	2000      	movs	r0, #0
 800272a:	f7ff fc03 	bl	8001f34 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800272e:	f7ff ff2d 	bl	800258c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SSD1306_Init+0x164>)
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002738:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 800273a:	2001      	movs	r0, #1
 800273c:	7158      	strb	r0, [r3, #5]
}
 800273e:	bd08      	pop	{r3, pc}
		return 0;
 8002740:	2000      	movs	r0, #0
 8002742:	e7fc      	b.n	800273e <SSD1306_Init+0x15a>
 8002744:	20000a68 	.word	0x20000a68
 8002748:	20000c14 	.word	0x20000c14

0800274c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800274c:	b500      	push	{lr}
 800274e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <HAL_MspInit+0x4c>)
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	f002 0201 	and.w	r2, r2, #1
 8002760:	9200      	str	r2, [sp, #0]
 8002762:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800276a:	61da      	str	r2, [r3, #28]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	210f      	movs	r1, #15
 800277a:	f06f 0001 	mvn.w	r0, #1
 800277e:	f000 fd47 	bl	8003210 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002782:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_MspInit+0x50>)
 8002784:	6853      	ldr	r3, [r2, #4]
 8002786:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800278a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800278e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002790:	b003      	add	sp, #12
 8002792:	f85d fb04 	ldr.w	pc, [sp], #4
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40010000 	.word	0x40010000

080027a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027a0:	b500      	push	{lr}
 80027a2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	2300      	movs	r3, #0
 80027a6:	9304      	str	r3, [sp, #16]
 80027a8:	9305      	str	r3, [sp, #20]
 80027aa:	9306      	str	r3, [sp, #24]
 80027ac:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80027ae:	6803      	ldr	r3, [r0, #0]
 80027b0:	4a20      	ldr	r2, [pc, #128]	; (8002834 <HAL_ADC_MspInit+0x94>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d005      	beq.n	80027c2 <HAL_ADC_MspInit+0x22>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80027b6:	4a20      	ldr	r2, [pc, #128]	; (8002838 <HAL_ADC_MspInit+0x98>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d01e      	beq.n	80027fa <HAL_ADC_MspInit+0x5a>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80027bc:	b009      	add	sp, #36	; 0x24
 80027be:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_ADC_MspInit+0x9c>)
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	619a      	str	r2, [r3, #24]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80027d2:	9200      	str	r2, [sp, #0]
 80027d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	f042 0204 	orr.w	r2, r2, #4
 80027dc:	619a      	str	r2, [r3, #24]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027e8:	2308      	movs	r3, #8
 80027ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ec:	2303      	movs	r3, #3
 80027ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	a904      	add	r1, sp, #16
 80027f2:	4813      	ldr	r0, [pc, #76]	; (8002840 <HAL_ADC_MspInit+0xa0>)
 80027f4:	f000 fd52 	bl	800329c <HAL_GPIO_Init>
 80027f8:	e7e0      	b.n	80027bc <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_ADC_MspInit+0x9c>)
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002802:	619a      	str	r2, [r3, #24]
 8002804:	699a      	ldr	r2, [r3, #24]
 8002806:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800280a:	9202      	str	r2, [sp, #8]
 800280c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	f042 0204 	orr.w	r2, r2, #4
 8002814:	619a      	str	r2, [r3, #24]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	9303      	str	r3, [sp, #12]
 800281e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002820:	2302      	movs	r3, #2
 8002822:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002824:	2303      	movs	r3, #3
 8002826:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	a904      	add	r1, sp, #16
 800282a:	4805      	ldr	r0, [pc, #20]	; (8002840 <HAL_ADC_MspInit+0xa0>)
 800282c:	f000 fd36 	bl	800329c <HAL_GPIO_Init>
}
 8002830:	e7c4      	b.n	80027bc <HAL_ADC_MspInit+0x1c>
 8002832:	bf00      	nop
 8002834:	40012400 	.word	0x40012400
 8002838:	40012800 	.word	0x40012800
 800283c:	40021000 	.word	0x40021000
 8002840:	40010800 	.word	0x40010800

08002844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002844:	b510      	push	{r4, lr}
 8002846:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	2300      	movs	r3, #0
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	9303      	str	r3, [sp, #12]
 800284e:	9304      	str	r3, [sp, #16]
 8002850:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8002852:	6802      	ldr	r2, [r0, #0]
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_I2C_MspInit+0x58>)
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800285a:	b006      	add	sp, #24
 800285c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	4c10      	ldr	r4, [pc, #64]	; (80028a0 <HAL_I2C_MspInit+0x5c>)
 8002860:	69a3      	ldr	r3, [r4, #24]
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	61a3      	str	r3, [r4, #24]
 8002868:	69a3      	ldr	r3, [r4, #24]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002872:	23c0      	movs	r3, #192	; 0xc0
 8002874:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002876:	2312      	movs	r3, #18
 8002878:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287e:	a902      	add	r1, sp, #8
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <HAL_I2C_MspInit+0x60>)
 8002882:	f000 fd0b 	bl	800329c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002886:	69e3      	ldr	r3, [r4, #28]
 8002888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800288c:	61e3      	str	r3, [r4, #28]
 800288e:	69e3      	ldr	r3, [r4, #28]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	9b01      	ldr	r3, [sp, #4]
}
 8002898:	e7df      	b.n	800285a <HAL_I2C_MspInit+0x16>
 800289a:	bf00      	nop
 800289c:	40005400 	.word	0x40005400
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40010c00 	.word	0x40010c00

080028a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a8:	b510      	push	{r4, lr}
 80028aa:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ac:	2300      	movs	r3, #0
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	9303      	str	r3, [sp, #12]
 80028b2:	9304      	str	r3, [sp, #16]
 80028b4:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 80028b6:	6802      	ldr	r2, [r0, #0]
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_SPI_MspInit+0x6c>)
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d001      	beq.n	80028c2 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028be:	b006      	add	sp, #24
 80028c0:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028c2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028cc:	619a      	str	r2, [r3, #24]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028d4:	9200      	str	r2, [sp, #0]
 80028d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	f042 0204 	orr.w	r2, r2, #4
 80028de:	619a      	str	r2, [r3, #24]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80028ea:	23a0      	movs	r3, #160	; 0xa0
 80028ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	2302      	movs	r3, #2
 80028f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f2:	2303      	movs	r3, #3
 80028f4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	4c08      	ldr	r4, [pc, #32]	; (8002918 <HAL_SPI_MspInit+0x70>)
 80028f8:	a902      	add	r1, sp, #8
 80028fa:	4620      	mov	r0, r4
 80028fc:	f000 fcce 	bl	800329c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002900:	2340      	movs	r3, #64	; 0x40
 8002902:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002904:	2300      	movs	r3, #0
 8002906:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	a902      	add	r1, sp, #8
 800290c:	4620      	mov	r0, r4
 800290e:	f000 fcc5 	bl	800329c <HAL_GPIO_Init>
}
 8002912:	e7d4      	b.n	80028be <HAL_SPI_MspInit+0x16>
 8002914:	40013000 	.word	0x40013000
 8002918:	40010800 	.word	0x40010800

0800291c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800291c:	b500      	push	{lr}
 800291e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8002920:	6803      	ldr	r3, [r0, #0]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d005      	beq.n	8002934 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_TIM_Base_MspInit+0x58>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00e      	beq.n	800294c <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800292e:	b003      	add	sp, #12
 8002930:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002934:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	61da      	str	r2, [r3, #28]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	9b00      	ldr	r3, [sp, #0]
 800294a:	e7f0      	b.n	800292e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_TIM_Base_MspInit+0x5c>)
 800294e:	69da      	ldr	r2, [r3, #28]
 8002950:	f042 0202 	orr.w	r2, r2, #2
 8002954:	61da      	str	r2, [r3, #28]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2105      	movs	r1, #5
 8002964:	201d      	movs	r0, #29
 8002966:	f000 fc53 	bl	8003210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800296a:	201d      	movs	r0, #29
 800296c:	f000 fc88 	bl	8003280 <HAL_NVIC_EnableIRQ>
}
 8002970:	e7dd      	b.n	800292e <HAL_TIM_Base_MspInit+0x12>
 8002972:	bf00      	nop
 8002974:	40000400 	.word	0x40000400
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800297c:	b500      	push	{lr}
 800297e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	2300      	movs	r3, #0
 8002982:	9302      	str	r3, [sp, #8]
 8002984:	9303      	str	r3, [sp, #12]
 8002986:	9304      	str	r3, [sp, #16]
 8002988:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 800298a:	6803      	ldr	r3, [r0, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d002      	beq.n	8002998 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002992:	b007      	add	sp, #28
 8002994:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002998:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	f042 0204 	orr.w	r2, r2, #4
 80029a2:	619a      	str	r2, [r3, #24]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ae:	2301      	movs	r3, #1
 80029b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	a902      	add	r1, sp, #8
 80029ba:	4802      	ldr	r0, [pc, #8]	; (80029c4 <HAL_TIM_MspPostInit+0x48>)
 80029bc:	f000 fc6e 	bl	800329c <HAL_GPIO_Init>
}
 80029c0:	e7e7      	b.n	8002992 <HAL_TIM_MspPostInit+0x16>
 80029c2:	bf00      	nop
 80029c4:	40010800 	.word	0x40010800

080029c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b530      	push	{r4, r5, lr}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_InitTick+0x8c>)
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	f042 0204 	orr.w	r2, r2, #4
 80029d6:	61da      	str	r2, [r3, #28]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029e2:	a902      	add	r1, sp, #8
 80029e4:	a803      	add	r0, sp, #12
 80029e6:	f001 fc9b 	bl	8004320 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029ea:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029ec:	b9cb      	cbnz	r3, 8002a22 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029ee:	f001 fc77 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 80029f2:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_InitTick+0x90>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	3b01      	subs	r3, #1

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80029fe:	4817      	ldr	r0, [pc, #92]	; (8002a5c <HAL_InitTick+0x94>)
 8002a00:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <HAL_InitTick+0x98>)
 8002a02:	6002      	str	r2, [r0, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002a04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a08:	60c2      	str	r2, [r0, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002a0a:	6043      	str	r3, [r0, #4]
  htim4.Init.ClockDivision = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a12:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002a14:	f002 fb62 	bl	80050dc <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002a18:	4605      	mov	r5, r0
 8002a1a:	b130      	cbz	r0, 8002a2a <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	b009      	add	sp, #36	; 0x24
 8002a20:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a22:	f001 fc5d 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8002a26:	0043      	lsls	r3, r0, #1
 8002a28:	e7e4      	b.n	80029f4 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002a2a:	480c      	ldr	r0, [pc, #48]	; (8002a5c <HAL_InitTick+0x94>)
 8002a2c:	f002 fa0c 	bl	8004e48 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8002a30:	4605      	mov	r5, r0
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d1f2      	bne.n	8002a1c <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a36:	201e      	movs	r0, #30
 8002a38:	f000 fc22 	bl	8003280 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3c:	2c0f      	cmp	r4, #15
 8002a3e:	d901      	bls.n	8002a44 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 8002a40:	2501      	movs	r5, #1
 8002a42:	e7eb      	b.n	8002a1c <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002a44:	2200      	movs	r2, #0
 8002a46:	4621      	mov	r1, r4
 8002a48:	201e      	movs	r0, #30
 8002a4a:	f000 fbe1 	bl	8003210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a4e:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_InitTick+0x9c>)
 8002a50:	601c      	str	r4, [r3, #0]
 8002a52:	e7e3      	b.n	8002a1c <HAL_InitTick+0x54>
 8002a54:	40021000 	.word	0x40021000
 8002a58:	431bde83 	.word	0x431bde83
 8002a5c:	2000101c 	.word	0x2000101c
 8002a60:	40000800 	.word	0x40000800
 8002a64:	200008b0 	.word	0x200008b0

08002a68 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <NMI_Handler>
	...

08002a6c <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
    // Leer el registro CFSR para obtener información sobre el fallo
    uint32_t cfsr = SCB->CFSR;
 8002a6c:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <HardFault_Handler+0x8>)
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <HardFault_Handler+0x4>
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <MemManage_Handler>

08002a7a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <BusFault_Handler>

08002a7c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <UsageFault_Handler>

08002a7e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a7e:	4770      	bx	lr

08002a80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a82:	4802      	ldr	r0, [pc, #8]	; (8002a8c <TIM3_IRQHandler+0xc>)
 8002a84:	f002 fa32 	bl	8004eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a88:	bd08      	pop	{r3, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000b5c 	.word	0x20000b5c

08002a90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a92:	4802      	ldr	r0, [pc, #8]	; (8002a9c <TIM4_IRQHandler+0xc>)
 8002a94:	f002 fa2a 	bl	8004eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a98:	bd08      	pop	{r3, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000101c 	.word	0x2000101c

08002aa0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	4770      	bx	lr

08002aa4 <_kill>:

int _kill(int pid, int sig)
{
 8002aa4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa6:	f005 fd25 	bl	80084f4 <__errno>
 8002aaa:	2316      	movs	r3, #22
 8002aac:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002aae:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab2:	bd08      	pop	{r3, pc}

08002ab4 <_exit>:

void _exit (int status)
{
 8002ab4:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002ab6:	f04f 31ff 	mov.w	r1, #4294967295
 8002aba:	f7ff fff3 	bl	8002aa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002abe:	e7fe      	b.n	8002abe <_exit+0xa>

08002ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ac0:	b570      	push	{r4, r5, r6, lr}
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac6:	2500      	movs	r5, #0
 8002ac8:	e006      	b.n	8002ad8 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002aca:	f3af 8000 	nop.w
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad4:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002ad6:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad8:	42b5      	cmp	r5, r6
 8002ada:	dbf6      	blt.n	8002aca <_read+0xa>
  }

  return len;
}
 8002adc:	4630      	mov	r0, r6
 8002ade:	bd70      	pop	{r4, r5, r6, pc}

08002ae0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ae0:	b570      	push	{r4, r5, r6, lr}
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	2500      	movs	r5, #0
 8002ae8:	e004      	b.n	8002af4 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002aea:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002aee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	3501      	adds	r5, #1
 8002af4:	42b5      	cmp	r5, r6
 8002af6:	dbf8      	blt.n	8002aea <_write+0xa>
  }
  return len;
}
 8002af8:	4630      	mov	r0, r6
 8002afa:	bd70      	pop	{r4, r5, r6, pc}

08002afc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	4770      	bx	lr

08002b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b06:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002b08:	2000      	movs	r0, #0
 8002b0a:	4770      	bx	lr

08002b0c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	4770      	bx	lr

08002b10 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002b10:	2000      	movs	r0, #0
 8002b12:	4770      	bx	lr

08002b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <_sbrk+0x38>)
 8002b1a:	490d      	ldr	r1, [pc, #52]	; (8002b50 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b1c:	480d      	ldr	r0, [pc, #52]	; (8002b54 <_sbrk+0x40>)
 8002b1e:	6800      	ldr	r0, [r0, #0]
 8002b20:	b140      	cbz	r0, 8002b34 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b22:	480c      	ldr	r0, [pc, #48]	; (8002b54 <_sbrk+0x40>)
 8002b24:	6800      	ldr	r0, [r0, #0]
 8002b26:	4403      	add	r3, r0
 8002b28:	1a52      	subs	r2, r2, r1
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d806      	bhi.n	8002b3c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002b2e:	4a09      	ldr	r2, [pc, #36]	; (8002b54 <_sbrk+0x40>)
 8002b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002b32:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002b34:	4807      	ldr	r0, [pc, #28]	; (8002b54 <_sbrk+0x40>)
 8002b36:	4c08      	ldr	r4, [pc, #32]	; (8002b58 <_sbrk+0x44>)
 8002b38:	6004      	str	r4, [r0, #0]
 8002b3a:	e7f2      	b.n	8002b22 <_sbrk+0xe>
    errno = ENOMEM;
 8002b3c:	f005 fcda 	bl	80084f4 <__errno>
 8002b40:	230c      	movs	r3, #12
 8002b42:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	e7f3      	b.n	8002b32 <_sbrk+0x1e>
 8002b4a:	bf00      	nop
 8002b4c:	20005000 	.word	0x20005000
 8002b50:	00000400 	.word	0x00000400
 8002b54:	20001064 	.word	0x20001064
 8002b58:	20002ea8 	.word	0x20002ea8

08002b5c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b5c:	4770      	bx	lr
	...

08002b60 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 8002b60:	f7ff fffc 	bl	8002b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b64:	480b      	ldr	r0, [pc, #44]	; (8002b94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b66:	490c      	ldr	r1, [pc, #48]	; (8002b98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b68:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b6c:	e002      	b.n	8002b74 <LoopCopyDataInit>

08002b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b72:	3304      	adds	r3, #4

08002b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b78:	d3f9      	bcc.n	8002b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b7c:	4c09      	ldr	r4, [pc, #36]	; (8002ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b80:	e001      	b.n	8002b86 <LoopFillZerobss>

08002b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b84:	3204      	adds	r2, #4

08002b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b88:	d3fb      	bcc.n	8002b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b8a:	f005 fcb9 	bl	8008500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b8e:	f7fe fbb1 	bl	80012f4 <main>
  bx lr
 8002b92:	4770      	bx	lr
  ldr r0, =_sdata
 8002b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b98:	20000914 	.word	0x20000914
  ldr r2, =_sidata
 8002b9c:	0800a004 	.word	0x0800a004
  ldr r2, =_sbss
 8002ba0:	20000914 	.word	0x20000914
  ldr r4, =_ebss
 8002ba4:	20002ea8 	.word	0x20002ea8

08002ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ba8:	e7fe      	b.n	8002ba8 <ADC1_2_IRQHandler>
	...

08002bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bac:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bae:	4a07      	ldr	r2, [pc, #28]	; (8002bcc <HAL_Init+0x20>)
 8002bb0:	6813      	ldr	r3, [r2, #0]
 8002bb2:	f043 0310 	orr.w	r3, r3, #16
 8002bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f000 fb17 	bl	80031ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bbe:	200f      	movs	r0, #15
 8002bc0:	f7ff ff02 	bl	80029c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc4:	f7ff fdc2 	bl	800274c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002bc8:	2000      	movs	r0, #0
 8002bca:	bd08      	pop	{r3, pc}
 8002bcc:	40022000 	.word	0x40022000

08002bd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002bd0:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <HAL_IncTick+0x10>)
 8002bd2:	6811      	ldr	r1, [r2, #0]
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HAL_IncTick+0x14>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	440b      	add	r3, r1
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20001068 	.word	0x20001068
 8002be4:	200008ad 	.word	0x200008ad

08002be8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <HAL_GetTick+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20001068 	.word	0x20001068

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff fff6 	bl	8002be8 <HAL_GetTick>
 8002bfc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002c02:	d002      	beq.n	8002c0a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <HAL_Delay+0x24>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c0a:	f7ff ffed 	bl	8002be8 <HAL_GetTick>
 8002c0e:	1b40      	subs	r0, r0, r5
 8002c10:	42a0      	cmp	r0, r4
 8002c12:	d3fa      	bcc.n	8002c0a <HAL_Delay+0x16>
  {
  }
}
 8002c14:	bd38      	pop	{r3, r4, r5, pc}
 8002c16:	bf00      	nop
 8002c18:	200008ad 	.word	0x200008ad

08002c1c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	4605      	mov	r5, r0
 8002c22:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002c28:	f7ff ffde 	bl	8002be8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c2c:	682b      	ldr	r3, [r5, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002c34:	d123      	bne.n	8002c7e <HAL_ADC_PollForConversion+0x62>
 8002c36:	4607      	mov	r7, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002c3e:	d103      	bne.n	8002c48 <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002c42:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8002c46:	d029      	beq.n	8002c9c <HAL_ADC_PollForConversion+0x80>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_ADC_PollForConversion+0x170>)
 8002c4a:	681e      	ldr	r6, [r3, #0]
 8002c4c:	2002      	movs	r0, #2
 8002c4e:	f001 fc11 	bl	8004474 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c52:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	6919      	ldr	r1, [r3, #16]
 8002c5a:	4a4d      	ldr	r2, [pc, #308]	; (8002d90 <HAL_ADC_PollForConversion+0x174>)
 8002c5c:	4211      	tst	r1, r2
 8002c5e:	d136      	bne.n	8002cce <HAL_ADC_PollForConversion+0xb2>
 8002c60:	68d9      	ldr	r1, [r3, #12]
 8002c62:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 8002c66:	4211      	tst	r1, r2
 8002c68:	d131      	bne.n	8002cce <HAL_ADC_PollForConversion+0xb2>
 8002c6a:	6919      	ldr	r1, [r3, #16]
 8002c6c:	4a49      	ldr	r2, [pc, #292]	; (8002d94 <HAL_ADC_PollForConversion+0x178>)
 8002c6e:	4211      	tst	r1, r2
 8002c70:	d140      	bne.n	8002cf4 <HAL_ADC_PollForConversion+0xd8>
 8002c72:	68da      	ldr	r2, [r3, #12]
 8002c74:	4b48      	ldr	r3, [pc, #288]	; (8002d98 <HAL_ADC_PollForConversion+0x17c>)
 8002c76:	421a      	tst	r2, r3
 8002c78:	d03e      	beq.n	8002cf8 <HAL_ADC_PollForConversion+0xdc>
 8002c7a:	2329      	movs	r3, #41	; 0x29
 8002c7c:	e041      	b.n	8002d02 <HAL_ADC_PollForConversion+0xe6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002c80:	f043 0320 	orr.w	r3, r3, #32
 8002c84:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002c86:	2300      	movs	r3, #0
 8002c88:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 8002c8c:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8002c8e:	b003      	add	sp, #12
 8002c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c92:	682b      	ldr	r3, [r5, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f013 0f02 	tst.w	r3, #2
 8002c9a:	d00f      	beq.n	8002cbc <HAL_ADC_PollForConversion+0xa0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f013 0f02 	tst.w	r3, #2
 8002ca4:	d14f      	bne.n	8002d46 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 8002ca6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002caa:	d0f7      	beq.n	8002c9c <HAL_ADC_PollForConversion+0x80>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cac:	2c00      	cmp	r4, #0
 8002cae:	d0f0      	beq.n	8002c92 <HAL_ADC_PollForConversion+0x76>
 8002cb0:	f7ff ff9a 	bl	8002be8 <HAL_GetTick>
 8002cb4:	1bc3      	subs	r3, r0, r7
 8002cb6:	42a3      	cmp	r3, r4
 8002cb8:	d9f0      	bls.n	8002c9c <HAL_ADC_PollForConversion+0x80>
 8002cba:	e7ea      	b.n	8002c92 <HAL_ADC_PollForConversion+0x76>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 8002cca:	2003      	movs	r0, #3
 8002ccc:	e7df      	b.n	8002c8e <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002cce:	6919      	ldr	r1, [r3, #16]
 8002cd0:	4a30      	ldr	r2, [pc, #192]	; (8002d94 <HAL_ADC_PollForConversion+0x178>)
 8002cd2:	4211      	tst	r1, r2
 8002cd4:	d104      	bne.n	8002ce0 <HAL_ADC_PollForConversion+0xc4>
 8002cd6:	68d9      	ldr	r1, [r3, #12]
 8002cd8:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8002cdc:	4211      	tst	r1, r2
 8002cde:	d00d      	beq.n	8002cfc <HAL_ADC_PollForConversion+0xe0>
 8002ce0:	6919      	ldr	r1, [r3, #16]
 8002ce2:	4a2e      	ldr	r2, [pc, #184]	; (8002d9c <HAL_ADC_PollForConversion+0x180>)
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	b95a      	cbnz	r2, 8002d00 <HAL_ADC_PollForConversion+0xe4>
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <HAL_ADC_PollForConversion+0x180>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	b15b      	cbz	r3, 8002d08 <HAL_ADC_PollForConversion+0xec>
 8002cf0:	23fc      	movs	r3, #252	; 0xfc
 8002cf2:	e006      	b.n	8002d02 <HAL_ADC_PollForConversion+0xe6>
 8002cf4:	2329      	movs	r3, #41	; 0x29
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_PollForConversion+0xe6>
 8002cf8:	2314      	movs	r3, #20
 8002cfa:	e002      	b.n	8002d02 <HAL_ADC_PollForConversion+0xe6>
 8002cfc:	2354      	movs	r3, #84	; 0x54
 8002cfe:	e000      	b.n	8002d02 <HAL_ADC_PollForConversion+0xe6>
 8002d00:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002d02:	fb03 f606 	mul.w	r6, r3, r6
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d06:	e007      	b.n	8002d18 <HAL_ADC_PollForConversion+0xfc>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002d08:	2354      	movs	r3, #84	; 0x54
 8002d0a:	e7fa      	b.n	8002d02 <HAL_ADC_PollForConversion+0xe6>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d0c:	9b01      	ldr	r3, [sp, #4]
 8002d0e:	42b3      	cmp	r3, r6
 8002d10:	d310      	bcc.n	8002d34 <HAL_ADC_PollForConversion+0x118>
      Conversion_Timeout_CPU_cycles ++;
 8002d12:	9b01      	ldr	r3, [sp, #4]
 8002d14:	3301      	adds	r3, #1
 8002d16:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002d18:	9b01      	ldr	r3, [sp, #4]
 8002d1a:	42b3      	cmp	r3, r6
 8002d1c:	d213      	bcs.n	8002d46 <HAL_ADC_PollForConversion+0x12a>
      if(Timeout != HAL_MAX_DELAY)
 8002d1e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002d22:	d0f6      	beq.n	8002d12 <HAL_ADC_PollForConversion+0xf6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002d24:	2c00      	cmp	r4, #0
 8002d26:	d0f1      	beq.n	8002d0c <HAL_ADC_PollForConversion+0xf0>
 8002d28:	f7ff ff5e 	bl	8002be8 <HAL_GetTick>
 8002d2c:	1bc0      	subs	r0, r0, r7
 8002d2e:	42a0      	cmp	r0, r4
 8002d30:	d9ef      	bls.n	8002d12 <HAL_ADC_PollForConversion+0xf6>
 8002d32:	e7eb      	b.n	8002d0c <HAL_ADC_PollForConversion+0xf0>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d34:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d36:	f043 0304 	orr.w	r3, r3, #4
 8002d3a:	62ab      	str	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            return HAL_TIMEOUT;
 8002d42:	2003      	movs	r0, #3
 8002d44:	e7a3      	b.n	8002c8e <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d46:	682b      	ldr	r3, [r5, #0]
 8002d48:	f06f 0212 	mvn.w	r2, #18
 8002d4c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d54:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d62:	d001      	beq.n	8002d68 <HAL_ADC_PollForConversion+0x14c>
  return HAL_OK;
 8002d64:	2000      	movs	r0, #0
 8002d66:	e792      	b.n	8002c8e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d68:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d6a:	b960      	cbnz	r0, 8002d86 <HAL_ADC_PollForConversion+0x16a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d72:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d76:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002d7a:	d188      	bne.n	8002c8e <HAL_ADC_PollForConversion+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002d7e:	f043 0301 	orr.w	r3, r3, #1
 8002d82:	62ab      	str	r3, [r5, #40]	; 0x28
 8002d84:	e783      	b.n	8002c8e <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8002d86:	2000      	movs	r0, #0
 8002d88:	e781      	b.n	8002c8e <HAL_ADC_PollForConversion+0x72>
 8002d8a:	bf00      	nop
 8002d8c:	20000020 	.word	0x20000020
 8002d90:	24924924 	.word	0x24924924
 8002d94:	12492492 	.word	0x12492492
 8002d98:	00492492 	.word	0x00492492
 8002d9c:	00249249 	.word	0x00249249

08002da0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002da0:	6803      	ldr	r3, [r0, #0]
 8002da2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002da8:	b430      	push	{r4, r5}
 8002daa:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002dac:	2200      	movs	r2, #0
 8002dae:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002db0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002db4:	2a01      	cmp	r2, #1
 8002db6:	f000 808f 	beq.w	8002ed8 <HAL_ADC_ConfigChannel+0x130>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dc2:	684a      	ldr	r2, [r1, #4]
 8002dc4:	2a06      	cmp	r2, #6
 8002dc6:	d82d      	bhi.n	8002e24 <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002dc8:	6804      	ldr	r4, [r0, #0]
 8002dca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002dcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002dd0:	3a05      	subs	r2, #5
 8002dd2:	f04f 0c1f 	mov.w	ip, #31
 8002dd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8002dda:	ea20 000c 	bic.w	r0, r0, ip
 8002dde:	680d      	ldr	r5, [r1, #0]
 8002de0:	fa05 f202 	lsl.w	r2, r5, r2
 8002de4:	4302      	orrs	r2, r0
 8002de6:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002de8:	680a      	ldr	r2, [r1, #0]
 8002dea:	2a09      	cmp	r2, #9
 8002dec:	d938      	bls.n	8002e60 <HAL_ADC_ConfigChannel+0xb8>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002dee:	681c      	ldr	r4, [r3, #0]
 8002df0:	68e0      	ldr	r0, [r4, #12]
 8002df2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002df6:	3a1e      	subs	r2, #30
 8002df8:	f04f 0c07 	mov.w	ip, #7
 8002dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8002e00:	ea20 000c 	bic.w	r0, r0, ip
 8002e04:	688d      	ldr	r5, [r1, #8]
 8002e06:	fa05 f202 	lsl.w	r2, r5, r2
 8002e0a:	4302      	orrs	r2, r0
 8002e0c:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e0e:	680a      	ldr	r2, [r1, #0]
 8002e10:	3a10      	subs	r2, #16
 8002e12:	2a01      	cmp	r2, #1
 8002e14:	d934      	bls.n	8002e80 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e16:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002e1e:	b002      	add	sp, #8
 8002e20:	bc30      	pop	{r4, r5}
 8002e22:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8002e24:	2a0c      	cmp	r2, #12
 8002e26:	d80d      	bhi.n	8002e44 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e28:	6805      	ldr	r5, [r0, #0]
 8002e2a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002e2c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e30:	3a23      	subs	r2, #35	; 0x23
 8002e32:	241f      	movs	r4, #31
 8002e34:	4094      	lsls	r4, r2
 8002e36:	ea20 0004 	bic.w	r0, r0, r4
 8002e3a:	680c      	ldr	r4, [r1, #0]
 8002e3c:	4094      	lsls	r4, r2
 8002e3e:	4320      	orrs	r0, r4
 8002e40:	6328      	str	r0, [r5, #48]	; 0x30
 8002e42:	e7d1      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e44:	6805      	ldr	r5, [r0, #0]
 8002e46:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002e48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002e4c:	3a41      	subs	r2, #65	; 0x41
 8002e4e:	241f      	movs	r4, #31
 8002e50:	4094      	lsls	r4, r2
 8002e52:	ea20 0004 	bic.w	r0, r0, r4
 8002e56:	680c      	ldr	r4, [r1, #0]
 8002e58:	4094      	lsls	r4, r2
 8002e5a:	4320      	orrs	r0, r4
 8002e5c:	62e8      	str	r0, [r5, #44]	; 0x2c
 8002e5e:	e7c3      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e60:	681c      	ldr	r4, [r3, #0]
 8002e62:	6920      	ldr	r0, [r4, #16]
 8002e64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002e68:	f04f 0c07 	mov.w	ip, #7
 8002e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002e70:	ea20 000c 	bic.w	r0, r0, ip
 8002e74:	688d      	ldr	r5, [r1, #8]
 8002e76:	fa05 f202 	lsl.w	r2, r5, r2
 8002e7a:	4302      	orrs	r2, r0
 8002e7c:	6122      	str	r2, [r4, #16]
 8002e7e:	e7c6      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4816      	ldr	r0, [pc, #88]	; (8002edc <HAL_ADC_ConfigChannel+0x134>)
 8002e84:	4282      	cmp	r2, r0
 8002e86:	d005      	beq.n	8002e94 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8a:	f042 0220 	orr.w	r2, r2, #32
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8002e90:	2001      	movs	r0, #1
 8002e92:	e7c1      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e94:	6890      	ldr	r0, [r2, #8]
 8002e96:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e9c:	6890      	ldr	r0, [r2, #8]
 8002e9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002ea2:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ea4:	680a      	ldr	r2, [r1, #0]
 8002ea6:	2a10      	cmp	r2, #16
 8002ea8:	d001      	beq.n	8002eae <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eaa:	2000      	movs	r0, #0
 8002eac:	e7b4      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <HAL_ADC_ConfigChannel+0x138>)
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <HAL_ADC_ConfigChannel+0x13c>)
 8002eb4:	fba1 1202 	umull	r1, r2, r1, r2
 8002eb8:	0c92      	lsrs	r2, r2, #18
 8002eba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ebe:	0052      	lsls	r2, r2, #1
 8002ec0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002ec2:	e002      	b.n	8002eca <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8002ec4:	9a01      	ldr	r2, [sp, #4]
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002eca:	9a01      	ldr	r2, [sp, #4]
 8002ecc:	2a00      	cmp	r2, #0
 8002ece:	d1f9      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	e7a1      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x70>
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	e79f      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	e7a0      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x76>
 8002edc:	40012400 	.word	0x40012400
 8002ee0:	20000020 	.word	0x20000020
 8002ee4:	431bde83 	.word	0x431bde83

08002ee8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b530      	push	{r4, r5, lr}
 8002eea:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ef0:	6803      	ldr	r3, [r0, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	f012 0f01 	tst.w	r2, #1
 8002ef8:	d133      	bne.n	8002f62 <ADC_Enable+0x7a>
 8002efa:	4604      	mov	r4, r0
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f04:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <ADC_Enable+0x80>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <ADC_Enable+0x84>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9b      	lsrs	r3, r3, #18
 8002f10:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002f12:	e002      	b.n	8002f1a <ADC_Enable+0x32>
    {
      wait_loop_index--;
 8002f14:	9b01      	ldr	r3, [sp, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002f1a:	9b01      	ldr	r3, [sp, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f9      	bne.n	8002f14 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f20:	f7ff fe62 	bl	8002be8 <HAL_GetTick>
 8002f24:	4605      	mov	r5, r0

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f013 0f01 	tst.w	r3, #1
 8002f2e:	d116      	bne.n	8002f5e <ADC_Enable+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f30:	f7ff fe5a 	bl	8002be8 <HAL_GetTick>
 8002f34:	1b43      	subs	r3, r0, r5
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d9f5      	bls.n	8002f26 <ADC_Enable+0x3e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f013 0f01 	tst.w	r3, #1
 8002f42:	d1f0      	bne.n	8002f26 <ADC_Enable+0x3e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f46:	f043 0310 	orr.w	r3, r3, #16
 8002f4a:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	62e3      	str	r3, [r4, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f54:	2300      	movs	r3, #0
 8002f56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

          return HAL_ERROR;
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	e002      	b.n	8002f64 <ADC_Enable+0x7c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e000      	b.n	8002f64 <ADC_Enable+0x7c>
 8002f62:	2000      	movs	r0, #0
}
 8002f64:	b003      	add	sp, #12
 8002f66:	bd30      	pop	{r4, r5, pc}
 8002f68:	20000020 	.word	0x20000020
 8002f6c:	431bde83 	.word	0x431bde83

08002f70 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8002f70:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d068      	beq.n	800304a <HAL_ADC_Start+0xda>
{
 8002f78:	b510      	push	{r4, lr}
 8002f7a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002f82:	f7ff ffb1 	bl	8002ee8 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d15b      	bne.n	8003042 <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 8002f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f98:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	4a2c      	ldr	r2, [pc, #176]	; (8003050 <HAL_ADC_Start+0xe0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d027      	beq.n	8002ff2 <HAL_ADC_Start+0x82>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fa2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fa4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002fa8:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002fb0:	d005      	beq.n	8002fbe <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002fb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fb4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002fb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fbc:	62a2      	str	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fbe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fc0:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8002fc4:	d02b      	beq.n	800301e <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fc8:	f022 0206 	bic.w	r2, r2, #6
 8002fcc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fd4:	f06f 0202 	mvn.w	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002fe2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002fe6:	d01d      	beq.n	8003024 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e02a      	b.n	8003048 <HAL_ADC_Start+0xd8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ff2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002ff6:	6852      	ldr	r2, [r2, #4]
 8002ff8:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8002ffc:	d0d1      	beq.n	8002fa2 <HAL_ADC_Start+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ffe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003000:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003004:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <HAL_ADC_Start+0xe4>)
 8003008:	6852      	ldr	r2, [r2, #4]
 800300a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800300e:	d0d6      	beq.n	8002fbe <HAL_ADC_Start+0x4e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003010:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003012:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003016:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800301a:	62a2      	str	r2, [r4, #40]	; 0x28
 800301c:	e7cf      	b.n	8002fbe <HAL_ADC_Start+0x4e>
      ADC_CLEAR_ERRORCODE(hadc);
 800301e:	2200      	movs	r2, #0
 8003020:	62e2      	str	r2, [r4, #44]	; 0x2c
 8003022:	e7d4      	b.n	8002fce <HAL_ADC_Start+0x5e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <HAL_ADC_Start+0xe0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d004      	beq.n	8003034 <HAL_ADC_Start+0xc4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	e009      	b.n	8003048 <HAL_ADC_Start+0xd8>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003034:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8003038:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800303a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800303e:	d1d3      	bne.n	8002fe8 <HAL_ADC_Start+0x78>
 8003040:	e7f3      	b.n	800302a <HAL_ADC_Start+0xba>
    __HAL_UNLOCK(hadc);
 8003042:	2300      	movs	r3, #0
 8003044:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8003048:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800304a:	2002      	movs	r0, #2
}
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40012800 	.word	0x40012800
 8003054:	40012400 	.word	0x40012400

08003058 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003058:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800305a:	6803      	ldr	r3, [r0, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	f012 0f01 	tst.w	r2, #1
 8003062:	d101      	bne.n	8003068 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003064:	2000      	movs	r0, #0
}
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003072:	f7ff fdb9 	bl	8002be8 <HAL_GetTick>
 8003076:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f013 0f01 	tst.w	r3, #1
 8003080:	d013      	beq.n	80030aa <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003082:	f7ff fdb1 	bl	8002be8 <HAL_GetTick>
 8003086:	1b43      	subs	r3, r0, r5
 8003088:	2b02      	cmp	r3, #2
 800308a:	d9f5      	bls.n	8003078 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f013 0f01 	tst.w	r3, #1
 8003094:	d0f0      	beq.n	8003078 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003098:	f043 0310 	orr.w	r3, r3, #16
 800309c:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
 80030a8:	e7dd      	b.n	8003066 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 80030aa:	2000      	movs	r0, #0
 80030ac:	e7db      	b.n	8003066 <ADC_ConversionStop_Disable+0xe>
	...

080030b0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80030b0:	2800      	cmp	r0, #0
 80030b2:	d07b      	beq.n	80031ac <HAL_ADC_Init+0xfc>
{
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d04d      	beq.n	800315a <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff ffca 	bl	8003058 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030c6:	f013 0310 	ands.w	r3, r3, #16
 80030ca:	d169      	bne.n	80031a0 <HAL_ADC_Init+0xf0>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d167      	bne.n	80031a0 <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 80030d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030d2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80030d6:	f022 0202 	bic.w	r2, r2, #2
 80030da:	f042 0202 	orr.w	r2, r2, #2
 80030de:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030e0:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030e2:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80030e4:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80030e6:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80030e8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80030ec:	68a5      	ldr	r5, [r4, #8]
 80030ee:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80030f2:	d002      	beq.n	80030fa <HAL_ADC_Init+0x4a>
 80030f4:	2d01      	cmp	r5, #1
 80030f6:	d036      	beq.n	8003166 <HAL_ADC_Init+0xb6>
 80030f8:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030fa:	7d26      	ldrb	r6, [r4, #20]
 80030fc:	2e01      	cmp	r6, #1
 80030fe:	d035      	beq.n	800316c <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 8003100:	6826      	ldr	r6, [r4, #0]
 8003102:	6871      	ldr	r1, [r6, #4]
 8003104:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8003108:	4329      	orrs	r1, r5
 800310a:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800310c:	6825      	ldr	r5, [r4, #0]
 800310e:	68ae      	ldr	r6, [r5, #8]
 8003110:	4927      	ldr	r1, [pc, #156]	; (80031b0 <HAL_ADC_Init+0x100>)
 8003112:	4031      	ands	r1, r6
 8003114:	4311      	orrs	r1, r2
 8003116:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003118:	68a1      	ldr	r1, [r4, #8]
 800311a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800311e:	d001      	beq.n	8003124 <HAL_ADC_Init+0x74>
 8003120:	2901      	cmp	r1, #1
 8003122:	d102      	bne.n	800312a <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003124:	6923      	ldr	r3, [r4, #16]
 8003126:	3b01      	subs	r3, #1
 8003128:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800312a:	6825      	ldr	r5, [r4, #0]
 800312c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800312e:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8003132:	430b      	orrs	r3, r1
 8003134:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <HAL_ADC_Init+0x104>)
 800313c:	400b      	ands	r3, r1
 800313e:	429a      	cmp	r2, r3
 8003140:	d025      	beq.n	800318e <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 8003142:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003144:	f023 0312 	bic.w	r3, r3, #18
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8003156:	2001      	movs	r0, #1
 8003158:	e027      	b.n	80031aa <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 800315a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800315c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003160:	f7ff fb1e 	bl	80027a0 <HAL_ADC_MspInit>
 8003164:	e7ab      	b.n	80030be <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003166:	f44f 7580 	mov.w	r5, #256	; 0x100
 800316a:	e7c6      	b.n	80030fa <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800316c:	b931      	cbnz	r1, 800317c <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800316e:	69a1      	ldr	r1, [r4, #24]
 8003170:	3901      	subs	r1, #1
 8003172:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8003176:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 800317a:	e7c1      	b.n	8003100 <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800317e:	f041 0120 	orr.w	r1, r1, #32
 8003182:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003186:	f041 0101 	orr.w	r1, r1, #1
 800318a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800318c:	e7b8      	b.n	8003100 <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800318e:	2300      	movs	r3, #0
 8003190:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8003192:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003194:	f023 0303 	bic.w	r3, r3, #3
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	62a3      	str	r3, [r4, #40]	; 0x28
 800319e:	e004      	b.n	80031aa <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031a2:	f043 0310 	orr.w	r3, r3, #16
 80031a6:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80031a8:	2001      	movs	r0, #1
}
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80031ac:	2001      	movs	r0, #1
}
 80031ae:	4770      	bx	lr
 80031b0:	ffe1f7fd 	.word	0xffe1f7fd
 80031b4:	ff1f0efe 	.word	0xff1f0efe

080031b8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80031b8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d013      	beq.n	80031e8 <HAL_ADC_Stop+0x30>
{
 80031c0:	b510      	push	{r4, lr}
 80031c2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80031c4:	2301      	movs	r3, #1
 80031c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031ca:	f7ff ff45 	bl	8003058 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80031ce:	b938      	cbnz	r0, 80031e0 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80031d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80031e0:	2300      	movs	r3, #0
 80031e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80031e6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80031e8:	2002      	movs	r0, #2
}
 80031ea:	4770      	bx	lr

080031ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80031ee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031f4:	041b      	lsls	r3, r3, #16
 80031f6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031f8:	0200      	lsls	r0, r0, #8
 80031fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031fe:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003208:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003210:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_NVIC_SetPriority+0x68>)
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321a:	f1c3 0c07 	rsb	ip, r3, #7
 800321e:	f1bc 0f04 	cmp.w	ip, #4
 8003222:	bf28      	it	cs
 8003224:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003228:	f103 0e04 	add.w	lr, r3, #4
 800322c:	f1be 0f06 	cmp.w	lr, #6
 8003230:	d918      	bls.n	8003264 <HAL_NVIC_SetPriority+0x54>
 8003232:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 3eff 	mov.w	lr, #4294967295
 8003238:	fa0e fc0c 	lsl.w	ip, lr, ip
 800323c:	ea21 010c 	bic.w	r1, r1, ip
 8003240:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003242:	fa0e fe03 	lsl.w	lr, lr, r3
 8003246:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324a:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 800324c:	2800      	cmp	r0, #0
 800324e:	db0b      	blt.n	8003268 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003250:	0112      	lsls	r2, r2, #4
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003258:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800325c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003260:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003264:	2300      	movs	r3, #0
 8003266:	e7e5      	b.n	8003234 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003268:	f000 000f 	and.w	r0, r0, #15
 800326c:	0112      	lsls	r2, r2, #4
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	4b02      	ldr	r3, [pc, #8]	; (800327c <HAL_NVIC_SetPriority+0x6c>)
 8003272:	541a      	strb	r2, [r3, r0]
 8003274:	e7f4      	b.n	8003260 <HAL_NVIC_SetPriority+0x50>
 8003276:	bf00      	nop
 8003278:	e000ed00 	.word	0xe000ed00
 800327c:	e000ed14 	.word	0xe000ed14

08003280 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003280:	2800      	cmp	r0, #0
 8003282:	db07      	blt.n	8003294 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003284:	f000 021f 	and.w	r2, r0, #31
 8003288:	0940      	lsrs	r0, r0, #5
 800328a:	2301      	movs	r3, #1
 800328c:	4093      	lsls	r3, r2
 800328e:	4a02      	ldr	r2, [pc, #8]	; (8003298 <HAL_NVIC_EnableIRQ+0x18>)
 8003290:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	e000e100 	.word	0xe000e100

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032a0:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80032a2:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a4:	e0a6      	b.n	80033f4 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032a6:	4d80      	ldr	r5, [pc, #512]	; (80034a8 <HAL_GPIO_Init+0x20c>)
 80032a8:	42ab      	cmp	r3, r5
 80032aa:	d010      	beq.n	80032ce <HAL_GPIO_Init+0x32>
 80032ac:	d907      	bls.n	80032be <HAL_GPIO_Init+0x22>
 80032ae:	4d7f      	ldr	r5, [pc, #508]	; (80034ac <HAL_GPIO_Init+0x210>)
 80032b0:	42ab      	cmp	r3, r5
 80032b2:	d00c      	beq.n	80032ce <HAL_GPIO_Init+0x32>
 80032b4:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80032b8:	42ab      	cmp	r3, r5
 80032ba:	d008      	beq.n	80032ce <HAL_GPIO_Init+0x32>
 80032bc:	e013      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
 80032be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80032c2:	42ab      	cmp	r3, r5
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x32>
 80032c6:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 80032ca:	42ab      	cmp	r3, r5
 80032cc:	d107      	bne.n	80032de <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ce:	688b      	ldr	r3, [r1, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d058      	beq.n	8003386 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d051      	beq.n	800337c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80032d8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032da:	2408      	movs	r4, #8
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80032de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80032e2:	42ab      	cmp	r3, r5
 80032e4:	d0f3      	beq.n	80032ce <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032e6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80032ea:	d84e      	bhi.n	800338a <HAL_GPIO_Init+0xee>
 80032ec:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80032f2:	d84c      	bhi.n	800338e <HAL_GPIO_Init+0xf2>
 80032f4:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032f8:	6833      	ldr	r3, [r6, #0]
 80032fa:	250f      	movs	r5, #15
 80032fc:	4095      	lsls	r5, r2
 80032fe:	ea23 0305 	bic.w	r3, r3, r5
 8003302:	fa04 f202 	lsl.w	r2, r4, r2
 8003306:	4313      	orrs	r3, r2
 8003308:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800330a:	684b      	ldr	r3, [r1, #4]
 800330c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003310:	d06e      	beq.n	80033f0 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003312:	4b67      	ldr	r3, [pc, #412]	; (80034b0 <HAL_GPIO_Init+0x214>)
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	619a      	str	r2, [r3, #24]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	9301      	str	r3, [sp, #4]
 8003324:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003326:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800332a:	1c95      	adds	r5, r2, #2
 800332c:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_GPIO_Init+0x218>)
 800332e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003332:	f00c 0503 	and.w	r5, ip, #3
 8003336:	00ad      	lsls	r5, r5, #2
 8003338:	230f      	movs	r3, #15
 800333a:	40ab      	lsls	r3, r5
 800333c:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003340:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <HAL_GPIO_Init+0x21c>)
 8003342:	4298      	cmp	r0, r3
 8003344:	d029      	beq.n	800339a <HAL_GPIO_Init+0xfe>
 8003346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334a:	4298      	cmp	r0, r3
 800334c:	f000 808e 	beq.w	800346c <HAL_GPIO_Init+0x1d0>
 8003350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003354:	4298      	cmp	r0, r3
 8003356:	f000 808b 	beq.w	8003470 <HAL_GPIO_Init+0x1d4>
 800335a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800335e:	4298      	cmp	r0, r3
 8003360:	d019      	beq.n	8003396 <HAL_GPIO_Init+0xfa>
 8003362:	2304      	movs	r3, #4
 8003364:	e01a      	b.n	800339c <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003366:	68cc      	ldr	r4, [r1, #12]
          break;
 8003368:	e7bd      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800336a:	68cc      	ldr	r4, [r1, #12]
 800336c:	3404      	adds	r4, #4
          break;
 800336e:	e7ba      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003370:	68cc      	ldr	r4, [r1, #12]
 8003372:	3408      	adds	r4, #8
          break;
 8003374:	e7b7      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003376:	68cc      	ldr	r4, [r1, #12]
 8003378:	340c      	adds	r4, #12
          break;
 800337a:	e7b4      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 800337c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800337e:	2408      	movs	r4, #8
 8003380:	e7b1      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003382:	2400      	movs	r4, #0
 8003384:	e7af      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003386:	2404      	movs	r4, #4
 8003388:	e7ad      	b.n	80032e6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800338a:	1d06      	adds	r6, r0, #4
 800338c:	e7af      	b.n	80032ee <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800338e:	f1ac 0208 	sub.w	r2, ip, #8
 8003392:	0092      	lsls	r2, r2, #2
 8003394:	e7b0      	b.n	80032f8 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003396:	2303      	movs	r3, #3
 8003398:	e000      	b.n	800339c <HAL_GPIO_Init+0x100>
 800339a:	2300      	movs	r3, #0
 800339c:	40ab      	lsls	r3, r5
 800339e:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80033a0:	3202      	adds	r2, #2
 80033a2:	4d44      	ldr	r5, [pc, #272]	; (80034b4 <HAL_GPIO_Init+0x218>)
 80033a4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a8:	684b      	ldr	r3, [r1, #4]
 80033aa:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80033ae:	d061      	beq.n	8003474 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033b0:	4a42      	ldr	r2, [pc, #264]	; (80034bc <HAL_GPIO_Init+0x220>)
 80033b2:	6893      	ldr	r3, [r2, #8]
 80033b4:	ea43 030e 	orr.w	r3, r3, lr
 80033b8:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ba:	684b      	ldr	r3, [r1, #4]
 80033bc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80033c0:	d05e      	beq.n	8003480 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033c2:	4a3e      	ldr	r2, [pc, #248]	; (80034bc <HAL_GPIO_Init+0x220>)
 80033c4:	68d3      	ldr	r3, [r2, #12]
 80033c6:	ea43 030e 	orr.w	r3, r3, lr
 80033ca:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033cc:	684b      	ldr	r3, [r1, #4]
 80033ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80033d2:	d05b      	beq.n	800348c <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033d4:	4a39      	ldr	r2, [pc, #228]	; (80034bc <HAL_GPIO_Init+0x220>)
 80033d6:	6853      	ldr	r3, [r2, #4]
 80033d8:	ea43 030e 	orr.w	r3, r3, lr
 80033dc:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033de:	684b      	ldr	r3, [r1, #4]
 80033e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80033e4:	d058      	beq.n	8003498 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033e6:	4a35      	ldr	r2, [pc, #212]	; (80034bc <HAL_GPIO_Init+0x220>)
 80033e8:	6813      	ldr	r3, [r2, #0]
 80033ea:	ea43 030e 	orr.w	r3, r3, lr
 80033ee:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 80033f0:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f4:	680b      	ldr	r3, [r1, #0]
 80033f6:	fa33 f20c 	lsrs.w	r2, r3, ip
 80033fa:	d053      	beq.n	80034a4 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 80033fc:	2201      	movs	r2, #1
 80033fe:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003402:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8003406:	ea32 0303 	bics.w	r3, r2, r3
 800340a:	d1f1      	bne.n	80033f0 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 800340c:	684b      	ldr	r3, [r1, #4]
 800340e:	2b12      	cmp	r3, #18
 8003410:	f63f af49 	bhi.w	80032a6 <HAL_GPIO_Init+0xa>
 8003414:	2b12      	cmp	r3, #18
 8003416:	f63f af66 	bhi.w	80032e6 <HAL_GPIO_Init+0x4a>
 800341a:	a501      	add	r5, pc, #4	; (adr r5, 8003420 <HAL_GPIO_Init+0x184>)
 800341c:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8003420:	080032cf 	.word	0x080032cf
 8003424:	08003367 	.word	0x08003367
 8003428:	08003371 	.word	0x08003371
 800342c:	08003383 	.word	0x08003383
 8003430:	080032e7 	.word	0x080032e7
 8003434:	080032e7 	.word	0x080032e7
 8003438:	080032e7 	.word	0x080032e7
 800343c:	080032e7 	.word	0x080032e7
 8003440:	080032e7 	.word	0x080032e7
 8003444:	080032e7 	.word	0x080032e7
 8003448:	080032e7 	.word	0x080032e7
 800344c:	080032e7 	.word	0x080032e7
 8003450:	080032e7 	.word	0x080032e7
 8003454:	080032e7 	.word	0x080032e7
 8003458:	080032e7 	.word	0x080032e7
 800345c:	080032e7 	.word	0x080032e7
 8003460:	080032e7 	.word	0x080032e7
 8003464:	0800336b 	.word	0x0800336b
 8003468:	08003377 	.word	0x08003377
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800346c:	2301      	movs	r3, #1
 800346e:	e795      	b.n	800339c <HAL_GPIO_Init+0x100>
 8003470:	2302      	movs	r3, #2
 8003472:	e793      	b.n	800339c <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_GPIO_Init+0x220>)
 8003476:	6893      	ldr	r3, [r2, #8]
 8003478:	ea23 030e 	bic.w	r3, r3, lr
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	e79c      	b.n	80033ba <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003480:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <HAL_GPIO_Init+0x220>)
 8003482:	68d3      	ldr	r3, [r2, #12]
 8003484:	ea23 030e 	bic.w	r3, r3, lr
 8003488:	60d3      	str	r3, [r2, #12]
 800348a:	e79f      	b.n	80033cc <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800348c:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <HAL_GPIO_Init+0x220>)
 800348e:	6853      	ldr	r3, [r2, #4]
 8003490:	ea23 030e 	bic.w	r3, r3, lr
 8003494:	6053      	str	r3, [r2, #4]
 8003496:	e7a2      	b.n	80033de <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_GPIO_Init+0x220>)
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	ea23 030e 	bic.w	r3, r3, lr
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e7a5      	b.n	80033f0 <HAL_GPIO_Init+0x154>
  }
}
 80034a4:	b002      	add	sp, #8
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
 80034a8:	10220000 	.word	0x10220000
 80034ac:	10310000 	.word	0x10310000
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40010000 	.word	0x40010000
 80034b8:	40010800 	.word	0x40010800
 80034bc:	40010400 	.word	0x40010400

080034c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034c0:	6883      	ldr	r3, [r0, #8]
 80034c2:	4219      	tst	r1, r3
 80034c4:	d001      	beq.n	80034ca <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80034c6:	2001      	movs	r0, #1
 80034c8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ca:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80034cc:	4770      	bx	lr

080034ce <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ce:	b10a      	cbz	r2, 80034d4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d0:	6101      	str	r1, [r0, #16]
 80034d2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034d4:	0409      	lsls	r1, r1, #16
 80034d6:	6101      	str	r1, [r0, #16]
  }
}
 80034d8:	4770      	bx	lr

080034da <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034da:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034dc:	ea01 0203 	and.w	r2, r1, r3
 80034e0:	ea21 0103 	bic.w	r1, r1, r3
 80034e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80034e8:	6101      	str	r1, [r0, #16]
}
 80034ea:	4770      	bx	lr

080034ec <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ec:	6803      	ldr	r3, [r0, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80034f4:	d101      	bne.n	80034fa <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80034f6:	2000      	movs	r0, #0
}
 80034f8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034fe:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003500:	2300      	movs	r3, #0
 8003502:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003504:	2220      	movs	r2, #32
 8003506:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800350e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003510:	f042 0204 	orr.w	r2, r2, #4
 8003514:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003516:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800351a:	2001      	movs	r0, #1
 800351c:	4770      	bx	lr

0800351e <I2C_WaitOnFlagUntilTimeout>:
{
 800351e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003522:	4606      	mov	r6, r0
 8003524:	460c      	mov	r4, r1
 8003526:	4617      	mov	r7, r2
 8003528:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352a:	e03b      	b.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7ff fb5c 	bl	8002be8 <HAL_GetTick>
 8003530:	9b06      	ldr	r3, [sp, #24]
 8003532:	1ac0      	subs	r0, r0, r3
 8003534:	4540      	cmp	r0, r8
 8003536:	d802      	bhi.n	800353e <I2C_WaitOnFlagUntilTimeout+0x20>
 8003538:	f1b8 0f00 	cmp.w	r8, #0
 800353c:	d132      	bne.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800353e:	2d01      	cmp	r5, #1
 8003540:	d018      	beq.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003542:	6833      	ldr	r3, [r6, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	ea24 0303 	bic.w	r3, r4, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	429f      	cmp	r7, r3
 8003554:	d126      	bne.n	80035a4 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800355a:	2220      	movs	r2, #32
 800355c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003560:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003564:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003566:	f042 0220 	orr.w	r2, r2, #32
 800356a:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 800356c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8003570:	2001      	movs	r0, #1
 8003572:	e027      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003574:	6833      	ldr	r3, [r6, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	ea24 0303 	bic.w	r3, r4, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	e7e5      	b.n	8003552 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003586:	6833      	ldr	r3, [r6, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	ea24 0c03 	bic.w	ip, r4, r3
 800358e:	fa1f fc8c 	uxth.w	ip, ip
 8003592:	fabc fc8c 	clz	ip, ip
 8003596:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800359a:	4567      	cmp	r7, ip
 800359c:	d111      	bne.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 800359e:	f1b8 3fff 	cmp.w	r8, #4294967295
 80035a2:	d1c3      	bne.n	800352c <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a4:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80035a8:	2d01      	cmp	r5, #1
 80035aa:	d0ec      	beq.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x68>
 80035ac:	6833      	ldr	r3, [r6, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	ea24 0c03 	bic.w	ip, r4, r3
 80035b4:	fa1f fc8c 	uxth.w	ip, ip
 80035b8:	fabc fc8c 	clz	ip, ip
 80035bc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80035c0:	e7eb      	b.n	800359a <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 80035c2:	2000      	movs	r0, #0
}
 80035c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80035c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035cc:	4605      	mov	r5, r0
 80035ce:	460e      	mov	r6, r1
 80035d0:	4690      	mov	r8, r2
 80035d2:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d4:	e053      	b.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035dc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035de:	682b      	ldr	r3, [r5, #0]
 80035e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e4:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035ea:	2220      	movs	r2, #32
 80035ec:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035f4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80035f6:	f042 0204 	orr.w	r2, r2, #4
 80035fa:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80035fc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003600:	2001      	movs	r0, #1
 8003602:	e04a      	b.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003604:	f7ff faf0 	bl	8002be8 <HAL_GetTick>
 8003608:	eba0 0009 	sub.w	r0, r0, r9
 800360c:	4540      	cmp	r0, r8
 800360e:	d802      	bhi.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8003610:	f1b8 0f00 	cmp.w	r8, #0
 8003614:	d133      	bne.n	800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003616:	2f01      	cmp	r7, #1
 8003618:	d017      	beq.n	800364a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 800361a:	682b      	ldr	r3, [r5, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	ea26 0303 	bic.w	r3, r6, r3
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b00      	subs	r3, #0
 8003626:	bf18      	it	ne
 8003628:	2301      	movne	r3, #1
 800362a:	b343      	cbz	r3, 800367e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800362c:	2300      	movs	r3, #0
 800362e:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003630:	2220      	movs	r2, #32
 8003632:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003636:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800363a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003642:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8003646:	2001      	movs	r0, #1
 8003648:	e027      	b.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800364a:	682b      	ldr	r3, [r5, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	ea26 0303 	bic.w	r3, r6, r3
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b00      	subs	r3, #0
 8003656:	bf18      	it	ne
 8003658:	2301      	movne	r3, #1
 800365a:	e7e6      	b.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	699c      	ldr	r4, [r3, #24]
 8003660:	ea26 0404 	bic.w	r4, r6, r4
 8003664:	b2a4      	uxth	r4, r4
 8003666:	3c00      	subs	r4, #0
 8003668:	bf18      	it	ne
 800366a:	2401      	movne	r4, #1
 800366c:	b1a4      	cbz	r4, 8003698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003676:	d1ae      	bne.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003678:	f1b8 3fff 	cmp.w	r8, #4294967295
 800367c:	d1c2      	bne.n	8003604 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800367e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8003682:	2f01      	cmp	r7, #1
 8003684:	d1ea      	bne.n	800365c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	695c      	ldr	r4, [r3, #20]
 800368a:	ea26 0404 	bic.w	r4, r6, r4
 800368e:	b2a4      	uxth	r4, r4
 8003690:	3c00      	subs	r4, #0
 8003692:	bf18      	it	ne
 8003694:	2401      	movne	r4, #1
 8003696:	e7e9      	b.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8003698:	2000      	movs	r0, #0
}
 800369a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080036a0 <I2C_MasterRequestWrite>:
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b083      	sub	sp, #12
 80036a4:	4604      	mov	r4, r0
 80036a6:	460d      	mov	r5, r1
 80036a8:	4616      	mov	r6, r2
 80036aa:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d00d      	beq.n	80036ce <I2C_MasterRequestWrite+0x2e>
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d00b      	beq.n	80036ce <I2C_MasterRequestWrite+0x2e>
 80036b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036ba:	d008      	beq.n	80036ce <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80036be:	2b12      	cmp	r3, #18
 80036c0:	d10a      	bne.n	80036d8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c2:	6802      	ldr	r2, [r0, #0]
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e004      	b.n	80036d8 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	6813      	ldr	r3, [r2, #0]
 80036d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	9700      	str	r7, [sp, #0]
 80036da:	4633      	mov	r3, r6
 80036dc:	2200      	movs	r2, #0
 80036de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036e2:	4620      	mov	r0, r4
 80036e4:	f7ff ff1b 	bl	800351e <I2C_WaitOnFlagUntilTimeout>
 80036e8:	b980      	cbnz	r0, 800370c <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f0:	d116      	bne.n	8003720 <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80036f8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036fa:	463b      	mov	r3, r7
 80036fc:	4632      	mov	r2, r6
 80036fe:	4913      	ldr	r1, [pc, #76]	; (800374c <I2C_MasterRequestWrite+0xac>)
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff ff61 	bl	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003706:	b9f8      	cbnz	r0, 8003748 <I2C_MasterRequestWrite+0xa8>
}
 8003708:	b003      	add	sp, #12
 800370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003714:	d002      	beq.n	800371c <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800371c:	2003      	movs	r0, #3
 800371e:	e7f3      	b.n	8003708 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003720:	11eb      	asrs	r3, r5, #7
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	f003 0306 	and.w	r3, r3, #6
 8003728:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800372c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800372e:	463b      	mov	r3, r7
 8003730:	4632      	mov	r2, r6
 8003732:	4907      	ldr	r1, [pc, #28]	; (8003750 <I2C_MasterRequestWrite+0xb0>)
 8003734:	4620      	mov	r0, r4
 8003736:	f7ff ff47 	bl	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800373a:	b918      	cbnz	r0, 8003744 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	b2ed      	uxtb	r5, r5
 8003740:	611d      	str	r5, [r3, #16]
 8003742:	e7da      	b.n	80036fa <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8003744:	2001      	movs	r0, #1
 8003746:	e7df      	b.n	8003708 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
 800374a:	e7dd      	b.n	8003708 <I2C_MasterRequestWrite+0x68>
 800374c:	00010002 	.word	0x00010002
 8003750:	00010008 	.word	0x00010008

08003754 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	460d      	mov	r5, r1
 800375a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003764:	d121      	bne.n	80037aa <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff fec0 	bl	80034ec <I2C_IsAcknowledgeFailed>
 800376c:	b9f8      	cbnz	r0, 80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800376e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003772:	d0f3      	beq.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003774:	f7ff fa38 	bl	8002be8 <HAL_GetTick>
 8003778:	1b80      	subs	r0, r0, r6
 800377a:	42a8      	cmp	r0, r5
 800377c:	d801      	bhi.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800377e:	2d00      	cmp	r5, #0
 8003780:	d1ec      	bne.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f013 0f80 	tst.w	r3, #128	; 0x80
 800378a:	d1e7      	bne.n	800375c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800378c:	2300      	movs	r3, #0
 800378e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003790:	2220      	movs	r2, #32
 8003792:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003796:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800379c:	f042 0220 	orr.w	r2, r2, #32
 80037a0:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 80037a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
 80037a8:	e000      	b.n	80037ac <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 80037aa:	2000      	movs	r0, #0
}
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80037ae:	2001      	movs	r0, #1
 80037b0:	e7fc      	b.n	80037ac <I2C_WaitOnTXEFlagUntilTimeout+0x58>

080037b2 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80037b2:	b570      	push	{r4, r5, r6, lr}
 80037b4:	4604      	mov	r4, r0
 80037b6:	460d      	mov	r5, r1
 80037b8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f013 0f04 	tst.w	r3, #4
 80037c2:	d121      	bne.n	8003808 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff fe91 	bl	80034ec <I2C_IsAcknowledgeFailed>
 80037ca:	b9f8      	cbnz	r0, 800380c <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80037cc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80037d0:	d0f3      	beq.n	80037ba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7ff fa09 	bl	8002be8 <HAL_GetTick>
 80037d6:	1b80      	subs	r0, r0, r6
 80037d8:	42a8      	cmp	r0, r5
 80037da:	d801      	bhi.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80037dc:	2d00      	cmp	r5, #0
 80037de:	d1ec      	bne.n	80037ba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f013 0f04 	tst.w	r3, #4
 80037e8:	d1e7      	bne.n	80037ba <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	2220      	movs	r2, #32
 80037f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003800:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8003804:	2001      	movs	r0, #1
 8003806:	e000      	b.n	800380a <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8003808:	2000      	movs	r0, #0
}
 800380a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800380c:	2001      	movs	r0, #1
 800380e:	e7fc      	b.n	800380a <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08003810 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003810:	2800      	cmp	r0, #0
 8003812:	f000 80cc 	beq.w	80039ae <HAL_I2C_Init+0x19e>
{
 8003816:	b570      	push	{r4, r5, r6, lr}
 8003818:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800381a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800381e:	2b00      	cmp	r3, #0
 8003820:	d077      	beq.n	8003912 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003822:	2324      	movs	r3, #36	; 0x24
 8003824:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	6813      	ldr	r3, [r2, #0]
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003832:	6822      	ldr	r2, [r4, #0]
 8003834:	6813      	ldr	r3, [r2, #0]
 8003836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800383c:	6822      	ldr	r2, [r4, #0]
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003844:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003846:	f000 fd4b 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800384a:	6862      	ldr	r2, [r4, #4]
 800384c:	4b5a      	ldr	r3, [pc, #360]	; (80039b8 <HAL_I2C_Init+0x1a8>)
 800384e:	429a      	cmp	r2, r3
 8003850:	d864      	bhi.n	800391c <HAL_I2C_Init+0x10c>
 8003852:	4b5a      	ldr	r3, [pc, #360]	; (80039bc <HAL_I2C_Init+0x1ac>)
 8003854:	4298      	cmp	r0, r3
 8003856:	bf8c      	ite	hi
 8003858:	2300      	movhi	r3, #0
 800385a:	2301      	movls	r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	f040 80a8 	bne.w	80039b2 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003862:	4957      	ldr	r1, [pc, #348]	; (80039c0 <HAL_I2C_Init+0x1b0>)
 8003864:	fba1 3100 	umull	r3, r1, r1, r0
 8003868:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800386a:	6825      	ldr	r5, [r4, #0]
 800386c:	686a      	ldr	r2, [r5, #4]
 800386e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003872:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8003876:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003878:	6821      	ldr	r1, [r4, #0]
 800387a:	6a0a      	ldr	r2, [r1, #32]
 800387c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003880:	6866      	ldr	r6, [r4, #4]
 8003882:	4d4d      	ldr	r5, [pc, #308]	; (80039b8 <HAL_I2C_Init+0x1a8>)
 8003884:	42ae      	cmp	r6, r5
 8003886:	d84f      	bhi.n	8003928 <HAL_I2C_Init+0x118>
 8003888:	3301      	adds	r3, #1
 800388a:	4313      	orrs	r3, r2
 800388c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800388e:	6821      	ldr	r1, [r4, #0]
 8003890:	69ca      	ldr	r2, [r1, #28]
 8003892:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8003896:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800389a:	6865      	ldr	r5, [r4, #4]
 800389c:	4b46      	ldr	r3, [pc, #280]	; (80039b8 <HAL_I2C_Init+0x1a8>)
 800389e:	429d      	cmp	r5, r3
 80038a0:	d84c      	bhi.n	800393c <HAL_I2C_Init+0x12c>
 80038a2:	1e43      	subs	r3, r0, #1
 80038a4:	006d      	lsls	r5, r5, #1
 80038a6:	fbb3 f3f5 	udiv	r3, r3, r5
 80038aa:	3301      	adds	r3, #1
 80038ac:	f640 70fc 	movw	r0, #4092	; 0xffc
 80038b0:	4203      	tst	r3, r0
 80038b2:	d078      	beq.n	80039a6 <HAL_I2C_Init+0x196>
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	431a      	orrs	r2, r3
 80038ba:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038bc:	6821      	ldr	r1, [r4, #0]
 80038be:	680b      	ldr	r3, [r1, #0]
 80038c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038c4:	69e2      	ldr	r2, [r4, #28]
 80038c6:	6a20      	ldr	r0, [r4, #32]
 80038c8:	4302      	orrs	r2, r0
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038ce:	6821      	ldr	r1, [r4, #0]
 80038d0:	688b      	ldr	r3, [r1, #8]
 80038d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038da:	6922      	ldr	r2, [r4, #16]
 80038dc:	68e0      	ldr	r0, [r4, #12]
 80038de:	4302      	orrs	r2, r0
 80038e0:	4313      	orrs	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e4:	6821      	ldr	r1, [r4, #0]
 80038e6:	68cb      	ldr	r3, [r1, #12]
 80038e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ec:	6962      	ldr	r2, [r4, #20]
 80038ee:	69a0      	ldr	r0, [r4, #24]
 80038f0:	4302      	orrs	r2, r0
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	6813      	ldr	r3, [r2, #0]
 80038fa:	f043 0301 	orr.w	r3, r3, #1
 80038fe:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	2000      	movs	r0, #0
 8003902:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003904:	2320      	movs	r3, #32
 8003906:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800390a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003910:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003912:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003916:	f7fe ff95 	bl	8002844 <HAL_I2C_MspInit>
 800391a:	e782      	b.n	8003822 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391c:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <HAL_I2C_Init+0x1b4>)
 800391e:	4298      	cmp	r0, r3
 8003920:	bf8c      	ite	hi
 8003922:	2300      	movhi	r3, #0
 8003924:	2301      	movls	r3, #1
 8003926:	e799      	b.n	800385c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003928:	f44f 7596 	mov.w	r5, #300	; 0x12c
 800392c:	fb05 f303 	mul.w	r3, r5, r3
 8003930:	4d25      	ldr	r5, [pc, #148]	; (80039c8 <HAL_I2C_Init+0x1b8>)
 8003932:	fba5 5303 	umull	r5, r3, r5, r3
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	3301      	adds	r3, #1
 800393a:	e7a6      	b.n	800388a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800393c:	68a6      	ldr	r6, [r4, #8]
 800393e:	b9be      	cbnz	r6, 8003970 <HAL_I2C_Init+0x160>
 8003940:	1e43      	subs	r3, r0, #1
 8003942:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8003946:	fbb3 f3fc 	udiv	r3, r3, ip
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	fab3 f383 	clz	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	bb43      	cbnz	r3, 80039aa <HAL_I2C_Init+0x19a>
 8003958:	b9c6      	cbnz	r6, 800398c <HAL_I2C_Init+0x17c>
 800395a:	1e43      	subs	r3, r0, #1
 800395c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003960:	fbb3 f3f5 	udiv	r3, r3, r5
 8003964:	3301      	adds	r3, #1
 8003966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396e:	e7a3      	b.n	80038b8 <HAL_I2C_Init+0xa8>
 8003970:	1e43      	subs	r3, r0, #1
 8003972:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8003976:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800397a:	fbb3 f3fc 	udiv	r3, r3, ip
 800397e:	3301      	adds	r3, #1
 8003980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	e7e4      	b.n	8003956 <HAL_I2C_Init+0x146>
 800398c:	1e43      	subs	r3, r0, #1
 800398e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003992:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8003996:	fbb3 f3f5 	udiv	r3, r3, r5
 800399a:	3301      	adds	r3, #1
 800399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039a4:	e788      	b.n	80038b8 <HAL_I2C_Init+0xa8>
 80039a6:	2304      	movs	r3, #4
 80039a8:	e786      	b.n	80038b8 <HAL_I2C_Init+0xa8>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e784      	b.n	80038b8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80039ae:	2001      	movs	r0, #1
}
 80039b0:	4770      	bx	lr
    return HAL_ERROR;
 80039b2:	2001      	movs	r0, #1
 80039b4:	e7ac      	b.n	8003910 <HAL_I2C_Init+0x100>
 80039b6:	bf00      	nop
 80039b8:	000186a0 	.word	0x000186a0
 80039bc:	001e847f 	.word	0x001e847f
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	003d08ff 	.word	0x003d08ff
 80039c8:	10624dd3 	.word	0x10624dd3

080039cc <HAL_I2C_Master_Transmit>:
{
 80039cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039d0:	b085      	sub	sp, #20
 80039d2:	4604      	mov	r4, r0
 80039d4:	460f      	mov	r7, r1
 80039d6:	4691      	mov	r9, r2
 80039d8:	4698      	mov	r8, r3
 80039da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7ff f904 	bl	8002be8 <HAL_GetTick>
 80039e0:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80039e6:	b2c0      	uxtb	r0, r0
 80039e8:	2820      	cmp	r0, #32
 80039ea:	d004      	beq.n	80039f6 <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80039ec:	2702      	movs	r7, #2
}
 80039ee:	4638      	mov	r0, r7
 80039f0:	b005      	add	sp, #20
 80039f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f6:	9500      	str	r5, [sp, #0]
 80039f8:	2319      	movs	r3, #25
 80039fa:	2201      	movs	r2, #1
 80039fc:	494f      	ldr	r1, [pc, #316]	; (8003b3c <HAL_I2C_Master_Transmit+0x170>)
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7ff fd8d 	bl	800351e <I2C_WaitOnFlagUntilTimeout>
 8003a04:	2800      	cmp	r0, #0
 8003a06:	f040 8092 	bne.w	8003b2e <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8003a0a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	f000 808f 	beq.w	8003b32 <HAL_I2C_Master_Transmit+0x166>
 8003a14:	2301      	movs	r3, #1
 8003a16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f012 0f01 	tst.w	r2, #1
 8003a22:	d103      	bne.n	8003a2c <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a2c:	6822      	ldr	r2, [r4, #0]
 8003a2e:	6813      	ldr	r3, [r2, #0]
 8003a30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a34:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a36:	2321      	movs	r3, #33	; 0x21
 8003a38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003a46:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a4a:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a50:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a52:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <HAL_I2C_Master_Transmit+0x174>)
 8003a54:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a56:	462b      	mov	r3, r5
 8003a58:	4632      	mov	r2, r6
 8003a5a:	4639      	mov	r1, r7
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f7ff fe1f 	bl	80036a0 <I2C_MasterRequestWrite>
 8003a62:	4607      	mov	r7, r0
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d166      	bne.n	8003b36 <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9303      	str	r3, [sp, #12]
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	9203      	str	r2, [sp, #12]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	9303      	str	r3, [sp, #12]
 8003a76:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003a78:	e011      	b.n	8003a9e <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8003a80:	2701      	movs	r7, #1
 8003a82:	e7b4      	b.n	80039ee <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	6813      	ldr	r3, [r2, #0]
 8003a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a8c:	6013      	str	r3, [r2, #0]
 8003a8e:	e7f7      	b.n	8003a80 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a90:	462a      	mov	r2, r5
 8003a92:	4631      	mov	r1, r6
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fe8c 	bl	80037b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d12e      	bne.n	8003afc <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8003a9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d036      	beq.n	8003b12 <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa4:	462a      	mov	r2, r5
 8003aa6:	4631      	mov	r1, r6
 8003aa8:	4620      	mov	r0, r4
 8003aaa:	f7ff fe53 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d1e3      	bne.n	8003a7a <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ac0:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003ac2:	b289      	uxth	r1, r1
 8003ac4:	3901      	subs	r1, #1
 8003ac6:	b289      	uxth	r1, r1
 8003ac8:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003aca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	6951      	ldr	r1, [r2, #20]
 8003ad6:	f011 0f04 	tst.w	r1, #4
 8003ada:	d0d9      	beq.n	8003a90 <HAL_I2C_Master_Transmit+0xc4>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0d7      	beq.n	8003a90 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae0:	7843      	ldrb	r3, [r0, #1]
 8003ae2:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003aea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003af4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	8523      	strh	r3, [r4, #40]	; 0x28
 8003afa:	e7c9      	b.n	8003a90 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8003b02:	2701      	movs	r7, #1
 8003b04:	e773      	b.n	80039ee <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	6813      	ldr	r3, [r2, #0]
 8003b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	e7f7      	b.n	8003b02 <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	6813      	ldr	r3, [r2, #0]
 8003b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b1a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003b28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003b2c:	e75f      	b.n	80039ee <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8003b2e:	2702      	movs	r7, #2
 8003b30:	e75d      	b.n	80039ee <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8003b32:	2702      	movs	r7, #2
 8003b34:	e75b      	b.n	80039ee <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8003b36:	2701      	movs	r7, #1
 8003b38:	e759      	b.n	80039ee <HAL_I2C_Master_Transmit+0x22>
 8003b3a:	bf00      	nop
 8003b3c:	00100002 	.word	0x00100002
 8003b40:	ffff0000 	.word	0xffff0000

08003b44 <HAL_I2C_IsDeviceReady>:
{
 8003b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4688      	mov	r8, r1
 8003b4e:	4691      	mov	r9, r2
 8003b50:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003b52:	f7ff f849 	bl	8002be8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b56:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d003      	beq.n	8003b68 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8003b60:	2002      	movs	r0, #2
}
 8003b62:	b005      	add	sp, #20
 8003b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b68:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6a:	9000      	str	r0, [sp, #0]
 8003b6c:	2319      	movs	r3, #25
 8003b6e:	2201      	movs	r2, #1
 8003b70:	4957      	ldr	r1, [pc, #348]	; (8003cd0 <HAL_I2C_IsDeviceReady+0x18c>)
 8003b72:	4620      	mov	r0, r4
 8003b74:	f7ff fcd3 	bl	800351e <I2C_WaitOnFlagUntilTimeout>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	f040 80a0 	bne.w	8003cbe <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8003b7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	f000 809d 	beq.w	8003cc2 <HAL_I2C_IsDeviceReady+0x17e>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	f012 0f01 	tst.w	r2, #1
 8003b96:	d103      	bne.n	8003ba0 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ba0:	6822      	ldr	r2, [r4, #0]
 8003ba2:	6813      	ldr	r3, [r2, #0]
 8003ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ba8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003baa:	2324      	movs	r3, #36	; 0x24
 8003bac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb0:	2700      	movs	r7, #0
 8003bb2:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb4:	4b47      	ldr	r3, [pc, #284]	; (8003cd4 <HAL_I2C_IsDeviceReady+0x190>)
 8003bb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bb8:	e040      	b.n	8003c3c <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003bc2:	d002      	beq.n	8003bca <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bc8:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003bca:	2003      	movs	r0, #3
 8003bcc:	e7c9      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bce:	23a0      	movs	r3, #160	; 0xa0
 8003bd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bd4:	6822      	ldr	r2, [r4, #0]
 8003bd6:	6953      	ldr	r3, [r2, #20]
 8003bd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	6952      	ldr	r2, [r2, #20]
 8003bde:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003be2:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8003be6:	fa5f fc8c 	uxtb.w	ip, ip
 8003bea:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 8003bee:	d009      	beq.n	8003c04 <HAL_I2C_IsDeviceReady+0xc0>
 8003bf0:	b943      	cbnz	r3, 8003c04 <HAL_I2C_IsDeviceReady+0xc0>
 8003bf2:	b93a      	cbnz	r2, 8003c04 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf4:	f7fe fff8 	bl	8002be8 <HAL_GetTick>
 8003bf8:	1b80      	subs	r0, r0, r6
 8003bfa:	42a8      	cmp	r0, r5
 8003bfc:	d8e7      	bhi.n	8003bce <HAL_I2C_IsDeviceReady+0x8a>
 8003bfe:	2d00      	cmp	r5, #0
 8003c00:	d1e8      	bne.n	8003bd4 <HAL_I2C_IsDeviceReady+0x90>
 8003c02:	e7e4      	b.n	8003bce <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c04:	2320      	movs	r3, #32
 8003c06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	f012 0f02 	tst.w	r2, #2
 8003c12:	d131      	bne.n	8003c78 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c22:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c24:	9600      	str	r6, [sp, #0]
 8003c26:	2319      	movs	r3, #25
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4929      	ldr	r1, [pc, #164]	; (8003cd0 <HAL_I2C_IsDeviceReady+0x18c>)
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff fc76 	bl	800351e <I2C_WaitOnFlagUntilTimeout>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d149      	bne.n	8003cca <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8003c36:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003c38:	454f      	cmp	r7, r9
 8003c3a:	d238      	bcs.n	8003cae <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3c:	6822      	ldr	r2, [r4, #0]
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c46:	9600      	str	r6, [sp, #0]
 8003c48:	462b      	mov	r3, r5
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff fc64 	bl	800351e <I2C_WaitOnFlagUntilTimeout>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	d1af      	bne.n	8003bba <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003c60:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003c62:	f7fe ffc1 	bl	8002be8 <HAL_GetTick>
 8003c66:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	6953      	ldr	r3, [r2, #20]
 8003c6c:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c70:	6952      	ldr	r2, [r2, #20]
 8003c72:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c76:	e7b4      	b.n	8003be2 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c80:	2300      	movs	r3, #0
 8003c82:	9303      	str	r3, [sp, #12]
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	9203      	str	r2, [sp, #12]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	9303      	str	r3, [sp, #12]
 8003c8e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c90:	9600      	str	r6, [sp, #0]
 8003c92:	2319      	movs	r3, #25
 8003c94:	2201      	movs	r2, #1
 8003c96:	490e      	ldr	r1, [pc, #56]	; (8003cd0 <HAL_I2C_IsDeviceReady+0x18c>)
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7ff fc40 	bl	800351e <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	b990      	cbnz	r0, 8003cc6 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	2320      	movs	r3, #32
 8003ca2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8003cac:	e759      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	2320      	movs	r3, #32
 8003cb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003cba:	2001      	movs	r0, #1
 8003cbc:	e751      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	e74f      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003cc2:	2002      	movs	r0, #2
 8003cc4:	e74d      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	e74b      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003cca:	2001      	movs	r0, #1
 8003ccc:	e749      	b.n	8003b62 <HAL_I2C_IsDeviceReady+0x1e>
 8003cce:	bf00      	nop
 8003cd0:	00100002 	.word	0x00100002
 8003cd4:	ffff0000 	.word	0xffff0000

08003cd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cd8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <RCC_Delay+0x24>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <RCC_Delay+0x28>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	0a5b      	lsrs	r3, r3, #9
 8003ce6:	fb00 f303 	mul.w	r3, r0, r3
 8003cea:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003cec:	bf00      	nop
  }
  while (Delay --);
 8003cee:	9b01      	ldr	r3, [sp, #4]
 8003cf0:	1e5a      	subs	r2, r3, #1
 8003cf2:	9201      	str	r2, [sp, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f9      	bne.n	8003cec <RCC_Delay+0x14>
}
 8003cf8:	b002      	add	sp, #8
 8003cfa:	4770      	bx	lr
 8003cfc:	20000020 	.word	0x20000020
 8003d00:	10624dd3 	.word	0x10624dd3

08003d04 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003d04:	2800      	cmp	r0, #0
 8003d06:	f000 81f1 	beq.w	80040ec <HAL_RCC_OscConfig+0x3e8>
{
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d10:	6803      	ldr	r3, [r0, #0]
 8003d12:	f013 0f01 	tst.w	r3, #1
 8003d16:	d02c      	beq.n	8003d72 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d18:	4b99      	ldr	r3, [pc, #612]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 030c 	and.w	r3, r3, #12
 8003d20:	2b04      	cmp	r3, #4
 8003d22:	d01d      	beq.n	8003d60 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d24:	4b96      	ldr	r3, [pc, #600]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d012      	beq.n	8003d56 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d30:	6863      	ldr	r3, [r4, #4]
 8003d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d36:	d041      	beq.n	8003dbc <HAL_RCC_OscConfig+0xb8>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d155      	bne.n	8003de8 <HAL_RCC_OscConfig+0xe4>
 8003d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d40:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	e037      	b.n	8003dc6 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d56:	4b8a      	ldr	r3, [pc, #552]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003d5e:	d0e7      	beq.n	8003d30 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	4b87      	ldr	r3, [pc, #540]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_OscConfig+0x6e>
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 81bf 	beq.w	80040f0 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	f013 0f02 	tst.w	r3, #2
 8003d78:	d075      	beq.n	8003e66 <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7a:	4b81      	ldr	r3, [pc, #516]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f013 0f0c 	tst.w	r3, #12
 8003d82:	d05f      	beq.n	8003e44 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d84:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d054      	beq.n	8003e3a <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 808a 	beq.w	8003eac <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003d98:	4b7a      	ldr	r3, [pc, #488]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d9e:	f7fe ff23 	bl	8002be8 <HAL_GetTick>
 8003da2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	4b76      	ldr	r3, [pc, #472]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f013 0f02 	tst.w	r3, #2
 8003dac:	d175      	bne.n	8003e9a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dae:	f7fe ff1b 	bl	8002be8 <HAL_GetTick>
 8003db2:	1b40      	subs	r0, r0, r5
 8003db4:	2802      	cmp	r0, #2
 8003db6:	d9f5      	bls.n	8003da4 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003db8:	2003      	movs	r0, #3
 8003dba:	e19e      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbc:	4a70      	ldr	r2, [pc, #448]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc6:	6863      	ldr	r3, [r4, #4]
 8003dc8:	b343      	cbz	r3, 8003e1c <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003dca:	f7fe ff0d 	bl	8002be8 <HAL_GetTick>
 8003dce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd0:	4b6b      	ldr	r3, [pc, #428]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003dd8:	d1cb      	bne.n	8003d72 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dda:	f7fe ff05 	bl	8002be8 <HAL_GetTick>
 8003dde:	1b40      	subs	r0, r0, r5
 8003de0:	2864      	cmp	r0, #100	; 0x64
 8003de2:	d9f5      	bls.n	8003dd0 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003de4:	2003      	movs	r0, #3
 8003de6:	e188      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_OscConfig+0xfe>
 8003dee:	4b64      	ldr	r3, [pc, #400]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	e7e1      	b.n	8003dc6 <HAL_RCC_OscConfig+0xc2>
 8003e02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e06:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e7d4      	b.n	8003dc6 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fee4 	bl	8002be8 <HAL_GetTick>
 8003e20:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003e2a:	d0a2      	beq.n	8003d72 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fedc 	bl	8002be8 <HAL_GetTick>
 8003e30:	1b40      	subs	r0, r0, r5
 8003e32:	2864      	cmp	r0, #100	; 0x64
 8003e34:	d9f5      	bls.n	8003e22 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003e36:	2003      	movs	r0, #3
 8003e38:	e15f      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e3a:	4b51      	ldr	r3, [pc, #324]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003e42:	d1a5      	bne.n	8003d90 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e44:	4b4e      	ldr	r3, [pc, #312]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f013 0f02 	tst.w	r3, #2
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_OscConfig+0x152>
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 814f 	bne.w	80040f4 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	6813      	ldr	r3, [r2, #0]
 8003e5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e5e:	6961      	ldr	r1, [r4, #20]
 8003e60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e64:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	f013 0f08 	tst.w	r3, #8
 8003e6c:	d033      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e6e:	69a3      	ldr	r3, [r4, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d05c      	beq.n	8003f2e <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003e74:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003e7c:	f7fe feb4 	bl	8002be8 <HAL_GetTick>
 8003e80:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	4b3f      	ldr	r3, [pc, #252]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	f013 0f02 	tst.w	r3, #2
 8003e8a:	d121      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8c:	f7fe feac 	bl	8002be8 <HAL_GetTick>
 8003e90:	1b40      	subs	r0, r0, r5
 8003e92:	2802      	cmp	r0, #2
 8003e94:	d9f5      	bls.n	8003e82 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003e96:	2003      	movs	r0, #3
 8003e98:	e12f      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9a:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	6813      	ldr	r3, [r2, #0]
 8003e9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ea2:	6961      	ldr	r1, [r4, #20]
 8003ea4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e7dc      	b.n	8003e66 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fe99 	bl	8002be8 <HAL_GetTick>
 8003eb6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f013 0f02 	tst.w	r3, #2
 8003ec0:	d0d1      	beq.n	8003e66 <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec2:	f7fe fe91 	bl	8002be8 <HAL_GetTick>
 8003ec6:	1b40      	subs	r0, r0, r5
 8003ec8:	2802      	cmp	r0, #2
 8003eca:	d9f5      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003ecc:	2003      	movs	r0, #3
 8003ece:	e114      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f7ff ff01 	bl	8003cd8 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f013 0f04 	tst.w	r3, #4
 8003edc:	f000 8096 	beq.w	800400c <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003ee8:	d134      	bne.n	8003f54 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eea:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ef2:	61da      	str	r2, [r3, #28]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003efe:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x284>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f08:	d026      	beq.n	8003f58 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d03d      	beq.n	8003f8c <HAL_RCC_OscConfig+0x288>
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d153      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2b8>
 8003f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	f022 0201 	bic.w	r2, r2, #1
 8003f22:	621a      	str	r2, [r3, #32]
 8003f24:	6a1a      	ldr	r2, [r3, #32]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	621a      	str	r2, [r3, #32]
 8003f2c:	e033      	b.n	8003f96 <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003f2e:	4b15      	ldr	r3, [pc, #84]	; (8003f84 <HAL_RCC_OscConfig+0x280>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003f36:	f7fe fe57 	bl	8002be8 <HAL_GetTick>
 8003f3a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f013 0f02 	tst.w	r3, #2
 8003f44:	d0c7      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fe fe4f 	bl	8002be8 <HAL_GetTick>
 8003f4a:	1b40      	subs	r0, r0, r5
 8003f4c:	2802      	cmp	r0, #2
 8003f4e:	d9f5      	bls.n	8003f3c <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8003f50:	2003      	movs	r0, #3
 8003f52:	e0d2      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003f54:	2500      	movs	r5, #0
 8003f56:	e7d3      	b.n	8003f00 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f58:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x284>)
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003f62:	f7fe fe41 	bl	8002be8 <HAL_GetTick>
 8003f66:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_RCC_OscConfig+0x284>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f70:	d1cb      	bne.n	8003f0a <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f72:	f7fe fe39 	bl	8002be8 <HAL_GetTick>
 8003f76:	1b80      	subs	r0, r0, r6
 8003f78:	2864      	cmp	r0, #100	; 0x64
 8003f7a:	d9f5      	bls.n	8003f68 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	e0bc      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
 8003f80:	40021000 	.word	0x40021000
 8003f84:	42420000 	.word	0x42420000
 8003f88:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8c:	4a5f      	ldr	r2, [pc, #380]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8003f8e:	6a13      	ldr	r3, [r2, #32]
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f96:	68e3      	ldr	r3, [r4, #12]
 8003f98:	b333      	cbz	r3, 8003fe8 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8003f9a:	f7fe fe25 	bl	8002be8 <HAL_GetTick>
 8003f9e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa0:	4b5a      	ldr	r3, [pc, #360]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f013 0f02 	tst.w	r3, #2
 8003fa8:	d12f      	bne.n	800400a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe fe1d 	bl	8002be8 <HAL_GetTick>
 8003fae:	1b80      	subs	r0, r0, r6
 8003fb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	d9f3      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8003fb8:	2003      	movs	r0, #3
 8003fba:	e09e      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d009      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x2d0>
 8003fc0:	4b52      	ldr	r3, [pc, #328]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8003fc2:	6a1a      	ldr	r2, [r3, #32]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	621a      	str	r2, [r3, #32]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	f022 0204 	bic.w	r2, r2, #4
 8003fd0:	621a      	str	r2, [r3, #32]
 8003fd2:	e7e0      	b.n	8003f96 <HAL_RCC_OscConfig+0x292>
 8003fd4:	4b4d      	ldr	r3, [pc, #308]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	f042 0204 	orr.w	r2, r2, #4
 8003fdc:	621a      	str	r2, [r3, #32]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	621a      	str	r2, [r3, #32]
 8003fe6:	e7d6      	b.n	8003f96 <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8003fe8:	f7fe fdfe 	bl	8002be8 <HAL_GetTick>
 8003fec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f013 0f02 	tst.w	r3, #2
 8003ff6:	d008      	beq.n	800400a <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe fdf6 	bl	8002be8 <HAL_GetTick>
 8003ffc:	1b80      	subs	r0, r0, r6
 8003ffe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004002:	4298      	cmp	r0, r3
 8004004:	d9f3      	bls.n	8003fee <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8004006:	2003      	movs	r0, #3
 8004008:	e077      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800400a:	b9e5      	cbnz	r5, 8004046 <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400c:	69e3      	ldr	r3, [r4, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d072      	beq.n	80040f8 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004012:	4a3e      	ldr	r2, [pc, #248]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8004014:	6852      	ldr	r2, [r2, #4]
 8004016:	f002 020c 	and.w	r2, r2, #12
 800401a:	2a08      	cmp	r2, #8
 800401c:	d056      	beq.n	80040cc <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401e:	2b02      	cmp	r3, #2
 8004020:	d017      	beq.n	8004052 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8004022:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_OscConfig+0x40c>)
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004028:	f7fe fdde 	bl	8002be8 <HAL_GetTick>
 800402c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402e:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004036:	d047      	beq.n	80040c8 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7fe fdd6 	bl	8002be8 <HAL_GetTick>
 800403c:	1b00      	subs	r0, r0, r4
 800403e:	2802      	cmp	r0, #2
 8004040:	d9f5      	bls.n	800402e <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004042:	2003      	movs	r0, #3
 8004044:	e059      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004046:	4a31      	ldr	r2, [pc, #196]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8004048:	69d3      	ldr	r3, [r2, #28]
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800404e:	61d3      	str	r3, [r2, #28]
 8004050:	e7dc      	b.n	800400c <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8004052:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <HAL_RCC_OscConfig+0x40c>)
 8004054:	2200      	movs	r2, #0
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004058:	f7fe fdc6 	bl	8002be8 <HAL_GetTick>
 800405c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405e:	4b2b      	ldr	r3, [pc, #172]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004066:	d006      	beq.n	8004076 <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fe fdbe 	bl	8002be8 <HAL_GetTick>
 800406c:	1b40      	subs	r0, r0, r5
 800406e:	2802      	cmp	r0, #2
 8004070:	d9f5      	bls.n	800405e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004072:	2003      	movs	r0, #3
 8004074:	e041      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004076:	6a23      	ldr	r3, [r4, #32]
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d01a      	beq.n	80040b4 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407e:	4923      	ldr	r1, [pc, #140]	; (800410c <HAL_RCC_OscConfig+0x408>)
 8004080:	684b      	ldr	r3, [r1, #4]
 8004082:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8004086:	6a22      	ldr	r2, [r4, #32]
 8004088:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800408a:	4302      	orrs	r2, r0
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <HAL_RCC_OscConfig+0x40c>)
 8004092:	2201      	movs	r2, #1
 8004094:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004096:	f7fe fda7 	bl	8002be8 <HAL_GetTick>
 800409a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409c:	4b1b      	ldr	r3, [pc, #108]	; (800410c <HAL_RCC_OscConfig+0x408>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80040a4:	d10e      	bne.n	80040c4 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fe fd9f 	bl	8002be8 <HAL_GetTick>
 80040aa:	1b00      	subs	r0, r0, r4
 80040ac:	2802      	cmp	r0, #2
 80040ae:	d9f5      	bls.n	800409c <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 80040b0:	2003      	movs	r0, #3
 80040b2:	e022      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040b4:	4a15      	ldr	r2, [pc, #84]	; (800410c <HAL_RCC_OscConfig+0x408>)
 80040b6:	6853      	ldr	r3, [r2, #4]
 80040b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040bc:	68a1      	ldr	r1, [r4, #8]
 80040be:	430b      	orrs	r3, r1
 80040c0:	6053      	str	r3, [r2, #4]
 80040c2:	e7dc      	b.n	800407e <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 80040c4:	2000      	movs	r0, #0
 80040c6:	e018      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
 80040c8:	2000      	movs	r0, #0
 80040ca:	e016      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d016      	beq.n	80040fe <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <HAL_RCC_OscConfig+0x408>)
 80040d2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80040d8:	6a22      	ldr	r2, [r4, #32]
 80040da:	4291      	cmp	r1, r2
 80040dc:	d111      	bne.n	8004102 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040de:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10e      	bne.n	8004106 <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e006      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 80040ec:	2001      	movs	r0, #1
}
 80040ee:	4770      	bx	lr
        return HAL_ERROR;
 80040f0:	2001      	movs	r0, #1
 80040f2:	e002      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 80040f4:	2001      	movs	r0, #1
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 80040f8:	2000      	movs	r0, #0
}
 80040fa:	b002      	add	sp, #8
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80040fe:	2001      	movs	r0, #1
 8004100:	e7fb      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8004102:	2001      	movs	r0, #1
 8004104:	e7f9      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
 8004106:	2001      	movs	r0, #1
 8004108:	e7f7      	b.n	80040fa <HAL_RCC_OscConfig+0x3f6>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	42420000 	.word	0x42420000

08004114 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_RCC_GetSysClockFreq+0x40>)
 8004116:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004118:	f003 020c 	and.w	r2, r3, #12
 800411c:	2a08      	cmp	r2, #8
 800411e:	d001      	beq.n	8004124 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004120:	480d      	ldr	r0, [pc, #52]	; (8004158 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8004122:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004124:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004128:	490c      	ldr	r1, [pc, #48]	; (800415c <HAL_RCC_GetSysClockFreq+0x48>)
 800412a:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800412c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004130:	d00b      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_RCC_GetSysClockFreq+0x40>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800413a:	4a09      	ldr	r2, [pc, #36]	; (8004160 <HAL_RCC_GetSysClockFreq+0x4c>)
 800413c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800413e:	4a06      	ldr	r2, [pc, #24]	; (8004158 <HAL_RCC_GetSysClockFreq+0x44>)
 8004140:	fb02 f000 	mul.w	r0, r2, r0
 8004144:	fbb0 f0f3 	udiv	r0, r0, r3
 8004148:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_RCC_GetSysClockFreq+0x50>)
 800414c:	fb03 f000 	mul.w	r0, r3, r0
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	007a1200 	.word	0x007a1200
 800415c:	08009eb8 	.word	0x08009eb8
 8004160:	08009ec8 	.word	0x08009ec8
 8004164:	003d0900 	.word	0x003d0900

08004168 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004168:	2800      	cmp	r0, #0
 800416a:	f000 80a0 	beq.w	80042ae <HAL_RCC_ClockConfig+0x146>
{
 800416e:	b570      	push	{r4, r5, r6, lr}
 8004170:	460d      	mov	r5, r1
 8004172:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004174:	4b52      	ldr	r3, [pc, #328]	; (80042c0 <HAL_RCC_ClockConfig+0x158>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	428b      	cmp	r3, r1
 800417e:	d20b      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004180:	4a4f      	ldr	r2, [pc, #316]	; (80042c0 <HAL_RCC_ClockConfig+0x158>)
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	f023 0307 	bic.w	r3, r3, #7
 8004188:	430b      	orrs	r3, r1
 800418a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	428b      	cmp	r3, r1
 8004194:	f040 808d 	bne.w	80042b2 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	f013 0f02 	tst.w	r3, #2
 800419e:	d017      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	f013 0f04 	tst.w	r3, #4
 80041a4:	d004      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a6:	4a47      	ldr	r2, [pc, #284]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 80041a8:	6853      	ldr	r3, [r2, #4]
 80041aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ae:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	f013 0f08 	tst.w	r3, #8
 80041b6:	d004      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b8:	4a42      	ldr	r2, [pc, #264]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 80041ba:	6853      	ldr	r3, [r2, #4]
 80041bc:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041c0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c2:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 80041c4:	6853      	ldr	r3, [r2, #4]
 80041c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ca:	68a1      	ldr	r1, [r4, #8]
 80041cc:	430b      	orrs	r3, r1
 80041ce:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	f013 0f01 	tst.w	r3, #1
 80041d6:	d031      	beq.n	800423c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d020      	beq.n	8004220 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d025      	beq.n	800422e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e2:	4a38      	ldr	r2, [pc, #224]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	f012 0f02 	tst.w	r2, #2
 80041ea:	d064      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ec:	4935      	ldr	r1, [pc, #212]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 80041ee:	684a      	ldr	r2, [r1, #4]
 80041f0:	f022 0203 	bic.w	r2, r2, #3
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80041f8:	f7fe fcf6 	bl	8002be8 <HAL_GetTick>
 80041fc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800420c:	d016      	beq.n	800423c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420e:	f7fe fceb 	bl	8002be8 <HAL_GetTick>
 8004212:	1b80      	subs	r0, r0, r6
 8004214:	f241 3388 	movw	r3, #5000	; 0x1388
 8004218:	4298      	cmp	r0, r3
 800421a:	d9f0      	bls.n	80041fe <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 800421c:	2003      	movs	r0, #3
 800421e:	e045      	b.n	80042ac <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004220:	4a28      	ldr	r2, [pc, #160]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004228:	d1e0      	bne.n	80041ec <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800422a:	2001      	movs	r0, #1
 800422c:	e03e      	b.n	80042ac <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	4a25      	ldr	r2, [pc, #148]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004236:	d1d9      	bne.n	80041ec <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8004238:	2001      	movs	r0, #1
 800423a:	e037      	b.n	80042ac <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_RCC_ClockConfig+0x158>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	42ab      	cmp	r3, r5
 8004246:	d90a      	bls.n	800425e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004248:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <HAL_RCC_ClockConfig+0x158>)
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	f023 0307 	bic.w	r3, r3, #7
 8004250:	432b      	orrs	r3, r5
 8004252:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004254:	6813      	ldr	r3, [r2, #0]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	42ab      	cmp	r3, r5
 800425c:	d12d      	bne.n	80042ba <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	f013 0f04 	tst.w	r3, #4
 8004264:	d006      	beq.n	8004274 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 8004268:	6853      	ldr	r3, [r2, #4]
 800426a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800426e:	68e1      	ldr	r1, [r4, #12]
 8004270:	430b      	orrs	r3, r1
 8004272:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	f013 0f08 	tst.w	r3, #8
 800427a:	d007      	beq.n	800428c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427c:	4a11      	ldr	r2, [pc, #68]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 800427e:	6853      	ldr	r3, [r2, #4]
 8004280:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004284:	6921      	ldr	r1, [r4, #16]
 8004286:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800428a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800428c:	f7ff ff42 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <HAL_RCC_ClockConfig+0x15c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004298:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <HAL_RCC_ClockConfig+0x160>)
 800429a:	5cd3      	ldrb	r3, [r2, r3]
 800429c:	40d8      	lsrs	r0, r3
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCC_ClockConfig+0x164>)
 80042a0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_ClockConfig+0x168>)
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	f7fe fb8f 	bl	80029c8 <HAL_InitTick>
  return HAL_OK;
 80042aa:	2000      	movs	r0, #0
}
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80042ae:	2001      	movs	r0, #1
}
 80042b0:	4770      	bx	lr
    return HAL_ERROR;
 80042b2:	2001      	movs	r0, #1
 80042b4:	e7fa      	b.n	80042ac <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80042b6:	2001      	movs	r0, #1
 80042b8:	e7f8      	b.n	80042ac <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 80042ba:	2001      	movs	r0, #1
 80042bc:	e7f6      	b.n	80042ac <HAL_RCC_ClockConfig+0x144>
 80042be:	bf00      	nop
 80042c0:	40022000 	.word	0x40022000
 80042c4:	40021000 	.word	0x40021000
 80042c8:	08009ea0 	.word	0x08009ea0
 80042cc:	20000020 	.word	0x20000020
 80042d0:	200008b0 	.word	0x200008b0

080042d4 <HAL_RCC_GetHCLKFreq>:
}
 80042d4:	4b01      	ldr	r3, [pc, #4]	; (80042dc <HAL_RCC_GetHCLKFreq+0x8>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000020 	.word	0x20000020

080042e0 <HAL_RCC_GetPCLK1Freq>:
{
 80042e0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e2:	f7ff fff7 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80042ee:	4a03      	ldr	r2, [pc, #12]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
}
 80042f2:	40d8      	lsrs	r0, r3
 80042f4:	bd08      	pop	{r3, pc}
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	08009eb0 	.word	0x08009eb0

08004300 <HAL_RCC_GetPCLK2Freq>:
{
 8004300:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004302:	f7ff ffe7 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800430e:	4a03      	ldr	r2, [pc, #12]	; (800431c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004310:	5cd3      	ldrb	r3, [r2, r3]
}
 8004312:	40d8      	lsrs	r0, r3
 8004314:	bd08      	pop	{r3, pc}
 8004316:	bf00      	nop
 8004318:	40021000 	.word	0x40021000
 800431c:	08009eb0 	.word	0x08009eb0

08004320 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004320:	230f      	movs	r3, #15
 8004322:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_RCC_GetClockConfig+0x34>)
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	f002 0203 	and.w	r2, r2, #3
 800432c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004334:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800433c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	08db      	lsrs	r3, r3, #3
 8004342:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004346:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_RCC_GetClockConfig+0x38>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	600b      	str	r3, [r1, #0]
}
 8004352:	4770      	bx	lr
 8004354:	40021000 	.word	0x40021000
 8004358:	40022000 	.word	0x40022000

0800435c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004362:	6803      	ldr	r3, [r0, #0]
 8004364:	f013 0f01 	tst.w	r3, #1
 8004368:	d036      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436a:	4b3f      	ldr	r3, [pc, #252]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004372:	d149      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004374:	4b3c      	ldr	r3, [pc, #240]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004376:	69da      	ldr	r2, [r3, #28]
 8004378:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800437c:	61da      	str	r2, [r3, #28]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004388:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438a:	4b38      	ldr	r3, [pc, #224]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004392:	d03b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004394:	4b34      	ldr	r3, [pc, #208]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004398:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800439c:	d013      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d00e      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a8:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80043aa:	6a13      	ldr	r3, [r2, #32]
 80043ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043b0:	492f      	ldr	r1, [pc, #188]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80043b2:	2601      	movs	r6, #1
 80043b4:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b8:	2600      	movs	r6, #0
 80043ba:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043be:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043c0:	f013 0f01 	tst.w	r3, #1
 80043c4:	d136      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c6:	4a28      	ldr	r2, [pc, #160]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80043c8:	6a13      	ldr	r3, [r2, #32]
 80043ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ce:	6861      	ldr	r1, [r4, #4]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	d13e      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	f013 0f02 	tst.w	r3, #2
 80043de:	d006      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e0:	4a21      	ldr	r2, [pc, #132]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80043e2:	6853      	ldr	r3, [r2, #4]
 80043e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80043e8:	68a1      	ldr	r1, [r4, #8]
 80043ea:	430b      	orrs	r3, r1
 80043ec:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	f013 0f10 	tst.w	r3, #16
 80043f4:	d034      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f6:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80043f8:	6853      	ldr	r3, [r2, #4]
 80043fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80043fe:	68e1      	ldr	r1, [r4, #12]
 8004400:	430b      	orrs	r3, r1
 8004402:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004404:	2000      	movs	r0, #0
 8004406:	e02c      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8004408:	2500      	movs	r5, #0
 800440a:	e7be      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004416:	f7fe fbe7 	bl	8002be8 <HAL_GetTick>
 800441a:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004424:	d1b6      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004426:	f7fe fbdf 	bl	8002be8 <HAL_GetTick>
 800442a:	1b80      	subs	r0, r0, r6
 800442c:	2864      	cmp	r0, #100	; 0x64
 800442e:	d9f5      	bls.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8004430:	2003      	movs	r0, #3
 8004432:	e016      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8004434:	f7fe fbd8 	bl	8002be8 <HAL_GetTick>
 8004438:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f013 0f02 	tst.w	r3, #2
 8004442:	d1c0      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fe fbd0 	bl	8002be8 <HAL_GetTick>
 8004448:	1b80      	subs	r0, r0, r6
 800444a:	f241 3388 	movw	r3, #5000	; 0x1388
 800444e:	4298      	cmp	r0, r3
 8004450:	d9f3      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8004452:	2003      	movs	r0, #3
 8004454:	e005      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004456:	69d3      	ldr	r3, [r2, #28]
 8004458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800445c:	61d3      	str	r3, [r2, #28]
 800445e:	e7bb      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8004460:	2000      	movs	r0, #0
}
 8004462:	b002      	add	sp, #8
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	40007000 	.word	0x40007000
 8004470:	42420000 	.word	0x42420000

08004474 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004474:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004476:	2802      	cmp	r0, #2
 8004478:	d04e      	beq.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800447a:	2810      	cmp	r0, #16
 800447c:	d003      	beq.n	8004486 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800447e:	2801      	cmp	r0, #1
 8004480:	d028      	beq.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8004482:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8004484:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8004486:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8004488:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8004490:	d0f8      	beq.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004492:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8004496:	4928      	ldr	r1, [pc, #160]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8004498:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800449a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800449e:	d015      	beq.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044a0:	4b24      	ldr	r3, [pc, #144]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80044a8:	4a24      	ldr	r2, [pc, #144]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80044aa:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80044ac:	4b24      	ldr	r3, [pc, #144]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 80044ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b2:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80044b6:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80044be:	d1e1      	bne.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 80044c0:	0040      	lsls	r0, r0, #1
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 80044c4:	fba3 3000 	umull	r3, r0, r3, r0
 80044c8:	0840      	lsrs	r0, r0, #1
 80044ca:	e7db      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044cc:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 80044ce:	fb03 f000 	mul.w	r0, r3, r0
 80044d2:	e7f0      	b.n	80044b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 80044d4:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044d8:	f240 3202 	movw	r2, #770	; 0x302
 80044dc:	401a      	ands	r2, r3
 80044de:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80044e2:	d024      	beq.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ec:	d004      	beq.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f2:	d009      	beq.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 80044f4:	2000      	movs	r0, #0
 80044f6:	e7c5      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044f8:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80044fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044fc:	f012 0f02 	tst.w	r2, #2
 8004500:	d0f5      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 8004502:	f649 4040 	movw	r0, #40000	; 0x9c40
 8004506:	e7bd      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004510:	d0b8      	beq.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 8004512:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 8004516:	e7b5      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004518:	f7ff fef2 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8004524:	3301      	adds	r3, #1
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800452c:	e7aa      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 800452e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004532:	e7a7      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8004534:	40021000 	.word	0x40021000
 8004538:	08009ecc 	.word	0x08009ecc
 800453c:	08009edc 	.word	0x08009edc
 8004540:	007a1200 	.word	0x007a1200
 8004544:	aaaaaaab 	.word	0xaaaaaaab
 8004548:	003d0900 	.word	0x003d0900

0800454c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004550:	b082      	sub	sp, #8
 8004552:	4605      	mov	r5, r0
 8004554:	4688      	mov	r8, r1
 8004556:	4617      	mov	r7, r2
 8004558:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800455a:	f7fe fb45 	bl	8002be8 <HAL_GetTick>
 800455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004560:	1a1b      	subs	r3, r3, r0
 8004562:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8004566:	f7fe fb3f 	bl	8002be8 <HAL_GetTick>
 800456a:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004574:	fb09 f303 	mul.w	r3, r9, r3
 8004578:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	689c      	ldr	r4, [r3, #8]
 800457e:	ea38 0404 	bics.w	r4, r8, r4
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	42bb      	cmp	r3, r7
 800458a:	d040      	beq.n	800460e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800458c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004590:	d0f3      	beq.n	800457a <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004592:	f7fe fb29 	bl	8002be8 <HAL_GetTick>
 8004596:	eba0 000a 	sub.w	r0, r0, sl
 800459a:	4548      	cmp	r0, r9
 800459c:	d20a      	bcs.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x68>
 800459e:	f1b9 0f00 	cmp.w	r9, #0
 80045a2:	d007      	beq.n	80045b4 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045a4:	9a01      	ldr	r2, [sp, #4]
 80045a6:	b102      	cbz	r2, 80045aa <SPI_WaitFlagStateUntilTimeout+0x5e>
 80045a8:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80045aa:	9b01      	ldr	r3, [sp, #4]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	4691      	mov	r9, r2
 80045b2:	e7e2      	b.n	800457a <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045b4:	682a      	ldr	r2, [r5, #0]
 80045b6:	6853      	ldr	r3, [r2, #4]
 80045b8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80045bc:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045be:	686b      	ldr	r3, [r5, #4]
 80045c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c4:	d00b      	beq.n	80045de <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80045c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045cc:	d014      	beq.n	80045f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80045d4:	2300      	movs	r3, #0
 80045d6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 80045da:	2003      	movs	r0, #3
 80045dc:	e018      	b.n	8004610 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045de:	68ab      	ldr	r3, [r5, #8]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e4:	d002      	beq.n	80045ec <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ea:	d1ec      	bne.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80045ec:	682a      	ldr	r2, [r5, #0]
 80045ee:	6813      	ldr	r3, [r2, #0]
 80045f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e7e6      	b.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80045f8:	682a      	ldr	r2, [r5, #0]
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	682a      	ldr	r2, [r5, #0]
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e7df      	b.n	80045ce <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800460e:	2000      	movs	r0, #0
}
 8004610:	b002      	add	sp, #8
 8004612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004616:	bf00      	nop
 8004618:	20000020 	.word	0x20000020

0800461c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b510      	push	{r4, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	4604      	mov	r4, r0
 8004622:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004624:	9200      	str	r2, [sp, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	2180      	movs	r1, #128	; 0x80
 800462a:	f7ff ff8f 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 800462e:	b908      	cbnz	r0, 8004634 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8004630:	b002      	add	sp, #8
 8004632:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004634:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004636:	f043 0320 	orr.w	r3, r3, #32
 800463a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800463c:	2003      	movs	r0, #3
 800463e:	e7f7      	b.n	8004630 <SPI_EndRxTxTransaction+0x14>

08004640 <SPI_EndRxTransaction>:
{
 8004640:	b510      	push	{r4, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	4604      	mov	r4, r0
 8004646:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004648:	6841      	ldr	r1, [r0, #4]
 800464a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800464e:	d010      	beq.n	8004672 <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004650:	6861      	ldr	r1, [r4, #4]
 8004652:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8004656:	d103      	bne.n	8004660 <SPI_EndRxTransaction+0x20>
 8004658:	68a1      	ldr	r1, [r4, #8]
 800465a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800465e:	d015      	beq.n	800468c <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004660:	9200      	str	r2, [sp, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	2180      	movs	r1, #128	; 0x80
 8004666:	4620      	mov	r0, r4
 8004668:	f7ff ff70 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 800466c:	b9e0      	cbnz	r0, 80046a8 <SPI_EndRxTransaction+0x68>
}
 800466e:	b002      	add	sp, #8
 8004670:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004672:	6881      	ldr	r1, [r0, #8]
 8004674:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004678:	d002      	beq.n	8004680 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800467a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800467e:	d1e7      	bne.n	8004650 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8004680:	6820      	ldr	r0, [r4, #0]
 8004682:	6801      	ldr	r1, [r0, #0]
 8004684:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004688:	6001      	str	r1, [r0, #0]
 800468a:	e7e1      	b.n	8004650 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800468c:	9200      	str	r2, [sp, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	2101      	movs	r1, #1
 8004692:	4620      	mov	r0, r4
 8004694:	f7ff ff5a 	bl	800454c <SPI_WaitFlagStateUntilTimeout>
 8004698:	2800      	cmp	r0, #0
 800469a:	d0e8      	beq.n	800466e <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800469c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80046a4:	2003      	movs	r0, #3
 80046a6:	e7e2      	b.n	800466e <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046aa:	f043 0320 	orr.w	r3, r3, #32
 80046ae:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80046b0:	2003      	movs	r0, #3
 80046b2:	e7dc      	b.n	800466e <SPI_EndRxTransaction+0x2e>

080046b4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d056      	beq.n	8004766 <HAL_SPI_Init+0xb2>
{
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046be:	b933      	cbnz	r3, 80046ce <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c0:	6843      	ldr	r3, [r0, #4]
 80046c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c6:	d005      	beq.n	80046d4 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61c3      	str	r3, [r0, #28]
 80046cc:	e002      	b.n	80046d4 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ce:	2300      	movs	r3, #0
 80046d0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046d2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80046d8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d03c      	beq.n	800475a <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80046e0:	2302      	movs	r3, #2
 80046e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80046e6:	6822      	ldr	r2, [r4, #0]
 80046e8:	6813      	ldr	r3, [r2, #0]
 80046ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f0:	6863      	ldr	r3, [r4, #4]
 80046f2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80046f6:	68a2      	ldr	r2, [r4, #8]
 80046f8:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80046fc:	4313      	orrs	r3, r2
 80046fe:	68e2      	ldr	r2, [r4, #12]
 8004700:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004704:	4313      	orrs	r3, r2
 8004706:	6922      	ldr	r2, [r4, #16]
 8004708:	f002 0202 	and.w	r2, r2, #2
 800470c:	4313      	orrs	r3, r2
 800470e:	6962      	ldr	r2, [r4, #20]
 8004710:	f002 0201 	and.w	r2, r2, #1
 8004714:	4313      	orrs	r3, r2
 8004716:	69a2      	ldr	r2, [r4, #24]
 8004718:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800471c:	4313      	orrs	r3, r2
 800471e:	69e2      	ldr	r2, [r4, #28]
 8004720:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8004724:	4313      	orrs	r3, r2
 8004726:	6a22      	ldr	r2, [r4, #32]
 8004728:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800472c:	4313      	orrs	r3, r2
 800472e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004730:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004734:	6821      	ldr	r1, [r4, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800473a:	8b63      	ldrh	r3, [r4, #26]
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	69d3      	ldr	r3, [r2, #28]
 8004748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800474c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800474e:	2000      	movs	r0, #0
 8004750:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004752:	2301      	movs	r3, #1
 8004754:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004758:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800475a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800475e:	4620      	mov	r0, r4
 8004760:	f7fe f8a2 	bl	80028a8 <HAL_SPI_MspInit>
 8004764:	e7bc      	b.n	80046e0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8004766:	2001      	movs	r0, #1
}
 8004768:	4770      	bx	lr

0800476a <HAL_SPI_Transmit>:
{
 800476a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800476e:	b083      	sub	sp, #12
 8004770:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8004772:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004776:	2b01      	cmp	r3, #1
 8004778:	f000 80d1 	beq.w	800491e <HAL_SPI_Transmit+0x1b4>
 800477c:	4604      	mov	r4, r0
 800477e:	4688      	mov	r8, r1
 8004780:	4691      	mov	r9, r2
 8004782:	2301      	movs	r3, #1
 8004784:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004788:	f7fe fa2e 	bl	8002be8 <HAL_GetTick>
 800478c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800478e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8004792:	b2f6      	uxtb	r6, r6
 8004794:	2e01      	cmp	r6, #1
 8004796:	f040 80ba 	bne.w	800490e <HAL_SPI_Transmit+0x1a4>
  if ((pData == NULL) || (Size == 0U))
 800479a:	f1b8 0f00 	cmp.w	r8, #0
 800479e:	f000 80b7 	beq.w	8004910 <HAL_SPI_Transmit+0x1a6>
 80047a2:	f1b9 0f00 	cmp.w	r9, #0
 80047a6:	f000 80b3 	beq.w	8004910 <HAL_SPI_Transmit+0x1a6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047aa:	2303      	movs	r3, #3
 80047ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047b4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047b8:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047bc:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047c0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047c2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047c6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047c8:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d01e      	beq.n	8004810 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047da:	d103      	bne.n	80047e4 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047e4:	68e3      	ldr	r3, [r4, #12]
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	d01c      	beq.n	8004826 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ec:	6863      	ldr	r3, [r4, #4]
 80047ee:	b113      	cbz	r3, 80047f6 <HAL_SPI_Transmit+0x8c>
 80047f0:	f1b9 0f01 	cmp.w	r9, #1
 80047f4:	d155      	bne.n	80048a2 <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004800:	3301      	adds	r3, #1
 8004802:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004804:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800480e:	e048      	b.n	80048a2 <HAL_SPI_Transmit+0x138>
    __HAL_SPI_DISABLE(hspi);
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004818:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e7d5      	b.n	80047d2 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004826:	6863      	ldr	r3, [r4, #4]
 8004828:	b113      	cbz	r3, 8004830 <HAL_SPI_Transmit+0xc6>
 800482a:	f1b9 0f01 	cmp.w	r9, #1
 800482e:	d115      	bne.n	800485c <HAL_SPI_Transmit+0xf2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004830:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	8812      	ldrh	r2, [r2, #0]
 8004836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004838:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800483a:	3302      	adds	r3, #2
 800483c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800483e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29b      	uxth	r3, r3
 8004846:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004848:	e008      	b.n	800485c <HAL_SPI_Transmit+0xf2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800484a:	f7fe f9cd 	bl	8002be8 <HAL_GetTick>
 800484e:	1bc0      	subs	r0, r0, r7
 8004850:	42a8      	cmp	r0, r5
 8004852:	d302      	bcc.n	800485a <HAL_SPI_Transmit+0xf0>
 8004854:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004858:	d115      	bne.n	8004886 <HAL_SPI_Transmit+0x11c>
 800485a:	b1a5      	cbz	r5, 8004886 <HAL_SPI_Transmit+0x11c>
    while (hspi->TxXferCount > 0U)
 800485c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d03c      	beq.n	80048de <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	f012 0f02 	tst.w	r2, #2
 800486c:	d0ed      	beq.n	800484a <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800486e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004870:	8812      	ldrh	r2, [r2, #0]
 8004872:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004874:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004876:	3302      	adds	r3, #2
 8004878:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800487a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29b      	uxth	r3, r3
 8004882:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004884:	e7ea      	b.n	800485c <HAL_SPI_Transmit+0xf2>
          hspi->State = HAL_SPI_STATE_READY;
 8004886:	2301      	movs	r3, #1
 8004888:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 800488c:	2603      	movs	r6, #3
          goto error;
 800488e:	e03f      	b.n	8004910 <HAL_SPI_Transmit+0x1a6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004890:	f7fe f9aa 	bl	8002be8 <HAL_GetTick>
 8004894:	1bc0      	subs	r0, r0, r7
 8004896:	42a8      	cmp	r0, r5
 8004898:	d302      	bcc.n	80048a0 <HAL_SPI_Transmit+0x136>
 800489a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800489e:	d119      	bne.n	80048d4 <HAL_SPI_Transmit+0x16a>
 80048a0:	b1c5      	cbz	r5, 80048d4 <HAL_SPI_Transmit+0x16a>
    while (hspi->TxXferCount > 0U)
 80048a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	b1d3      	cbz	r3, 80048de <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	f012 0f02 	tst.w	r2, #2
 80048b0:	d0ee      	beq.n	8004890 <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80048b4:	7812      	ldrb	r2, [r2, #0]
 80048b6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048ba:	3301      	adds	r3, #1
 80048bc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80048be:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 80048c2:	fa1f fc8c 	uxth.w	ip, ip
 80048c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80048ca:	fa1f fc8c 	uxth.w	ip, ip
 80048ce:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 80048d2:	e7e6      	b.n	80048a2 <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 80048da:	2603      	movs	r6, #3
          goto error;
 80048dc:	e018      	b.n	8004910 <HAL_SPI_Transmit+0x1a6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048de:	463a      	mov	r2, r7
 80048e0:	4629      	mov	r1, r5
 80048e2:	4620      	mov	r0, r4
 80048e4:	f7ff fe9a 	bl	800461c <SPI_EndRxTxTransaction>
 80048e8:	b108      	cbz	r0, 80048ee <HAL_SPI_Transmit+0x184>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ea:	2320      	movs	r3, #32
 80048ec:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ee:	68a3      	ldr	r3, [r4, #8]
 80048f0:	b933      	cbnz	r3, 8004900 <HAL_SPI_Transmit+0x196>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	9201      	str	r2, [sp, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004900:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004902:	b92b      	cbnz	r3, 8004910 <HAL_SPI_Transmit+0x1a6>
    hspi->State = HAL_SPI_STATE_READY;
 8004904:	2301      	movs	r3, #1
 8004906:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 800490a:	2600      	movs	r6, #0
 800490c:	e000      	b.n	8004910 <HAL_SPI_Transmit+0x1a6>
    errorcode = HAL_BUSY;
 800490e:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004910:	2300      	movs	r3, #0
 8004912:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004916:	4630      	mov	r0, r6
 8004918:	b003      	add	sp, #12
 800491a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 800491e:	2602      	movs	r6, #2
 8004920:	e7f9      	b.n	8004916 <HAL_SPI_Transmit+0x1ac>

08004922 <HAL_SPI_TransmitReceive>:
{
 8004922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004926:	b083      	sub	sp, #12
 8004928:	461f      	mov	r7, r3
 800492a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800492c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004930:	2b01      	cmp	r3, #1
 8004932:	f000 8116 	beq.w	8004b62 <HAL_SPI_TransmitReceive+0x240>
 8004936:	4604      	mov	r4, r0
 8004938:	4688      	mov	r8, r1
 800493a:	4691      	mov	r9, r2
 800493c:	2301      	movs	r3, #1
 800493e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004942:	f7fe f951 	bl	8002be8 <HAL_GetTick>
 8004946:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8004948:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800494c:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800494e:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004950:	2b01      	cmp	r3, #1
 8004952:	d00a      	beq.n	800496a <HAL_SPI_TransmitReceive+0x48>
 8004954:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004958:	f040 80f0 	bne.w	8004b3c <HAL_SPI_TransmitReceive+0x21a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800495c:	68a2      	ldr	r2, [r4, #8]
 800495e:	2a00      	cmp	r2, #0
 8004960:	f040 80f3 	bne.w	8004b4a <HAL_SPI_TransmitReceive+0x228>
 8004964:	2b04      	cmp	r3, #4
 8004966:	f040 80f2 	bne.w	8004b4e <HAL_SPI_TransmitReceive+0x22c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800496a:	f1b8 0f00 	cmp.w	r8, #0
 800496e:	f000 80f0 	beq.w	8004b52 <HAL_SPI_TransmitReceive+0x230>
 8004972:	f1b9 0f00 	cmp.w	r9, #0
 8004976:	f000 80ee 	beq.w	8004b56 <HAL_SPI_TransmitReceive+0x234>
 800497a:	2f00      	cmp	r7, #0
 800497c:	f000 80ed 	beq.w	8004b5a <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004980:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b04      	cmp	r3, #4
 8004988:	d002      	beq.n	8004990 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800498a:	2305      	movs	r3, #5
 800498c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004990:	2300      	movs	r3, #0
 8004992:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004994:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004998:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800499a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800499c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049a0:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80049a2:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80049a4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049a6:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	f012 0f40 	tst.w	r2, #64	; 0x40
 80049b0:	d103      	bne.n	80049ba <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c0:	d011      	beq.n	80049e6 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	b10b      	cbz	r3, 80049ca <HAL_SPI_TransmitReceive+0xa8>
 80049c6:	2f01      	cmp	r7, #1
 80049c8:	d10b      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	7812      	ldrb	r2, [r2, #0]
 80049d0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049d4:	3301      	adds	r3, #1
 80049d6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80049d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29b      	uxth	r3, r3
 80049e0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80049e2:	2701      	movs	r7, #1
 80049e4:	e06e      	b.n	8004ac4 <HAL_SPI_TransmitReceive+0x1a2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e6:	6863      	ldr	r3, [r4, #4]
 80049e8:	b10b      	cbz	r3, 80049ee <HAL_SPI_TransmitReceive+0xcc>
 80049ea:	2f01      	cmp	r7, #1
 80049ec:	d10b      	bne.n	8004a06 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	8812      	ldrh	r2, [r2, #0]
 80049f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049f8:	3302      	adds	r3, #2
 80049fa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80049fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004a06:	2701      	movs	r7, #1
 8004a08:	e01b      	b.n	8004a42 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	f012 0f01 	tst.w	r2, #1
 8004a12:	d00e      	beq.n	8004a32 <HAL_SPI_TransmitReceive+0x110>
 8004a14:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004a16:	b292      	uxth	r2, r2
 8004a18:	b15a      	cbz	r2, 8004a32 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a22:	3302      	adds	r3, #2
 8004a24:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004a26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004a30:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a32:	f7fe f8d9 	bl	8002be8 <HAL_GetTick>
 8004a36:	1b80      	subs	r0, r0, r6
 8004a38:	42a8      	cmp	r0, r5
 8004a3a:	d302      	bcc.n	8004a42 <HAL_SPI_TransmitReceive+0x120>
 8004a3c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004a40:	d11e      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a42:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	b91b      	cbnz	r3, 8004a50 <HAL_SPI_TransmitReceive+0x12e>
 8004a48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	f012 0f02 	tst.w	r2, #2
 8004a58:	d0d7      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0xe8>
 8004a5a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004a5c:	b292      	uxth	r2, r2
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	d0d3      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0xe8>
 8004a62:	2f00      	cmp	r7, #0
 8004a64:	d0d1      	beq.n	8004a0a <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a66:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a68:	8812      	ldrh	r2, [r2, #0]
 8004a6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a6e:	3302      	adds	r3, #2
 8004a70:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a72:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004a7c:	2700      	movs	r7, #0
 8004a7e:	e7c4      	b.n	8004a0a <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8004a80:	2301      	movs	r3, #1
 8004a82:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8004a86:	2003      	movs	r0, #3
        goto error;
 8004a88:	e059      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	f012 0f01 	tst.w	r2, #1
 8004a92:	d00e      	beq.n	8004ab2 <HAL_SPI_TransmitReceive+0x190>
 8004a94:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004a96:	b292      	uxth	r2, r2
 8004a98:	b15a      	cbz	r2, 8004ab2 <HAL_SPI_TransmitReceive+0x190>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004aa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004aa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004ab0:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ab2:	f7fe f899 	bl	8002be8 <HAL_GetTick>
 8004ab6:	1b83      	subs	r3, r0, r6
 8004ab8:	42ab      	cmp	r3, r5
 8004aba:	d302      	bcc.n	8004ac2 <HAL_SPI_TransmitReceive+0x1a0>
 8004abc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004ac0:	d11e      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x1de>
 8004ac2:	b1ed      	cbz	r5, 8004b00 <HAL_SPI_TransmitReceive+0x1de>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ac4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	b913      	cbnz	r3, 8004ad0 <HAL_SPI_TransmitReceive+0x1ae>
 8004aca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	b1e3      	cbz	r3, 8004b0a <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	f012 0f02 	tst.w	r2, #2
 8004ad8:	d0d7      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x168>
 8004ada:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004adc:	b292      	uxth	r2, r2
 8004ade:	2a00      	cmp	r2, #0
 8004ae0:	d0d3      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x168>
 8004ae2:	2f00      	cmp	r7, #0
 8004ae4:	d0d1      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ae6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ae8:	7812      	ldrb	r2, [r2, #0]
 8004aea:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004aee:	3301      	adds	r3, #1
 8004af0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004af2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004afc:	2700      	movs	r7, #0
 8004afe:	e7c4      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x168>
        hspi->State = HAL_SPI_STATE_READY;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        errorcode = HAL_TIMEOUT;
 8004b06:	2003      	movs	r0, #3
        goto error;
 8004b08:	e019      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7ff fd84 	bl	800461c <SPI_EndRxTxTransaction>
 8004b14:	b970      	cbnz	r0, 8004b34 <HAL_SPI_TransmitReceive+0x212>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b16:	68a3      	ldr	r3, [r4, #8]
 8004b18:	b933      	cbnz	r3, 8004b28 <HAL_SPI_TransmitReceive+0x206>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	9201      	str	r2, [sp, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b2a:	b9c3      	cbnz	r3, 8004b5e <HAL_SPI_TransmitReceive+0x23c>
    hspi->State = HAL_SPI_STATE_READY;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8004b32:	e004      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b34:	2320      	movs	r3, #32
 8004b36:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004b38:	2001      	movs	r0, #1
    goto error;
 8004b3a:	e000      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_BUSY;
 8004b3c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004b44:	b003      	add	sp, #12
 8004b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8004b4a:	2002      	movs	r0, #2
 8004b4c:	e7f7      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
 8004b4e:	2002      	movs	r0, #2
 8004b50:	e7f5      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8004b52:	2001      	movs	r0, #1
 8004b54:	e7f3      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
 8004b56:	2001      	movs	r0, #1
 8004b58:	e7f1      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	e7ef      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
    errorcode = HAL_ERROR;
 8004b5e:	2001      	movs	r0, #1
 8004b60:	e7ed      	b.n	8004b3e <HAL_SPI_TransmitReceive+0x21c>
  __HAL_LOCK(hspi);
 8004b62:	2002      	movs	r0, #2
 8004b64:	e7ee      	b.n	8004b44 <HAL_SPI_TransmitReceive+0x222>

08004b66 <HAL_SPI_Receive>:
{
 8004b66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b6e:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
 8004b72:	b2f6      	uxtb	r6, r6
 8004b74:	2e01      	cmp	r6, #1
 8004b76:	f040 80ab 	bne.w	8004cd0 <HAL_SPI_Receive+0x16a>
 8004b7a:	4688      	mov	r8, r1
 8004b7c:	4691      	mov	r9, r2
 8004b7e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b80:	6843      	ldr	r3, [r0, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b86:	d032      	beq.n	8004bee <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8004b88:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f000 80a7 	beq.w	8004ce0 <HAL_SPI_Receive+0x17a>
 8004b92:	2301      	movs	r3, #1
 8004b94:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004b98:	f7fe f826 	bl	8002be8 <HAL_GetTick>
 8004b9c:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8004b9e:	f1b8 0f00 	cmp.w	r8, #0
 8004ba2:	f000 8096 	beq.w	8004cd2 <HAL_SPI_Receive+0x16c>
 8004ba6:	f1b9 0f00 	cmp.w	r9, #0
 8004baa:	f000 8092 	beq.w	8004cd2 <HAL_SPI_Receive+0x16c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bb8:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bbc:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bc0:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bc4:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bc6:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bc8:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bca:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bcc:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bce:	68a3      	ldr	r3, [r4, #8]
 8004bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd4:	d018      	beq.n	8004c08 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bde:	d103      	bne.n	8004be8 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004be6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004be8:	68e3      	ldr	r3, [r4, #12]
 8004bea:	b30b      	cbz	r3, 8004c30 <HAL_SPI_Receive+0xca>
 8004bec:	e043      	b.n	8004c76 <HAL_SPI_Receive+0x110>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bee:	6883      	ldr	r3, [r0, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1c9      	bne.n	8004b88 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bfa:	9500      	str	r5, [sp, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	460a      	mov	r2, r1
 8004c00:	f7ff fe8f 	bl	8004922 <HAL_SPI_TransmitReceive>
 8004c04:	4606      	mov	r6, r0
 8004c06:	e067      	b.n	8004cd8 <HAL_SPI_Receive+0x172>
    __HAL_SPI_DISABLE(hspi);
 8004c08:	6822      	ldr	r2, [r4, #0]
 8004c0a:	6813      	ldr	r3, [r2, #0]
 8004c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c10:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	6813      	ldr	r3, [r2, #0]
 8004c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c1a:	6013      	str	r3, [r2, #0]
 8004c1c:	e7db      	b.n	8004bd6 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c1e:	f7fd ffe3 	bl	8002be8 <HAL_GetTick>
 8004c22:	1bc0      	subs	r0, r0, r7
 8004c24:	42a8      	cmp	r0, r5
 8004c26:	d302      	bcc.n	8004c2e <HAL_SPI_Receive+0xc8>
 8004c28:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c2c:	d115      	bne.n	8004c5a <HAL_SPI_Receive+0xf4>
 8004c2e:	b1a5      	cbz	r5, 8004c5a <HAL_SPI_Receive+0xf4>
    while (hspi->RxXferCount > 0U)
 8004c30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d03c      	beq.n	8004cb2 <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	f012 0f01 	tst.w	r2, #1
 8004c40:	d0ed      	beq.n	8004c1e <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c44:	7b1b      	ldrb	r3, [r3, #12]
 8004c46:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004c58:	e7ea      	b.n	8004c30 <HAL_SPI_Receive+0xca>
          hspi->State = HAL_SPI_STATE_READY;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004c60:	2603      	movs	r6, #3
          goto error;
 8004c62:	e036      	b.n	8004cd2 <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c64:	f7fd ffc0 	bl	8002be8 <HAL_GetTick>
 8004c68:	1bc0      	subs	r0, r0, r7
 8004c6a:	42a8      	cmp	r0, r5
 8004c6c:	d302      	bcc.n	8004c74 <HAL_SPI_Receive+0x10e>
 8004c6e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004c72:	d119      	bne.n	8004ca8 <HAL_SPI_Receive+0x142>
 8004c74:	b1c5      	cbz	r5, 8004ca8 <HAL_SPI_Receive+0x142>
    while (hspi->RxXferCount > 0U)
 8004c76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b1d3      	cbz	r3, 8004cb2 <HAL_SPI_Receive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	f012 0f01 	tst.w	r2, #1
 8004c84:	d0ee      	beq.n	8004c64 <HAL_SPI_Receive+0xfe>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c8e:	3302      	adds	r3, #2
 8004c90:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c92:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8004c96:	fa1f fc8c 	uxth.w	ip, ip
 8004c9a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004c9e:	fa1f fc8c 	uxth.w	ip, ip
 8004ca2:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8004ca6:	e7e6      	b.n	8004c76 <HAL_SPI_Receive+0x110>
          hspi->State = HAL_SPI_STATE_READY;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
          errorcode = HAL_TIMEOUT;
 8004cae:	2603      	movs	r6, #3
          goto error;
 8004cb0:	e00f      	b.n	8004cd2 <HAL_SPI_Receive+0x16c>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cb2:	463a      	mov	r2, r7
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7ff fcc2 	bl	8004640 <SPI_EndRxTransaction>
 8004cbc:	b108      	cbz	r0, 8004cc2 <HAL_SPI_Receive+0x15c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cbe:	2320      	movs	r3, #32
 8004cc0:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004cc4:	b92b      	cbnz	r3, 8004cd2 <HAL_SPI_Receive+0x16c>
    hspi->State = HAL_SPI_STATE_READY;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ccc:	2600      	movs	r6, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_SPI_Receive+0x16c>
    errorcode = HAL_BUSY;
 8004cd0:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004cd8:	4630      	mov	r0, r6
 8004cda:	b003      	add	sp, #12
 8004cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8004ce0:	2602      	movs	r6, #2
 8004ce2:	e7f9      	b.n	8004cd8 <HAL_SPI_Receive+0x172>

08004ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce8:	6a03      	ldr	r3, [r0, #32]
 8004cea:	f023 0301 	bic.w	r3, r3, #1
 8004cee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cf4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf8:	680c      	ldr	r4, [r1, #0]
 8004cfa:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cfc:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d00:	688b      	ldr	r3, [r1, #8]
 8004d02:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d04:	4a0d      	ldr	r2, [pc, #52]	; (8004d3c <TIM_OC1_SetConfig+0x58>)
 8004d06:	4290      	cmp	r0, r2
 8004d08:	d009      	beq.n	8004d1e <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <TIM_OC1_SetConfig+0x58>)
 8004d0c:	4290      	cmp	r0, r2
 8004d0e:	d00d      	beq.n	8004d2c <TIM_OC1_SetConfig+0x48>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d10:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d12:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d14:	684a      	ldr	r2, [r1, #4]
 8004d16:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	6203      	str	r3, [r0, #32]
}
 8004d1a:	bc30      	pop	{r4, r5}
 8004d1c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d1e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004d22:	68ca      	ldr	r2, [r1, #12]
 8004d24:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d26:	f022 0304 	bic.w	r3, r2, #4
 8004d2a:	e7ee      	b.n	8004d0a <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d2c:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004d30:	694a      	ldr	r2, [r1, #20]
 8004d32:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d34:	698d      	ldr	r5, [r1, #24]
 8004d36:	4315      	orrs	r5, r2
 8004d38:	e7ea      	b.n	8004d10 <TIM_OC1_SetConfig+0x2c>
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00

08004d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d44:	6a02      	ldr	r2, [r0, #32]
 8004d46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d4a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d50:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d54:	680d      	ldr	r5, [r1, #0]
 8004d56:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d5c:	688a      	ldr	r2, [r1, #8]
 8004d5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d62:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <TIM_OC3_SetConfig+0x60>)
 8004d64:	4290      	cmp	r0, r2
 8004d66:	d009      	beq.n	8004d7c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d68:	4a0d      	ldr	r2, [pc, #52]	; (8004da0 <TIM_OC3_SetConfig+0x60>)
 8004d6a:	4290      	cmp	r0, r2
 8004d6c:	d00e      	beq.n	8004d8c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d70:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d72:	684a      	ldr	r2, [r1, #4]
 8004d74:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d76:	6203      	str	r3, [r0, #32]
}
 8004d78:	bc30      	pop	{r4, r5}
 8004d7a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d80:	68ca      	ldr	r2, [r1, #12]
 8004d82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d8a:	e7ed      	b.n	8004d68 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d8c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d90:	694a      	ldr	r2, [r1, #20]
 8004d92:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d96:	698a      	ldr	r2, [r1, #24]
 8004d98:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8004d9c:	e7e7      	b.n	8004d6e <TIM_OC3_SetConfig+0x2e>
 8004d9e:	bf00      	nop
 8004da0:	40012c00 	.word	0x40012c00

08004da4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004da8:	6a02      	ldr	r2, [r0, #32]
 8004daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004dae:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004db4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db8:	680d      	ldr	r5, [r1, #0]
 8004dba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dc2:	688d      	ldr	r5, [r1, #8]
 8004dc4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc8:	4d07      	ldr	r5, [pc, #28]	; (8004de8 <TIM_OC4_SetConfig+0x44>)
 8004dca:	42a8      	cmp	r0, r5
 8004dcc:	d006      	beq.n	8004ddc <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dce:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd2:	684a      	ldr	r2, [r1, #4]
 8004dd4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dd6:	6203      	str	r3, [r0, #32]
}
 8004dd8:	bc30      	pop	{r4, r5}
 8004dda:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ddc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004de0:	694d      	ldr	r5, [r1, #20]
 8004de2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004de6:	e7f2      	b.n	8004dce <TIM_OC4_SetConfig+0x2a>
 8004de8:	40012c00 	.word	0x40012c00

08004dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dec:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df0:	6a04      	ldr	r4, [r0, #32]
 8004df2:	f024 0401 	bic.w	r4, r4, #1
 8004df6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfa:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dfe:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e02:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004e06:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e08:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004e0a:	6203      	str	r3, [r0, #32]
}
 8004e0c:	bc10      	pop	{r4}
 8004e0e:	4770      	bx	lr

08004e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e10:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e12:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e14:	6a04      	ldr	r4, [r0, #32]
 8004e16:	f024 0410 	bic.w	r4, r4, #16
 8004e1a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1e:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e22:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e2a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e2e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004e30:	6203      	str	r3, [r0, #32]
}
 8004e32:	bc10      	pop	{r4}
 8004e34:	4770      	bx	lr

08004e36 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e36:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	6083      	str	r3, [r0, #8]
}
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004e48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d127      	bne.n	8004ea2 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004e52:	2302      	movs	r3, #2
 8004e54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e58:	6802      	ldr	r2, [r0, #0]
 8004e5a:	68d3      	ldr	r3, [r2, #12]
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e62:	6803      	ldr	r3, [r0, #0]
 8004e64:	4a11      	ldr	r2, [pc, #68]	; (8004eac <HAL_TIM_Base_Start_IT+0x64>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d010      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x44>
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d00d      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x44>
 8004e70:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d009      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x44>
 8004e78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d005      	beq.n	8004e8c <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e88:	2000      	movs	r0, #0
 8004e8a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	2a06      	cmp	r2, #6
 8004e94:	d007      	beq.n	8004ea6 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	4770      	bx	lr
    return HAL_ERROR;
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	4770      	bx	lr
  return HAL_OK;
 8004ea6:	2000      	movs	r0, #0
}
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40012c00 	.word	0x40012c00

08004eb0 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004eb0:	6802      	ldr	r2, [r0, #0]
 8004eb2:	68d3      	ldr	r3, [r2, #12]
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8004eba:	6803      	ldr	r3, [r0, #0]
 8004ebc:	6a19      	ldr	r1, [r3, #32]
 8004ebe:	f241 1211 	movw	r2, #4369	; 0x1111
 8004ec2:	4211      	tst	r1, r2
 8004ec4:	d108      	bne.n	8004ed8 <HAL_TIM_Base_Stop_IT+0x28>
 8004ec6:	6a19      	ldr	r1, [r3, #32]
 8004ec8:	f240 4244 	movw	r2, #1092	; 0x444
 8004ecc:	4211      	tst	r1, r2
 8004ece:	d103      	bne.n	8004ed8 <HAL_TIM_Base_Stop_IT+0x28>
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004ede:	2000      	movs	r0, #0
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_PWM_MspInit>:
}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_TIM_IC_CaptureCallback>:
}
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004ee8:	4770      	bx	lr

08004eea <HAL_TIM_TriggerCallback>:
}
 8004eea:	4770      	bx	lr

08004eec <HAL_TIM_IRQHandler>:
{
 8004eec:	b510      	push	{r4, lr}
 8004eee:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ef0:	6803      	ldr	r3, [r0, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	f012 0f02 	tst.w	r2, #2
 8004ef8:	d011      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	f012 0f02 	tst.w	r2, #2
 8004f00:	d00d      	beq.n	8004f1e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f02:	f06f 0202 	mvn.w	r2, #2
 8004f06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f0c:	6803      	ldr	r3, [r0, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f013 0f03 	tst.w	r3, #3
 8004f14:	d070      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004f16:	f7ff ffe6 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	f012 0f04 	tst.w	r2, #4
 8004f26:	d012      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	f012 0f04 	tst.w	r2, #4
 8004f2e:	d00e      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f30:	f06f 0204 	mvn.w	r2, #4
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f36:	2302      	movs	r3, #2
 8004f38:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004f42:	d05f      	beq.n	8005004 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7ff ffce 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	f012 0f08 	tst.w	r2, #8
 8004f56:	d012      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	f012 0f08 	tst.w	r2, #8
 8004f5e:	d00e      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f60:	f06f 0208 	mvn.w	r2, #8
 8004f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f66:	2304      	movs	r3, #4
 8004f68:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f013 0f03 	tst.w	r3, #3
 8004f72:	d04e      	beq.n	8005012 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7ff ffb6 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	f012 0f10 	tst.w	r2, #16
 8004f86:	d012      	beq.n	8004fae <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	f012 0f10 	tst.w	r2, #16
 8004f8e:	d00e      	beq.n	8004fae <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f90:	f06f 0210 	mvn.w	r2, #16
 8004f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f96:	2308      	movs	r3, #8
 8004f98:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004fa2:	d03d      	beq.n	8005020 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff ff9e 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	2300      	movs	r3, #0
 8004fac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fae:	6823      	ldr	r3, [r4, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	f012 0f01 	tst.w	r2, #1
 8004fb6:	d003      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	f012 0f01 	tst.w	r2, #1
 8004fbe:	d136      	bne.n	800502e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fc0:	6823      	ldr	r3, [r4, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004fd0:	d134      	bne.n	800503c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004fda:	d003      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004fe2:	d132      	bne.n	800504a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	691a      	ldr	r2, [r3, #16]
 8004fe8:	f012 0f20 	tst.w	r2, #32
 8004fec:	d003      	beq.n	8004ff6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	f012 0f20 	tst.w	r2, #32
 8004ff4:	d130      	bne.n	8005058 <HAL_TIM_IRQHandler+0x16c>
}
 8004ff6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff8:	f7ff ff74 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f7ff ff73 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005002:	e78a      	b.n	8004f1a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005004:	4620      	mov	r0, r4
 8005006:	f7ff ff6d 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff ff6c 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8005010:	e79b      	b.n	8004f4a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	4620      	mov	r0, r4
 8005014:	f7ff ff66 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	4620      	mov	r0, r4
 800501a:	f7ff ff65 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 800501e:	e7ac      	b.n	8004f7a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005020:	4620      	mov	r0, r4
 8005022:	f7ff ff5f 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005026:	4620      	mov	r0, r4
 8005028:	f7ff ff5e 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 800502c:	e7bd      	b.n	8004faa <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800502e:	f06f 0201 	mvn.w	r2, #1
 8005032:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005034:	4620      	mov	r0, r4
 8005036:	f7fb ff27 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
 800503a:	e7c1      	b.n	8004fc0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800503c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005040:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005042:	4620      	mov	r0, r4
 8005044:	f000 fac3 	bl	80055ce <HAL_TIMEx_BreakCallback>
 8005048:	e7c3      	b.n	8004fd2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800504a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800504e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005050:	4620      	mov	r0, r4
 8005052:	f7ff ff4a 	bl	8004eea <HAL_TIM_TriggerCallback>
 8005056:	e7c5      	b.n	8004fe4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005058:	f06f 0220 	mvn.w	r2, #32
 800505c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800505e:	4620      	mov	r0, r4
 8005060:	f000 fab4 	bl	80055cc <HAL_TIMEx_CommutCallback>
}
 8005064:	e7c7      	b.n	8004ff6 <HAL_TIM_IRQHandler+0x10a>
	...

08005068 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005068:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800506a:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <TIM_Base_SetConfig+0x70>)
 800506c:	4290      	cmp	r0, r2
 800506e:	d00a      	beq.n	8005086 <TIM_Base_SetConfig+0x1e>
 8005070:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0x1e>
 8005076:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800507a:	4290      	cmp	r0, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0x1e>
 800507e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005082:	4290      	cmp	r0, r2
 8005084:	d103      	bne.n	800508e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800508a:	684a      	ldr	r2, [r1, #4]
 800508c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800508e:	4a12      	ldr	r2, [pc, #72]	; (80050d8 <TIM_Base_SetConfig+0x70>)
 8005090:	4290      	cmp	r0, r2
 8005092:	d00a      	beq.n	80050aa <TIM_Base_SetConfig+0x42>
 8005094:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0x42>
 800509a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800509e:	4290      	cmp	r0, r2
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0x42>
 80050a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050a6:	4290      	cmp	r0, r2
 80050a8:	d103      	bne.n	80050b2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80050aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ae:	68ca      	ldr	r2, [r1, #12]
 80050b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b6:	694a      	ldr	r2, [r1, #20]
 80050b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80050ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	688b      	ldr	r3, [r1, #8]
 80050be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050c0:	680b      	ldr	r3, [r1, #0]
 80050c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <TIM_Base_SetConfig+0x70>)
 80050c6:	4298      	cmp	r0, r3
 80050c8:	d002      	beq.n	80050d0 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80050ca:	2301      	movs	r3, #1
 80050cc:	6143      	str	r3, [r0, #20]
}
 80050ce:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80050d0:	690b      	ldr	r3, [r1, #16]
 80050d2:	6303      	str	r3, [r0, #48]	; 0x30
 80050d4:	e7f9      	b.n	80050ca <TIM_Base_SetConfig+0x62>
 80050d6:	bf00      	nop
 80050d8:	40012c00 	.word	0x40012c00

080050dc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80050dc:	b340      	cbz	r0, 8005130 <HAL_TIM_Base_Init+0x54>
{
 80050de:	b510      	push	{r4, lr}
 80050e0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050e6:	b1f3      	cbz	r3, 8005126 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	2302      	movs	r3, #2
 80050ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ee:	4621      	mov	r1, r4
 80050f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80050f4:	f7ff ffb8 	bl	8005068 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f8:	2301      	movs	r3, #1
 80050fa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005102:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005106:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800510a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005116:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800511a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800511e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005122:	2000      	movs	r0, #0
}
 8005124:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005126:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800512a:	f7fd fbf7 	bl	800291c <HAL_TIM_Base_MspInit>
 800512e:	e7db      	b.n	80050e8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005130:	2001      	movs	r0, #1
}
 8005132:	4770      	bx	lr

08005134 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005134:	b340      	cbz	r0, 8005188 <HAL_TIM_PWM_Init+0x54>
{
 8005136:	b510      	push	{r4, lr}
 8005138:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800513e:	b1f3      	cbz	r3, 800517e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	2302      	movs	r3, #2
 8005142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005146:	4621      	mov	r1, r4
 8005148:	f851 0b04 	ldr.w	r0, [r1], #4
 800514c:	f7ff ff8c 	bl	8005068 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005150:	2301      	movs	r3, #1
 8005152:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005156:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800515a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800515e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005162:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800516a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800516e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005176:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800517a:	2000      	movs	r0, #0
}
 800517c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800517e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005182:	f7ff feae 	bl	8004ee2 <HAL_TIM_PWM_MspInit>
 8005186:	e7db      	b.n	8005140 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005188:	2001      	movs	r0, #1
}
 800518a:	4770      	bx	lr

0800518c <TIM_OC2_SetConfig>:
{
 800518c:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 800518e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005190:	6a02      	ldr	r2, [r0, #32]
 8005192:	f022 0210 	bic.w	r2, r2, #16
 8005196:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005198:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800519a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800519c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a0:	680d      	ldr	r5, [r1, #0]
 80051a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80051a6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051aa:	688d      	ldr	r5, [r1, #8]
 80051ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051b0:	4d0e      	ldr	r5, [pc, #56]	; (80051ec <TIM_OC2_SetConfig+0x60>)
 80051b2:	42a8      	cmp	r0, r5
 80051b4:	d009      	beq.n	80051ca <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	4d0d      	ldr	r5, [pc, #52]	; (80051ec <TIM_OC2_SetConfig+0x60>)
 80051b8:	42a8      	cmp	r0, r5
 80051ba:	d00e      	beq.n	80051da <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80051bc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80051be:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80051c0:	684a      	ldr	r2, [r1, #4]
 80051c2:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80051c4:	6203      	str	r3, [r0, #32]
}
 80051c6:	bc30      	pop	{r4, r5}
 80051c8:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80051ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051ce:	68cd      	ldr	r5, [r1, #12]
 80051d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80051d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d8:	e7ed      	b.n	80051b6 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051da:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051de:	694d      	ldr	r5, [r1, #20]
 80051e0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e4:	698d      	ldr	r5, [r1, #24]
 80051e6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80051ea:	e7e7      	b.n	80051bc <TIM_OC2_SetConfig+0x30>
 80051ec:	40012c00 	.word	0x40012c00

080051f0 <HAL_TIM_PWM_ConfigChannel>:
{
 80051f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80051f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d066      	beq.n	80052c8 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80051fa:	4604      	mov	r4, r0
 80051fc:	460d      	mov	r5, r1
 80051fe:	2301      	movs	r3, #1
 8005200:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005204:	2a0c      	cmp	r2, #12
 8005206:	d85a      	bhi.n	80052be <HAL_TIM_PWM_ConfigChannel+0xce>
 8005208:	e8df f002 	tbb	[pc, r2]
 800520c:	59595907 	.word	0x59595907
 8005210:	5959591b 	.word	0x5959591b
 8005214:	59595930 	.word	0x59595930
 8005218:	44          	.byte	0x44
 8005219:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800521a:	6800      	ldr	r0, [r0, #0]
 800521c:	f7ff fd62 	bl	8004ce4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005220:	6822      	ldr	r2, [r4, #0]
 8005222:	6993      	ldr	r3, [r2, #24]
 8005224:	f043 0308 	orr.w	r3, r3, #8
 8005228:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800522a:	6822      	ldr	r2, [r4, #0]
 800522c:	6993      	ldr	r3, [r2, #24]
 800522e:	f023 0304 	bic.w	r3, r3, #4
 8005232:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005234:	6822      	ldr	r2, [r4, #0]
 8005236:	6993      	ldr	r3, [r2, #24]
 8005238:	6929      	ldr	r1, [r5, #16]
 800523a:	430b      	orrs	r3, r1
 800523c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800523e:	2000      	movs	r0, #0
      break;
 8005240:	e03e      	b.n	80052c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005242:	6800      	ldr	r0, [r0, #0]
 8005244:	f7ff ffa2 	bl	800518c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005248:	6822      	ldr	r2, [r4, #0]
 800524a:	6993      	ldr	r3, [r2, #24]
 800524c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005250:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	6993      	ldr	r3, [r2, #24]
 8005256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800525c:	6822      	ldr	r2, [r4, #0]
 800525e:	6993      	ldr	r3, [r2, #24]
 8005260:	6929      	ldr	r1, [r5, #16]
 8005262:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005266:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005268:	2000      	movs	r0, #0
      break;
 800526a:	e029      	b.n	80052c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f7ff fd67 	bl	8004d40 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	69d3      	ldr	r3, [r2, #28]
 8005276:	f043 0308 	orr.w	r3, r3, #8
 800527a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800527c:	6822      	ldr	r2, [r4, #0]
 800527e:	69d3      	ldr	r3, [r2, #28]
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	69d3      	ldr	r3, [r2, #28]
 800528a:	6929      	ldr	r1, [r5, #16]
 800528c:	430b      	orrs	r3, r1
 800528e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005290:	2000      	movs	r0, #0
      break;
 8005292:	e015      	b.n	80052c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005294:	6800      	ldr	r0, [r0, #0]
 8005296:	f7ff fd85 	bl	8004da4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	69d3      	ldr	r3, [r2, #28]
 800529e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052a2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052a4:	6822      	ldr	r2, [r4, #0]
 80052a6:	69d3      	ldr	r3, [r2, #28]
 80052a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ae:	6822      	ldr	r2, [r4, #0]
 80052b0:	69d3      	ldr	r3, [r2, #28]
 80052b2:	6929      	ldr	r1, [r5, #16]
 80052b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80052b8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2000      	movs	r0, #0
      break;
 80052bc:	e000      	b.n	80052c0 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80052be:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80052c0:	2300      	movs	r3, #0
 80052c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80052c8:	2002      	movs	r0, #2
 80052ca:	e7fc      	b.n	80052c6 <HAL_TIM_PWM_ConfigChannel+0xd6>

080052cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052cc:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d0:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80052d8:	430a      	orrs	r2, r1
 80052da:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052de:	6082      	str	r2, [r0, #8]
}
 80052e0:	bc10      	pop	{r4}
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80052e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d078      	beq.n	80053de <HAL_TIM_ConfigClockSource+0xfa>
{
 80052ec:	b510      	push	{r4, lr}
 80052ee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80052f0:	2301      	movs	r3, #1
 80052f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80052f6:	2302      	movs	r3, #2
 80052f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	6802      	ldr	r2, [r0, #0]
 80052fe:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005300:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005304:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005308:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800530a:	680b      	ldr	r3, [r1, #0]
 800530c:	2b60      	cmp	r3, #96	; 0x60
 800530e:	d04c      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0xc6>
 8005310:	d829      	bhi.n	8005366 <HAL_TIM_ConfigClockSource+0x82>
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	d054      	beq.n	80053c0 <HAL_TIM_ConfigClockSource+0xdc>
 8005316:	d90c      	bls.n	8005332 <HAL_TIM_ConfigClockSource+0x4e>
 8005318:	2b50      	cmp	r3, #80	; 0x50
 800531a:	d122      	bne.n	8005362 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531c:	68ca      	ldr	r2, [r1, #12]
 800531e:	6849      	ldr	r1, [r1, #4]
 8005320:	6800      	ldr	r0, [r0, #0]
 8005322:	f7ff fd63 	bl	8004dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005326:	2150      	movs	r1, #80	; 0x50
 8005328:	6820      	ldr	r0, [r4, #0]
 800532a:	f7ff fd84 	bl	8004e36 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2000      	movs	r0, #0
      break;
 8005330:	e005      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005332:	2b20      	cmp	r3, #32
 8005334:	d00d      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x6e>
 8005336:	d909      	bls.n	800534c <HAL_TIM_ConfigClockSource+0x68>
 8005338:	2b30      	cmp	r3, #48	; 0x30
 800533a:	d00a      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800533c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800533e:	2301      	movs	r3, #1
 8005340:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005344:	2300      	movs	r3, #0
 8005346:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800534a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800534c:	b10b      	cbz	r3, 8005352 <HAL_TIM_ConfigClockSource+0x6e>
 800534e:	2b10      	cmp	r3, #16
 8005350:	d105      	bne.n	800535e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005352:	4619      	mov	r1, r3
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	f7ff fd6e 	bl	8004e36 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800535a:	2000      	movs	r0, #0
      break;
 800535c:	e7ef      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 800535e:	2001      	movs	r0, #1
 8005360:	e7ed      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
 8005362:	2001      	movs	r0, #1
 8005364:	e7eb      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536a:	d034      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0xf2>
 800536c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005370:	d10c      	bne.n	800538c <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8005372:	68cb      	ldr	r3, [r1, #12]
 8005374:	684a      	ldr	r2, [r1, #4]
 8005376:	6889      	ldr	r1, [r1, #8]
 8005378:	6800      	ldr	r0, [r0, #0]
 800537a:	f7ff ffa7 	bl	80052cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	6893      	ldr	r3, [r2, #8]
 8005382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005386:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005388:	2000      	movs	r0, #0
      break;
 800538a:	e7d8      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800538c:	2b70      	cmp	r3, #112	; 0x70
 800538e:	d124      	bne.n	80053da <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8005390:	68cb      	ldr	r3, [r1, #12]
 8005392:	684a      	ldr	r2, [r1, #4]
 8005394:	6889      	ldr	r1, [r1, #8]
 8005396:	6800      	ldr	r0, [r0, #0]
 8005398:	f7ff ff98 	bl	80052cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800539c:	6822      	ldr	r2, [r4, #0]
 800539e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80053a4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053a6:	2000      	movs	r0, #0
      break;
 80053a8:	e7c9      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053aa:	68ca      	ldr	r2, [r1, #12]
 80053ac:	6849      	ldr	r1, [r1, #4]
 80053ae:	6800      	ldr	r0, [r0, #0]
 80053b0:	f7ff fd2e 	bl	8004e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053b4:	2160      	movs	r1, #96	; 0x60
 80053b6:	6820      	ldr	r0, [r4, #0]
 80053b8:	f7ff fd3d 	bl	8004e36 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2000      	movs	r0, #0
      break;
 80053be:	e7be      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c0:	68ca      	ldr	r2, [r1, #12]
 80053c2:	6849      	ldr	r1, [r1, #4]
 80053c4:	6800      	ldr	r0, [r0, #0]
 80053c6:	f7ff fd11 	bl	8004dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ca:	2140      	movs	r1, #64	; 0x40
 80053cc:	6820      	ldr	r0, [r4, #0]
 80053ce:	f7ff fd32 	bl	8004e36 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2000      	movs	r0, #0
      break;
 80053d4:	e7b3      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80053d6:	2000      	movs	r0, #0
 80053d8:	e7b1      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80053da:	2001      	movs	r0, #1
 80053dc:	e7af      	b.n	800533e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80053de:	2002      	movs	r0, #2
}
 80053e0:	4770      	bx	lr

080053e2 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053e2:	f001 011f 	and.w	r1, r1, #31
 80053e6:	f04f 0c01 	mov.w	ip, #1
 80053ea:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ee:	6a03      	ldr	r3, [r0, #32]
 80053f0:	ea23 030c 	bic.w	r3, r3, ip
 80053f4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053f6:	6a03      	ldr	r3, [r0, #32]
 80053f8:	408a      	lsls	r2, r1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	6203      	str	r3, [r0, #32]
}
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_PWM_Start>:
{
 8005400:	b510      	push	{r4, lr}
 8005402:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005404:	4608      	mov	r0, r1
 8005406:	bb51      	cbnz	r1, 800545e <HAL_TIM_PWM_Start+0x5e>
 8005408:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800540c:	b2db      	uxtb	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	bf18      	it	ne
 8005412:	2301      	movne	r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d15b      	bne.n	80054d0 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005418:	2800      	cmp	r0, #0
 800541a:	d139      	bne.n	8005490 <HAL_TIM_PWM_Start+0x90>
 800541c:	2302      	movs	r3, #2
 800541e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005422:	2201      	movs	r2, #1
 8005424:	4601      	mov	r1, r0
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	f7ff ffdb 	bl	80053e2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	4a2a      	ldr	r2, [pc, #168]	; (80054d8 <HAL_TIM_PWM_Start+0xd8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d03d      	beq.n	80054b0 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	4a28      	ldr	r2, [pc, #160]	; (80054d8 <HAL_TIM_PWM_Start+0xd8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d03e      	beq.n	80054ba <HAL_TIM_PWM_Start+0xba>
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d03b      	beq.n	80054ba <HAL_TIM_PWM_Start+0xba>
 8005442:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005446:	4293      	cmp	r3, r2
 8005448:	d037      	beq.n	80054ba <HAL_TIM_PWM_Start+0xba>
 800544a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800544e:	4293      	cmp	r3, r2
 8005450:	d033      	beq.n	80054ba <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800545a:	2000      	movs	r0, #0
 800545c:	e039      	b.n	80054d2 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800545e:	2904      	cmp	r1, #4
 8005460:	d008      	beq.n	8005474 <HAL_TIM_PWM_Start+0x74>
 8005462:	2908      	cmp	r1, #8
 8005464:	d00d      	beq.n	8005482 <HAL_TIM_PWM_Start+0x82>
 8005466:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800546a:	b2db      	uxtb	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	bf18      	it	ne
 8005470:	2301      	movne	r3, #1
 8005472:	e7cf      	b.n	8005414 <HAL_TIM_PWM_Start+0x14>
 8005474:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005478:	b2db      	uxtb	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	bf18      	it	ne
 800547e:	2301      	movne	r3, #1
 8005480:	e7c8      	b.n	8005414 <HAL_TIM_PWM_Start+0x14>
 8005482:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005486:	b2db      	uxtb	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	bf18      	it	ne
 800548c:	2301      	movne	r3, #1
 800548e:	e7c1      	b.n	8005414 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005490:	2804      	cmp	r0, #4
 8005492:	d005      	beq.n	80054a0 <HAL_TIM_PWM_Start+0xa0>
 8005494:	2808      	cmp	r0, #8
 8005496:	d007      	beq.n	80054a8 <HAL_TIM_PWM_Start+0xa8>
 8005498:	2302      	movs	r3, #2
 800549a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800549e:	e7c0      	b.n	8005422 <HAL_TIM_PWM_Start+0x22>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80054a6:	e7bc      	b.n	8005422 <HAL_TIM_PWM_Start+0x22>
 80054a8:	2302      	movs	r3, #2
 80054aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80054ae:	e7b8      	b.n	8005422 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 80054b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
 80054b8:	e7bc      	b.n	8005434 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c0:	2a06      	cmp	r2, #6
 80054c2:	d007      	beq.n	80054d4 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054cc:	2000      	movs	r0, #0
 80054ce:	e000      	b.n	80054d2 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 80054d0:	2001      	movs	r0, #1
}
 80054d2:	bd10      	pop	{r4, pc}
  return HAL_OK;
 80054d4:	2000      	movs	r0, #0
 80054d6:	e7fc      	b.n	80054d2 <HAL_TIM_PWM_Start+0xd2>
 80054d8:	40012c00 	.word	0x40012c00

080054dc <HAL_TIM_PWM_Stop>:
{
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4604      	mov	r4, r0
 80054e0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054e2:	2200      	movs	r2, #0
 80054e4:	6800      	ldr	r0, [r0, #0]
 80054e6:	f7ff ff7c 	bl	80053e2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	4a1b      	ldr	r2, [pc, #108]	; (800555c <HAL_TIM_PWM_Stop+0x80>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d014      	beq.n	800551c <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	6a19      	ldr	r1, [r3, #32]
 80054f6:	f241 1211 	movw	r2, #4369	; 0x1111
 80054fa:	4211      	tst	r1, r2
 80054fc:	d108      	bne.n	8005510 <HAL_TIM_PWM_Stop+0x34>
 80054fe:	6a19      	ldr	r1, [r3, #32]
 8005500:	f240 4244 	movw	r2, #1092	; 0x444
 8005504:	4211      	tst	r1, r2
 8005506:	d103      	bne.n	8005510 <HAL_TIM_PWM_Stop+0x34>
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005510:	b99d      	cbnz	r5, 800553a <HAL_TIM_PWM_Stop+0x5e>
 8005512:	2301      	movs	r3, #1
 8005514:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005518:	2000      	movs	r0, #0
 800551a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 800551c:	6a19      	ldr	r1, [r3, #32]
 800551e:	f241 1211 	movw	r2, #4369	; 0x1111
 8005522:	4211      	tst	r1, r2
 8005524:	d1e5      	bne.n	80054f2 <HAL_TIM_PWM_Stop+0x16>
 8005526:	6a19      	ldr	r1, [r3, #32]
 8005528:	f240 4244 	movw	r2, #1092	; 0x444
 800552c:	4211      	tst	r1, r2
 800552e:	d1e0      	bne.n	80054f2 <HAL_TIM_PWM_Stop+0x16>
 8005530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
 8005538:	e7db      	b.n	80054f2 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	2d04      	cmp	r5, #4
 800553c:	d005      	beq.n	800554a <HAL_TIM_PWM_Stop+0x6e>
 800553e:	2d08      	cmp	r5, #8
 8005540:	d007      	beq.n	8005552 <HAL_TIM_PWM_Stop+0x76>
 8005542:	2301      	movs	r3, #1
 8005544:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005548:	e7e6      	b.n	8005518 <HAL_TIM_PWM_Stop+0x3c>
 800554a:	2301      	movs	r3, #1
 800554c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005550:	e7e2      	b.n	8005518 <HAL_TIM_PWM_Stop+0x3c>
 8005552:	2301      	movs	r3, #1
 8005554:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005558:	e7de      	b.n	8005518 <HAL_TIM_PWM_Stop+0x3c>
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00

08005560 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005560:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8005564:	2a01      	cmp	r2, #1
 8005566:	d02c      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8005568:	b410      	push	{r4}
 800556a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800556c:	2201      	movs	r2, #1
 800556e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	2202      	movs	r2, #2
 8005574:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005578:	6802      	ldr	r2, [r0, #0]
 800557a:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800557c:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800557e:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005582:	6808      	ldr	r0, [r1, #0]
 8005584:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005588:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	480e      	ldr	r0, [pc, #56]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800558e:	4282      	cmp	r2, r0
 8005590:	d00a      	beq.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005592:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005596:	d007      	beq.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005598:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800559c:	4282      	cmp	r2, r0
 800559e:	d003      	beq.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80055a0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80055a4:	4282      	cmp	r2, r0
 80055a6:	d104      	bne.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ac:	6849      	ldr	r1, [r1, #4]
 80055ae:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b0:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b8:	2000      	movs	r0, #0
 80055ba:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 80055be:	bc10      	pop	{r4}
 80055c0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80055c2:	2002      	movs	r0, #2
}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00

080055cc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055cc:	4770      	bx	lr

080055ce <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055ce:	4770      	bx	lr

080055d0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055d0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80055d4:	b993      	cbnz	r3, 80055fc <osKernelInitialize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d6:	f3ef 8310 	mrs	r3, PRIMASK
 80055da:	b993      	cbnz	r3, 8005602 <osKernelInitialize+0x32>
 80055dc:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <osKernelInitialize+0x40>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	2802      	cmp	r0, #2
 80055e2:	d004      	beq.n	80055ee <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80055e4:	b980      	cbnz	r0, 8005608 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80055e6:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <osKernelInitialize+0x40>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055ec:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055ee:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0f6      	beq.n	80055e4 <osKernelInitialize+0x14>
    stat = osErrorISR;
 80055f6:	f06f 0005 	mvn.w	r0, #5
 80055fa:	4770      	bx	lr
 80055fc:	f06f 0005 	mvn.w	r0, #5
 8005600:	4770      	bx	lr
 8005602:	f06f 0005 	mvn.w	r0, #5
 8005606:	4770      	bx	lr
    } else {
      stat = osError;
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	200012cc 	.word	0x200012cc

08005614 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005614:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005616:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800561a:	b9b3      	cbnz	r3, 800564a <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800561c:	f3ef 8310 	mrs	r3, PRIMASK
 8005620:	b9b3      	cbnz	r3, 8005650 <osKernelStart+0x3c>
 8005622:	4b0e      	ldr	r3, [pc, #56]	; (800565c <osKernelStart+0x48>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d008      	beq.n	800563c <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800562a:	2b01      	cmp	r3, #1
 800562c:	d113      	bne.n	8005656 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 800562e:	4b0b      	ldr	r3, [pc, #44]	; (800565c <osKernelStart+0x48>)
 8005630:	2202      	movs	r2, #2
 8005632:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005634:	f001 fc70 	bl	8006f18 <vTaskStartScheduler>
      stat = osOK;
 8005638:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800563a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800563c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005640:	2a00      	cmp	r2, #0
 8005642:	d0f2      	beq.n	800562a <osKernelStart+0x16>
    stat = osErrorISR;
 8005644:	f06f 0005 	mvn.w	r0, #5
 8005648:	e7f7      	b.n	800563a <osKernelStart+0x26>
 800564a:	f06f 0005 	mvn.w	r0, #5
 800564e:	e7f4      	b.n	800563a <osKernelStart+0x26>
 8005650:	f06f 0005 	mvn.w	r0, #5
 8005654:	e7f1      	b.n	800563a <osKernelStart+0x26>
      stat = osError;
 8005656:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800565a:	e7ee      	b.n	800563a <osKernelStart+0x26>
 800565c:	200012cc 	.word	0x200012cc

08005660 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005662:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005664:	2400      	movs	r4, #0
 8005666:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005668:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800566c:	2c00      	cmp	r4, #0
 800566e:	d143      	bne.n	80056f8 <osThreadNew+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005670:	f3ef 8310 	mrs	r3, PRIMASK
 8005674:	2b00      	cmp	r3, #0
 8005676:	d13f      	bne.n	80056f8 <osThreadNew+0x98>
 8005678:	4b33      	ldr	r3, [pc, #204]	; (8005748 <osThreadNew+0xe8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d016      	beq.n	80056ae <osThreadNew+0x4e>
 8005680:	2800      	cmp	r0, #0
 8005682:	d039      	beq.n	80056f8 <osThreadNew+0x98>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8005684:	2300      	movs	r3, #0
 8005686:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800568a:	b362      	cbz	r2, 80056e6 <osThreadNew+0x86>
      if (attr->name != NULL) {
 800568c:	6815      	ldr	r5, [r2, #0]
 800568e:	b195      	cbz	r5, 80056b6 <osThreadNew+0x56>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8005690:	6993      	ldr	r3, [r2, #24]
 8005692:	b903      	cbnz	r3, 8005696 <osThreadNew+0x36>
    prio  = (UBaseType_t)osPriorityNormal;
 8005694:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005696:	1e5c      	subs	r4, r3, #1
 8005698:	2c37      	cmp	r4, #55	; 0x37
 800569a:	d851      	bhi.n	8005740 <osThreadNew+0xe0>
 800569c:	6854      	ldr	r4, [r2, #4]
 800569e:	f014 0f01 	tst.w	r4, #1
 80056a2:	d14f      	bne.n	8005744 <osThreadNew+0xe4>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80056a4:	6956      	ldr	r6, [r2, #20]
 80056a6:	b14e      	cbz	r6, 80056bc <osThreadNew+0x5c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056a8:	ea4f 0c96 	mov.w	ip, r6, lsr #2
 80056ac:	e008      	b.n	80056c0 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 80056b2:	bb0b      	cbnz	r3, 80056f8 <osThreadNew+0x98>
 80056b4:	e7e4      	b.n	8005680 <osThreadNew+0x20>
    name  = &empty;
 80056b6:	f10d 0517 	add.w	r5, sp, #23
 80056ba:	e7e9      	b.n	8005690 <osThreadNew+0x30>
    stack = configMINIMAL_STACK_SIZE;
 80056bc:	f04f 0c80 	mov.w	ip, #128	; 0x80
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056c0:	6894      	ldr	r4, [r2, #8]
 80056c2:	b12c      	cbz	r4, 80056d0 <osThreadNew+0x70>
 80056c4:	68d7      	ldr	r7, [r2, #12]
 80056c6:	2f5f      	cmp	r7, #95	; 0x5f
 80056c8:	d902      	bls.n	80056d0 <osThreadNew+0x70>
 80056ca:	6917      	ldr	r7, [r2, #16]
 80056cc:	b107      	cbz	r7, 80056d0 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ce:	b9b6      	cbnz	r6, 80056fe <osThreadNew+0x9e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056d0:	b114      	cbz	r4, 80056d8 <osThreadNew+0x78>
    mem   = -1;
 80056d2:	f04f 34ff 	mov.w	r4, #4294967295
 80056d6:	e00c      	b.n	80056f2 <osThreadNew+0x92>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056d8:	68d4      	ldr	r4, [r2, #12]
 80056da:	b994      	cbnz	r4, 8005702 <osThreadNew+0xa2>
 80056dc:	6914      	ldr	r4, [r2, #16]
 80056de:	b19c      	cbz	r4, 8005708 <osThreadNew+0xa8>
    mem   = -1;
 80056e0:	f04f 34ff 	mov.w	r4, #4294967295
 80056e4:	e005      	b.n	80056f2 <osThreadNew+0x92>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80056e6:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80056e8:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 80056ea:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 80056ee:	f10d 0517 	add.w	r5, sp, #23
    }

    if (mem == 1) {
 80056f2:	2c01      	cmp	r4, #1
 80056f4:	d00a      	beq.n	800570c <osThreadNew+0xac>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 80056f6:	b1ac      	cbz	r4, 8005724 <osThreadNew+0xc4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056f8:	9804      	ldr	r0, [sp, #16]
}
 80056fa:	b007      	add	sp, #28
 80056fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 80056fe:	2401      	movs	r4, #1
 8005700:	e7f7      	b.n	80056f2 <osThreadNew+0x92>
    mem   = -1;
 8005702:	f04f 34ff 	mov.w	r4, #4294967295
 8005706:	e7f4      	b.n	80056f2 <osThreadNew+0x92>
          mem = 0;
 8005708:	2400      	movs	r4, #0
 800570a:	e7f2      	b.n	80056f2 <osThreadNew+0x92>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800570c:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800570e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005710:	9202      	str	r2, [sp, #8]
 8005712:	9401      	str	r4, [sp, #4]
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	460b      	mov	r3, r1
 8005718:	4662      	mov	r2, ip
 800571a:	4629      	mov	r1, r5
 800571c:	f001 fb8e 	bl	8006e3c <xTaskCreateStatic>
 8005720:	9004      	str	r0, [sp, #16]
 8005722:	e7e9      	b.n	80056f8 <osThreadNew+0x98>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005724:	aa04      	add	r2, sp, #16
 8005726:	9201      	str	r2, [sp, #4]
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	460b      	mov	r3, r1
 800572c:	fa1f f28c 	uxth.w	r2, ip
 8005730:	4629      	mov	r1, r5
 8005732:	f001 fbbd 	bl	8006eb0 <xTaskCreate>
 8005736:	2801      	cmp	r0, #1
 8005738:	d0de      	beq.n	80056f8 <osThreadNew+0x98>
          hTask = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	9304      	str	r3, [sp, #16]
 800573e:	e7db      	b.n	80056f8 <osThreadNew+0x98>
        return (NULL);
 8005740:	2000      	movs	r0, #0
 8005742:	e7da      	b.n	80056fa <osThreadNew+0x9a>
 8005744:	2000      	movs	r0, #0
 8005746:	e7d8      	b.n	80056fa <osThreadNew+0x9a>
 8005748:	200012cc 	.word	0x200012cc

0800574c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800574c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800574e:	f3ef 8305 	mrs	r3, IPSR
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;

  if (!IS_IRQ()) {
 8005752:	bb33      	cbnz	r3, 80057a2 <osEventFlagsNew+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005754:	f3ef 8310 	mrs	r3, PRIMASK
 8005758:	bb2b      	cbnz	r3, 80057a6 <osEventFlagsNew+0x5a>
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <osEventFlagsNew+0x64>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d00c      	beq.n	800577c <osEventFlagsNew+0x30>
    mem = -1;

    if (attr != NULL) {
 8005762:	b1d0      	cbz	r0, 800579a <osEventFlagsNew+0x4e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005764:	6883      	ldr	r3, [r0, #8]
 8005766:	b113      	cbz	r3, 800576e <osEventFlagsNew+0x22>
 8005768:	68c2      	ldr	r2, [r0, #12]
 800576a:	2a1f      	cmp	r2, #31
 800576c:	d811      	bhi.n	8005792 <osEventFlagsNew+0x46>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800576e:	b15b      	cbz	r3, 8005788 <osEventFlagsNew+0x3c>
    mem = -1;
 8005770:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005774:	b9cb      	cbnz	r3, 80057aa <osEventFlagsNew+0x5e>
        hEventGroup = xEventGroupCreate();
 8005776:	f000 fb35 	bl	8005de4 <xEventGroupCreate>
 800577a:	e013      	b.n	80057a4 <osEventFlagsNew+0x58>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800577c:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ()) {
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0ee      	beq.n	8005762 <osEventFlagsNew+0x16>
  hEventGroup = NULL;
 8005784:	2000      	movs	r0, #0
 8005786:	e00d      	b.n	80057a4 <osEventFlagsNew+0x58>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005788:	68c3      	ldr	r3, [r0, #12]
 800578a:	b143      	cbz	r3, 800579e <osEventFlagsNew+0x52>
    mem = -1;
 800578c:	f04f 33ff 	mov.w	r3, #4294967295
 8005790:	e7f0      	b.n	8005774 <osEventFlagsNew+0x28>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fb01 	bl	8005d9a <xEventGroupCreateStatic>
 8005798:	e004      	b.n	80057a4 <osEventFlagsNew+0x58>
      mem = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	e7ea      	b.n	8005774 <osEventFlagsNew+0x28>
          mem = 0;
 800579e:	2300      	movs	r3, #0
 80057a0:	e7e8      	b.n	8005774 <osEventFlagsNew+0x28>
  hEventGroup = NULL;
 80057a2:	2000      	movs	r0, #0
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
}
 80057a4:	bd08      	pop	{r3, pc}
  hEventGroup = NULL;
 80057a6:	2000      	movs	r0, #0
 80057a8:	e7fc      	b.n	80057a4 <osEventFlagsNew+0x58>
 80057aa:	2000      	movs	r0, #0
  return ((osEventFlagsId_t)hEventGroup);
 80057ac:	e7fa      	b.n	80057a4 <osEventFlagsNew+0x58>
 80057ae:	bf00      	nop
 80057b0:	200012cc 	.word	0x200012cc

080057b4 <osEventFlagsSet>:
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80057b4:	b370      	cbz	r0, 8005814 <osEventFlagsSet+0x60>
uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80057b6:	b510      	push	{r4, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	460c      	mov	r4, r1
 80057bc:	4603      	mov	r3, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80057be:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 80057c2:	d12a      	bne.n	800581a <osEventFlagsSet+0x66>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c4:	f3ef 8205 	mrs	r2, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 80057c8:	b94a      	cbnz	r2, 80057de <osEventFlagsSet+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ca:	f3ef 8210 	mrs	r2, PRIMASK
 80057ce:	b932      	cbnz	r2, 80057de <osEventFlagsSet+0x2a>
 80057d0:	4a16      	ldr	r2, [pc, #88]	; (800582c <osEventFlagsSet+0x78>)
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	2a02      	cmp	r2, #2
 80057d6:	d118      	bne.n	800580a <osEventFlagsSet+0x56>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057d8:	f3ef 8211 	mrs	r2, BASEPRI
 80057dc:	b1aa      	cbz	r2, 800580a <osEventFlagsSet+0x56>
    yield = pdFALSE;
 80057de:	2200      	movs	r2, #0
 80057e0:	9201      	str	r2, [sp, #4]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80057e2:	aa01      	add	r2, sp, #4
 80057e4:	4621      	mov	r1, r4
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fbd8 	bl	8005f9c <xEventGroupSetBitsFromISR>
 80057ec:	b9c8      	cbnz	r0, 8005822 <osEventFlagsSet+0x6e>
      rflags = (uint32_t)osErrorResource;
    } else {
      rflags = flags;
      portYIELD_FROM_ISR (yield);
 80057ee:	9b01      	ldr	r3, [sp, #4]
 80057f0:	b1d3      	cbz	r3, 8005828 <osEventFlagsSet+0x74>
 80057f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80057f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
      rflags = flags;
 8005806:	4620      	mov	r0, r4
 8005808:	e009      	b.n	800581e <osEventFlagsSet+0x6a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800580a:	4621      	mov	r1, r4
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fb7b 	bl	8005f08 <xEventGroupSetBits>
 8005812:	e004      	b.n	800581e <osEventFlagsSet+0x6a>
    rflags = (uint32_t)osErrorParameter;
 8005814:	f06f 0003 	mvn.w	r0, #3
  }

  return (rflags);
}
 8005818:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 800581a:	f06f 0003 	mvn.w	r0, #3
}
 800581e:	b002      	add	sp, #8
 8005820:	bd10      	pop	{r4, pc}
      rflags = (uint32_t)osErrorResource;
 8005822:	f06f 0002 	mvn.w	r0, #2
 8005826:	e7fa      	b.n	800581e <osEventFlagsSet+0x6a>
      rflags = flags;
 8005828:	4620      	mov	r0, r4
  return (rflags);
 800582a:	e7f8      	b.n	800581e <osEventFlagsSet+0x6a>
 800582c:	200012cc 	.word	0x200012cc

08005830 <osEventFlagsWait>:
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005830:	b3b0      	cbz	r0, 80058a0 <osEventFlagsWait+0x70>
uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005832:	b570      	push	{r4, r5, r6, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	460c      	mov	r4, r1
 8005838:	461d      	mov	r5, r3
 800583a:	4684      	mov	ip, r0
  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800583c:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8005840:	d131      	bne.n	80058a6 <osEventFlagsWait+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005842:	f3ef 8305 	mrs	r3, IPSR
    rflags = (uint32_t)osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005846:	bb93      	cbnz	r3, 80058ae <osEventFlagsWait+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005848:	f3ef 8310 	mrs	r3, PRIMASK
 800584c:	bb93      	cbnz	r3, 80058b4 <osEventFlagsWait+0x84>
 800584e:	4b1e      	ldr	r3, [pc, #120]	; (80058c8 <osEventFlagsWait+0x98>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b02      	cmp	r3, #2
 8005854:	d013      	beq.n	800587e <osEventFlagsWait+0x4e>
    rflags = (uint32_t)osErrorISR;
  }
  else {
    if (options & osFlagsWaitAll) {
 8005856:	f012 0601 	ands.w	r6, r2, #1
 800585a:	d017      	beq.n	800588c <osEventFlagsWait+0x5c>
      wait_all = pdTRUE;
 800585c:	2301      	movs	r3, #1
    } else {
      wait_all = pdFAIL;
    }

    if (options & osFlagsNoClear) {
 800585e:	f012 0f02 	tst.w	r2, #2
 8005862:	d015      	beq.n	8005890 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8005864:	2200      	movs	r2, #0
    } else {
      exit_clr = pdTRUE;
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005866:	9500      	str	r5, [sp, #0]
 8005868:	4621      	mov	r1, r4
 800586a:	4660      	mov	r0, ip
 800586c:	f000 fac8 	bl	8005e00 <xEventGroupWaitBits>

    if (options & osFlagsWaitAll) {
 8005870:	b186      	cbz	r6, 8005894 <osEventFlagsWait+0x64>
      if (flags != rflags) {
 8005872:	4284      	cmp	r4, r0
 8005874:	d019      	beq.n	80058aa <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 8005876:	b305      	cbz	r5, 80058ba <osEventFlagsWait+0x8a>
          rflags = (uint32_t)osErrorTimeout;
 8005878:	f06f 0001 	mvn.w	r0, #1
 800587c:	e015      	b.n	80058aa <osEventFlagsWait+0x7a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800587e:	f3ef 8311 	mrs	r3, BASEPRI
  else if (IS_IRQ()) {
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0e7      	beq.n	8005856 <osEventFlagsWait+0x26>
    rflags = (uint32_t)osErrorISR;
 8005886:	f06f 0005 	mvn.w	r0, #5
 800588a:	e00e      	b.n	80058aa <osEventFlagsWait+0x7a>
      wait_all = pdFAIL;
 800588c:	2300      	movs	r3, #0
 800588e:	e7e6      	b.n	800585e <osEventFlagsWait+0x2e>
      exit_clr = pdTRUE;
 8005890:	2201      	movs	r2, #1
 8005892:	e7e8      	b.n	8005866 <osEventFlagsWait+0x36>
          rflags = (uint32_t)osErrorResource;
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005894:	4204      	tst	r4, r0
 8005896:	d108      	bne.n	80058aa <osEventFlagsWait+0x7a>
        if (timeout > 0U) {
 8005898:	b195      	cbz	r5, 80058c0 <osEventFlagsWait+0x90>
          rflags = (uint32_t)osErrorTimeout;
 800589a:	f06f 0001 	mvn.w	r0, #1
 800589e:	e004      	b.n	80058aa <osEventFlagsWait+0x7a>
    rflags = (uint32_t)osErrorParameter;
 80058a0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (rflags);
}
 80058a4:	4770      	bx	lr
    rflags = (uint32_t)osErrorParameter;
 80058a6:	f06f 0003 	mvn.w	r0, #3
}
 80058aa:	b002      	add	sp, #8
 80058ac:	bd70      	pop	{r4, r5, r6, pc}
    rflags = (uint32_t)osErrorISR;
 80058ae:	f06f 0005 	mvn.w	r0, #5
 80058b2:	e7fa      	b.n	80058aa <osEventFlagsWait+0x7a>
 80058b4:	f06f 0005 	mvn.w	r0, #5
 80058b8:	e7f7      	b.n	80058aa <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 80058ba:	f06f 0002 	mvn.w	r0, #2
 80058be:	e7f4      	b.n	80058aa <osEventFlagsWait+0x7a>
          rflags = (uint32_t)osErrorResource;
 80058c0:	f06f 0002 	mvn.w	r0, #2
  return (rflags);
 80058c4:	e7f1      	b.n	80058aa <osEventFlagsWait+0x7a>
 80058c6:	bf00      	nop
 80058c8:	200012cc 	.word	0x200012cc

080058cc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80058cc:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ce:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d14e      	bne.n	8005974 <osMutexNew+0xa8>
 80058d6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d8:	f3ef 8210 	mrs	r2, PRIMASK
 80058dc:	4613      	mov	r3, r2
 80058de:	2a00      	cmp	r2, #0
 80058e0:	d14b      	bne.n	800597a <osMutexNew+0xae>
 80058e2:	4a28      	ldr	r2, [pc, #160]	; (8005984 <osMutexNew+0xb8>)
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	2a02      	cmp	r2, #2
 80058e8:	d023      	beq.n	8005932 <osMutexNew+0x66>
    if (attr != NULL) {
 80058ea:	b104      	cbz	r4, 80058ee <osMutexNew+0x22>
      type = attr->attr_bits;
 80058ec:	6863      	ldr	r3, [r4, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80058ee:	f013 0601 	ands.w	r6, r3, #1
 80058f2:	d000      	beq.n	80058f6 <osMutexNew+0x2a>
      rmtx = 1U;
 80058f4:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80058f6:	f013 0f08 	tst.w	r3, #8
 80058fa:	d140      	bne.n	800597e <osMutexNew+0xb2>
      mem = -1;

      if (attr != NULL) {
 80058fc:	b37c      	cbz	r4, 800595e <osMutexNew+0x92>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058fe:	68a1      	ldr	r1, [r4, #8]
 8005900:	b111      	cbz	r1, 8005908 <osMutexNew+0x3c>
 8005902:	68e3      	ldr	r3, [r4, #12]
 8005904:	2b4f      	cmp	r3, #79	; 0x4f
 8005906:	d81f      	bhi.n	8005948 <osMutexNew+0x7c>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005908:	b1c9      	cbz	r1, 800593e <osMutexNew+0x72>
      mem = -1;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
        }
      }
      else {
        if (mem == 0) {
 800590e:	bb7b      	cbnz	r3, 8005970 <osMutexNew+0xa4>
          if (rmtx != 0U) {
 8005910:	b34e      	cbz	r6, 8005966 <osMutexNew+0x9a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005912:	2004      	movs	r0, #4
 8005914:	f000 fe0d 	bl	8006532 <xQueueCreateMutex>
 8005918:	4605      	mov	r5, r0
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800591a:	b12d      	cbz	r5, 8005928 <osMutexNew+0x5c>
        if (attr != NULL) {
 800591c:	b104      	cbz	r4, 8005920 <osMutexNew+0x54>
          name = attr->name;
 800591e:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	f001 f89e 	bl	8006a64 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005928:	b32d      	cbz	r5, 8005976 <osMutexNew+0xaa>
 800592a:	b326      	cbz	r6, 8005976 <osMutexNew+0xaa>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800592c:	f045 0501 	orr.w	r5, r5, #1
 8005930:	e021      	b.n	8005976 <osMutexNew+0xaa>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005932:	f3ef 8211 	mrs	r2, BASEPRI
  if (!IS_IRQ()) {
 8005936:	2a00      	cmp	r2, #0
 8005938:	d0d7      	beq.n	80058ea <osMutexNew+0x1e>
  hMutex = NULL;
 800593a:	2500      	movs	r5, #0
 800593c:	e01b      	b.n	8005976 <osMutexNew+0xaa>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800593e:	68e3      	ldr	r3, [r4, #12]
 8005940:	b17b      	cbz	r3, 8005962 <osMutexNew+0x96>
      mem = -1;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295
 8005946:	e7e2      	b.n	800590e <osMutexNew+0x42>
        if (rmtx != 0U) {
 8005948:	b126      	cbz	r6, 8005954 <osMutexNew+0x88>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800594a:	2004      	movs	r0, #4
 800594c:	f000 fdfc 	bl	8006548 <xQueueCreateMutexStatic>
 8005950:	4605      	mov	r5, r0
 8005952:	e7e2      	b.n	800591a <osMutexNew+0x4e>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005954:	2001      	movs	r0, #1
 8005956:	f000 fdf7 	bl	8006548 <xQueueCreateMutexStatic>
 800595a:	4605      	mov	r5, r0
 800595c:	e7dd      	b.n	800591a <osMutexNew+0x4e>
        mem = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	e7d5      	b.n	800590e <osMutexNew+0x42>
            mem = 0;
 8005962:	2300      	movs	r3, #0
 8005964:	e7d3      	b.n	800590e <osMutexNew+0x42>
            hMutex = xSemaphoreCreateMutex ();
 8005966:	2001      	movs	r0, #1
 8005968:	f000 fde3 	bl	8006532 <xQueueCreateMutex>
 800596c:	4605      	mov	r5, r0
 800596e:	e7d4      	b.n	800591a <osMutexNew+0x4e>
  hMutex = NULL;
 8005970:	2500      	movs	r5, #0
 8005972:	e7d9      	b.n	8005928 <osMutexNew+0x5c>
 8005974:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8005976:	4628      	mov	r0, r5
 8005978:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 800597a:	2500      	movs	r5, #0
 800597c:	e7fb      	b.n	8005976 <osMutexNew+0xaa>
 800597e:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8005980:	e7f9      	b.n	8005976 <osMutexNew+0xaa>
 8005982:	bf00      	nop
 8005984:	200012cc 	.word	0x200012cc

08005988 <osMutexAcquire>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005988:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800598c:	bb42      	cbnz	r2, 80059e0 <osMutexAcquire+0x58>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800598e:	b510      	push	{r4, lr}
 8005990:	4603      	mov	r3, r0
 8005992:	460c      	mov	r4, r1
 8005994:	f020 0001 	bic.w	r0, r0, #1
 8005998:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800599c:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 80059a0:	bb0a      	cbnz	r2, 80059e6 <osMutexAcquire+0x5e>
 80059a2:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <osMutexAcquire+0x80>)
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	2a02      	cmp	r2, #2
 80059a8:	d00a      	beq.n	80059c0 <osMutexAcquire+0x38>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80059aa:	b1f8      	cbz	r0, 80059ec <osMutexAcquire+0x64>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80059ac:	b17b      	cbz	r3, 80059ce <osMutexAcquire+0x46>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80059ae:	4621      	mov	r1, r4
 80059b0:	f000 ffe1 	bl	8006976 <xQueueTakeMutexRecursive>
 80059b4:	2801      	cmp	r0, #1
 80059b6:	d01c      	beq.n	80059f2 <osMutexAcquire+0x6a>
        if (timeout != 0U) {
 80059b8:	b1ec      	cbz	r4, 80059f6 <osMutexAcquire+0x6e>
          stat = osErrorTimeout;
 80059ba:	f06f 0001 	mvn.w	r0, #1
 80059be:	e019      	b.n	80059f4 <osMutexAcquire+0x6c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059c0:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	d0f0      	beq.n	80059aa <osMutexAcquire+0x22>
    stat = osErrorISR;
 80059c8:	f06f 0005 	mvn.w	r0, #5
 80059cc:	e012      	b.n	80059f4 <osMutexAcquire+0x6c>
          stat = osErrorResource;
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80059ce:	4621      	mov	r1, r4
 80059d0:	f000 fefe 	bl	80067d0 <xQueueSemaphoreTake>
 80059d4:	2801      	cmp	r0, #1
 80059d6:	d011      	beq.n	80059fc <osMutexAcquire+0x74>
        if (timeout != 0U) {
 80059d8:	b194      	cbz	r4, 8005a00 <osMutexAcquire+0x78>
          stat = osErrorTimeout;
 80059da:	f06f 0001 	mvn.w	r0, #1
 80059de:	e009      	b.n	80059f4 <osMutexAcquire+0x6c>
    stat = osErrorISR;
 80059e0:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 80059e4:	4770      	bx	lr
    stat = osErrorISR;
 80059e6:	f06f 0005 	mvn.w	r0, #5
 80059ea:	e003      	b.n	80059f4 <osMutexAcquire+0x6c>
    stat = osErrorParameter;
 80059ec:	f06f 0003 	mvn.w	r0, #3
 80059f0:	e000      	b.n	80059f4 <osMutexAcquire+0x6c>
  stat = osOK;
 80059f2:	2000      	movs	r0, #0
}
 80059f4:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 80059f6:	f06f 0002 	mvn.w	r0, #2
 80059fa:	e7fb      	b.n	80059f4 <osMutexAcquire+0x6c>
  stat = osOK;
 80059fc:	2000      	movs	r0, #0
 80059fe:	e7f9      	b.n	80059f4 <osMutexAcquire+0x6c>
          stat = osErrorResource;
 8005a00:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005a04:	e7f6      	b.n	80059f4 <osMutexAcquire+0x6c>
 8005a06:	bf00      	nop
 8005a08:	200012cc 	.word	0x200012cc

08005a0c <osMutexRelease>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a0c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8005a10:	bb22      	cbnz	r2, 8005a5c <osMutexRelease+0x50>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005a12:	b508      	push	{r3, lr}
 8005a14:	4603      	mov	r3, r0
 8005a16:	f020 0001 	bic.w	r0, r0, #1
 8005a1a:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a1e:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8005a22:	b9f2      	cbnz	r2, 8005a62 <osMutexRelease+0x56>
 8005a24:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <osMutexRelease+0x70>)
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	2a02      	cmp	r2, #2
 8005a2a:	d007      	beq.n	8005a3c <osMutexRelease+0x30>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8005a2c:	b1e0      	cbz	r0, 8005a68 <osMutexRelease+0x5c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8005a2e:	b163      	cbz	r3, 8005a4a <osMutexRelease+0x3e>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005a30:	f000 fd99 	bl	8006566 <xQueueGiveMutexRecursive>
 8005a34:	2801      	cmp	r0, #1
 8005a36:	d11a      	bne.n	8005a6e <osMutexRelease+0x62>
  stat = osOK;
 8005a38:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005a3a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a3c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8005a40:	2a00      	cmp	r2, #0
 8005a42:	d0f3      	beq.n	8005a2c <osMutexRelease+0x20>
    stat = osErrorISR;
 8005a44:	f06f 0005 	mvn.w	r0, #5
 8005a48:	e7f7      	b.n	8005a3a <osMutexRelease+0x2e>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f000 fc9f 	bl	8006392 <xQueueGenericSend>
 8005a54:	2801      	cmp	r0, #1
 8005a56:	d10d      	bne.n	8005a74 <osMutexRelease+0x68>
  stat = osOK;
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7ee      	b.n	8005a3a <osMutexRelease+0x2e>
    stat = osErrorISR;
 8005a5c:	f06f 0005 	mvn.w	r0, #5
}
 8005a60:	4770      	bx	lr
    stat = osErrorISR;
 8005a62:	f06f 0005 	mvn.w	r0, #5
 8005a66:	e7e8      	b.n	8005a3a <osMutexRelease+0x2e>
    stat = osErrorParameter;
 8005a68:	f06f 0003 	mvn.w	r0, #3
 8005a6c:	e7e5      	b.n	8005a3a <osMutexRelease+0x2e>
        stat = osErrorResource;
 8005a6e:	f06f 0002 	mvn.w	r0, #2
 8005a72:	e7e2      	b.n	8005a3a <osMutexRelease+0x2e>
        stat = osErrorResource;
 8005a74:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005a78:	e7df      	b.n	8005a3a <osMutexRelease+0x2e>
 8005a7a:	bf00      	nop
 8005a7c:	200012cc 	.word	0x200012cc

08005a80 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a84:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d157      	bne.n	8005b3c <osSemaphoreNew+0xbc>
 8005a8c:	460e      	mov	r6, r1
 8005a8e:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a90:	f3ef 8310 	mrs	r3, PRIMASK
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d155      	bne.n	8005b44 <osSemaphoreNew+0xc4>
 8005a98:	4b2e      	ldr	r3, [pc, #184]	; (8005b54 <osSemaphoreNew+0xd4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d00e      	beq.n	8005abe <osSemaphoreNew+0x3e>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d051      	beq.n	8005b48 <osSemaphoreNew+0xc8>
 8005aa4:	42b0      	cmp	r0, r6
 8005aa6:	d351      	bcc.n	8005b4c <osSemaphoreNew+0xcc>
    mem = -1;

    if (attr != NULL) {
 8005aa8:	b17d      	cbz	r5, 8005aca <osSemaphoreNew+0x4a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005aaa:	68ac      	ldr	r4, [r5, #8]
 8005aac:	b114      	cbz	r4, 8005ab4 <osSemaphoreNew+0x34>
 8005aae:	68eb      	ldr	r3, [r5, #12]
 8005ab0:	2b4f      	cmp	r3, #79	; 0x4f
 8005ab2:	d81a      	bhi.n	8005aea <osSemaphoreNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ab4:	2c00      	cmp	r4, #0
 8005ab6:	d14b      	bne.n	8005b50 <osSemaphoreNew+0xd0>
 8005ab8:	68eb      	ldr	r3, [r5, #12]
 8005aba:	b13b      	cbz	r3, 8005acc <osSemaphoreNew+0x4c>
 8005abc:	e03f      	b.n	8005b3e <osSemaphoreNew+0xbe>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005abe:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0ec      	beq.n	8005aa0 <osSemaphoreNew+0x20>
  hSemaphore = NULL;
 8005ac6:	2400      	movs	r4, #0
 8005ac8:	e039      	b.n	8005b3e <osSemaphoreNew+0xbe>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8005aca:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8005acc:	2801      	cmp	r0, #1
 8005ace:	d00e      	beq.n	8005aee <osSemaphoreNew+0x6e>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8005ad0:	bb73      	cbnz	r3, 8005b30 <osSemaphoreNew+0xb0>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	f000 fc3f 	bl	8006356 <xQueueCreateCountingSemaphore>
 8005ad8:	4604      	mov	r4, r0
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005ada:	b384      	cbz	r4, 8005b3e <osSemaphoreNew+0xbe>
        if (attr != NULL) {
 8005adc:	b105      	cbz	r5, 8005ae0 <osSemaphoreNew+0x60>
          name = attr->name;
 8005ade:	682d      	ldr	r5, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 ffbe 	bl	8006a64 <vQueueAddToRegistry>
 8005ae8:	e029      	b.n	8005b3e <osSemaphoreNew+0xbe>
        mem = 1;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e7ee      	b.n	8005acc <osSemaphoreNew+0x4c>
        if (mem == 1) {
 8005aee:	b9b3      	cbnz	r3, 8005b1e <osSemaphoreNew+0x9e>
          hSemaphore = xSemaphoreCreateBinary();
 8005af0:	2203      	movs	r2, #3
 8005af2:	2100      	movs	r1, #0
 8005af4:	2001      	movs	r0, #1
 8005af6:	f000 fbe4 	bl	80062c2 <xQueueGenericCreate>
 8005afa:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d0ec      	beq.n	8005ada <osSemaphoreNew+0x5a>
 8005b00:	2e00      	cmp	r6, #0
 8005b02:	d0ea      	beq.n	8005ada <osSemaphoreNew+0x5a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b04:	2300      	movs	r3, #0
 8005b06:	461a      	mov	r2, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 fc41 	bl	8006392 <xQueueGenericSend>
 8005b10:	2801      	cmp	r0, #1
 8005b12:	d0e2      	beq.n	8005ada <osSemaphoreNew+0x5a>
            vSemaphoreDelete (hSemaphore);
 8005b14:	4620      	mov	r0, r4
 8005b16:	f000 ffcf 	bl	8006ab8 <vQueueDelete>
            hSemaphore = NULL;
 8005b1a:	2400      	movs	r4, #0
 8005b1c:	e00f      	b.n	8005b3e <osSemaphoreNew+0xbe>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005b1e:	68ab      	ldr	r3, [r5, #8]
 8005b20:	2203      	movs	r2, #3
 8005b22:	9200      	str	r2, [sp, #0]
 8005b24:	2200      	movs	r2, #0
 8005b26:	4611      	mov	r1, r2
 8005b28:	f000 fb82 	bl	8006230 <xQueueGenericCreateStatic>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	e7e5      	b.n	8005afc <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005b30:	68aa      	ldr	r2, [r5, #8]
 8005b32:	4631      	mov	r1, r6
 8005b34:	f000 fbec 	bl	8006310 <xQueueCreateCountingSemaphoreStatic>
 8005b38:	4604      	mov	r4, r0
 8005b3a:	e7ce      	b.n	8005ada <osSemaphoreNew+0x5a>
  hSemaphore = NULL;
 8005b3c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8005b3e:	4620      	mov	r0, r4
 8005b40:	b002      	add	sp, #8
 8005b42:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8005b44:	2400      	movs	r4, #0
 8005b46:	e7fa      	b.n	8005b3e <osSemaphoreNew+0xbe>
 8005b48:	2400      	movs	r4, #0
 8005b4a:	e7f8      	b.n	8005b3e <osSemaphoreNew+0xbe>
 8005b4c:	2400      	movs	r4, #0
 8005b4e:	e7f6      	b.n	8005b3e <osSemaphoreNew+0xbe>
 8005b50:	2400      	movs	r4, #0
  return ((osSemaphoreId_t)hSemaphore);
 8005b52:	e7f4      	b.n	8005b3e <osSemaphoreNew+0xbe>
 8005b54:	200012cc 	.word	0x200012cc

08005b58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b58:	b530      	push	{r4, r5, lr}
 8005b5a:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b5c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d149      	bne.n	8005bf8 <osMessageQueueNew+0xa0>
 8005b64:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b66:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d148      	bne.n	8005c00 <osMessageQueueNew+0xa8>
 8005b6e:	4b28      	ldr	r3, [pc, #160]	; (8005c10 <osMessageQueueNew+0xb8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d021      	beq.n	8005bba <osMessageQueueNew+0x62>
 8005b76:	2800      	cmp	r0, #0
 8005b78:	d044      	beq.n	8005c04 <osMessageQueueNew+0xac>
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	d044      	beq.n	8005c08 <osMessageQueueNew+0xb0>
    mem = -1;

    if (attr != NULL) {
 8005b7e:	b3a5      	cbz	r5, 8005bea <osMessageQueueNew+0x92>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b80:	68ab      	ldr	r3, [r5, #8]
 8005b82:	b153      	cbz	r3, 8005b9a <osMessageQueueNew+0x42>
 8005b84:	68ea      	ldr	r2, [r5, #12]
 8005b86:	2a4f      	cmp	r2, #79	; 0x4f
 8005b88:	d907      	bls.n	8005b9a <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b8a:	692a      	ldr	r2, [r5, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b8c:	b12a      	cbz	r2, 8005b9a <osMessageQueueNew+0x42>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b8e:	fb01 f400 	mul.w	r4, r1, r0
 8005b92:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8005b96:	45a4      	cmp	ip, r4
 8005b98:	d221      	bcs.n	8005bde <osMessageQueueNew+0x86>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b9a:	b1a3      	cbz	r3, 8005bc6 <osMessageQueueNew+0x6e>
    mem = -1;
 8005b9c:	f04f 33ff 	mov.w	r3, #4294967295

    if (mem == 1) {
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8005ba0:	bba3      	cbnz	r3, 8005c0c <osMessageQueueNew+0xb4>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f000 fb8d 	bl	80062c2 <xQueueGenericCreate>
 8005ba8:	4604      	mov	r4, r0
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005baa:	b334      	cbz	r4, 8005bfa <osMessageQueueNew+0xa2>
      if (attr != NULL) {
 8005bac:	b105      	cbz	r5, 8005bb0 <osMessageQueueNew+0x58>
        name = attr->name;
 8005bae:	682d      	ldr	r5, [r5, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f000 ff56 	bl	8006a64 <vQueueAddToRegistry>
 8005bb8:	e01f      	b.n	8005bfa <osMessageQueueNew+0xa2>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bba:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0d9      	beq.n	8005b76 <osMessageQueueNew+0x1e>
  hQueue = NULL;
 8005bc2:	2400      	movs	r4, #0
 8005bc4:	e019      	b.n	8005bfa <osMessageQueueNew+0xa2>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bc6:	68eb      	ldr	r3, [r5, #12]
 8005bc8:	b98b      	cbnz	r3, 8005bee <osMessageQueueNew+0x96>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bca:	692b      	ldr	r3, [r5, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bcc:	b113      	cbz	r3, 8005bd4 <osMessageQueueNew+0x7c>
    mem = -1;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	e7e5      	b.n	8005ba0 <osMessageQueueNew+0x48>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bd4:	696b      	ldr	r3, [r5, #20]
 8005bd6:	b16b      	cbz	r3, 8005bf4 <osMessageQueueNew+0x9c>
    mem = -1;
 8005bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bdc:	e7e0      	b.n	8005ba0 <osMessageQueueNew+0x48>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005bde:	2400      	movs	r4, #0
 8005be0:	9400      	str	r4, [sp, #0]
 8005be2:	f000 fb25 	bl	8006230 <xQueueGenericCreateStatic>
 8005be6:	4604      	mov	r4, r0
 8005be8:	e7df      	b.n	8005baa <osMessageQueueNew+0x52>
      mem = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e7d8      	b.n	8005ba0 <osMessageQueueNew+0x48>
    mem = -1;
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	e7d5      	b.n	8005ba0 <osMessageQueueNew+0x48>
          mem = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e7d3      	b.n	8005ba0 <osMessageQueueNew+0x48>
  hQueue = NULL;
 8005bf8:	2400      	movs	r4, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	b003      	add	sp, #12
 8005bfe:	bd30      	pop	{r4, r5, pc}
  hQueue = NULL;
 8005c00:	2400      	movs	r4, #0
 8005c02:	e7fa      	b.n	8005bfa <osMessageQueueNew+0xa2>
 8005c04:	2400      	movs	r4, #0
 8005c06:	e7f8      	b.n	8005bfa <osMessageQueueNew+0xa2>
 8005c08:	2400      	movs	r4, #0
 8005c0a:	e7f6      	b.n	8005bfa <osMessageQueueNew+0xa2>
 8005c0c:	2400      	movs	r4, #0
  return ((osMessageQueueId_t)hQueue);
 8005c0e:	e7f4      	b.n	8005bfa <osMessageQueueNew+0xa2>
 8005c10:	200012cc 	.word	0x200012cc

08005c14 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c14:	b510      	push	{r4, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005c1e:	b9b3      	cbnz	r3, 8005c4e <osMessageQueuePut+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c20:	f3ef 8310 	mrs	r3, PRIMASK
 8005c24:	b99b      	cbnz	r3, 8005c4e <osMessageQueuePut+0x3a>
 8005c26:	4b22      	ldr	r3, [pc, #136]	; (8005cb0 <osMessageQueuePut+0x9c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d00b      	beq.n	8005c46 <osMessageQueuePut+0x32>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c2e:	b398      	cbz	r0, 8005c98 <osMessageQueuePut+0x84>
 8005c30:	b3a9      	cbz	r1, 8005c9e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c32:	2300      	movs	r3, #0
 8005c34:	4622      	mov	r2, r4
 8005c36:	f000 fbac 	bl	8006392 <xQueueGenericSend>
 8005c3a:	2801      	cmp	r0, #1
 8005c3c:	d032      	beq.n	8005ca4 <osMessageQueuePut+0x90>
        if (timeout != 0U) {
 8005c3e:	b39c      	cbz	r4, 8005ca8 <osMessageQueuePut+0x94>
          stat = osErrorTimeout;
 8005c40:	f06f 0001 	mvn.w	r0, #1
 8005c44:	e01a      	b.n	8005c7c <osMessageQueuePut+0x68>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c46:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0ef      	beq.n	8005c2e <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c4e:	b1b8      	cbz	r0, 8005c80 <osMessageQueuePut+0x6c>
 8005c50:	b1c9      	cbz	r1, 8005c86 <osMessageQueuePut+0x72>
 8005c52:	b9dc      	cbnz	r4, 8005c8c <osMessageQueuePut+0x78>
      yield = pdFALSE;
 8005c54:	2300      	movs	r3, #0
 8005c56:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005c58:	aa01      	add	r2, sp, #4
 8005c5a:	f000 fca4 	bl	80065a6 <xQueueGenericSendFromISR>
 8005c5e:	2801      	cmp	r0, #1
 8005c60:	d117      	bne.n	8005c92 <osMessageQueuePut+0x7e>
        portYIELD_FROM_ISR (yield);
 8005c62:	9801      	ldr	r0, [sp, #4]
 8005c64:	b150      	cbz	r0, 8005c7c <osMessageQueuePut+0x68>
 8005c66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005c7a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005c80:	f06f 0003 	mvn.w	r0, #3
 8005c84:	e7fa      	b.n	8005c7c <osMessageQueuePut+0x68>
 8005c86:	f06f 0003 	mvn.w	r0, #3
 8005c8a:	e7f7      	b.n	8005c7c <osMessageQueuePut+0x68>
 8005c8c:	f06f 0003 	mvn.w	r0, #3
 8005c90:	e7f4      	b.n	8005c7c <osMessageQueuePut+0x68>
        stat = osErrorResource;
 8005c92:	f06f 0002 	mvn.w	r0, #2
 8005c96:	e7f1      	b.n	8005c7c <osMessageQueuePut+0x68>
      stat = osErrorParameter;
 8005c98:	f06f 0003 	mvn.w	r0, #3
 8005c9c:	e7ee      	b.n	8005c7c <osMessageQueuePut+0x68>
 8005c9e:	f06f 0003 	mvn.w	r0, #3
 8005ca2:	e7eb      	b.n	8005c7c <osMessageQueuePut+0x68>
  stat = osOK;
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	e7e9      	b.n	8005c7c <osMessageQueuePut+0x68>
          stat = osErrorResource;
 8005ca8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005cac:	e7e6      	b.n	8005c7c <osMessageQueuePut+0x68>
 8005cae:	bf00      	nop
 8005cb0:	200012cc 	.word	0x200012cc

08005cb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005cb4:	b510      	push	{r4, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cba:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8005cbe:	b9ab      	cbnz	r3, 8005cec <osMessageQueueGet+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc4:	b993      	cbnz	r3, 8005cec <osMessageQueueGet+0x38>
 8005cc6:	4b21      	ldr	r3, [pc, #132]	; (8005d4c <osMessageQueueGet+0x98>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d00a      	beq.n	8005ce4 <osMessageQueueGet+0x30>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005cce:	b390      	cbz	r0, 8005d36 <osMessageQueueGet+0x82>
 8005cd0:	b3a1      	cbz	r1, 8005d3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	f000 fccd 	bl	8006672 <xQueueReceive>
 8005cd8:	2801      	cmp	r0, #1
 8005cda:	d032      	beq.n	8005d42 <osMessageQueueGet+0x8e>
        if (timeout != 0U) {
 8005cdc:	b39c      	cbz	r4, 8005d46 <osMessageQueueGet+0x92>
          stat = osErrorTimeout;
 8005cde:	f06f 0001 	mvn.w	r0, #1
 8005ce2:	e01a      	b.n	8005d1a <osMessageQueueGet+0x66>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ce4:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cec:	b1b8      	cbz	r0, 8005d1e <osMessageQueueGet+0x6a>
 8005cee:	b1c9      	cbz	r1, 8005d24 <osMessageQueueGet+0x70>
 8005cf0:	b9dc      	cbnz	r4, 8005d2a <osMessageQueueGet+0x76>
      yield = pdFALSE;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9301      	str	r3, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005cf6:	aa01      	add	r2, sp, #4
 8005cf8:	f000 fe5d 	bl	80069b6 <xQueueReceiveFromISR>
 8005cfc:	2801      	cmp	r0, #1
 8005cfe:	d117      	bne.n	8005d30 <osMessageQueueGet+0x7c>
        portYIELD_FROM_ISR (yield);
 8005d00:	9801      	ldr	r0, [sp, #4]
 8005d02:	b150      	cbz	r0, 8005d1a <osMessageQueueGet+0x66>
 8005d04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005d18:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005d1a:	b002      	add	sp, #8
 8005d1c:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005d1e:	f06f 0003 	mvn.w	r0, #3
 8005d22:	e7fa      	b.n	8005d1a <osMessageQueueGet+0x66>
 8005d24:	f06f 0003 	mvn.w	r0, #3
 8005d28:	e7f7      	b.n	8005d1a <osMessageQueueGet+0x66>
 8005d2a:	f06f 0003 	mvn.w	r0, #3
 8005d2e:	e7f4      	b.n	8005d1a <osMessageQueueGet+0x66>
        stat = osErrorResource;
 8005d30:	f06f 0002 	mvn.w	r0, #2
 8005d34:	e7f1      	b.n	8005d1a <osMessageQueueGet+0x66>
      stat = osErrorParameter;
 8005d36:	f06f 0003 	mvn.w	r0, #3
 8005d3a:	e7ee      	b.n	8005d1a <osMessageQueueGet+0x66>
 8005d3c:	f06f 0003 	mvn.w	r0, #3
 8005d40:	e7eb      	b.n	8005d1a <osMessageQueueGet+0x66>
  stat = osOK;
 8005d42:	2000      	movs	r0, #0
 8005d44:	e7e9      	b.n	8005d1a <osMessageQueueGet+0x66>
          stat = osErrorResource;
 8005d46:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8005d4a:	e7e6      	b.n	8005d1a <osMessageQueueGet+0x66>
 8005d4c:	200012cc 	.word	0x200012cc

08005d50 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <vApplicationGetIdleTaskMemory+0x10>)
 8005d52:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d54:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <vApplicationGetIdleTaskMemory+0x14>)
 8005d56:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	6013      	str	r3, [r2, #0]
}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	2000126c 	.word	0x2000126c
 8005d64:	2000106c 	.word	0x2000106c

08005d68 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d68:	4b03      	ldr	r3, [pc, #12]	; (8005d78 <vApplicationGetTimerTaskMemory+0x10>)
 8005d6a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d6c:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <vApplicationGetTimerTaskMemory+0x14>)
 8005d6e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d74:	6013      	str	r3, [r2, #0]
}
 8005d76:	4770      	bx	lr
 8005d78:	200016d0 	.word	0x200016d0
 8005d7c:	200012d0 	.word	0x200012d0

08005d80 <prvTestWaitCondition>:

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 8005d80:	b91a      	cbnz	r2, 8005d8a <prvTestWaitCondition+0xa>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005d82:	4208      	tst	r0, r1
 8005d84:	d105      	bne.n	8005d92 <prvTestWaitCondition+0x12>
BaseType_t xWaitConditionMet = pdFALSE;
 8005d86:	4610      	mov	r0, r2
 8005d88:	4770      	bx	lr
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005d8a:	4381      	bics	r1, r0
 8005d8c:	d003      	beq.n	8005d96 <prvTestWaitCondition+0x16>
BaseType_t xWaitConditionMet = pdFALSE;
 8005d8e:	2000      	movs	r0, #0
 8005d90:	4770      	bx	lr
			xWaitConditionMet = pdTRUE;
 8005d92:	2001      	movs	r0, #1
 8005d94:	4770      	bx	lr
		{
			xWaitConditionMet = pdTRUE;
 8005d96:	2001      	movs	r0, #1
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
}
 8005d98:	4770      	bx	lr

08005d9a <xEventGroupCreateStatic>:
		configASSERT( pxEventGroupBuffer );
 8005d9a:	b180      	cbz	r0, 8005dbe <xEventGroupCreateStatic+0x24>
	{
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	4604      	mov	r4, r0
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005da2:	2320      	movs	r3, #32
 8005da4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005da6:	9b01      	ldr	r3, [sp, #4]
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d011      	beq.n	8005dd0 <xEventGroupCreateStatic+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	e7fe      	b.n	8005dbc <xEventGroupCreateStatic+0x22>
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventGroupBuffer );
 8005dce:	e7fe      	b.n	8005dce <xEventGroupCreateStatic+0x34>
			pxEventBits->uxEventBits = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f840 3b04 	str.w	r3, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005dd6:	f000 f8eb 	bl	8005fb0 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	7723      	strb	r3, [r4, #28]
	}
 8005dde:	4620      	mov	r0, r4
 8005de0:	b002      	add	sp, #8
 8005de2:	bd10      	pop	{r4, pc}

08005de4 <xEventGroupCreate>:
	{
 8005de4:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005de6:	2020      	movs	r0, #32
 8005de8:	f002 f8e6 	bl	8007fb8 <pvPortMalloc>
		if( pxEventBits != NULL )
 8005dec:	4604      	mov	r4, r0
 8005dee:	b128      	cbz	r0, 8005dfc <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 8005df0:	2500      	movs	r5, #0
 8005df2:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005df6:	f000 f8db 	bl	8005fb0 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005dfa:	7725      	strb	r5, [r4, #28]
	}
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}

08005e00 <xEventGroupWaitBits>:
{
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 8005e04:	b178      	cbz	r0, 8005e26 <xEventGroupWaitBits+0x26>
 8005e06:	460c      	mov	r4, r1
 8005e08:	4616      	mov	r6, r2
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	4607      	mov	r7, r0
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005e0e:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8005e12:	d011      	beq.n	8005e38 <xEventGroupWaitBits+0x38>
 8005e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	e7fe      	b.n	8005e24 <xEventGroupWaitBits+0x24>
 8005e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005e36:	e7fe      	b.n	8005e36 <xEventGroupWaitBits+0x36>
	configASSERT( uxBitsToWaitFor != 0 );
 8005e38:	b941      	cbnz	r1, 8005e4c <xEventGroupWaitBits+0x4c>
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	e7fe      	b.n	8005e4a <xEventGroupWaitBits+0x4a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e4c:	f001 fba8 	bl	80075a0 <xTaskGetSchedulerState>
 8005e50:	b950      	cbnz	r0, 8005e68 <xEventGroupWaitBits+0x68>
 8005e52:	9b08      	ldr	r3, [sp, #32]
 8005e54:	b143      	cbz	r3, 8005e68 <xEventGroupWaitBits+0x68>
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	e7fe      	b.n	8005e66 <xEventGroupWaitBits+0x66>
	vTaskSuspendAll();
 8005e68:	f001 f8a4 	bl	8006fb4 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005e6c:	f8d7 9000 	ldr.w	r9, [r7]
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005e70:	462a      	mov	r2, r5
 8005e72:	4621      	mov	r1, r4
 8005e74:	4648      	mov	r0, r9
 8005e76:	f7ff ff83 	bl	8005d80 <prvTestWaitCondition>
		if( xWaitConditionMet != pdFALSE )
 8005e7a:	b1f0      	cbz	r0, 8005eba <xEventGroupWaitBits+0xba>
			if( xClearOnExit != pdFALSE )
 8005e7c:	b116      	cbz	r6, 8005e84 <xEventGroupWaitBits+0x84>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005e7e:	ea29 0304 	bic.w	r3, r9, r4
 8005e82:	603b      	str	r3, [r7, #0]
	xAlreadyYielded = xTaskResumeAll();
 8005e84:	f001 f930 	bl	80070e8 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8005e88:	f1b8 0f00 	cmp.w	r8, #0
 8005e8c:	d012      	beq.n	8005eb4 <xEventGroupWaitBits+0xb4>
		if( xAlreadyYielded == pdFALSE )
 8005e8e:	b948      	cbnz	r0, 8005ea4 <xEventGroupWaitBits+0xa4>
			portYIELD_WITHIN_API();
 8005e90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8005ea4:	f001 fc70 	bl	8007788 <uxTaskResetEventItemValue>
 8005ea8:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005eaa:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8005eae:	d01a      	beq.n	8005ee6 <xEventGroupWaitBits+0xe6>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005eb0:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 8005eb4:	4648      	mov	r0, r9
 8005eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005eba:	9b08      	ldr	r3, [sp, #32]
 8005ebc:	b183      	cbz	r3, 8005ee0 <xEventGroupWaitBits+0xe0>
			if( xClearOnExit != pdFALSE )
 8005ebe:	b966      	cbnz	r6, 8005eda <xEventGroupWaitBits+0xda>
EventBits_t uxReturn, uxControlBits = 0;
 8005ec0:	4641      	mov	r1, r8
			if( xWaitForAllBits != pdFALSE )
 8005ec2:	b10d      	cbz	r5, 8005ec8 <xEventGroupWaitBits+0xc8>
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005ec4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005ec8:	9a08      	ldr	r2, [sp, #32]
 8005eca:	4321      	orrs	r1, r4
 8005ecc:	1d38      	adds	r0, r7, #4
 8005ece:	f001 fa3b 	bl	8007348 <vTaskPlaceOnUnorderedEventList>
			uxReturn = 0;
 8005ed2:	46c1      	mov	r9, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ed8:	e7d4      	b.n	8005e84 <xEventGroupWaitBits+0x84>
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005eda:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005ede:	e7f0      	b.n	8005ec2 <xEventGroupWaitBits+0xc2>
 8005ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ee4:	e7ce      	b.n	8005e84 <xEventGroupWaitBits+0x84>
			taskENTER_CRITICAL();
 8005ee6:	f001 feed 	bl	8007cc4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8005eea:	f8d7 9000 	ldr.w	r9, [r7]
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005eee:	462a      	mov	r2, r5
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4648      	mov	r0, r9
 8005ef4:	f7ff ff44 	bl	8005d80 <prvTestWaitCondition>
 8005ef8:	b118      	cbz	r0, 8005f02 <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8005efa:	b116      	cbz	r6, 8005f02 <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005efc:	ea29 0404 	bic.w	r4, r9, r4
 8005f00:	603c      	str	r4, [r7, #0]
			taskEXIT_CRITICAL();
 8005f02:	f001 ff01 	bl	8007d08 <vPortExitCritical>
 8005f06:	e7d3      	b.n	8005eb0 <xEventGroupWaitBits+0xb0>

08005f08 <xEventGroupSetBits>:
{
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( xEventGroup );
 8005f0a:	b168      	cbz	r0, 8005f28 <xEventGroupSetBits+0x20>
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	4604      	mov	r4, r0
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005f10:	f011 477f 	ands.w	r7, r1, #4278190080	; 0xff000000
 8005f14:	d011      	beq.n	8005f3a <xEventGroupSetBits+0x32>
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	e7fe      	b.n	8005f26 <xEventGroupSetBits+0x1e>
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8005f38:	e7fe      	b.n	8005f38 <xEventGroupSetBits+0x30>
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f3a:	f100 060c 	add.w	r6, r0, #12
	vTaskSuspendAll();
 8005f3e:	f001 f839 	bl	8006fb4 <vTaskSuspendAll>
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005f42:	6920      	ldr	r0, [r4, #16]
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	432b      	orrs	r3, r5
 8005f48:	6023      	str	r3, [r4, #0]
		while( pxListItem != pxListEnd )
 8005f4a:	e00a      	b.n	8005f62 <xEventGroupSetBits+0x5a>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005f4c:	6821      	ldr	r1, [r4, #0]
 8005f4e:	ea32 0101 	bics.w	r1, r2, r1
 8005f52:	d105      	bne.n	8005f60 <xEventGroupSetBits+0x58>
 8005f54:	e011      	b.n	8005f7a <xEventGroupSetBits+0x72>
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005f56:	6821      	ldr	r1, [r4, #0]
 8005f58:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8005f5c:	f001 fa82 	bl	8007464 <vTaskRemoveFromUnorderedEventList>
{
 8005f60:	4628      	mov	r0, r5
		while( pxListItem != pxListEnd )
 8005f62:	42b0      	cmp	r0, r6
 8005f64:	d00e      	beq.n	8005f84 <xEventGroupSetBits+0x7c>
			pxNext = listGET_NEXT( pxListItem );
 8005f66:	6845      	ldr	r5, [r0, #4]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005f68:	6803      	ldr	r3, [r0, #0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005f6a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005f6e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8005f72:	d1eb      	bne.n	8005f4c <xEventGroupSetBits+0x44>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	4211      	tst	r1, r2
 8005f78:	d0f2      	beq.n	8005f60 <xEventGroupSetBits+0x58>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005f7a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005f7e:	d0ea      	beq.n	8005f56 <xEventGroupSetBits+0x4e>
					uxBitsToClear |= uxBitsWaitedFor;
 8005f80:	4317      	orrs	r7, r2
 8005f82:	e7e8      	b.n	8005f56 <xEventGroupSetBits+0x4e>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	ea23 0307 	bic.w	r3, r3, r7
 8005f8a:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8005f8c:	f001 f8ac 	bl	80070e8 <xTaskResumeAll>
}
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f94 <vEventGroupSetBitsCallback>:
{
 8005f94:	b508      	push	{r3, lr}
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005f96:	f7ff ffb7 	bl	8005f08 <xEventGroupSetBits>
}
 8005f9a:	bd08      	pop	{r3, pc}

08005f9c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005f9c:	b508      	push	{r3, lr}
 8005f9e:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005fa0:	460a      	mov	r2, r1
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <xEventGroupSetBitsFromISR+0x10>)
 8005fa6:	f001 fe21 	bl	8007bec <xTimerPendFunctionCallFromISR>

		return xReturn;
	}
 8005faa:	bd08      	pop	{r3, pc}
 8005fac:	08005f95 	.word	0x08005f95

08005fb0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fb0:	f100 0308 	add.w	r3, r0, #8
 8005fb4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fbc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fbe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fc4:	4770      	bx	lr

08005fc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fca:	4770      	bx	lr

08005fcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fcc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fd4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fd6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005fd8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005fda:	6803      	ldr	r3, [r0, #0]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	6003      	str	r3, [r0, #0]
}
 8005fe0:	4770      	bx	lr

08005fe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fe2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fe4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fe6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005fea:	d011      	beq.n	8006010 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fec:	f100 0308 	add.w	r3, r0, #8
 8005ff0:	461c      	mov	r4, r3
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	42aa      	cmp	r2, r5
 8005ff8:	d9fa      	bls.n	8005ff0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ffa:	6863      	ldr	r3, [r4, #4]
 8005ffc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ffe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006000:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006002:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006004:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006006:	6803      	ldr	r3, [r0, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	6003      	str	r3, [r0, #0]
}
 800600c:	bc30      	pop	{r4, r5}
 800600e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8006010:	6904      	ldr	r4, [r0, #16]
 8006012:	e7f2      	b.n	8005ffa <vListInsert+0x18>

08006014 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006014:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006016:	6841      	ldr	r1, [r0, #4]
 8006018:	6882      	ldr	r2, [r0, #8]
 800601a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800601c:	6841      	ldr	r1, [r0, #4]
 800601e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	4282      	cmp	r2, r0
 8006024:	d006      	beq.n	8006034 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006026:	2200      	movs	r2, #0
 8006028:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	3a01      	subs	r2, #1
 800602e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006030:	6818      	ldr	r0, [r3, #0]
}
 8006032:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006034:	6882      	ldr	r2, [r0, #8]
 8006036:	605a      	str	r2, [r3, #4]
 8006038:	e7f5      	b.n	8006026 <uxListRemove+0x12>

0800603a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800603a:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800603c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800603e:	b118      	cbz	r0, 8006048 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8006048:	4770      	bx	lr

0800604a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800604a:	b510      	push	{r4, lr}
 800604c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800604e:	f001 fe39 	bl	8007cc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006052:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006056:	429a      	cmp	r2, r3
 8006058:	d004      	beq.n	8006064 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800605a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800605c:	f001 fe54 	bl	8007d08 <vPortExitCritical>

	return xReturn;
}
 8006060:	4620      	mov	r0, r4
 8006062:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8006064:	2401      	movs	r4, #1
 8006066:	e7f9      	b.n	800605c <prvIsQueueFull+0x12>

08006068 <prvIsQueueEmpty>:
{
 8006068:	b510      	push	{r4, lr}
 800606a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800606c:	f001 fe2a 	bl	8007cc4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006070:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006072:	b923      	cbnz	r3, 800607e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8006074:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8006076:	f001 fe47 	bl	8007d08 <vPortExitCritical>
}
 800607a:	4620      	mov	r0, r4
 800607c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800607e:	2400      	movs	r4, #0
 8006080:	e7f9      	b.n	8006076 <prvIsQueueEmpty+0xe>

08006082 <prvCopyDataToQueue>:
{
 8006082:	b570      	push	{r4, r5, r6, lr}
 8006084:	4604      	mov	r4, r0
 8006086:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006088:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800608a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800608c:	b95a      	cbnz	r2, 80060a6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800608e:	6803      	ldr	r3, [r0, #0]
 8006090:	b11b      	cbz	r3, 800609a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8006092:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006094:	3601      	adds	r6, #1
 8006096:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8006098:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800609a:	6840      	ldr	r0, [r0, #4]
 800609c:	f001 fadc 	bl	8007658 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	6063      	str	r3, [r4, #4]
 80060a4:	e7f6      	b.n	8006094 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80060a6:	b96d      	cbnz	r5, 80060c4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80060a8:	6880      	ldr	r0, [r0, #8]
 80060aa:	f002 fa58 	bl	800855e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80060ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060b0:	68a3      	ldr	r3, [r4, #8]
 80060b2:	4413      	add	r3, r2
 80060b4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060b6:	6862      	ldr	r2, [r4, #4]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d319      	bcc.n	80060f0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80060c0:	4628      	mov	r0, r5
 80060c2:	e7e7      	b.n	8006094 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c4:	68c0      	ldr	r0, [r0, #12]
 80060c6:	f002 fa4a 	bl	800855e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80060ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060cc:	4251      	negs	r1, r2
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	1a9b      	subs	r3, r3, r2
 80060d2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d202      	bcs.n	80060e0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80060da:	6863      	ldr	r3, [r4, #4]
 80060dc:	440b      	add	r3, r1
 80060de:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80060e0:	2d02      	cmp	r5, #2
 80060e2:	d001      	beq.n	80060e8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80060e4:	2000      	movs	r0, #0
 80060e6:	e7d5      	b.n	8006094 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e8:	b126      	cbz	r6, 80060f4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80060ea:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80060ec:	2000      	movs	r0, #0
 80060ee:	e7d1      	b.n	8006094 <prvCopyDataToQueue+0x12>
 80060f0:	4628      	mov	r0, r5
 80060f2:	e7cf      	b.n	8006094 <prvCopyDataToQueue+0x12>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7cd      	b.n	8006094 <prvCopyDataToQueue+0x12>

080060f8 <prvCopyDataFromQueue>:
{
 80060f8:	b508      	push	{r3, lr}
 80060fa:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80060fe:	b162      	cbz	r2, 800611a <prvCopyDataFromQueue+0x22>
 8006100:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006102:	68d9      	ldr	r1, [r3, #12]
 8006104:	4411      	add	r1, r2
 8006106:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006108:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800610c:	4561      	cmp	r1, ip
 800610e:	d301      	bcc.n	8006114 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006110:	6819      	ldr	r1, [r3, #0]
 8006112:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006114:	68d9      	ldr	r1, [r3, #12]
 8006116:	f002 fa22 	bl	800855e <memcpy>
}
 800611a:	bd08      	pop	{r3, pc}

0800611c <prvUnlockQueue>:
{
 800611c:	b538      	push	{r3, r4, r5, lr}
 800611e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006120:	f001 fdd0 	bl	8007cc4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006124:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8006128:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800612a:	e001      	b.n	8006130 <prvUnlockQueue+0x14>
			--cTxLock;
 800612c:	3c01      	subs	r4, #1
 800612e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006130:	2c00      	cmp	r4, #0
 8006132:	dd0a      	ble.n	800614a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006134:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006136:	b143      	cbz	r3, 800614a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006138:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800613c:	f001 f94c 	bl	80073d8 <xTaskRemoveFromEventList>
 8006140:	2800      	cmp	r0, #0
 8006142:	d0f3      	beq.n	800612c <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8006144:	f001 fa20 	bl	8007588 <vTaskMissedYield>
 8006148:	e7f0      	b.n	800612c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800614a:	23ff      	movs	r3, #255	; 0xff
 800614c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006150:	f001 fdda 	bl	8007d08 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006154:	f001 fdb6 	bl	8007cc4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006158:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800615c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800615e:	e001      	b.n	8006164 <prvUnlockQueue+0x48>
				--cRxLock;
 8006160:	3c01      	subs	r4, #1
 8006162:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006164:	2c00      	cmp	r4, #0
 8006166:	dd0a      	ble.n	800617e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006168:	692b      	ldr	r3, [r5, #16]
 800616a:	b143      	cbz	r3, 800617e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800616c:	f105 0010 	add.w	r0, r5, #16
 8006170:	f001 f932 	bl	80073d8 <xTaskRemoveFromEventList>
 8006174:	2800      	cmp	r0, #0
 8006176:	d0f3      	beq.n	8006160 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8006178:	f001 fa06 	bl	8007588 <vTaskMissedYield>
 800617c:	e7f0      	b.n	8006160 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800617e:	23ff      	movs	r3, #255	; 0xff
 8006180:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8006184:	f001 fdc0 	bl	8007d08 <vPortExitCritical>
}
 8006188:	bd38      	pop	{r3, r4, r5, pc}

0800618a <xQueueGenericReset>:
{
 800618a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800618c:	b1e0      	cbz	r0, 80061c8 <xQueueGenericReset+0x3e>
 800618e:	460d      	mov	r5, r1
 8006190:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006192:	f001 fd97 	bl	8007cc4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800619a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800619c:	fb01 3002 	mla	r0, r1, r2, r3
 80061a0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061a2:	2000      	movs	r0, #0
 80061a4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061a6:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80061a8:	3a01      	subs	r2, #1
 80061aa:	fb02 3301 	mla	r3, r2, r1, r3
 80061ae:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061b0:	23ff      	movs	r3, #255	; 0xff
 80061b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80061ba:	b9fd      	cbnz	r5, 80061fc <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	b963      	cbnz	r3, 80061da <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80061c0:	f001 fda2 	bl	8007d08 <vPortExitCritical>
}
 80061c4:	2001      	movs	r0, #1
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80061d8:	e7fe      	b.n	80061d8 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061da:	f104 0010 	add.w	r0, r4, #16
 80061de:	f001 f8fb 	bl	80073d8 <xTaskRemoveFromEventList>
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d0ec      	beq.n	80061c0 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80061e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	e7e1      	b.n	80061c0 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80061fc:	f104 0010 	add.w	r0, r4, #16
 8006200:	f7ff fed6 	bl	8005fb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006204:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006208:	f7ff fed2 	bl	8005fb0 <vListInitialise>
 800620c:	e7d8      	b.n	80061c0 <xQueueGenericReset+0x36>

0800620e <prvInitialiseNewQueue>:
{
 800620e:	b538      	push	{r3, r4, r5, lr}
 8006210:	461d      	mov	r5, r3
 8006212:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006214:	460b      	mov	r3, r1
 8006216:	b949      	cbnz	r1, 800622c <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006218:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800621a:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800621c:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800621e:	2101      	movs	r1, #1
 8006220:	4620      	mov	r0, r4
 8006222:	f7ff ffb2 	bl	800618a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8006226:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800622a:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800622c:	6022      	str	r2, [r4, #0]
 800622e:	e7f4      	b.n	800621a <prvInitialiseNewQueue+0xc>

08006230 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006230:	b940      	cbnz	r0, 8006244 <xQueueGenericCreateStatic+0x14>
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	e7fe      	b.n	8006242 <xQueueGenericCreateStatic+0x12>
	{
 8006244:	b510      	push	{r4, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	461c      	mov	r4, r3
 800624a:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800624c:	b153      	cbz	r3, 8006264 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800624e:	b192      	cbz	r2, 8006276 <xQueueGenericCreateStatic+0x46>
 8006250:	b989      	cbnz	r1, 8006276 <xQueueGenericCreateStatic+0x46>
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	e7fe      	b.n	8006262 <xQueueGenericCreateStatic+0x32>
 8006264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8006274:	e7fe      	b.n	8006274 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006276:	b16a      	cbz	r2, 8006294 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006278:	2350      	movs	r3, #80	; 0x50
 800627a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	2b50      	cmp	r3, #80	; 0x50
 8006280:	d013      	beq.n	80062aa <xQueueGenericCreateStatic+0x7a>
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	e7fe      	b.n	8006292 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006294:	2900      	cmp	r1, #0
 8006296:	d0ef      	beq.n	8006278 <xQueueGenericCreateStatic+0x48>
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062b0:	9400      	str	r4, [sp, #0]
 80062b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80062b6:	4660      	mov	r0, ip
 80062b8:	f7ff ffa9 	bl	800620e <prvInitialiseNewQueue>
	}
 80062bc:	4620      	mov	r0, r4
 80062be:	b004      	add	sp, #16
 80062c0:	bd10      	pop	{r4, pc}

080062c2 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062c2:	b940      	cbnz	r0, 80062d6 <xQueueGenericCreate+0x14>
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	e7fe      	b.n	80062d4 <xQueueGenericCreate+0x12>
	{
 80062d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d8:	b083      	sub	sp, #12
 80062da:	460c      	mov	r4, r1
 80062dc:	4615      	mov	r5, r2
 80062de:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 80062e0:	b1a1      	cbz	r1, 800630c <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e2:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80062e6:	3050      	adds	r0, #80	; 0x50
 80062e8:	f001 fe66 	bl	8007fb8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80062ec:	4606      	mov	r6, r0
 80062ee:	b150      	cbz	r0, 8006306 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062f6:	9000      	str	r0, [sp, #0]
 80062f8:	462b      	mov	r3, r5
 80062fa:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80062fe:	4621      	mov	r1, r4
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff ff84 	bl	800620e <prvInitialiseNewQueue>
	}
 8006306:	4630      	mov	r0, r6
 8006308:	b003      	add	sp, #12
 800630a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 800630c:	4608      	mov	r0, r1
 800630e:	e7ea      	b.n	80062e6 <xQueueGenericCreate+0x24>

08006310 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8006310:	b940      	cbnz	r0, 8006324 <xQueueCreateCountingSemaphoreStatic+0x14>
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	e7fe      	b.n	8006322 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8006324:	b510      	push	{r4, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800632a:	4288      	cmp	r0, r1
 800632c:	d208      	bcs.n	8006340 <xQueueCreateCountingSemaphoreStatic+0x30>
 800632e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	e7fe      	b.n	800633e <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006340:	2302      	movs	r3, #2
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	2200      	movs	r2, #0
 8006348:	4611      	mov	r1, r2
 800634a:	f7ff ff71 	bl	8006230 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800634e:	b100      	cbz	r0, 8006352 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006350:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8006352:	b002      	add	sp, #8
 8006354:	bd10      	pop	{r4, pc}

08006356 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8006356:	b940      	cbnz	r0, 800636a <xQueueCreateCountingSemaphore+0x14>
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	e7fe      	b.n	8006368 <xQueueCreateCountingSemaphore+0x12>
	{
 800636a:	b510      	push	{r4, lr}
 800636c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800636e:	4288      	cmp	r0, r1
 8006370:	d208      	bcs.n	8006384 <xQueueCreateCountingSemaphore+0x2e>
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	e7fe      	b.n	8006382 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006384:	2202      	movs	r2, #2
 8006386:	2100      	movs	r1, #0
 8006388:	f7ff ff9b 	bl	80062c2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800638c:	b100      	cbz	r0, 8006390 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800638e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8006390:	bd10      	pop	{r4, pc}

08006392 <xQueueGenericSend>:
{
 8006392:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006394:	b085      	sub	sp, #20
 8006396:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006398:	b188      	cbz	r0, 80063be <xQueueGenericSend+0x2c>
 800639a:	460f      	mov	r7, r1
 800639c:	461d      	mov	r5, r3
 800639e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063a0:	b1b1      	cbz	r1, 80063d0 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063a2:	2d02      	cmp	r5, #2
 80063a4:	d120      	bne.n	80063e8 <xQueueGenericSend+0x56>
 80063a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d01d      	beq.n	80063e8 <xQueueGenericSend+0x56>
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	e7fe      	b.n	80063bc <xQueueGenericSend+0x2a>
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80063ce:	e7fe      	b.n	80063ce <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0e5      	beq.n	80063a2 <xQueueGenericSend+0x10>
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	e7fe      	b.n	80063e6 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063e8:	f001 f8da 	bl	80075a0 <xTaskGetSchedulerState>
 80063ec:	4606      	mov	r6, r0
 80063ee:	b958      	cbnz	r0, 8006408 <xQueueGenericSend+0x76>
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d048      	beq.n	8006488 <xQueueGenericSend+0xf6>
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	e7fe      	b.n	8006406 <xQueueGenericSend+0x74>
 8006408:	2600      	movs	r6, #0
 800640a:	e03d      	b.n	8006488 <xQueueGenericSend+0xf6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800640c:	462a      	mov	r2, r5
 800640e:	4639      	mov	r1, r7
 8006410:	4620      	mov	r0, r4
 8006412:	f7ff fe36 	bl	8006082 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006418:	b97b      	cbnz	r3, 800643a <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800641a:	b148      	cbz	r0, 8006430 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800641c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006430:	f001 fc6a 	bl	8007d08 <vPortExitCritical>
				return pdPASS;
 8006434:	2001      	movs	r0, #1
}
 8006436:	b005      	add	sp, #20
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800643a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800643e:	f000 ffcb 	bl	80073d8 <xTaskRemoveFromEventList>
 8006442:	2800      	cmp	r0, #0
 8006444:	d0f4      	beq.n	8006430 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8006446:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800644a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	e7e9      	b.n	8006430 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800645c:	f001 fc54 	bl	8007d08 <vPortExitCritical>
					return errQUEUE_FULL;
 8006460:	2000      	movs	r0, #0
 8006462:	e7e8      	b.n	8006436 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006464:	a802      	add	r0, sp, #8
 8006466:	f001 f841 	bl	80074ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800646a:	2601      	movs	r6, #1
 800646c:	e019      	b.n	80064a2 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800646e:	2300      	movs	r3, #0
 8006470:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006474:	e021      	b.n	80064ba <xQueueGenericSend+0x128>
 8006476:	2300      	movs	r3, #0
 8006478:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800647c:	e023      	b.n	80064c6 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800647e:	4620      	mov	r0, r4
 8006480:	f7ff fe4c 	bl	800611c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006484:	f000 fe30 	bl	80070e8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006488:	f001 fc1c 	bl	8007cc4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800648c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800648e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006490:	429a      	cmp	r2, r3
 8006492:	d3bb      	bcc.n	800640c <xQueueGenericSend+0x7a>
 8006494:	2d02      	cmp	r5, #2
 8006496:	d0b9      	beq.n	800640c <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006498:	9b01      	ldr	r3, [sp, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0de      	beq.n	800645c <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800649e:	2e00      	cmp	r6, #0
 80064a0:	d0e0      	beq.n	8006464 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80064a2:	f001 fc31 	bl	8007d08 <vPortExitCritical>
		vTaskSuspendAll();
 80064a6:	f000 fd85 	bl	8006fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064aa:	f001 fc0b 	bl	8007cc4 <vPortEnterCritical>
 80064ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80064b2:	b252      	sxtb	r2, r2
 80064b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80064b8:	d0d9      	beq.n	800646e <xQueueGenericSend+0xdc>
 80064ba:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80064be:	b252      	sxtb	r2, r2
 80064c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80064c4:	d0d7      	beq.n	8006476 <xQueueGenericSend+0xe4>
 80064c6:	f001 fc1f 	bl	8007d08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ca:	a901      	add	r1, sp, #4
 80064cc:	a802      	add	r0, sp, #8
 80064ce:	f001 f819 	bl	8007504 <xTaskCheckForTimeOut>
 80064d2:	b9d8      	cbnz	r0, 800650c <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff fdb8 	bl	800604a <prvIsQueueFull>
 80064da:	2800      	cmp	r0, #0
 80064dc:	d0cf      	beq.n	800647e <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064de:	9901      	ldr	r1, [sp, #4]
 80064e0:	f104 0010 	add.w	r0, r4, #16
 80064e4:	f000 ff18 	bl	8007318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064e8:	4620      	mov	r0, r4
 80064ea:	f7ff fe17 	bl	800611c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064ee:	f000 fdfb 	bl	80070e8 <xTaskResumeAll>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d1c8      	bne.n	8006488 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 80064f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	e7bd      	b.n	8006488 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800650c:	4620      	mov	r0, r4
 800650e:	f7ff fe05 	bl	800611c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006512:	f000 fde9 	bl	80070e8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8006516:	2000      	movs	r0, #0
 8006518:	e78d      	b.n	8006436 <xQueueGenericSend+0xa4>

0800651a <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800651a:	b148      	cbz	r0, 8006530 <prvInitialiseMutex+0x16>
	{
 800651c:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 800651e:	2100      	movs	r1, #0
 8006520:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006522:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006524:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006526:	460b      	mov	r3, r1
 8006528:	460a      	mov	r2, r1
 800652a:	f7ff ff32 	bl	8006392 <xQueueGenericSend>
	}
 800652e:	bd08      	pop	{r3, pc}
 8006530:	4770      	bx	lr

08006532 <xQueueCreateMutex>:
	{
 8006532:	b510      	push	{r4, lr}
 8006534:	4602      	mov	r2, r0
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006536:	2100      	movs	r1, #0
 8006538:	2001      	movs	r0, #1
 800653a:	f7ff fec2 	bl	80062c2 <xQueueGenericCreate>
 800653e:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006540:	f7ff ffeb 	bl	800651a <prvInitialiseMutex>
	}
 8006544:	4620      	mov	r0, r4
 8006546:	bd10      	pop	{r4, pc}

08006548 <xQueueCreateMutexStatic>:
	{
 8006548:	b510      	push	{r4, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	460b      	mov	r3, r1
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800654e:	9000      	str	r0, [sp, #0]
 8006550:	2200      	movs	r2, #0
 8006552:	4611      	mov	r1, r2
 8006554:	2001      	movs	r0, #1
 8006556:	f7ff fe6b 	bl	8006230 <xQueueGenericCreateStatic>
 800655a:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800655c:	f7ff ffdd 	bl	800651a <prvInitialiseMutex>
	}
 8006560:	4620      	mov	r0, r4
 8006562:	b002      	add	sp, #8
 8006564:	bd10      	pop	{r4, pc}

08006566 <xQueueGiveMutexRecursive>:
	{
 8006566:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8006568:	b138      	cbz	r0, 800657a <xQueueGiveMutexRecursive+0x14>
 800656a:	4604      	mov	r4, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 800656c:	6845      	ldr	r5, [r0, #4]
 800656e:	f001 f811 	bl	8007594 <xTaskGetCurrentTaskHandle>
 8006572:	4285      	cmp	r5, r0
 8006574:	d00a      	beq.n	800658c <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8006576:	2000      	movs	r0, #0
	}
 8006578:	bd38      	pop	{r3, r4, r5, pc}
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800658a:	e7fe      	b.n	800658a <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.uxRecursiveCallCount )--;
 800658c:	68e3      	ldr	r3, [r4, #12]
 800658e:	3b01      	subs	r3, #1
 8006590:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006592:	b10b      	cbz	r3, 8006598 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8006594:	2001      	movs	r0, #1
		return xReturn;
 8006596:	e7ef      	b.n	8006578 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006598:	461a      	mov	r2, r3
 800659a:	4619      	mov	r1, r3
 800659c:	4620      	mov	r0, r4
 800659e:	f7ff fef8 	bl	8006392 <xQueueGenericSend>
			xReturn = pdPASS;
 80065a2:	2001      	movs	r0, #1
 80065a4:	e7e8      	b.n	8006578 <xQueueGiveMutexRecursive+0x12>

080065a6 <xQueueGenericSendFromISR>:
{
 80065a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80065aa:	b190      	cbz	r0, 80065d2 <xQueueGenericSendFromISR+0x2c>
 80065ac:	460f      	mov	r7, r1
 80065ae:	4616      	mov	r6, r2
 80065b0:	461c      	mov	r4, r3
 80065b2:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b4:	b1b1      	cbz	r1, 80065e4 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b6:	2c02      	cmp	r4, #2
 80065b8:	d120      	bne.n	80065fc <xQueueGenericSendFromISR+0x56>
 80065ba:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d01d      	beq.n	80065fc <xQueueGenericSendFromISR+0x56>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	e7fe      	b.n	80065d0 <xQueueGenericSendFromISR+0x2a>
 80065d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80065e2:	e7fe      	b.n	80065e2 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0e5      	beq.n	80065b6 <xQueueGenericSendFromISR+0x10>
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	e7fe      	b.n	80065fa <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065fc:	f001 fc4c 	bl	8007e98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006600:	f3ef 8811 	mrs	r8, BASEPRI
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006614:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006616:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006618:	429a      	cmp	r2, r3
 800661a:	d306      	bcc.n	800662a <xQueueGenericSendFromISR+0x84>
 800661c:	2c02      	cmp	r4, #2
 800661e:	d004      	beq.n	800662a <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8006620:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006622:	f388 8811 	msr	BASEPRI, r8
}
 8006626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800662a:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 800662e:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006632:	4622      	mov	r2, r4
 8006634:	4639      	mov	r1, r7
 8006636:	4628      	mov	r0, r5
 8006638:	f7ff fd23 	bl	8006082 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800663c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006640:	d006      	beq.n	8006650 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006642:	f109 0301 	add.w	r3, r9, #1
 8006646:	b25b      	sxtb	r3, r3
 8006648:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800664c:	2001      	movs	r0, #1
 800664e:	e7e8      	b.n	8006622 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006650:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006652:	b90b      	cbnz	r3, 8006658 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8006654:	2001      	movs	r0, #1
 8006656:	e7e4      	b.n	8006622 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006658:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800665c:	f000 febc 	bl	80073d8 <xTaskRemoveFromEventList>
 8006660:	b118      	cbz	r0, 800666a <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8006662:	b126      	cbz	r6, 800666e <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006664:	2001      	movs	r0, #1
 8006666:	6030      	str	r0, [r6, #0]
 8006668:	e7db      	b.n	8006622 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800666a:	2001      	movs	r0, #1
 800666c:	e7d9      	b.n	8006622 <xQueueGenericSendFromISR+0x7c>
 800666e:	2001      	movs	r0, #1
 8006670:	e7d7      	b.n	8006622 <xQueueGenericSendFromISR+0x7c>

08006672 <xQueueReceive>:
{
 8006672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006674:	b085      	sub	sp, #20
 8006676:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006678:	b190      	cbz	r0, 80066a0 <xQueueReceive+0x2e>
 800667a:	460f      	mov	r7, r1
 800667c:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800667e:	b1c1      	cbz	r1, 80066b2 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006680:	f000 ff8e 	bl	80075a0 <xTaskGetSchedulerState>
 8006684:	4606      	mov	r6, r0
 8006686:	bb00      	cbnz	r0, 80066ca <xQueueReceive+0x58>
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d05e      	beq.n	800674c <xQueueReceive+0xda>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	e7fe      	b.n	800669e <xQueueReceive+0x2c>
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80066b0:	e7fe      	b.n	80066b0 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0e3      	beq.n	8006680 <xQueueReceive+0xe>
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	e7fe      	b.n	80066c8 <xQueueReceive+0x56>
 80066ca:	2600      	movs	r6, #0
 80066cc:	e03e      	b.n	800674c <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066ce:	4639      	mov	r1, r7
 80066d0:	4620      	mov	r0, r4
 80066d2:	f7ff fd11 	bl	80060f8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066d6:	3d01      	subs	r5, #1
 80066d8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	b923      	cbnz	r3, 80066e8 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80066de:	f001 fb13 	bl	8007d08 <vPortExitCritical>
				return pdPASS;
 80066e2:	2001      	movs	r0, #1
}
 80066e4:	b005      	add	sp, #20
 80066e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066e8:	f104 0010 	add.w	r0, r4, #16
 80066ec:	f000 fe74 	bl	80073d8 <xTaskRemoveFromEventList>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d0f4      	beq.n	80066de <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80066f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80066f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	e7e9      	b.n	80066de <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800670a:	f001 fafd 	bl	8007d08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800670e:	2000      	movs	r0, #0
 8006710:	e7e8      	b.n	80066e4 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006712:	a802      	add	r0, sp, #8
 8006714:	f000 feea 	bl	80074ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006718:	2601      	movs	r6, #1
 800671a:	e021      	b.n	8006760 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800671c:	2300      	movs	r3, #0
 800671e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006722:	e029      	b.n	8006778 <xQueueReceive+0x106>
 8006724:	2300      	movs	r3, #0
 8006726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800672a:	e02b      	b.n	8006784 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800672c:	4620      	mov	r0, r4
 800672e:	f7ff fcf5 	bl	800611c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006732:	f000 fcd9 	bl	80070e8 <xTaskResumeAll>
 8006736:	e009      	b.n	800674c <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8006738:	4620      	mov	r0, r4
 800673a:	f7ff fcef 	bl	800611c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800673e:	f000 fcd3 	bl	80070e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006742:	4620      	mov	r0, r4
 8006744:	f7ff fc90 	bl	8006068 <prvIsQueueEmpty>
 8006748:	2800      	cmp	r0, #0
 800674a:	d13f      	bne.n	80067cc <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800674c:	f001 faba 	bl	8007cc4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006750:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006752:	2d00      	cmp	r5, #0
 8006754:	d1bb      	bne.n	80066ce <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006756:	9b01      	ldr	r3, [sp, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0d6      	beq.n	800670a <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800675c:	2e00      	cmp	r6, #0
 800675e:	d0d8      	beq.n	8006712 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8006760:	f001 fad2 	bl	8007d08 <vPortExitCritical>
		vTaskSuspendAll();
 8006764:	f000 fc26 	bl	8006fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006768:	f001 faac 	bl	8007cc4 <vPortEnterCritical>
 800676c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006770:	b25b      	sxtb	r3, r3
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d0d1      	beq.n	800671c <xQueueReceive+0xaa>
 8006778:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800677c:	b25b      	sxtb	r3, r3
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006782:	d0cf      	beq.n	8006724 <xQueueReceive+0xb2>
 8006784:	f001 fac0 	bl	8007d08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006788:	a901      	add	r1, sp, #4
 800678a:	a802      	add	r0, sp, #8
 800678c:	f000 feba 	bl	8007504 <xTaskCheckForTimeOut>
 8006790:	2800      	cmp	r0, #0
 8006792:	d1d1      	bne.n	8006738 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006794:	4620      	mov	r0, r4
 8006796:	f7ff fc67 	bl	8006068 <prvIsQueueEmpty>
 800679a:	2800      	cmp	r0, #0
 800679c:	d0c6      	beq.n	800672c <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800679e:	9901      	ldr	r1, [sp, #4]
 80067a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067a4:	f000 fdb8 	bl	8007318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067a8:	4620      	mov	r0, r4
 80067aa:	f7ff fcb7 	bl	800611c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067ae:	f000 fc9b 	bl	80070e8 <xTaskResumeAll>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d1ca      	bne.n	800674c <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 80067b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80067ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	e7bf      	b.n	800674c <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 80067cc:	2000      	movs	r0, #0
 80067ce:	e789      	b.n	80066e4 <xQueueReceive+0x72>

080067d0 <xQueueSemaphoreTake>:
{
 80067d0:	b570      	push	{r4, r5, r6, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80067d6:	b158      	cbz	r0, 80067f0 <xQueueSemaphoreTake+0x20>
 80067d8:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80067da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067dc:	b18b      	cbz	r3, 8006802 <xQueueSemaphoreTake+0x32>
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	e7fe      	b.n	80067ee <xQueueSemaphoreTake+0x1e>
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8006800:	e7fe      	b.n	8006800 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006802:	f000 fecd 	bl	80075a0 <xTaskGetSchedulerState>
 8006806:	4605      	mov	r5, r0
 8006808:	b950      	cbnz	r0, 8006820 <xQueueSemaphoreTake+0x50>
 800680a:	9b01      	ldr	r3, [sp, #4]
 800680c:	b15b      	cbz	r3, 8006826 <xQueueSemaphoreTake+0x56>
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	e7fe      	b.n	800681e <xQueueSemaphoreTake+0x4e>
 8006820:	2600      	movs	r6, #0
 8006822:	4635      	mov	r5, r6
 8006824:	e055      	b.n	80068d2 <xQueueSemaphoreTake+0x102>
 8006826:	4606      	mov	r6, r0
 8006828:	e053      	b.n	80068d2 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800682a:	3b01      	subs	r3, #1
 800682c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	b13b      	cbz	r3, 8006842 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	b94b      	cbnz	r3, 800684a <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 8006836:	f001 fa67 	bl	8007d08 <vPortExitCritical>
				return pdPASS;
 800683a:	2601      	movs	r6, #1
}
 800683c:	4630      	mov	r0, r6
 800683e:	b004      	add	sp, #16
 8006840:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006842:	f000 ffad 	bl	80077a0 <pvTaskIncrementMutexHeldCount>
 8006846:	6060      	str	r0, [r4, #4]
 8006848:	e7f3      	b.n	8006832 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684a:	f104 0010 	add.w	r0, r4, #16
 800684e:	f000 fdc3 	bl	80073d8 <xTaskRemoveFromEventList>
 8006852:	2800      	cmp	r0, #0
 8006854:	d0ef      	beq.n	8006836 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 8006856:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	e7e4      	b.n	8006836 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800686c:	b146      	cbz	r6, 8006880 <xQueueSemaphoreTake+0xb0>
 800686e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	e7fe      	b.n	800687e <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8006880:	f001 fa42 	bl	8007d08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006884:	e7da      	b.n	800683c <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006886:	a802      	add	r0, sp, #8
 8006888:	f000 fe30 	bl	80074ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800688c:	2501      	movs	r5, #1
 800688e:	e02a      	b.n	80068e6 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 8006890:	2300      	movs	r3, #0
 8006892:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006896:	e032      	b.n	80068fe <xQueueSemaphoreTake+0x12e>
 8006898:	2300      	movs	r3, #0
 800689a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800689e:	e034      	b.n	800690a <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 80068a0:	f001 fa10 	bl	8007cc4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80068a4:	6860      	ldr	r0, [r4, #4]
 80068a6:	f000 fe8b 	bl	80075c0 <xTaskPriorityInherit>
 80068aa:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80068ac:	f001 fa2c 	bl	8007d08 <vPortExitCritical>
 80068b0:	e03b      	b.n	800692a <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 80068b2:	4620      	mov	r0, r4
 80068b4:	f7ff fc32 	bl	800611c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b8:	f000 fc16 	bl	80070e8 <xTaskResumeAll>
 80068bc:	e009      	b.n	80068d2 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 80068be:	4620      	mov	r0, r4
 80068c0:	f7ff fc2c 	bl	800611c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068c4:	f000 fc10 	bl	80070e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff fbcd 	bl	8006068 <prvIsQueueEmpty>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d142      	bne.n	8006958 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 80068d2:	f001 f9f7 	bl	8007cc4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80068d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1a6      	bne.n	800682a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0c4      	beq.n	800686c <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	d0cf      	beq.n	8006886 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 80068e6:	f001 fa0f 	bl	8007d08 <vPortExitCritical>
		vTaskSuspendAll();
 80068ea:	f000 fb63 	bl	8006fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ee:	f001 f9e9 	bl	8007cc4 <vPortEnterCritical>
 80068f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80068f6:	b25b      	sxtb	r3, r3
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d0c8      	beq.n	8006890 <xQueueSemaphoreTake+0xc0>
 80068fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006902:	b25b      	sxtb	r3, r3
 8006904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006908:	d0c6      	beq.n	8006898 <xQueueSemaphoreTake+0xc8>
 800690a:	f001 f9fd 	bl	8007d08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800690e:	a901      	add	r1, sp, #4
 8006910:	a802      	add	r0, sp, #8
 8006912:	f000 fdf7 	bl	8007504 <xTaskCheckForTimeOut>
 8006916:	2800      	cmp	r0, #0
 8006918:	d1d1      	bne.n	80068be <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800691a:	4620      	mov	r0, r4
 800691c:	f7ff fba4 	bl	8006068 <prvIsQueueEmpty>
 8006920:	2800      	cmp	r0, #0
 8006922:	d0c6      	beq.n	80068b2 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0ba      	beq.n	80068a0 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800692a:	9901      	ldr	r1, [sp, #4]
 800692c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006930:	f000 fcf2 	bl	8007318 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006934:	4620      	mov	r0, r4
 8006936:	f7ff fbf1 	bl	800611c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800693a:	f000 fbd5 	bl	80070e8 <xTaskResumeAll>
 800693e:	2800      	cmp	r0, #0
 8006940:	d1c7      	bne.n	80068d2 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 8006942:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800694a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	e7bc      	b.n	80068d2 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 8006958:	b90e      	cbnz	r6, 800695e <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800695a:	2600      	movs	r6, #0
 800695c:	e76e      	b.n	800683c <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800695e:	f001 f9b1 	bl	8007cc4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006962:	4620      	mov	r0, r4
 8006964:	f7ff fb69 	bl	800603a <prvGetDisinheritPriorityAfterTimeout>
 8006968:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800696a:	6860      	ldr	r0, [r4, #4]
 800696c:	f000 febc 	bl	80076e8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8006970:	f001 f9ca 	bl	8007d08 <vPortExitCritical>
 8006974:	e7f1      	b.n	800695a <xQueueSemaphoreTake+0x18a>

08006976 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8006976:	b180      	cbz	r0, 800699a <xQueueTakeMutexRecursive+0x24>
	{
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	460c      	mov	r4, r1
 800697c:	4605      	mov	r5, r0
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800697e:	6846      	ldr	r6, [r0, #4]
 8006980:	f000 fe08 	bl	8007594 <xTaskGetCurrentTaskHandle>
 8006984:	4286      	cmp	r6, r0
 8006986:	d011      	beq.n	80069ac <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006988:	4621      	mov	r1, r4
 800698a:	4628      	mov	r0, r5
 800698c:	f7ff ff20 	bl	80067d0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8006990:	b180      	cbz	r0, 80069b4 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.uxRecursiveCallCount )++;
 8006992:	68eb      	ldr	r3, [r5, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8006998:	e00c      	b.n	80069b4 <xQueueTakeMutexRecursive+0x3e>
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80069aa:	e7fe      	b.n	80069aa <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.uxRecursiveCallCount )++;
 80069ac:	68eb      	ldr	r3, [r5, #12]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80069b2:	2001      	movs	r0, #1
	}
 80069b4:	bd70      	pop	{r4, r5, r6, pc}

080069b6 <xQueueReceiveFromISR>:
{
 80069b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80069ba:	b1b0      	cbz	r0, 80069ea <xQueueReceiveFromISR+0x34>
 80069bc:	460d      	mov	r5, r1
 80069be:	4690      	mov	r8, r2
 80069c0:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069c2:	b1d9      	cbz	r1, 80069fc <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069c4:	f001 fa68 	bl	8007e98 <vPortValidateInterruptPriority>
	__asm volatile
 80069c8:	f3ef 8711 	mrs	r7, BASEPRI
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069de:	b9ce      	cbnz	r6, 8006a14 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80069e0:	2000      	movs	r0, #0
	__asm volatile
 80069e2:	f387 8811 	msr	BASEPRI, r7
}
 80069e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80069fa:	e7fe      	b.n	80069fa <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0e0      	beq.n	80069c4 <xQueueReceiveFromISR+0xe>
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	e7fe      	b.n	8006a12 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006a14:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8006a18:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff fb6a 	bl	80060f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a24:	1e73      	subs	r3, r6, #1
 8006a26:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8006a28:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006a2c:	d006      	beq.n	8006a3c <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a2e:	f109 0301 	add.w	r3, r9, #1
 8006a32:	b25b      	sxtb	r3, r3
 8006a34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8006a38:	2001      	movs	r0, #1
 8006a3a:	e7d2      	b.n	80069e2 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	b90b      	cbnz	r3, 8006a44 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8006a40:	2001      	movs	r0, #1
 8006a42:	e7ce      	b.n	80069e2 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a44:	f104 0010 	add.w	r0, r4, #16
 8006a48:	f000 fcc6 	bl	80073d8 <xTaskRemoveFromEventList>
 8006a4c:	b130      	cbz	r0, 8006a5c <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8006a4e:	f1b8 0f00 	cmp.w	r8, #0
 8006a52:	d005      	beq.n	8006a60 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a54:	2001      	movs	r0, #1
 8006a56:	f8c8 0000 	str.w	r0, [r8]
 8006a5a:	e7c2      	b.n	80069e2 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	e7c0      	b.n	80069e2 <xQueueReceiveFromISR+0x2c>
 8006a60:	2001      	movs	r0, #1
 8006a62:	e7be      	b.n	80069e2 <xQueueReceiveFromISR+0x2c>

08006a64 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a64:	2300      	movs	r3, #0
 8006a66:	2b07      	cmp	r3, #7
 8006a68:	d80c      	bhi.n	8006a84 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a6a:	4a07      	ldr	r2, [pc, #28]	; (8006a88 <vQueueAddToRegistry+0x24>)
 8006a6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006a70:	b10a      	cbz	r2, 8006a76 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a72:	3301      	adds	r3, #1
 8006a74:	e7f7      	b.n	8006a66 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a76:	4a04      	ldr	r2, [pc, #16]	; (8006a88 <vQueueAddToRegistry+0x24>)
 8006a78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006a80:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a82:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	20001730 	.word	0x20001730

08006a8c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2b07      	cmp	r3, #7
 8006a90:	d80f      	bhi.n	8006ab2 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006a92:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <vQueueUnregisterQueue+0x28>)
 8006a94:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006a98:	6852      	ldr	r2, [r2, #4]
 8006a9a:	4282      	cmp	r2, r0
 8006a9c:	d001      	beq.n	8006aa2 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	e7f5      	b.n	8006a8e <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006aa2:	4a04      	ldr	r2, [pc, #16]	; (8006ab4 <vQueueUnregisterQueue+0x28>)
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006aaa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006aae:	6051      	str	r1, [r2, #4]
				break;
 8006ab0:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006ab2:	4770      	bx	lr
 8006ab4:	20001730 	.word	0x20001730

08006ab8 <vQueueDelete>:
	configASSERT( pxQueue );
 8006ab8:	b138      	cbz	r0, 8006aca <vQueueDelete+0x12>
{
 8006aba:	b510      	push	{r4, lr}
 8006abc:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8006abe:	f7ff ffe5 	bl	8006a8c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ac2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006ac6:	b14b      	cbz	r3, 8006adc <vQueueDelete+0x24>
}
 8006ac8:	bd10      	pop	{r4, pc}
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8006ada:	e7fe      	b.n	8006ada <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8006adc:	4620      	mov	r0, r4
 8006ade:	f001 fae3 	bl	80080a8 <vPortFree>
}
 8006ae2:	e7f1      	b.n	8006ac8 <vQueueDelete+0x10>

08006ae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	460d      	mov	r5, r1
 8006aea:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006aec:	f001 f8ea 	bl	8007cc4 <vPortEnterCritical>
 8006af0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006af4:	b25b      	sxtb	r3, r3
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d00d      	beq.n	8006b18 <vQueueWaitForMessageRestricted+0x34>
 8006afc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006b00:	b25b      	sxtb	r3, r3
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	d00b      	beq.n	8006b20 <vQueueWaitForMessageRestricted+0x3c>
 8006b08:	f001 f8fe 	bl	8007d08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b0e:	b15b      	cbz	r3, 8006b28 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7ff fb03 	bl	800611c <prvUnlockQueue>
	}
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006b1e:	e7ed      	b.n	8006afc <vQueueWaitForMessageRestricted+0x18>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b26:	e7ef      	b.n	8006b08 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006b30:	f000 fc36 	bl	80073a0 <vTaskPlaceOnEventListRestricted>
 8006b34:	e7ec      	b.n	8006b10 <vQueueWaitForMessageRestricted+0x2c>
	...

08006b38 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <prvResetNextTaskUnblockTime+0x24>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	b923      	cbnz	r3, 8006b4a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b40:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <prvResetNextTaskUnblockTime+0x28>)
 8006b42:	f04f 32ff 	mov.w	r2, #4294967295
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b4a:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <prvResetNextTaskUnblockTime+0x24>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	4b02      	ldr	r3, [pc, #8]	; (8006b60 <prvResetNextTaskUnblockTime+0x28>)
 8006b56:	601a      	str	r2, [r3, #0]
	}
}
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	20001774 	.word	0x20001774
 8006b60:	20001c20 	.word	0x20001c20

08006b64 <prvInitialiseNewTask>:
{
 8006b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b68:	4680      	mov	r8, r0
 8006b6a:	460d      	mov	r5, r1
 8006b6c:	4617      	mov	r7, r2
 8006b6e:	4699      	mov	r9, r3
 8006b70:	9e08      	ldr	r6, [sp, #32]
 8006b72:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006b76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	21a5      	movs	r1, #165	; 0xa5
 8006b7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006b7e:	f001 fc6a 	bl	8008456 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006b84:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8006b88:	3a01      	subs	r2, #1
 8006b8a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b8e:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b92:	f04f 0c00 	mov.w	ip, #0
 8006b96:	f1bc 0f0f 	cmp.w	ip, #15
 8006b9a:	d809      	bhi.n	8006bb0 <prvInitialiseNewTask+0x4c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b9c:	f815 300c 	ldrb.w	r3, [r5, ip]
 8006ba0:	eb04 020c 	add.w	r2, r4, ip
 8006ba4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8006ba8:	b113      	cbz	r3, 8006bb0 <prvInitialiseNewTask+0x4c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006baa:	f10c 0c01 	add.w	ip, ip, #1
 8006bae:	e7f2      	b.n	8006b96 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bb6:	2e37      	cmp	r6, #55	; 0x37
 8006bb8:	d900      	bls.n	8006bbc <prvInitialiseNewTask+0x58>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bba:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8006bbc:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006bbe:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006bc0:	2500      	movs	r5, #0
 8006bc2:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bc4:	1d20      	adds	r0, r4, #4
 8006bc6:	f7ff f9fe 	bl	8005fc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bca:	f104 0018 	add.w	r0, r4, #24
 8006bce:	f7ff f9fa 	bl	8005fc6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bd2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd4:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8006bd8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bda:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8006bdc:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ulNotifiedValue = 0;
 8006bde:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006be0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006be4:	464a      	mov	r2, r9
 8006be6:	4641      	mov	r1, r8
 8006be8:	4638      	mov	r0, r7
 8006bea:	f001 f843 	bl	8007c74 <pxPortInitialiseStack>
 8006bee:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006bf0:	f1ba 0f00 	cmp.w	sl, #0
 8006bf4:	d001      	beq.n	8006bfa <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf6:	f8ca 4000 	str.w	r4, [sl]
}
 8006bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08006c00 <prvInitialiseTaskLists>:
{
 8006c00:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c02:	2400      	movs	r4, #0
 8006c04:	e007      	b.n	8006c16 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c06:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006c0a:	0093      	lsls	r3, r2, #2
 8006c0c:	480e      	ldr	r0, [pc, #56]	; (8006c48 <prvInitialiseTaskLists+0x48>)
 8006c0e:	4418      	add	r0, r3
 8006c10:	f7ff f9ce 	bl	8005fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c14:	3401      	adds	r4, #1
 8006c16:	2c37      	cmp	r4, #55	; 0x37
 8006c18:	d9f5      	bls.n	8006c06 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006c1a:	4d0c      	ldr	r5, [pc, #48]	; (8006c4c <prvInitialiseTaskLists+0x4c>)
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7ff f9c7 	bl	8005fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c22:	4c0b      	ldr	r4, [pc, #44]	; (8006c50 <prvInitialiseTaskLists+0x50>)
 8006c24:	4620      	mov	r0, r4
 8006c26:	f7ff f9c3 	bl	8005fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c2a:	480a      	ldr	r0, [pc, #40]	; (8006c54 <prvInitialiseTaskLists+0x54>)
 8006c2c:	f7ff f9c0 	bl	8005fb0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006c30:	4809      	ldr	r0, [pc, #36]	; (8006c58 <prvInitialiseTaskLists+0x58>)
 8006c32:	f7ff f9bd 	bl	8005fb0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006c36:	4809      	ldr	r0, [pc, #36]	; (8006c5c <prvInitialiseTaskLists+0x5c>)
 8006c38:	f7ff f9ba 	bl	8005fb0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <prvInitialiseTaskLists+0x60>)
 8006c3e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c40:	4b08      	ldr	r3, [pc, #32]	; (8006c64 <prvInitialiseTaskLists+0x64>)
 8006c42:	601c      	str	r4, [r3, #0]
}
 8006c44:	bd38      	pop	{r3, r4, r5, pc}
 8006c46:	bf00      	nop
 8006c48:	2000177c 	.word	0x2000177c
 8006c4c:	20001bf4 	.word	0x20001bf4
 8006c50:	20001c08 	.word	0x20001c08
 8006c54:	20001c28 	.word	0x20001c28
 8006c58:	20001c54 	.word	0x20001c54
 8006c5c:	20001c40 	.word	0x20001c40
 8006c60:	20001774 	.word	0x20001774
 8006c64:	20001778 	.word	0x20001778

08006c68 <prvAddNewTaskToReadyList>:
{
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006c6c:	f001 f82a 	bl	8007cc4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006c70:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <prvAddNewTaskToReadyList+0x94>)
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c78:	4b21      	ldr	r3, [pc, #132]	; (8006d00 <prvAddNewTaskToReadyList+0x98>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	b15b      	cbz	r3, 8006c96 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8006c7e:	4b21      	ldr	r3, [pc, #132]	; (8006d04 <prvAddNewTaskToReadyList+0x9c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	b96b      	cbnz	r3, 8006ca0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c84:	4b1e      	ldr	r3, [pc, #120]	; (8006d00 <prvAddNewTaskToReadyList+0x98>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d807      	bhi.n	8006ca0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006c90:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <prvAddNewTaskToReadyList+0x98>)
 8006c92:	601c      	str	r4, [r3, #0]
 8006c94:	e004      	b.n	8006ca0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006c96:	4b1a      	ldr	r3, [pc, #104]	; (8006d00 <prvAddNewTaskToReadyList+0x98>)
 8006c98:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c9a:	6813      	ldr	r3, [r2, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d029      	beq.n	8006cf4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8006ca0:	4a19      	ldr	r2, [pc, #100]	; (8006d08 <prvAddNewTaskToReadyList+0xa0>)
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ca8:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006caa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006cac:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <prvAddNewTaskToReadyList+0xa4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4298      	cmp	r0, r3
 8006cb2:	d901      	bls.n	8006cb8 <prvAddNewTaskToReadyList+0x50>
 8006cb4:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <prvAddNewTaskToReadyList+0xa4>)
 8006cb6:	6018      	str	r0, [r3, #0]
 8006cb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006cbc:	1d21      	adds	r1, r4, #4
 8006cbe:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <prvAddNewTaskToReadyList+0xa8>)
 8006cc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006cc4:	f7ff f982 	bl	8005fcc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006cc8:	f001 f81e 	bl	8007d08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <prvAddNewTaskToReadyList+0x9c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	b17b      	cbz	r3, 8006cf2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <prvAddNewTaskToReadyList+0x98>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d209      	bcs.n	8006cf2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8006cde:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	f3bf 8f6f 	isb	sy
}
 8006cf2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8006cf4:	f7ff ff84 	bl	8006c00 <prvInitialiseTaskLists>
 8006cf8:	e7d2      	b.n	8006ca0 <prvAddNewTaskToReadyList+0x38>
 8006cfa:	bf00      	nop
 8006cfc:	20001bdc 	.word	0x20001bdc
 8006d00:	20001770 	.word	0x20001770
 8006d04:	20001c3c 	.word	0x20001c3c
 8006d08:	20001bec 	.word	0x20001bec
 8006d0c:	20001bf0 	.word	0x20001bf0
 8006d10:	2000177c 	.word	0x2000177c

08006d14 <prvDeleteTCB>:
	{
 8006d14:	b510      	push	{r4, lr}
 8006d16:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d18:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8006d1c:	b163      	cbz	r3, 8006d38 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d011      	beq.n	8006d46 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d00e      	beq.n	8006d44 <prvDeleteTCB+0x30>
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	e7fe      	b.n	8006d36 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8006d38:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006d3a:	f001 f9b5 	bl	80080a8 <vPortFree>
				vPortFree( pxTCB );
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f001 f9b2 	bl	80080a8 <vPortFree>
	}
 8006d44:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8006d46:	f001 f9af 	bl	80080a8 <vPortFree>
 8006d4a:	e7fb      	b.n	8006d44 <prvDeleteTCB+0x30>

08006d4c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	; (8006d8c <prvCheckTasksWaitingTermination+0x40>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	b1d3      	cbz	r3, 8006d88 <prvCheckTasksWaitingTermination+0x3c>
{
 8006d52:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006d54:	f000 ffb6 	bl	8007cc4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006d58:	4b0d      	ldr	r3, [pc, #52]	; (8006d90 <prvCheckTasksWaitingTermination+0x44>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d5e:	1d20      	adds	r0, r4, #4
 8006d60:	f7ff f958 	bl	8006014 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d64:	4a0b      	ldr	r2, [pc, #44]	; (8006d94 <prvCheckTasksWaitingTermination+0x48>)
 8006d66:	6813      	ldr	r3, [r2, #0]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d6c:	4a07      	ldr	r2, [pc, #28]	; (8006d8c <prvCheckTasksWaitingTermination+0x40>)
 8006d6e:	6813      	ldr	r3, [r2, #0]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006d74:	f000 ffc8 	bl	8007d08 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006d78:	4620      	mov	r0, r4
 8006d7a:	f7ff ffcb 	bl	8006d14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d7e:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <prvCheckTasksWaitingTermination+0x40>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1e6      	bne.n	8006d54 <prvCheckTasksWaitingTermination+0x8>
}
 8006d86:	bd10      	pop	{r4, pc}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	20001be0 	.word	0x20001be0
 8006d90:	20001c54 	.word	0x20001c54
 8006d94:	20001bdc 	.word	0x20001bdc

08006d98 <prvIdleTask>:
{
 8006d98:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006d9a:	f7ff ffd7 	bl	8006d4c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <prvIdleTask+0x24>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d9f9      	bls.n	8006d9a <prvIdleTask+0x2>
				taskYIELD();
 8006da6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	e7ee      	b.n	8006d9a <prvIdleTask+0x2>
 8006dbc:	2000177c 	.word	0x2000177c

08006dc0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dc6:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <prvAddCurrentTaskToDelayedList+0x64>)
 8006dc8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dca:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <prvAddCurrentTaskToDelayedList+0x68>)
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	3004      	adds	r0, #4
 8006dd0:	f7ff f920 	bl	8006014 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006dd4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006dd8:	d00d      	beq.n	8006df6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006dda:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ddc:	4b12      	ldr	r3, [pc, #72]	; (8006e28 <prvAddCurrentTaskToDelayedList+0x68>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006de2:	42a6      	cmp	r6, r4
 8006de4:	d910      	bls.n	8006e08 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006de6:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <prvAddCurrentTaskToDelayedList+0x6c>)
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	4b0f      	ldr	r3, [pc, #60]	; (8006e28 <prvAddCurrentTaskToDelayedList+0x68>)
 8006dec:	6819      	ldr	r1, [r3, #0]
 8006dee:	3104      	adds	r1, #4
 8006df0:	f7ff f8f7 	bl	8005fe2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006df4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	d0ef      	beq.n	8006dda <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <prvAddCurrentTaskToDelayedList+0x68>)
 8006dfc:	6819      	ldr	r1, [r3, #0]
 8006dfe:	3104      	adds	r1, #4
 8006e00:	480b      	ldr	r0, [pc, #44]	; (8006e30 <prvAddCurrentTaskToDelayedList+0x70>)
 8006e02:	f7ff f8e3 	bl	8005fcc <vListInsertEnd>
 8006e06:	e7f5      	b.n	8006df4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <prvAddCurrentTaskToDelayedList+0x74>)
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <prvAddCurrentTaskToDelayedList+0x68>)
 8006e0e:	6819      	ldr	r1, [r3, #0]
 8006e10:	3104      	adds	r1, #4
 8006e12:	f7ff f8e6 	bl	8005fe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e16:	4b08      	ldr	r3, [pc, #32]	; (8006e38 <prvAddCurrentTaskToDelayedList+0x78>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	d9ea      	bls.n	8006df4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <prvAddCurrentTaskToDelayedList+0x78>)
 8006e20:	601c      	str	r4, [r3, #0]
}
 8006e22:	e7e7      	b.n	8006df4 <prvAddCurrentTaskToDelayedList+0x34>
 8006e24:	20001c68 	.word	0x20001c68
 8006e28:	20001770 	.word	0x20001770
 8006e2c:	20001778 	.word	0x20001778
 8006e30:	20001c40 	.word	0x20001c40
 8006e34:	20001774 	.word	0x20001774
 8006e38:	20001c20 	.word	0x20001c20

08006e3c <xTaskCreateStatic>:
	{
 8006e3c:	b530      	push	{r4, r5, lr}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8006e42:	b17c      	cbz	r4, 8006e64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e46:	b1b5      	cbz	r5, 8006e76 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e48:	2560      	movs	r5, #96	; 0x60
 8006e4a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e4c:	9d04      	ldr	r5, [sp, #16]
 8006e4e:	2d60      	cmp	r5, #96	; 0x60
 8006e50:	d01a      	beq.n	8006e88 <xTaskCreateStatic+0x4c>
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	e7fe      	b.n	8006e62 <xTaskCreateStatic+0x26>
 8006e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e68:	f383 8811 	msr	BASEPRI, r3
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006e74:	e7fe      	b.n	8006e74 <xTaskCreateStatic+0x38>
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006e86:	e7fe      	b.n	8006e86 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e8a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e8c:	2402      	movs	r4, #2
 8006e8e:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e92:	2400      	movs	r4, #0
 8006e94:	9403      	str	r4, [sp, #12]
 8006e96:	9502      	str	r5, [sp, #8]
 8006e98:	ac05      	add	r4, sp, #20
 8006e9a:	9401      	str	r4, [sp, #4]
 8006e9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e9e:	9400      	str	r4, [sp, #0]
 8006ea0:	f7ff fe60 	bl	8006b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ea4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ea6:	f7ff fedf 	bl	8006c68 <prvAddNewTaskToReadyList>
	}
 8006eaa:	9805      	ldr	r0, [sp, #20]
 8006eac:	b007      	add	sp, #28
 8006eae:	bd30      	pop	{r4, r5, pc}

08006eb0 <xTaskCreate>:
	{
 8006eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	4688      	mov	r8, r1
 8006eba:	4614      	mov	r4, r2
 8006ebc:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ebe:	0090      	lsls	r0, r2, #2
 8006ec0:	f001 f87a 	bl	8007fb8 <pvPortMalloc>
			if( pxStack != NULL )
 8006ec4:	b300      	cbz	r0, 8006f08 <xTaskCreate+0x58>
 8006ec6:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006ec8:	2060      	movs	r0, #96	; 0x60
 8006eca:	f001 f875 	bl	8007fb8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b1b0      	cbz	r0, 8006f00 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8006ed2:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006ed6:	b1e5      	cbz	r5, 8006f12 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ede:	9303      	str	r3, [sp, #12]
 8006ee0:	9502      	str	r5, [sp, #8]
 8006ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4633      	mov	r3, r6
 8006eec:	4622      	mov	r2, r4
 8006eee:	4641      	mov	r1, r8
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f7ff fe37 	bl	8006b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f7ff feb6 	bl	8006c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006efc:	2001      	movs	r0, #1
 8006efe:	e005      	b.n	8006f0c <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8006f00:	4648      	mov	r0, r9
 8006f02:	f001 f8d1 	bl	80080a8 <vPortFree>
 8006f06:	e7e6      	b.n	8006ed6 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8006f0c:	b005      	add	sp, #20
 8006f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f12:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8006f16:	e7f9      	b.n	8006f0c <xTaskCreate+0x5c>

08006f18 <vTaskStartScheduler>:
{
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f1c:	2400      	movs	r4, #0
 8006f1e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f20:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f22:	aa07      	add	r2, sp, #28
 8006f24:	a906      	add	r1, sp, #24
 8006f26:	a805      	add	r0, sp, #20
 8006f28:	f7fe ff12 	bl	8005d50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f2c:	9b05      	ldr	r3, [sp, #20]
 8006f2e:	9302      	str	r3, [sp, #8]
 8006f30:	9b06      	ldr	r3, [sp, #24]
 8006f32:	9301      	str	r3, [sp, #4]
 8006f34:	9400      	str	r4, [sp, #0]
 8006f36:	4623      	mov	r3, r4
 8006f38:	9a07      	ldr	r2, [sp, #28]
 8006f3a:	4918      	ldr	r1, [pc, #96]	; (8006f9c <vTaskStartScheduler+0x84>)
 8006f3c:	4818      	ldr	r0, [pc, #96]	; (8006fa0 <vTaskStartScheduler+0x88>)
 8006f3e:	f7ff ff7d 	bl	8006e3c <xTaskCreateStatic>
 8006f42:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <vTaskStartScheduler+0x8c>)
 8006f44:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8006f46:	b140      	cbz	r0, 8006f5a <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 8006f48:	f000 fca4 	bl	8007894 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006f4c:	2801      	cmp	r0, #1
 8006f4e:	d006      	beq.n	8006f5e <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f54:	d018      	beq.n	8006f88 <vTaskStartScheduler+0x70>
}
 8006f56:	b008      	add	sp, #32
 8006f58:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e7f6      	b.n	8006f4c <vTaskStartScheduler+0x34>
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f6e:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <vTaskStartScheduler+0x90>)
 8006f70:	f04f 32ff 	mov.w	r2, #4294967295
 8006f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <vTaskStartScheduler+0x94>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <vTaskStartScheduler+0x98>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006f82:	f000 ff29 	bl	8007dd8 <xPortStartScheduler>
 8006f86:	e7e6      	b.n	8006f56 <vTaskStartScheduler+0x3e>
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f98:	e7fe      	b.n	8006f98 <vTaskStartScheduler+0x80>
 8006f9a:	bf00      	nop
 8006f9c:	08009ee0 	.word	0x08009ee0
 8006fa0:	08006d99 	.word	0x08006d99
 8006fa4:	20001c1c 	.word	0x20001c1c
 8006fa8:	20001c20 	.word	0x20001c20
 8006fac:	20001c3c 	.word	0x20001c3c
 8006fb0:	20001c68 	.word	0x20001c68

08006fb4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006fb4:	4a02      	ldr	r2, [pc, #8]	; (8006fc0 <vTaskSuspendAll+0xc>)
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	6013      	str	r3, [r2, #0]
}
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	20001be8 	.word	0x20001be8

08006fc4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006fc4:	4b01      	ldr	r3, [pc, #4]	; (8006fcc <xTaskGetTickCount+0x8>)
 8006fc6:	6818      	ldr	r0, [r3, #0]
}
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20001c68 	.word	0x20001c68

08006fd0 <xTaskIncrementTick>:
{
 8006fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fd2:	4b3a      	ldr	r3, [pc, #232]	; (80070bc <xTaskIncrementTick+0xec>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d164      	bne.n	80070a4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fda:	4b39      	ldr	r3, [pc, #228]	; (80070c0 <xTaskIncrementTick+0xf0>)
 8006fdc:	681d      	ldr	r5, [r3, #0]
 8006fde:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006fe0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fe2:	b9c5      	cbnz	r5, 8007016 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006fe4:	4b37      	ldr	r3, [pc, #220]	; (80070c4 <xTaskIncrementTick+0xf4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	b143      	cbz	r3, 8006ffe <xTaskIncrementTick+0x2e>
 8006fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	e7fe      	b.n	8006ffc <xTaskIncrementTick+0x2c>
 8006ffe:	4a31      	ldr	r2, [pc, #196]	; (80070c4 <xTaskIncrementTick+0xf4>)
 8007000:	6811      	ldr	r1, [r2, #0]
 8007002:	4b31      	ldr	r3, [pc, #196]	; (80070c8 <xTaskIncrementTick+0xf8>)
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	6010      	str	r0, [r2, #0]
 8007008:	6019      	str	r1, [r3, #0]
 800700a:	4a30      	ldr	r2, [pc, #192]	; (80070cc <xTaskIncrementTick+0xfc>)
 800700c:	6813      	ldr	r3, [r2, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	f7ff fd91 	bl	8006b38 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007016:	4b2e      	ldr	r3, [pc, #184]	; (80070d0 <xTaskIncrementTick+0x100>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	42ab      	cmp	r3, r5
 800701c:	d938      	bls.n	8007090 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800701e:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007020:	4b2c      	ldr	r3, [pc, #176]	; (80070d4 <xTaskIncrementTick+0x104>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800702a:	009a      	lsls	r2, r3, #2
 800702c:	4b2a      	ldr	r3, [pc, #168]	; (80070d8 <xTaskIncrementTick+0x108>)
 800702e:	589b      	ldr	r3, [r3, r2]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d93c      	bls.n	80070ae <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8007034:	2701      	movs	r7, #1
 8007036:	e03a      	b.n	80070ae <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8007038:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703a:	4b22      	ldr	r3, [pc, #136]	; (80070c4 <xTaskIncrementTick+0xf4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	b343      	cbz	r3, 8007094 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <xTaskIncrementTick+0xf4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800704a:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800704c:	429d      	cmp	r5, r3
 800704e:	d326      	bcc.n	800709e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007050:	1d26      	adds	r6, r4, #4
 8007052:	4630      	mov	r0, r6
 8007054:	f7fe ffde 	bl	8006014 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007058:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800705a:	b11b      	cbz	r3, 8007064 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800705c:	f104 0018 	add.w	r0, r4, #24
 8007060:	f7fe ffd8 	bl	8006014 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007064:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007066:	4a1d      	ldr	r2, [pc, #116]	; (80070dc <xTaskIncrementTick+0x10c>)
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <xTaskIncrementTick+0xa2>
 800706e:	4a1b      	ldr	r2, [pc, #108]	; (80070dc <xTaskIncrementTick+0x10c>)
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007076:	009a      	lsls	r2, r3, #2
 8007078:	4631      	mov	r1, r6
 800707a:	4817      	ldr	r0, [pc, #92]	; (80070d8 <xTaskIncrementTick+0x108>)
 800707c:	4410      	add	r0, r2
 800707e:	f7fe ffa5 	bl	8005fcc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007082:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007084:	4b13      	ldr	r3, [pc, #76]	; (80070d4 <xTaskIncrementTick+0x104>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	429a      	cmp	r2, r3
 800708c:	d2d4      	bcs.n	8007038 <xTaskIncrementTick+0x68>
 800708e:	e7d4      	b.n	800703a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8007090:	2700      	movs	r7, #0
 8007092:	e7d2      	b.n	800703a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007094:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <xTaskIncrementTick+0x100>)
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	601a      	str	r2, [r3, #0]
					break;
 800709c:	e7c0      	b.n	8007020 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800709e:	4a0c      	ldr	r2, [pc, #48]	; (80070d0 <xTaskIncrementTick+0x100>)
 80070a0:	6013      	str	r3, [r2, #0]
						break;
 80070a2:	e7bd      	b.n	8007020 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80070a4:	4a0e      	ldr	r2, [pc, #56]	; (80070e0 <xTaskIncrementTick+0x110>)
 80070a6:	6813      	ldr	r3, [r2, #0]
 80070a8:	3301      	adds	r3, #1
 80070aa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80070ac:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <xTaskIncrementTick+0x114>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 80070b4:	2701      	movs	r7, #1
}
 80070b6:	4638      	mov	r0, r7
 80070b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ba:	bf00      	nop
 80070bc:	20001be8 	.word	0x20001be8
 80070c0:	20001c68 	.word	0x20001c68
 80070c4:	20001774 	.word	0x20001774
 80070c8:	20001778 	.word	0x20001778
 80070cc:	20001c24 	.word	0x20001c24
 80070d0:	20001c20 	.word	0x20001c20
 80070d4:	20001770 	.word	0x20001770
 80070d8:	2000177c 	.word	0x2000177c
 80070dc:	20001bf0 	.word	0x20001bf0
 80070e0:	20001be4 	.word	0x20001be4
 80070e4:	20001c6c 	.word	0x20001c6c

080070e8 <xTaskResumeAll>:
{
 80070e8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80070ea:	4b35      	ldr	r3, [pc, #212]	; (80071c0 <xTaskResumeAll+0xd8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	b943      	cbnz	r3, 8007102 <xTaskResumeAll+0x1a>
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	e7fe      	b.n	8007100 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8007102:	f000 fddf 	bl	8007cc4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8007106:	4b2e      	ldr	r3, [pc, #184]	; (80071c0 <xTaskResumeAll+0xd8>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	3a01      	subs	r2, #1
 800710c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d14f      	bne.n	80071b4 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007114:	4b2b      	ldr	r3, [pc, #172]	; (80071c4 <xTaskResumeAll+0xdc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	b90b      	cbnz	r3, 800711e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800711a:	2400      	movs	r4, #0
 800711c:	e04b      	b.n	80071b6 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800711e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007120:	4b29      	ldr	r3, [pc, #164]	; (80071c8 <xTaskResumeAll+0xe0>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	b31b      	cbz	r3, 800716e <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007126:	4b28      	ldr	r3, [pc, #160]	; (80071c8 <xTaskResumeAll+0xe0>)
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800712c:	f104 0018 	add.w	r0, r4, #24
 8007130:	f7fe ff70 	bl	8006014 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007134:	1d25      	adds	r5, r4, #4
 8007136:	4628      	mov	r0, r5
 8007138:	f7fe ff6c 	bl	8006014 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800713c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800713e:	4b23      	ldr	r3, [pc, #140]	; (80071cc <xTaskResumeAll+0xe4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4298      	cmp	r0, r3
 8007144:	d901      	bls.n	800714a <xTaskResumeAll+0x62>
 8007146:	4b21      	ldr	r3, [pc, #132]	; (80071cc <xTaskResumeAll+0xe4>)
 8007148:	6018      	str	r0, [r3, #0]
 800714a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800714e:	4629      	mov	r1, r5
 8007150:	4b1f      	ldr	r3, [pc, #124]	; (80071d0 <xTaskResumeAll+0xe8>)
 8007152:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007156:	f7fe ff39 	bl	8005fcc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800715a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800715c:	4b1d      	ldr	r3, [pc, #116]	; (80071d4 <xTaskResumeAll+0xec>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007162:	429a      	cmp	r2, r3
 8007164:	d3dc      	bcc.n	8007120 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8007166:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <xTaskResumeAll+0xf0>)
 8007168:	2201      	movs	r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e7d8      	b.n	8007120 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800716e:	b10c      	cbz	r4, 8007174 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8007170:	f7ff fce2 	bl	8006b38 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007174:	4b19      	ldr	r3, [pc, #100]	; (80071dc <xTaskResumeAll+0xf4>)
 8007176:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007178:	b984      	cbnz	r4, 800719c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800717a:	4b17      	ldr	r3, [pc, #92]	; (80071d8 <xTaskResumeAll+0xf0>)
 800717c:	681c      	ldr	r4, [r3, #0]
 800717e:	b1d4      	cbz	r4, 80071b6 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8007180:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007188:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007194:	2401      	movs	r4, #1
 8007196:	e00e      	b.n	80071b6 <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007198:	3c01      	subs	r4, #1
 800719a:	d007      	beq.n	80071ac <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800719c:	f7ff ff18 	bl	8006fd0 <xTaskIncrementTick>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0f9      	beq.n	8007198 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80071a4:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <xTaskResumeAll+0xf0>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	e7f5      	b.n	8007198 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 80071ac:	4b0b      	ldr	r3, [pc, #44]	; (80071dc <xTaskResumeAll+0xf4>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e7e2      	b.n	800717a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80071b4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80071b6:	f000 fda7 	bl	8007d08 <vPortExitCritical>
}
 80071ba:	4620      	mov	r0, r4
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	20001be8 	.word	0x20001be8
 80071c4:	20001bdc 	.word	0x20001bdc
 80071c8:	20001c28 	.word	0x20001c28
 80071cc:	20001bf0 	.word	0x20001bf0
 80071d0:	2000177c 	.word	0x2000177c
 80071d4:	20001770 	.word	0x20001770
 80071d8:	20001c6c 	.word	0x20001c6c
 80071dc:	20001be4 	.word	0x20001be4

080071e0 <vTaskDelayUntil>:
	{
 80071e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 80071e2:	b158      	cbz	r0, 80071fc <vTaskDelayUntil+0x1c>
 80071e4:	460c      	mov	r4, r1
 80071e6:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 80071e8:	b989      	cbnz	r1, 800720e <vTaskDelayUntil+0x2e>
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	e7fe      	b.n	80071fa <vTaskDelayUntil+0x1a>
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 800720c:	e7fe      	b.n	800720c <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 800720e:	4b1b      	ldr	r3, [pc, #108]	; (800727c <vTaskDelayUntil+0x9c>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	b143      	cbz	r3, 8007226 <vTaskDelayUntil+0x46>
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	e7fe      	b.n	8007224 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8007226:	f7ff fec5 	bl	8006fb4 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800722a:	4b15      	ldr	r3, [pc, #84]	; (8007280 <vTaskDelayUntil+0xa0>)
 800722c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 8007232:	4283      	cmp	r3, r0
 8007234:	d909      	bls.n	800724a <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007236:	42a3      	cmp	r3, r4
 8007238:	d801      	bhi.n	800723e <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 800723a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800723c:	e00e      	b.n	800725c <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800723e:	42a0      	cmp	r0, r4
 8007240:	d301      	bcc.n	8007246 <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 8007242:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007244:	e00a      	b.n	800725c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8007246:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8007248:	e004      	b.n	8007254 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800724a:	42a3      	cmp	r3, r4
 800724c:	d801      	bhi.n	8007252 <vTaskDelayUntil+0x72>
 800724e:	42a0      	cmp	r0, r4
 8007250:	d212      	bcs.n	8007278 <vTaskDelayUntil+0x98>
			*pxPreviousWakeTime = xTimeToWake;
 8007252:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007254:	2100      	movs	r1, #0
 8007256:	1a20      	subs	r0, r4, r0
 8007258:	f7ff fdb2 	bl	8006dc0 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 800725c:	f7ff ff44 	bl	80070e8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8007260:	b948      	cbnz	r0, 8007276 <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 8007262:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	f3bf 8f6f 	isb	sy
	}
 8007276:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 8007278:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800727a:	e7ef      	b.n	800725c <vTaskDelayUntil+0x7c>
 800727c:	20001be8 	.word	0x20001be8
 8007280:	20001c68 	.word	0x20001c68

08007284 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <vTaskSwitchContext+0x80>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	b11b      	cbz	r3, 8007292 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800728a:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <vTaskSwitchContext+0x84>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8007292:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <vTaskSwitchContext+0x84>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007298:	4b1c      	ldr	r3, [pc, #112]	; (800730c <vTaskSwitchContext+0x88>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80072a0:	008a      	lsls	r2, r1, #2
 80072a2:	491b      	ldr	r1, [pc, #108]	; (8007310 <vTaskSwitchContext+0x8c>)
 80072a4:	588a      	ldr	r2, [r1, r2]
 80072a6:	b95a      	cbnz	r2, 80072c0 <vTaskSwitchContext+0x3c>
 80072a8:	b10b      	cbz	r3, 80072ae <vTaskSwitchContext+0x2a>
 80072aa:	3b01      	subs	r3, #1
 80072ac:	e7f6      	b.n	800729c <vTaskSwitchContext+0x18>
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	e7fe      	b.n	80072be <vTaskSwitchContext+0x3a>
 80072c0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80072c4:	0082      	lsls	r2, r0, #2
 80072c6:	440a      	add	r2, r1
 80072c8:	6850      	ldr	r0, [r2, #4]
 80072ca:	6840      	ldr	r0, [r0, #4]
 80072cc:	6050      	str	r0, [r2, #4]
 80072ce:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80072d2:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80072d6:	3208      	adds	r2, #8
 80072d8:	4411      	add	r1, r2
 80072da:	4288      	cmp	r0, r1
 80072dc:	d00b      	beq.n	80072f6 <vTaskSwitchContext+0x72>
 80072de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80072e2:	0091      	lsls	r1, r2, #2
 80072e4:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <vTaskSwitchContext+0x8c>)
 80072e6:	440a      	add	r2, r1
 80072e8:	6852      	ldr	r2, [r2, #4]
 80072ea:	68d1      	ldr	r1, [r2, #12]
 80072ec:	4a09      	ldr	r2, [pc, #36]	; (8007314 <vTaskSwitchContext+0x90>)
 80072ee:	6011      	str	r1, [r2, #0]
 80072f0:	4a06      	ldr	r2, [pc, #24]	; (800730c <vTaskSwitchContext+0x88>)
 80072f2:	6013      	str	r3, [r2, #0]
}
 80072f4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80072f6:	6840      	ldr	r0, [r0, #4]
 80072f8:	4662      	mov	r2, ip
 80072fa:	0091      	lsls	r1, r2, #2
 80072fc:	4a04      	ldr	r2, [pc, #16]	; (8007310 <vTaskSwitchContext+0x8c>)
 80072fe:	440a      	add	r2, r1
 8007300:	6050      	str	r0, [r2, #4]
 8007302:	e7ec      	b.n	80072de <vTaskSwitchContext+0x5a>
 8007304:	20001be8 	.word	0x20001be8
 8007308:	20001c6c 	.word	0x20001c6c
 800730c:	20001bf0 	.word	0x20001bf0
 8007310:	2000177c 	.word	0x2000177c
 8007314:	20001770 	.word	0x20001770

08007318 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8007318:	b158      	cbz	r0, 8007332 <vTaskPlaceOnEventList+0x1a>
{
 800731a:	b510      	push	{r4, lr}
 800731c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800731e:	4a09      	ldr	r2, [pc, #36]	; (8007344 <vTaskPlaceOnEventList+0x2c>)
 8007320:	6811      	ldr	r1, [r2, #0]
 8007322:	3118      	adds	r1, #24
 8007324:	f7fe fe5d 	bl	8005fe2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007328:	2101      	movs	r1, #1
 800732a:	4620      	mov	r0, r4
 800732c:	f7ff fd48 	bl	8006dc0 <prvAddCurrentTaskToDelayedList>
}
 8007330:	bd10      	pop	{r4, pc}
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007342:	e7fe      	b.n	8007342 <vTaskPlaceOnEventList+0x2a>
 8007344:	20001770 	.word	0x20001770

08007348 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8007348:	b170      	cbz	r0, 8007368 <vTaskPlaceOnUnorderedEventList+0x20>
{
 800734a:	b510      	push	{r4, lr}
 800734c:	4614      	mov	r4, r2
 800734e:	4602      	mov	r2, r0
	configASSERT( uxSchedulerSuspended != 0 );
 8007350:	4b11      	ldr	r3, [pc, #68]	; (8007398 <vTaskPlaceOnUnorderedEventList+0x50>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b98b      	cbnz	r3, 800737a <vTaskPlaceOnUnorderedEventList+0x32>
 8007356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	e7fe      	b.n	8007366 <vTaskPlaceOnUnorderedEventList+0x1e>
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8007378:	e7fe      	b.n	8007378 <vTaskPlaceOnUnorderedEventList+0x30>
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800737a:	4b08      	ldr	r3, [pc, #32]	; (800739c <vTaskPlaceOnUnorderedEventList+0x54>)
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007382:	6181      	str	r1, [r0, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007384:	6819      	ldr	r1, [r3, #0]
 8007386:	3118      	adds	r1, #24
 8007388:	4610      	mov	r0, r2
 800738a:	f7fe fe1f 	bl	8005fcc <vListInsertEnd>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800738e:	2101      	movs	r1, #1
 8007390:	4620      	mov	r0, r4
 8007392:	f7ff fd15 	bl	8006dc0 <prvAddCurrentTaskToDelayedList>
}
 8007396:	bd10      	pop	{r4, pc}
 8007398:	20001be8 	.word	0x20001be8
 800739c:	20001770 	.word	0x20001770

080073a0 <vTaskPlaceOnEventListRestricted>:
	{
 80073a0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80073a2:	b170      	cbz	r0, 80073c2 <vTaskPlaceOnEventListRestricted+0x22>
 80073a4:	460d      	mov	r5, r1
 80073a6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073a8:	4a0a      	ldr	r2, [pc, #40]	; (80073d4 <vTaskPlaceOnEventListRestricted+0x34>)
 80073aa:	6811      	ldr	r1, [r2, #0]
 80073ac:	3118      	adds	r1, #24
 80073ae:	f7fe fe0d 	bl	8005fcc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80073b2:	b10c      	cbz	r4, 80073b8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80073b4:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073b8:	4621      	mov	r1, r4
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7ff fd00 	bl	8006dc0 <prvAddCurrentTaskToDelayedList>
	}
 80073c0:	bd38      	pop	{r3, r4, r5, pc}
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80073d2:	e7fe      	b.n	80073d2 <vTaskPlaceOnEventListRestricted+0x32>
 80073d4:	20001770 	.word	0x20001770

080073d8 <xTaskRemoveFromEventList>:
{
 80073d8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80073da:	68c3      	ldr	r3, [r0, #12]
 80073dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80073de:	b324      	cbz	r4, 800742a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073e0:	f104 0518 	add.w	r5, r4, #24
 80073e4:	4628      	mov	r0, r5
 80073e6:	f7fe fe15 	bl	8006014 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ea:	4b18      	ldr	r3, [pc, #96]	; (800744c <xTaskRemoveFromEventList+0x74>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	bb2b      	cbnz	r3, 800743c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073f0:	1d25      	adds	r5, r4, #4
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7fe fe0e 	bl	8006014 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80073fa:	4b15      	ldr	r3, [pc, #84]	; (8007450 <xTaskRemoveFromEventList+0x78>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4298      	cmp	r0, r3
 8007400:	d901      	bls.n	8007406 <xTaskRemoveFromEventList+0x2e>
 8007402:	4b13      	ldr	r3, [pc, #76]	; (8007450 <xTaskRemoveFromEventList+0x78>)
 8007404:	6018      	str	r0, [r3, #0]
 8007406:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800740a:	4629      	mov	r1, r5
 800740c:	4b11      	ldr	r3, [pc, #68]	; (8007454 <xTaskRemoveFromEventList+0x7c>)
 800740e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007412:	f7fe fddb 	bl	8005fcc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007418:	4b0f      	ldr	r3, [pc, #60]	; (8007458 <xTaskRemoveFromEventList+0x80>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	429a      	cmp	r2, r3
 8007420:	d911      	bls.n	8007446 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8007422:	2001      	movs	r0, #1
 8007424:	4b0d      	ldr	r3, [pc, #52]	; (800745c <xTaskRemoveFromEventList+0x84>)
 8007426:	6018      	str	r0, [r3, #0]
}
 8007428:	bd38      	pop	{r3, r4, r5, pc}
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800743a:	e7fe      	b.n	800743a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800743c:	4629      	mov	r1, r5
 800743e:	4808      	ldr	r0, [pc, #32]	; (8007460 <xTaskRemoveFromEventList+0x88>)
 8007440:	f7fe fdc4 	bl	8005fcc <vListInsertEnd>
 8007444:	e7e7      	b.n	8007416 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8007446:	2000      	movs	r0, #0
	return xReturn;
 8007448:	e7ee      	b.n	8007428 <xTaskRemoveFromEventList+0x50>
 800744a:	bf00      	nop
 800744c:	20001be8 	.word	0x20001be8
 8007450:	20001bf0 	.word	0x20001bf0
 8007454:	2000177c 	.word	0x2000177c
 8007458:	20001770 	.word	0x20001770
 800745c:	20001c6c 	.word	0x20001c6c
 8007460:	20001c28 	.word	0x20001c28

08007464 <vTaskRemoveFromUnorderedEventList>:
{
 8007464:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007466:	4b1c      	ldr	r3, [pc, #112]	; (80074d8 <vTaskRemoveFromUnorderedEventList+0x74>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	b943      	cbnz	r3, 800747e <vTaskRemoveFromUnorderedEventList+0x1a>
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	e7fe      	b.n	800747c <vTaskRemoveFromUnorderedEventList+0x18>
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800747e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007482:	6001      	str	r1, [r0, #0]
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007484:	68c4      	ldr	r4, [r0, #12]
	configASSERT( pxUnblockedTCB );
 8007486:	b1f4      	cbz	r4, 80074c6 <vTaskRemoveFromUnorderedEventList+0x62>
	( void ) uxListRemove( pxEventListItem );
 8007488:	f7fe fdc4 	bl	8006014 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800748c:	1d25      	adds	r5, r4, #4
 800748e:	4628      	mov	r0, r5
 8007490:	f7fe fdc0 	bl	8006014 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007494:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <vTaskRemoveFromUnorderedEventList+0x78>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4298      	cmp	r0, r3
 800749c:	d901      	bls.n	80074a2 <vTaskRemoveFromUnorderedEventList+0x3e>
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <vTaskRemoveFromUnorderedEventList+0x78>)
 80074a0:	6018      	str	r0, [r3, #0]
 80074a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80074a6:	4629      	mov	r1, r5
 80074a8:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <vTaskRemoveFromUnorderedEventList+0x7c>)
 80074aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074ae:	f7fe fd8d 	bl	8005fcc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80074b4:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <vTaskRemoveFromUnorderedEventList+0x80>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d902      	bls.n	80074c4 <vTaskRemoveFromUnorderedEventList+0x60>
		xYieldPending = pdTRUE;
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <vTaskRemoveFromUnorderedEventList+0x84>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bd38      	pop	{r3, r4, r5, pc}
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80074d6:	e7fe      	b.n	80074d6 <vTaskRemoveFromUnorderedEventList+0x72>
 80074d8:	20001be8 	.word	0x20001be8
 80074dc:	20001bf0 	.word	0x20001bf0
 80074e0:	2000177c 	.word	0x2000177c
 80074e4:	20001770 	.word	0x20001770
 80074e8:	20001c6c 	.word	0x20001c6c

080074ec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074ec:	4b03      	ldr	r3, [pc, #12]	; (80074fc <vTaskInternalSetTimeOutState+0x10>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074f2:	4b03      	ldr	r3, [pc, #12]	; (8007500 <vTaskInternalSetTimeOutState+0x14>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6043      	str	r3, [r0, #4]
}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20001c24 	.word	0x20001c24
 8007500:	20001c68 	.word	0x20001c68

08007504 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8007504:	b1d8      	cbz	r0, 800753e <xTaskCheckForTimeOut+0x3a>
{
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	460c      	mov	r4, r1
 800750a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800750c:	b301      	cbz	r1, 8007550 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800750e:	f000 fbd9 	bl	8007cc4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007512:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <xTaskCheckForTimeOut+0x7c>)
 8007514:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007516:	686b      	ldr	r3, [r5, #4]
 8007518:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800751a:	6822      	ldr	r2, [r4, #0]
 800751c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007520:	d027      	beq.n	8007572 <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007522:	4e18      	ldr	r6, [pc, #96]	; (8007584 <xTaskCheckForTimeOut+0x80>)
 8007524:	6836      	ldr	r6, [r6, #0]
 8007526:	f8d5 c000 	ldr.w	ip, [r5]
 800752a:	45b4      	cmp	ip, r6
 800752c:	d001      	beq.n	8007532 <xTaskCheckForTimeOut+0x2e>
 800752e:	428b      	cmp	r3, r1
 8007530:	d924      	bls.n	800757c <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007532:	4282      	cmp	r2, r0
 8007534:	d815      	bhi.n	8007562 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800753a:	2401      	movs	r4, #1
 800753c:	e01a      	b.n	8007574 <xTaskCheckForTimeOut+0x70>
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800754e:	e7fe      	b.n	800754e <xTaskCheckForTimeOut+0x4a>
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8007560:	e7fe      	b.n	8007560 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8007562:	1a5b      	subs	r3, r3, r1
 8007564:	4413      	add	r3, r2
 8007566:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007568:	4628      	mov	r0, r5
 800756a:	f7ff ffbf 	bl	80074ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800756e:	2400      	movs	r4, #0
 8007570:	e000      	b.n	8007574 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 8007572:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007574:	f000 fbc8 	bl	8007d08 <vPortExitCritical>
}
 8007578:	4620      	mov	r0, r4
 800757a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800757c:	2401      	movs	r4, #1
 800757e:	e7f9      	b.n	8007574 <xTaskCheckForTimeOut+0x70>
 8007580:	20001c68 	.word	0x20001c68
 8007584:	20001c24 	.word	0x20001c24

08007588 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007588:	4b01      	ldr	r3, [pc, #4]	; (8007590 <vTaskMissedYield+0x8>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	4770      	bx	lr
 8007590:	20001c6c 	.word	0x20001c6c

08007594 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8007594:	4b01      	ldr	r3, [pc, #4]	; (800759c <xTaskGetCurrentTaskHandle+0x8>)
 8007596:	6818      	ldr	r0, [r3, #0]
	}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20001770 	.word	0x20001770

080075a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80075a0:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <xTaskGetSchedulerState+0x18>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	b133      	cbz	r3, 80075b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <xTaskGetSchedulerState+0x1c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	b10b      	cbz	r3, 80075b0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ac:	2000      	movs	r0, #0
	}
 80075ae:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80075b0:	2002      	movs	r0, #2
 80075b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075b4:	2001      	movs	r0, #1
 80075b6:	4770      	bx	lr
 80075b8:	20001c3c 	.word	0x20001c3c
 80075bc:	20001be8 	.word	0x20001be8

080075c0 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d03f      	beq.n	8007644 <xTaskPriorityInherit+0x84>
	{
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80075ca:	4a20      	ldr	r2, [pc, #128]	; (800764c <xTaskPriorityInherit+0x8c>)
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d22f      	bcs.n	8007634 <xTaskPriorityInherit+0x74>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075d4:	6982      	ldr	r2, [r0, #24]
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	db05      	blt.n	80075e6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075da:	4a1c      	ldr	r2, [pc, #112]	; (800764c <xTaskPriorityInherit+0x8c>)
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075e0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80075e4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075e6:	6961      	ldr	r1, [r4, #20]
 80075e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80075ec:	4a18      	ldr	r2, [pc, #96]	; (8007650 <xTaskPriorityInherit+0x90>)
 80075ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075f2:	4299      	cmp	r1, r3
 80075f4:	d005      	beq.n	8007602 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075f6:	4b15      	ldr	r3, [pc, #84]	; (800764c <xTaskPriorityInherit+0x8c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80075fe:	2001      	movs	r0, #1
	}
 8007600:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007602:	1d25      	adds	r5, r4, #4
 8007604:	4628      	mov	r0, r5
 8007606:	f7fe fd05 	bl	8006014 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800760a:	4b10      	ldr	r3, [pc, #64]	; (800764c <xTaskPriorityInherit+0x8c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007610:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <xTaskPriorityInherit+0x94>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4298      	cmp	r0, r3
 8007618:	d809      	bhi.n	800762e <xTaskPriorityInherit+0x6e>
 800761a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800761e:	4629      	mov	r1, r5
 8007620:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <xTaskPriorityInherit+0x90>)
 8007622:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007626:	f7fe fcd1 	bl	8005fcc <vListInsertEnd>
				xReturn = pdTRUE;
 800762a:	2001      	movs	r0, #1
 800762c:	e7e8      	b.n	8007600 <xTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800762e:	4b09      	ldr	r3, [pc, #36]	; (8007654 <xTaskPriorityInherit+0x94>)
 8007630:	6018      	str	r0, [r3, #0]
 8007632:	e7f2      	b.n	800761a <xTaskPriorityInherit+0x5a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007634:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <xTaskPriorityInherit+0x8c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	429a      	cmp	r2, r3
 800763e:	d303      	bcc.n	8007648 <xTaskPriorityInherit+0x88>
	BaseType_t xReturn = pdFALSE;
 8007640:	2000      	movs	r0, #0
 8007642:	e7dd      	b.n	8007600 <xTaskPriorityInherit+0x40>
 8007644:	2000      	movs	r0, #0
	}
 8007646:	4770      	bx	lr
					xReturn = pdTRUE;
 8007648:	2001      	movs	r0, #1
		return xReturn;
 800764a:	e7d9      	b.n	8007600 <xTaskPriorityInherit+0x40>
 800764c:	20001770 	.word	0x20001770
 8007650:	2000177c 	.word	0x2000177c
 8007654:	20001bf0 	.word	0x20001bf0

08007658 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8007658:	2800      	cmp	r0, #0
 800765a:	d03b      	beq.n	80076d4 <xTaskPriorityDisinherit+0x7c>
	{
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8007660:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <xTaskPriorityDisinherit+0x84>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4283      	cmp	r3, r0
 8007666:	d008      	beq.n	800767a <xTaskPriorityDisinherit+0x22>
 8007668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	e7fe      	b.n	8007678 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800767a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800767c:	b943      	cbnz	r3, 8007690 <xTaskPriorityDisinherit+0x38>
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	e7fe      	b.n	800768e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8007690:	3b01      	subs	r3, #1
 8007692:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007694:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007696:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007698:	4291      	cmp	r1, r2
 800769a:	d01d      	beq.n	80076d8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800769c:	b10b      	cbz	r3, 80076a2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800769e:	2000      	movs	r0, #0
	}
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076a2:	1d05      	adds	r5, r0, #4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f7fe fcb5 	bl	8006014 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80076ac:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076ae:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 80076b2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <xTaskPriorityDisinherit+0x88>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4298      	cmp	r0, r3
 80076ba:	d901      	bls.n	80076c0 <xTaskPriorityDisinherit+0x68>
 80076bc:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <xTaskPriorityDisinherit+0x88>)
 80076be:	6018      	str	r0, [r3, #0]
 80076c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80076c4:	4629      	mov	r1, r5
 80076c6:	4b07      	ldr	r3, [pc, #28]	; (80076e4 <xTaskPriorityDisinherit+0x8c>)
 80076c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076cc:	f7fe fc7e 	bl	8005fcc <vListInsertEnd>
					xReturn = pdTRUE;
 80076d0:	2001      	movs	r0, #1
 80076d2:	e7e5      	b.n	80076a0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80076d4:	2000      	movs	r0, #0
	}
 80076d6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80076d8:	2000      	movs	r0, #0
 80076da:	e7e1      	b.n	80076a0 <xTaskPriorityDisinherit+0x48>
 80076dc:	20001770 	.word	0x20001770
 80076e0:	20001bf0 	.word	0x20001bf0
 80076e4:	2000177c 	.word	0x2000177c

080076e8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d046      	beq.n	800777a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80076f0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80076f2:	b943      	cbnz	r3, 8007706 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	e7fe      	b.n	8007704 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007706:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007708:	428a      	cmp	r2, r1
 800770a:	d200      	bcs.n	800770e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800770c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800770e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007710:	4291      	cmp	r1, r2
 8007712:	d001      	beq.n	8007718 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007714:	2b01      	cmp	r3, #1
 8007716:	d000      	beq.n	800771a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8007718:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800771a:	4b18      	ldr	r3, [pc, #96]	; (800777c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	42a3      	cmp	r3, r4
 8007720:	d022      	beq.n	8007768 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8007722:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007724:	69a3      	ldr	r3, [r4, #24]
 8007726:	2b00      	cmp	r3, #0
 8007728:	db02      	blt.n	8007730 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800772a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800772e:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007730:	6962      	ldr	r2, [r4, #20]
 8007732:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007736:	4b12      	ldr	r3, [pc, #72]	; (8007780 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8007738:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800773c:	429a      	cmp	r2, r3
 800773e:	d1eb      	bne.n	8007718 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007740:	1d25      	adds	r5, r4, #4
 8007742:	4628      	mov	r0, r5
 8007744:	f7fe fc66 	bl	8006014 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8007748:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4298      	cmp	r0, r3
 8007750:	d901      	bls.n	8007756 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8007754:	6018      	str	r0, [r3, #0]
 8007756:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800775a:	4629      	mov	r1, r5
 800775c:	4b08      	ldr	r3, [pc, #32]	; (8007780 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800775e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007762:	f7fe fc33 	bl	8005fcc <vListInsertEnd>
	}
 8007766:	e7d7      	b.n	8007718 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8007778:	e7fe      	b.n	8007778 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800777a:	4770      	bx	lr
 800777c:	20001770 	.word	0x20001770
 8007780:	2000177c 	.word	0x2000177c
 8007784:	20001bf0 	.word	0x20001bf0

08007788 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007788:	4a04      	ldr	r2, [pc, #16]	; (800779c <uxTaskResetEventItemValue+0x14>)
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	6998      	ldr	r0, [r3, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778e:	6813      	ldr	r3, [r2, #0]
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	6812      	ldr	r2, [r2, #0]
 8007794:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007798:	6193      	str	r3, [r2, #24]
}
 800779a:	4770      	bx	lr
 800779c:	20001770 	.word	0x20001770

080077a0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <pvTaskIncrementMutexHeldCount+0x18>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	b123      	cbz	r3, 80077b0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80077a6:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <pvTaskIncrementMutexHeldCount+0x18>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80077ac:	3301      	adds	r3, #1
 80077ae:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 80077b0:	4b01      	ldr	r3, [pc, #4]	; (80077b8 <pvTaskIncrementMutexHeldCount+0x18>)
 80077b2:	6818      	ldr	r0, [r3, #0]
	}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20001770 	.word	0x20001770

080077bc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <prvGetNextExpireTime+0x1c>)
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	fab3 f383 	clz	r3, r3
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077ca:	b913      	cbnz	r3, 80077d2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077cc:	68d3      	ldr	r3, [r2, #12]
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077d2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	20001c70 	.word	0x20001c70

080077dc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077dc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077de:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077e0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077e2:	4291      	cmp	r1, r2
 80077e4:	d80c      	bhi.n	8007800 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	6983      	ldr	r3, [r0, #24]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d301      	bcc.n	80077f2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077ee:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80077f0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077f2:	1d01      	adds	r1, r0, #4
 80077f4:	4b09      	ldr	r3, [pc, #36]	; (800781c <prvInsertTimerInActiveList+0x40>)
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	f7fe fbf3 	bl	8005fe2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80077fc:	2000      	movs	r0, #0
 80077fe:	e7f7      	b.n	80077f0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007800:	429a      	cmp	r2, r3
 8007802:	d201      	bcs.n	8007808 <prvInsertTimerInActiveList+0x2c>
 8007804:	4299      	cmp	r1, r3
 8007806:	d206      	bcs.n	8007816 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007808:	1d01      	adds	r1, r0, #4
 800780a:	4b05      	ldr	r3, [pc, #20]	; (8007820 <prvInsertTimerInActiveList+0x44>)
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	f7fe fbe8 	bl	8005fe2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8007812:	2000      	movs	r0, #0
 8007814:	e7ec      	b.n	80077f0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8007816:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8007818:	e7ea      	b.n	80077f0 <prvInsertTimerInActiveList+0x14>
 800781a:	bf00      	nop
 800781c:	20001c74 	.word	0x20001c74
 8007820:	20001c70 	.word	0x20001c70

08007824 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007824:	b530      	push	{r4, r5, lr}
 8007826:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007828:	f000 fa4c 	bl	8007cc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800782c:	4b11      	ldr	r3, [pc, #68]	; (8007874 <prvCheckForValidListAndQueue+0x50>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	b11b      	cbz	r3, 800783a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007832:	f000 fa69 	bl	8007d08 <vPortExitCritical>
}
 8007836:	b003      	add	sp, #12
 8007838:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800783a:	4d0f      	ldr	r5, [pc, #60]	; (8007878 <prvCheckForValidListAndQueue+0x54>)
 800783c:	4628      	mov	r0, r5
 800783e:	f7fe fbb7 	bl	8005fb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007842:	4c0e      	ldr	r4, [pc, #56]	; (800787c <prvCheckForValidListAndQueue+0x58>)
 8007844:	4620      	mov	r0, r4
 8007846:	f7fe fbb3 	bl	8005fb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800784a:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <prvCheckForValidListAndQueue+0x5c>)
 800784c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800784e:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <prvCheckForValidListAndQueue+0x60>)
 8007850:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007852:	2300      	movs	r3, #0
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <prvCheckForValidListAndQueue+0x64>)
 8007858:	4a0c      	ldr	r2, [pc, #48]	; (800788c <prvCheckForValidListAndQueue+0x68>)
 800785a:	2110      	movs	r1, #16
 800785c:	200a      	movs	r0, #10
 800785e:	f7fe fce7 	bl	8006230 <xQueueGenericCreateStatic>
 8007862:	4b04      	ldr	r3, [pc, #16]	; (8007874 <prvCheckForValidListAndQueue+0x50>)
 8007864:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8007866:	2800      	cmp	r0, #0
 8007868:	d0e3      	beq.n	8007832 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800786a:	4909      	ldr	r1, [pc, #36]	; (8007890 <prvCheckForValidListAndQueue+0x6c>)
 800786c:	f7ff f8fa 	bl	8006a64 <vQueueAddToRegistry>
 8007870:	e7df      	b.n	8007832 <prvCheckForValidListAndQueue+0xe>
 8007872:	bf00      	nop
 8007874:	20001d94 	.word	0x20001d94
 8007878:	20001d18 	.word	0x20001d18
 800787c:	20001d2c 	.word	0x20001d2c
 8007880:	20001c70 	.word	0x20001c70
 8007884:	20001c74 	.word	0x20001c74
 8007888:	20001d44 	.word	0x20001d44
 800788c:	20001c78 	.word	0x20001c78
 8007890:	08009ee8 	.word	0x08009ee8

08007894 <xTimerCreateTimerTask>:
{
 8007894:	b510      	push	{r4, lr}
 8007896:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8007898:	f7ff ffc4 	bl	8007824 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800789c:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <xTimerCreateTimerTask+0x54>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	b1cb      	cbz	r3, 80078d6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078a2:	2400      	movs	r4, #0
 80078a4:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078a6:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078a8:	aa07      	add	r2, sp, #28
 80078aa:	a906      	add	r1, sp, #24
 80078ac:	a805      	add	r0, sp, #20
 80078ae:	f7fe fa5b 	bl	8005d68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078b2:	9b05      	ldr	r3, [sp, #20]
 80078b4:	9302      	str	r3, [sp, #8]
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2302      	movs	r3, #2
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4623      	mov	r3, r4
 80078c0:	9a07      	ldr	r2, [sp, #28]
 80078c2:	490a      	ldr	r1, [pc, #40]	; (80078ec <xTimerCreateTimerTask+0x58>)
 80078c4:	480a      	ldr	r0, [pc, #40]	; (80078f0 <xTimerCreateTimerTask+0x5c>)
 80078c6:	f7ff fab9 	bl	8006e3c <xTaskCreateStatic>
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <xTimerCreateTimerTask+0x60>)
 80078cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80078ce:	b110      	cbz	r0, 80078d6 <xTimerCreateTimerTask+0x42>
}
 80078d0:	2001      	movs	r0, #1
 80078d2:	b008      	add	sp, #32
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80078e6:	e7fe      	b.n	80078e6 <xTimerCreateTimerTask+0x52>
 80078e8:	20001d94 	.word	0x20001d94
 80078ec:	08009ef0 	.word	0x08009ef0
 80078f0:	08007bd5 	.word	0x08007bd5
 80078f4:	20001d98 	.word	0x20001d98

080078f8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80078f8:	b1b8      	cbz	r0, 800792a <xTimerGenericCommand+0x32>
 80078fa:	469c      	mov	ip, r3
 80078fc:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80078fe:	4818      	ldr	r0, [pc, #96]	; (8007960 <xTimerGenericCommand+0x68>)
 8007900:	6800      	ldr	r0, [r0, #0]
 8007902:	b358      	cbz	r0, 800795c <xTimerGenericCommand+0x64>
{
 8007904:	b500      	push	{lr}
 8007906:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8007908:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800790a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800790c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800790e:	2905      	cmp	r1, #5
 8007910:	dc1c      	bgt.n	800794c <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007912:	f7ff fe45 	bl	80075a0 <xTaskGetSchedulerState>
 8007916:	2802      	cmp	r0, #2
 8007918:	d010      	beq.n	800793c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800791a:	2300      	movs	r3, #0
 800791c:	461a      	mov	r2, r3
 800791e:	4669      	mov	r1, sp
 8007920:	480f      	ldr	r0, [pc, #60]	; (8007960 <xTimerGenericCommand+0x68>)
 8007922:	6800      	ldr	r0, [r0, #0]
 8007924:	f7fe fd35 	bl	8006392 <xQueueGenericSend>
 8007928:	e015      	b.n	8007956 <xTimerGenericCommand+0x5e>
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800793a:	e7fe      	b.n	800793a <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800793c:	2300      	movs	r3, #0
 800793e:	9a06      	ldr	r2, [sp, #24]
 8007940:	4669      	mov	r1, sp
 8007942:	4807      	ldr	r0, [pc, #28]	; (8007960 <xTimerGenericCommand+0x68>)
 8007944:	6800      	ldr	r0, [r0, #0]
 8007946:	f7fe fd24 	bl	8006392 <xQueueGenericSend>
 800794a:	e004      	b.n	8007956 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800794c:	2300      	movs	r3, #0
 800794e:	4662      	mov	r2, ip
 8007950:	4669      	mov	r1, sp
 8007952:	f7fe fe28 	bl	80065a6 <xQueueGenericSendFromISR>
}
 8007956:	b005      	add	sp, #20
 8007958:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800795c:	2000      	movs	r0, #0
}
 800795e:	4770      	bx	lr
 8007960:	20001d94 	.word	0x20001d94

08007964 <prvSwitchTimerLists>:
{
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007968:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <prvSwitchTimerLists+0x70>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	b352      	cbz	r2, 80079c6 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007974:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007976:	1d25      	adds	r5, r4, #4
 8007978:	4628      	mov	r0, r5
 800797a:	f7fe fb4b 	bl	8006014 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800797e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007980:	4620      	mov	r0, r4
 8007982:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007984:	69e3      	ldr	r3, [r4, #28]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d1ee      	bne.n	8007968 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800798a:	69a3      	ldr	r3, [r4, #24]
 800798c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800798e:	429e      	cmp	r6, r3
 8007990:	d207      	bcs.n	80079a2 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007992:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007994:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007996:	4629      	mov	r1, r5
 8007998:	4b0e      	ldr	r3, [pc, #56]	; (80079d4 <prvSwitchTimerLists+0x70>)
 800799a:	6818      	ldr	r0, [r3, #0]
 800799c:	f7fe fb21 	bl	8005fe2 <vListInsert>
 80079a0:	e7e2      	b.n	8007968 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079a2:	2100      	movs	r1, #0
 80079a4:	9100      	str	r1, [sp, #0]
 80079a6:	460b      	mov	r3, r1
 80079a8:	4632      	mov	r2, r6
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff ffa4 	bl	80078f8 <xTimerGenericCommand>
				configASSERT( xResult );
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d1d9      	bne.n	8007968 <prvSwitchTimerLists+0x4>
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	e7fe      	b.n	80079c4 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 80079c6:	4a04      	ldr	r2, [pc, #16]	; (80079d8 <prvSwitchTimerLists+0x74>)
 80079c8:	6810      	ldr	r0, [r2, #0]
 80079ca:	4902      	ldr	r1, [pc, #8]	; (80079d4 <prvSwitchTimerLists+0x70>)
 80079cc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80079ce:	6013      	str	r3, [r2, #0]
}
 80079d0:	b002      	add	sp, #8
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
 80079d4:	20001c70 	.word	0x20001c70
 80079d8:	20001c74 	.word	0x20001c74

080079dc <prvSampleTimeNow>:
{
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80079e0:	f7ff faf0 	bl	8006fc4 <xTaskGetTickCount>
 80079e4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80079e6:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <prvSampleTimeNow+0x28>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4283      	cmp	r3, r0
 80079ec:	d805      	bhi.n	80079fa <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80079f2:	4b04      	ldr	r3, [pc, #16]	; (8007a04 <prvSampleTimeNow+0x28>)
 80079f4:	601c      	str	r4, [r3, #0]
}
 80079f6:	4620      	mov	r0, r4
 80079f8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80079fa:	f7ff ffb3 	bl	8007964 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	e7f6      	b.n	80079f2 <prvSampleTimeNow+0x16>
 8007a04:	20001d40 	.word	0x20001d40

08007a08 <prvProcessExpiredTimer>:
{
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a10:	4914      	ldr	r1, [pc, #80]	; (8007a64 <prvProcessExpiredTimer+0x5c>)
 8007a12:	6809      	ldr	r1, [r1, #0]
 8007a14:	68c9      	ldr	r1, [r1, #12]
 8007a16:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a18:	1d20      	adds	r0, r4, #4
 8007a1a:	f7fe fafb 	bl	8006014 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a1e:	69e1      	ldr	r1, [r4, #28]
 8007a20:	2901      	cmp	r1, #1
 8007a22:	d004      	beq.n	8007a2e <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a26:	4620      	mov	r0, r4
 8007a28:	4798      	blx	r3
}
 8007a2a:	b002      	add	sp, #8
 8007a2c:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a2e:	69a1      	ldr	r1, [r4, #24]
 8007a30:	4633      	mov	r3, r6
 8007a32:	462a      	mov	r2, r5
 8007a34:	4431      	add	r1, r6
 8007a36:	4620      	mov	r0, r4
 8007a38:	f7ff fed0 	bl	80077dc <prvInsertTimerInActiveList>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d0f1      	beq.n	8007a24 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a40:	2100      	movs	r1, #0
 8007a42:	9100      	str	r1, [sp, #0]
 8007a44:	460b      	mov	r3, r1
 8007a46:	4632      	mov	r2, r6
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f7ff ff55 	bl	80078f8 <xTimerGenericCommand>
			configASSERT( xResult );
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d1e8      	bne.n	8007a24 <prvProcessExpiredTimer+0x1c>
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	e7fe      	b.n	8007a62 <prvProcessExpiredTimer+0x5a>
 8007a64:	20001c70 	.word	0x20001c70

08007a68 <prvProcessTimerOrBlockTask>:
{
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8007a70:	f7ff faa0 	bl	8006fb4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a74:	a801      	add	r0, sp, #4
 8007a76:	f7ff ffb1 	bl	80079dc <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	bb2b      	cbnz	r3, 8007aca <prvProcessTimerOrBlockTask+0x62>
 8007a7e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a80:	b90c      	cbnz	r4, 8007a86 <prvProcessTimerOrBlockTask+0x1e>
 8007a82:	42b0      	cmp	r0, r6
 8007a84:	d21a      	bcs.n	8007abc <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 8007a86:	b12c      	cbz	r4, 8007a94 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a88:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <prvProcessTimerOrBlockTask+0x6c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681c      	ldr	r4, [r3, #0]
 8007a8e:	fab4 f484 	clz	r4, r4
 8007a92:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a94:	4622      	mov	r2, r4
 8007a96:	1b71      	subs	r1, r6, r5
 8007a98:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <prvProcessTimerOrBlockTask+0x70>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	f7ff f822 	bl	8006ae4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007aa0:	f7ff fb22 	bl	80070e8 <xTaskResumeAll>
 8007aa4:	b998      	cbnz	r0, 8007ace <prvProcessTimerOrBlockTask+0x66>
					portYIELD_WITHIN_API();
 8007aa6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	e008      	b.n	8007ace <prvProcessTimerOrBlockTask+0x66>
				( void ) xTaskResumeAll();
 8007abc:	f7ff fb14 	bl	80070e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	f7ff ffa0 	bl	8007a08 <prvProcessExpiredTimer>
 8007ac8:	e001      	b.n	8007ace <prvProcessTimerOrBlockTask+0x66>
			( void ) xTaskResumeAll();
 8007aca:	f7ff fb0d 	bl	80070e8 <xTaskResumeAll>
}
 8007ace:	b002      	add	sp, #8
 8007ad0:	bd70      	pop	{r4, r5, r6, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20001c74 	.word	0x20001c74
 8007ad8:	20001d94 	.word	0x20001d94

08007adc <prvProcessReceivedCommands>:
{
 8007adc:	b510      	push	{r4, lr}
 8007ade:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ae0:	e002      	b.n	8007ae8 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ae2:	9b04      	ldr	r3, [sp, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da0f      	bge.n	8007b08 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ae8:	2200      	movs	r2, #0
 8007aea:	a904      	add	r1, sp, #16
 8007aec:	4b38      	ldr	r3, [pc, #224]	; (8007bd0 <prvProcessReceivedCommands+0xf4>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	f7fe fdbf 	bl	8006672 <xQueueReceive>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d069      	beq.n	8007bcc <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	daf1      	bge.n	8007ae2 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007afe:	9907      	ldr	r1, [sp, #28]
 8007b00:	9806      	ldr	r0, [sp, #24]
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	4798      	blx	r3
 8007b06:	e7ec      	b.n	8007ae2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b08:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b0a:	6963      	ldr	r3, [r4, #20]
 8007b0c:	b113      	cbz	r3, 8007b14 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b0e:	1d20      	adds	r0, r4, #4
 8007b10:	f7fe fa80 	bl	8006014 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b14:	a803      	add	r0, sp, #12
 8007b16:	f7ff ff61 	bl	80079dc <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8007b1a:	9b04      	ldr	r3, [sp, #16]
 8007b1c:	2b09      	cmp	r3, #9
 8007b1e:	d8e3      	bhi.n	8007ae8 <prvProcessReceivedCommands+0xc>
 8007b20:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <prvProcessReceivedCommands+0x4c>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b51 	.word	0x08007b51
 8007b30:	08007b51 	.word	0x08007b51
 8007b34:	08007ae9 	.word	0x08007ae9
 8007b38:	08007b97 	.word	0x08007b97
 8007b3c:	08007bbd 	.word	0x08007bbd
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b51 	.word	0x08007b51
 8007b48:	08007ae9 	.word	0x08007ae9
 8007b4c:	08007b97 	.word	0x08007b97
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	69a1      	ldr	r1, [r4, #24]
 8007b54:	4602      	mov	r2, r0
 8007b56:	4419      	add	r1, r3
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f7ff fe3f 	bl	80077dc <prvInsertTimerInActiveList>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0c2      	beq.n	8007ae8 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b64:	4620      	mov	r0, r4
 8007b66:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b68:	69e3      	ldr	r3, [r4, #28]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d1bc      	bne.n	8007ae8 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b6e:	69a2      	ldr	r2, [r4, #24]
 8007b70:	2100      	movs	r1, #0
 8007b72:	9100      	str	r1, [sp, #0]
 8007b74:	460b      	mov	r3, r1
 8007b76:	9805      	ldr	r0, [sp, #20]
 8007b78:	4402      	add	r2, r0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7ff febc 	bl	80078f8 <xTimerGenericCommand>
							configASSERT( xResult );
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1b1      	bne.n	8007ae8 <prvProcessReceivedCommands+0xc>
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	e7fe      	b.n	8007b94 <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b96:	9905      	ldr	r1, [sp, #20]
 8007b98:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b9a:	b131      	cbz	r1, 8007baa <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4401      	add	r1, r0
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f7ff fe1a 	bl	80077dc <prvInsertTimerInActiveList>
					break;
 8007ba8:	e79e      	b.n	8007ae8 <prvProcessReceivedCommands+0xc>
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bba:	e7fe      	b.n	8007bba <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007bbc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d191      	bne.n	8007ae8 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f000 fa6f 	bl	80080a8 <vPortFree>
 8007bca:	e78d      	b.n	8007ae8 <prvProcessReceivedCommands+0xc>
}
 8007bcc:	b008      	add	sp, #32
 8007bce:	bd10      	pop	{r4, pc}
 8007bd0:	20001d94 	.word	0x20001d94

08007bd4 <prvTimerTask>:
{
 8007bd4:	b500      	push	{lr}
 8007bd6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007bd8:	a801      	add	r0, sp, #4
 8007bda:	f7ff fdef 	bl	80077bc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bde:	9901      	ldr	r1, [sp, #4]
 8007be0:	f7ff ff42 	bl	8007a68 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8007be4:	f7ff ff7a 	bl	8007adc <prvProcessReceivedCommands>
	for( ;; )
 8007be8:	e7f6      	b.n	8007bd8 <prvTimerTask+0x4>
	...

08007bec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007bec:	b510      	push	{r4, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	461a      	mov	r2, r3
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007bf4:	f06f 0301 	mvn.w	r3, #1
 8007bf8:	9300      	str	r3, [sp, #0]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007bfa:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007bfc:	9102      	str	r1, [sp, #8]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007bfe:	9403      	str	r4, [sp, #12]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c00:	2300      	movs	r3, #0
 8007c02:	4669      	mov	r1, sp
 8007c04:	4802      	ldr	r0, [pc, #8]	; (8007c10 <xTimerPendFunctionCallFromISR+0x24>)
 8007c06:	6800      	ldr	r0, [r0, #0]
 8007c08:	f7fe fccd 	bl	80065a6 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8007c0c:	b004      	add	sp, #16
 8007c0e:	bd10      	pop	{r4, pc}
 8007c10:	20001d94 	.word	0x20001d94

08007c14 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c14:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8007c16:	2300      	movs	r3, #0
 8007c18:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	; (8007c50 <prvTaskExitError+0x3c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d008      	beq.n	8007c36 <prvTaskExitError+0x22>
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	e7fe      	b.n	8007c34 <prvTaskExitError+0x20>
 8007c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d0fc      	beq.n	8007c46 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c4c:	b002      	add	sp, #8
 8007c4e:	4770      	bx	lr
 8007c50:	200008b4 	.word	0x200008b4

08007c54 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007c54:	4806      	ldr	r0, [pc, #24]	; (8007c70 <prvPortStartFirstTask+0x1c>)
 8007c56:	6800      	ldr	r0, [r0, #0]
 8007c58:	6800      	ldr	r0, [r0, #0]
 8007c5a:	f380 8808 	msr	MSP, r0
 8007c5e:	b662      	cpsie	i
 8007c60:	b661      	cpsie	f
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	df00      	svc	0
 8007c6c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c6e:	0000      	.short	0x0000
 8007c70:	e000ed08 	.word	0xe000ed08

08007c74 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c78:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c7c:	f021 0101 	bic.w	r1, r1, #1
 8007c80:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c84:	4b03      	ldr	r3, [pc, #12]	; (8007c94 <pxPortInitialiseStack+0x20>)
 8007c86:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c8a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007c8e:	3840      	subs	r0, #64	; 0x40
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	08007c15 	.word	0x08007c15
	...

08007ca0 <SVC_Handler>:
	__asm volatile (
 8007ca0:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <pxCurrentTCBConst2>)
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007caa:	f380 8809 	msr	PSP, r0
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8811 	msr	BASEPRI, r0
 8007cba:	f04e 0e0d 	orr.w	lr, lr, #13
 8007cbe:	4770      	bx	lr

08007cc0 <pxCurrentTCBConst2>:
 8007cc0:	20001770 	.word	0x20001770

08007cc4 <vPortEnterCritical>:
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cd4:	4a0b      	ldr	r2, [pc, #44]	; (8007d04 <vPortEnterCritical+0x40>)
 8007cd6:	6813      	ldr	r3, [r2, #0]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d000      	beq.n	8007ce2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8007ce0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ce2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ce6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8007cea:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007cee:	d0f7      	beq.n	8007ce0 <vPortEnterCritical+0x1c>
 8007cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	e7fe      	b.n	8007d00 <vPortEnterCritical+0x3c>
 8007d02:	bf00      	nop
 8007d04:	200008b4 	.word	0x200008b4

08007d08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8007d08:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <vPortExitCritical+0x28>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	b943      	cbnz	r3, 8007d20 <vPortExitCritical+0x18>
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	e7fe      	b.n	8007d1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007d20:	3b01      	subs	r3, #1
 8007d22:	4a03      	ldr	r2, [pc, #12]	; (8007d30 <vPortExitCritical+0x28>)
 8007d24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d26:	b90b      	cbnz	r3, 8007d2c <vPortExitCritical+0x24>
	__asm volatile
 8007d28:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	200008b4 	.word	0x200008b4
	...

08007d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d40:	f3ef 8009 	mrs	r0, PSP
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <pxCurrentTCBConst>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d50:	6010      	str	r0, [r2, #0]
 8007d52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d56:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d5a:	f380 8811 	msr	BASEPRI, r0
 8007d5e:	f7ff fa91 	bl	8007284 <vTaskSwitchContext>
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8811 	msr	BASEPRI, r0
 8007d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	6808      	ldr	r0, [r1, #0]
 8007d72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d76:	f380 8809 	msr	PSP, r0
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	4770      	bx	lr

08007d80 <pxCurrentTCBConst>:
 8007d80:	20001770 	.word	0x20001770

08007d84 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d84:	b508      	push	{r3, lr}
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d96:	f7ff f91b 	bl	8006fd0 <xTaskIncrementTick>
 8007d9a:	b128      	cbz	r0, 8007da8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8007da8:	2300      	movs	r3, #0
 8007daa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dae:	bd08      	pop	{r3, pc}

08007db0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007db0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007db4:	2300      	movs	r3, #0
 8007db6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007db8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <vPortSetupTimerInterrupt+0x20>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4905      	ldr	r1, [pc, #20]	; (8007dd4 <vPortSetupTimerInterrupt+0x24>)
 8007dc0:	fba1 1303 	umull	r1, r3, r1, r3
 8007dc4:	099b      	lsrs	r3, r3, #6
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dca:	2307      	movs	r3, #7
 8007dcc:	6113      	str	r3, [r2, #16]
}
 8007dce:	4770      	bx	lr
 8007dd0:	20000020 	.word	0x20000020
 8007dd4:	10624dd3 	.word	0x10624dd3

08007dd8 <xPortStartScheduler>:
{
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ddc:	4b2a      	ldr	r3, [pc, #168]	; (8007e88 <xPortStartScheduler+0xb0>)
 8007dde:	781a      	ldrb	r2, [r3, #0]
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007de4:	22ff      	movs	r2, #255	; 0xff
 8007de6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007df0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007df8:	4a24      	ldr	r2, [pc, #144]	; (8007e8c <xPortStartScheduler+0xb4>)
 8007dfa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dfc:	4b24      	ldr	r3, [pc, #144]	; (8007e90 <xPortStartScheduler+0xb8>)
 8007dfe:	2207      	movs	r2, #7
 8007e00:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e02:	e009      	b.n	8007e18 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8007e04:	4a22      	ldr	r2, [pc, #136]	; (8007e90 <xPortStartScheduler+0xb8>)
 8007e06:	6813      	ldr	r3, [r2, #0]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e0c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e18:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007e1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007e20:	d1f0      	bne.n	8007e04 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e22:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <xPortStartScheduler+0xb8>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d008      	beq.n	8007e3c <xPortStartScheduler+0x64>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	e7fe      	b.n	8007e3a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	4a14      	ldr	r2, [pc, #80]	; (8007e90 <xPortStartScheduler+0xb8>)
 8007e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e46:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	4a0e      	ldr	r2, [pc, #56]	; (8007e88 <xPortStartScheduler+0xb0>)
 8007e4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e50:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e54:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007e58:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007e5c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e60:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8007e64:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007e68:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8007e6c:	f7ff ffa0 	bl	8007db0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007e70:	2400      	movs	r4, #0
 8007e72:	4b08      	ldr	r3, [pc, #32]	; (8007e94 <xPortStartScheduler+0xbc>)
 8007e74:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8007e76:	f7ff feed 	bl	8007c54 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007e7a:	f7ff fa03 	bl	8007284 <vTaskSwitchContext>
	prvTaskExitError();
 8007e7e:	f7ff fec9 	bl	8007c14 <prvTaskExitError>
}
 8007e82:	4620      	mov	r0, r4
 8007e84:	b002      	add	sp, #8
 8007e86:	bd10      	pop	{r4, pc}
 8007e88:	e000e400 	.word	0xe000e400
 8007e8c:	20001d9c 	.word	0x20001d9c
 8007e90:	20001da0 	.word	0x20001da0
 8007e94:	200008b4 	.word	0x200008b4

08007e98 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e98:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e9c:	2b0f      	cmp	r3, #15
 8007e9e:	d90f      	bls.n	8007ec0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ea0:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <vPortValidateInterruptPriority+0x50>)
 8007ea2:	5c9b      	ldrb	r3, [r3, r2]
 8007ea4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ea6:	4a11      	ldr	r2, [pc, #68]	; (8007eec <vPortValidateInterruptPriority+0x54>)
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d908      	bls.n	8007ec0 <vPortValidateInterruptPriority+0x28>
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	e7fe      	b.n	8007ebe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ec0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007ec4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8007ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ecc:	4a08      	ldr	r2, [pc, #32]	; (8007ef0 <vPortValidateInterruptPriority+0x58>)
 8007ece:	6812      	ldr	r2, [r2, #0]
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d908      	bls.n	8007ee6 <vPortValidateInterruptPriority+0x4e>
 8007ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	e7fe      	b.n	8007ee4 <vPortValidateInterruptPriority+0x4c>
	}
 8007ee6:	4770      	bx	lr
 8007ee8:	e000e3f0 	.word	0xe000e3f0
 8007eec:	20001d9c 	.word	0x20001d9c
 8007ef0:	20001da0 	.word	0x20001da0

08007ef4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ef4:	4a12      	ldr	r2, [pc, #72]	; (8007f40 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ef6:	f012 0f07 	tst.w	r2, #7
 8007efa:	d01e      	beq.n	8007f3a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007efc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007efe:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f02:	f5c1 637a 	rsb	r3, r1, #4000	; 0xfa0
 8007f06:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f08:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f0a:	480e      	ldr	r0, [pc, #56]	; (8007f44 <prvHeapInit+0x50>)
 8007f0c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f12:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007f14:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f16:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007f1a:	480b      	ldr	r0, [pc, #44]	; (8007f48 <prvHeapInit+0x54>)
 8007f1c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007f1e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f20:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f22:	1a99      	subs	r1, r3, r2
 8007f24:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f26:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f28:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <prvHeapInit+0x58>)
 8007f2a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f2c:	4b08      	ldr	r3, [pc, #32]	; (8007f50 <prvHeapInit+0x5c>)
 8007f2e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f30:	4b08      	ldr	r3, [pc, #32]	; (8007f54 <prvHeapInit+0x60>)
 8007f32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f36:	601a      	str	r2, [r3, #0]
}
 8007f38:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f3a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007f3e:	e7e4      	b.n	8007f0a <prvHeapInit+0x16>
 8007f40:	20001da8 	.word	0x20001da8
 8007f44:	20002d54 	.word	0x20002d54
 8007f48:	20001da4 	.word	0x20001da4
 8007f4c:	20002d50 	.word	0x20002d50
 8007f50:	20002d4c 	.word	0x20002d4c
 8007f54:	20002d48 	.word	0x20002d48

08007f58 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <prvInsertBlockIntoFreeList+0x58>)
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4283      	cmp	r3, r0
 8007f60:	d3fb      	bcc.n	8007f5a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f62:	6851      	ldr	r1, [r2, #4]
 8007f64:	eb02 0c01 	add.w	ip, r2, r1
 8007f68:	4584      	cmp	ip, r0
 8007f6a:	d009      	beq.n	8007f80 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f6c:	6841      	ldr	r1, [r0, #4]
 8007f6e:	eb00 0c01 	add.w	ip, r0, r1
 8007f72:	4563      	cmp	r3, ip
 8007f74:	d009      	beq.n	8007f8a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f76:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f78:	4290      	cmp	r0, r2
 8007f7a:	d018      	beq.n	8007fae <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f7c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8007f7e:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f80:	6840      	ldr	r0, [r0, #4]
 8007f82:	4401      	add	r1, r0
 8007f84:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007f86:	4610      	mov	r0, r2
 8007f88:	e7f0      	b.n	8007f6c <prvInsertBlockIntoFreeList+0x14>
{
 8007f8a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f8c:	4c09      	ldr	r4, [pc, #36]	; (8007fb4 <prvInsertBlockIntoFreeList+0x5c>)
 8007f8e:	6824      	ldr	r4, [r4, #0]
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	d00a      	beq.n	8007faa <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	4419      	add	r1, r3
 8007f98:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f9a:	6813      	ldr	r3, [r2, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8007fa0:	4290      	cmp	r0, r2
 8007fa2:	d000      	beq.n	8007fa6 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fa4:	6010      	str	r0, [r2, #0]
	}
}
 8007fa6:	bc10      	pop	{r4}
 8007fa8:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007faa:	6004      	str	r4, [r0, #0]
 8007fac:	e7f8      	b.n	8007fa0 <prvInsertBlockIntoFreeList+0x48>
 8007fae:	4770      	bx	lr
 8007fb0:	20002d54 	.word	0x20002d54
 8007fb4:	20001da4 	.word	0x20001da4

08007fb8 <pvPortMalloc>:
{
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8007fbc:	f7fe fffa 	bl	8006fb4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007fc0:	4b34      	ldr	r3, [pc, #208]	; (8008094 <pvPortMalloc+0xdc>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	b1a3      	cbz	r3, 8007ff0 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc6:	4b34      	ldr	r3, [pc, #208]	; (8008098 <pvPortMalloc+0xe0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	421d      	tst	r5, r3
 8007fcc:	d14a      	bne.n	8008064 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 8007fce:	b135      	cbz	r5, 8007fde <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8007fd0:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fd2:	f015 0f07 	tst.w	r5, #7
 8007fd6:	d002      	beq.n	8007fde <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fd8:	f025 0507 	bic.w	r5, r5, #7
 8007fdc:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	d042      	beq.n	8008068 <pvPortMalloc+0xb0>
 8007fe2:	4b2e      	ldr	r3, [pc, #184]	; (800809c <pvPortMalloc+0xe4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	42ab      	cmp	r3, r5
 8007fe8:	d34d      	bcc.n	8008086 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 8007fea:	4a2d      	ldr	r2, [pc, #180]	; (80080a0 <pvPortMalloc+0xe8>)
 8007fec:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007fee:	e004      	b.n	8007ffa <pvPortMalloc+0x42>
			prvHeapInit();
 8007ff0:	f7ff ff80 	bl	8007ef4 <prvHeapInit>
 8007ff4:	e7e7      	b.n	8007fc6 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8007ff6:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ff8:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ffa:	6863      	ldr	r3, [r4, #4]
 8007ffc:	42ab      	cmp	r3, r5
 8007ffe:	d202      	bcs.n	8008006 <pvPortMalloc+0x4e>
 8008000:	6823      	ldr	r3, [r4, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f7      	bne.n	8007ff6 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8008006:	4b23      	ldr	r3, [pc, #140]	; (8008094 <pvPortMalloc+0xdc>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	42a3      	cmp	r3, r4
 800800c:	d03d      	beq.n	800808a <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800800e:	6816      	ldr	r6, [r2, #0]
 8008010:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008016:	6863      	ldr	r3, [r4, #4]
 8008018:	1b5b      	subs	r3, r3, r5
 800801a:	2b10      	cmp	r3, #16
 800801c:	d910      	bls.n	8008040 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800801e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008020:	f010 0f07 	tst.w	r0, #7
 8008024:	d008      	beq.n	8008038 <pvPortMalloc+0x80>
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	e7fe      	b.n	8008036 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008038:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800803a:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800803c:	f7ff ff8c 	bl	8007f58 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008040:	6862      	ldr	r2, [r4, #4]
 8008042:	4916      	ldr	r1, [pc, #88]	; (800809c <pvPortMalloc+0xe4>)
 8008044:	680b      	ldr	r3, [r1, #0]
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800804a:	4916      	ldr	r1, [pc, #88]	; (80080a4 <pvPortMalloc+0xec>)
 800804c:	6809      	ldr	r1, [r1, #0]
 800804e:	428b      	cmp	r3, r1
 8008050:	d201      	bcs.n	8008056 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008052:	4914      	ldr	r1, [pc, #80]	; (80080a4 <pvPortMalloc+0xec>)
 8008054:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008056:	4b10      	ldr	r3, [pc, #64]	; (8008098 <pvPortMalloc+0xe0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4313      	orrs	r3, r2
 800805c:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	e002      	b.n	800806a <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8008064:	2600      	movs	r6, #0
 8008066:	e000      	b.n	800806a <pvPortMalloc+0xb2>
 8008068:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800806a:	f7ff f83d 	bl	80070e8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800806e:	f016 0f07 	tst.w	r6, #7
 8008072:	d00c      	beq.n	800808e <pvPortMalloc+0xd6>
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	e7fe      	b.n	8008084 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8008086:	2600      	movs	r6, #0
 8008088:	e7ef      	b.n	800806a <pvPortMalloc+0xb2>
 800808a:	2600      	movs	r6, #0
 800808c:	e7ed      	b.n	800806a <pvPortMalloc+0xb2>
}
 800808e:	4630      	mov	r0, r6
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	bf00      	nop
 8008094:	20001da4 	.word	0x20001da4
 8008098:	20002d48 	.word	0x20002d48
 800809c:	20002d4c 	.word	0x20002d4c
 80080a0:	20002d54 	.word	0x20002d54
 80080a4:	20002d50 	.word	0x20002d50

080080a8 <vPortFree>:
	if( pv != NULL )
 80080a8:	b380      	cbz	r0, 800810c <vPortFree+0x64>
{
 80080aa:	b538      	push	{r3, r4, r5, lr}
 80080ac:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80080ae:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80080b6:	4a16      	ldr	r2, [pc, #88]	; (8008110 <vPortFree+0x68>)
 80080b8:	6812      	ldr	r2, [r2, #0]
 80080ba:	4213      	tst	r3, r2
 80080bc:	d108      	bne.n	80080d0 <vPortFree+0x28>
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	e7fe      	b.n	80080ce <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080d0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80080d4:	b141      	cbz	r1, 80080e8 <vPortFree+0x40>
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	e7fe      	b.n	80080e6 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080e8:	ea23 0302 	bic.w	r3, r3, r2
 80080ec:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80080f0:	f7fe ff60 	bl	8006fb4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080f4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80080f8:	4a06      	ldr	r2, [pc, #24]	; (8008114 <vPortFree+0x6c>)
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	440b      	add	r3, r1
 80080fe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008100:	4628      	mov	r0, r5
 8008102:	f7ff ff29 	bl	8007f58 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8008106:	f7fe ffef 	bl	80070e8 <xTaskResumeAll>
}
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20002d48 	.word	0x20002d48
 8008114:	20002d4c 	.word	0x20002d4c

08008118 <__itoa>:
 8008118:	1e93      	subs	r3, r2, #2
 800811a:	2b22      	cmp	r3, #34	; 0x22
 800811c:	b510      	push	{r4, lr}
 800811e:	460c      	mov	r4, r1
 8008120:	d904      	bls.n	800812c <__itoa+0x14>
 8008122:	2300      	movs	r3, #0
 8008124:	461c      	mov	r4, r3
 8008126:	700b      	strb	r3, [r1, #0]
 8008128:	4620      	mov	r0, r4
 800812a:	bd10      	pop	{r4, pc}
 800812c:	2a0a      	cmp	r2, #10
 800812e:	d109      	bne.n	8008144 <__itoa+0x2c>
 8008130:	2800      	cmp	r0, #0
 8008132:	da07      	bge.n	8008144 <__itoa+0x2c>
 8008134:	232d      	movs	r3, #45	; 0x2d
 8008136:	700b      	strb	r3, [r1, #0]
 8008138:	2101      	movs	r1, #1
 800813a:	4240      	negs	r0, r0
 800813c:	4421      	add	r1, r4
 800813e:	f000 f843 	bl	80081c8 <__utoa>
 8008142:	e7f1      	b.n	8008128 <__itoa+0x10>
 8008144:	2100      	movs	r1, #0
 8008146:	e7f9      	b.n	800813c <__itoa+0x24>

08008148 <itoa>:
 8008148:	f7ff bfe6 	b.w	8008118 <__itoa>

0800814c <rand>:
 800814c:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <rand+0x5c>)
 800814e:	b510      	push	{r4, lr}
 8008150:	681c      	ldr	r4, [r3, #0]
 8008152:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008154:	b9b3      	cbnz	r3, 8008184 <rand+0x38>
 8008156:	2018      	movs	r0, #24
 8008158:	f000 fa76 	bl	8008648 <malloc>
 800815c:	4602      	mov	r2, r0
 800815e:	6320      	str	r0, [r4, #48]	; 0x30
 8008160:	b920      	cbnz	r0, 800816c <rand+0x20>
 8008162:	2152      	movs	r1, #82	; 0x52
 8008164:	4b11      	ldr	r3, [pc, #68]	; (80081ac <rand+0x60>)
 8008166:	4812      	ldr	r0, [pc, #72]	; (80081b0 <rand+0x64>)
 8008168:	f000 fa08 	bl	800857c <__assert_func>
 800816c:	4911      	ldr	r1, [pc, #68]	; (80081b4 <rand+0x68>)
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <rand+0x6c>)
 8008170:	e9c0 1300 	strd	r1, r3, [r0]
 8008174:	4b11      	ldr	r3, [pc, #68]	; (80081bc <rand+0x70>)
 8008176:	2100      	movs	r1, #0
 8008178:	6083      	str	r3, [r0, #8]
 800817a:	230b      	movs	r3, #11
 800817c:	8183      	strh	r3, [r0, #12]
 800817e:	2001      	movs	r0, #1
 8008180:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008184:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008186:	480e      	ldr	r0, [pc, #56]	; (80081c0 <rand+0x74>)
 8008188:	690b      	ldr	r3, [r1, #16]
 800818a:	694c      	ldr	r4, [r1, #20]
 800818c:	4358      	muls	r0, r3
 800818e:	4a0d      	ldr	r2, [pc, #52]	; (80081c4 <rand+0x78>)
 8008190:	fb02 0004 	mla	r0, r2, r4, r0
 8008194:	fba3 3202 	umull	r3, r2, r3, r2
 8008198:	3301      	adds	r3, #1
 800819a:	eb40 0002 	adc.w	r0, r0, r2
 800819e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80081a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000910 	.word	0x20000910
 80081ac:	08009ef8 	.word	0x08009ef8
 80081b0:	08009f0f 	.word	0x08009f0f
 80081b4:	abcd330e 	.word	0xabcd330e
 80081b8:	e66d1234 	.word	0xe66d1234
 80081bc:	0005deec 	.word	0x0005deec
 80081c0:	5851f42d 	.word	0x5851f42d
 80081c4:	4c957f2d 	.word	0x4c957f2d

080081c8 <__utoa>:
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	b08b      	sub	sp, #44	; 0x2c
 80081cc:	4605      	mov	r5, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	466e      	mov	r6, sp
 80081d2:	4c1d      	ldr	r4, [pc, #116]	; (8008248 <__utoa+0x80>)
 80081d4:	f104 0c20 	add.w	ip, r4, #32
 80081d8:	4637      	mov	r7, r6
 80081da:	6820      	ldr	r0, [r4, #0]
 80081dc:	6861      	ldr	r1, [r4, #4]
 80081de:	3408      	adds	r4, #8
 80081e0:	c703      	stmia	r7!, {r0, r1}
 80081e2:	4564      	cmp	r4, ip
 80081e4:	463e      	mov	r6, r7
 80081e6:	d1f7      	bne.n	80081d8 <__utoa+0x10>
 80081e8:	7921      	ldrb	r1, [r4, #4]
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	7139      	strb	r1, [r7, #4]
 80081ee:	1e91      	subs	r1, r2, #2
 80081f0:	2922      	cmp	r1, #34	; 0x22
 80081f2:	6038      	str	r0, [r7, #0]
 80081f4:	f04f 0100 	mov.w	r1, #0
 80081f8:	d904      	bls.n	8008204 <__utoa+0x3c>
 80081fa:	7019      	strb	r1, [r3, #0]
 80081fc:	460b      	mov	r3, r1
 80081fe:	4618      	mov	r0, r3
 8008200:	b00b      	add	sp, #44	; 0x2c
 8008202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008204:	1e58      	subs	r0, r3, #1
 8008206:	4684      	mov	ip, r0
 8008208:	fbb5 f7f2 	udiv	r7, r5, r2
 800820c:	fb02 5617 	mls	r6, r2, r7, r5
 8008210:	3628      	adds	r6, #40	; 0x28
 8008212:	446e      	add	r6, sp
 8008214:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008218:	460c      	mov	r4, r1
 800821a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800821e:	462e      	mov	r6, r5
 8008220:	42b2      	cmp	r2, r6
 8008222:	463d      	mov	r5, r7
 8008224:	f101 0101 	add.w	r1, r1, #1
 8008228:	d9ee      	bls.n	8008208 <__utoa+0x40>
 800822a:	2200      	movs	r2, #0
 800822c:	545a      	strb	r2, [r3, r1]
 800822e:	1919      	adds	r1, r3, r4
 8008230:	1aa5      	subs	r5, r4, r2
 8008232:	42aa      	cmp	r2, r5
 8008234:	dae3      	bge.n	80081fe <__utoa+0x36>
 8008236:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800823a:	780e      	ldrb	r6, [r1, #0]
 800823c:	3201      	adds	r2, #1
 800823e:	7006      	strb	r6, [r0, #0]
 8008240:	f801 5901 	strb.w	r5, [r1], #-1
 8008244:	e7f4      	b.n	8008230 <__utoa+0x68>
 8008246:	bf00      	nop
 8008248:	08009f67 	.word	0x08009f67

0800824c <std>:
 800824c:	2300      	movs	r3, #0
 800824e:	b510      	push	{r4, lr}
 8008250:	4604      	mov	r4, r0
 8008252:	e9c0 3300 	strd	r3, r3, [r0]
 8008256:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800825a:	6083      	str	r3, [r0, #8]
 800825c:	8181      	strh	r1, [r0, #12]
 800825e:	6643      	str	r3, [r0, #100]	; 0x64
 8008260:	81c2      	strh	r2, [r0, #14]
 8008262:	6183      	str	r3, [r0, #24]
 8008264:	4619      	mov	r1, r3
 8008266:	2208      	movs	r2, #8
 8008268:	305c      	adds	r0, #92	; 0x5c
 800826a:	f000 f8f4 	bl	8008456 <memset>
 800826e:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <std+0x58>)
 8008270:	6224      	str	r4, [r4, #32]
 8008272:	6263      	str	r3, [r4, #36]	; 0x24
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <std+0x5c>)
 8008276:	62a3      	str	r3, [r4, #40]	; 0x28
 8008278:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <std+0x60>)
 800827a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800827c:	4b0c      	ldr	r3, [pc, #48]	; (80082b0 <std+0x64>)
 800827e:	6323      	str	r3, [r4, #48]	; 0x30
 8008280:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <std+0x68>)
 8008282:	429c      	cmp	r4, r3
 8008284:	d006      	beq.n	8008294 <std+0x48>
 8008286:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800828a:	4294      	cmp	r4, r2
 800828c:	d002      	beq.n	8008294 <std+0x48>
 800828e:	33d0      	adds	r3, #208	; 0xd0
 8008290:	429c      	cmp	r4, r3
 8008292:	d105      	bne.n	80082a0 <std+0x54>
 8008294:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800829c:	f000 b954 	b.w	8008548 <__retarget_lock_init_recursive>
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	bf00      	nop
 80082a4:	080083d1 	.word	0x080083d1
 80082a8:	080083f3 	.word	0x080083f3
 80082ac:	0800842b 	.word	0x0800842b
 80082b0:	0800844f 	.word	0x0800844f
 80082b4:	20002d5c 	.word	0x20002d5c

080082b8 <stdio_exit_handler>:
 80082b8:	4a02      	ldr	r2, [pc, #8]	; (80082c4 <stdio_exit_handler+0xc>)
 80082ba:	4903      	ldr	r1, [pc, #12]	; (80082c8 <stdio_exit_handler+0x10>)
 80082bc:	4803      	ldr	r0, [pc, #12]	; (80082cc <stdio_exit_handler+0x14>)
 80082be:	f000 b869 	b.w	8008394 <_fwalk_sglue>
 80082c2:	bf00      	nop
 80082c4:	200008b8 	.word	0x200008b8
 80082c8:	080088b5 	.word	0x080088b5
 80082cc:	200008c4 	.word	0x200008c4

080082d0 <cleanup_stdio>:
 80082d0:	6841      	ldr	r1, [r0, #4]
 80082d2:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <cleanup_stdio+0x34>)
 80082d4:	b510      	push	{r4, lr}
 80082d6:	4299      	cmp	r1, r3
 80082d8:	4604      	mov	r4, r0
 80082da:	d001      	beq.n	80082e0 <cleanup_stdio+0x10>
 80082dc:	f000 faea 	bl	80088b4 <_fflush_r>
 80082e0:	68a1      	ldr	r1, [r4, #8]
 80082e2:	4b09      	ldr	r3, [pc, #36]	; (8008308 <cleanup_stdio+0x38>)
 80082e4:	4299      	cmp	r1, r3
 80082e6:	d002      	beq.n	80082ee <cleanup_stdio+0x1e>
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 fae3 	bl	80088b4 <_fflush_r>
 80082ee:	68e1      	ldr	r1, [r4, #12]
 80082f0:	4b06      	ldr	r3, [pc, #24]	; (800830c <cleanup_stdio+0x3c>)
 80082f2:	4299      	cmp	r1, r3
 80082f4:	d004      	beq.n	8008300 <cleanup_stdio+0x30>
 80082f6:	4620      	mov	r0, r4
 80082f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082fc:	f000 bada 	b.w	80088b4 <_fflush_r>
 8008300:	bd10      	pop	{r4, pc}
 8008302:	bf00      	nop
 8008304:	20002d5c 	.word	0x20002d5c
 8008308:	20002dc4 	.word	0x20002dc4
 800830c:	20002e2c 	.word	0x20002e2c

08008310 <global_stdio_init.part.0>:
 8008310:	b510      	push	{r4, lr}
 8008312:	4b0b      	ldr	r3, [pc, #44]	; (8008340 <global_stdio_init.part.0+0x30>)
 8008314:	4c0b      	ldr	r4, [pc, #44]	; (8008344 <global_stdio_init.part.0+0x34>)
 8008316:	4a0c      	ldr	r2, [pc, #48]	; (8008348 <global_stdio_init.part.0+0x38>)
 8008318:	4620      	mov	r0, r4
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	2104      	movs	r1, #4
 800831e:	2200      	movs	r2, #0
 8008320:	f7ff ff94 	bl	800824c <std>
 8008324:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008328:	2201      	movs	r2, #1
 800832a:	2109      	movs	r1, #9
 800832c:	f7ff ff8e 	bl	800824c <std>
 8008330:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008334:	2202      	movs	r2, #2
 8008336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800833a:	2112      	movs	r1, #18
 800833c:	f7ff bf86 	b.w	800824c <std>
 8008340:	20002e94 	.word	0x20002e94
 8008344:	20002d5c 	.word	0x20002d5c
 8008348:	080082b9 	.word	0x080082b9

0800834c <__sfp_lock_acquire>:
 800834c:	4801      	ldr	r0, [pc, #4]	; (8008354 <__sfp_lock_acquire+0x8>)
 800834e:	f000 b8fc 	b.w	800854a <__retarget_lock_acquire_recursive>
 8008352:	bf00      	nop
 8008354:	20002e9d 	.word	0x20002e9d

08008358 <__sfp_lock_release>:
 8008358:	4801      	ldr	r0, [pc, #4]	; (8008360 <__sfp_lock_release+0x8>)
 800835a:	f000 b8f7 	b.w	800854c <__retarget_lock_release_recursive>
 800835e:	bf00      	nop
 8008360:	20002e9d 	.word	0x20002e9d

08008364 <__sinit>:
 8008364:	b510      	push	{r4, lr}
 8008366:	4604      	mov	r4, r0
 8008368:	f7ff fff0 	bl	800834c <__sfp_lock_acquire>
 800836c:	6a23      	ldr	r3, [r4, #32]
 800836e:	b11b      	cbz	r3, 8008378 <__sinit+0x14>
 8008370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008374:	f7ff bff0 	b.w	8008358 <__sfp_lock_release>
 8008378:	4b04      	ldr	r3, [pc, #16]	; (800838c <__sinit+0x28>)
 800837a:	6223      	str	r3, [r4, #32]
 800837c:	4b04      	ldr	r3, [pc, #16]	; (8008390 <__sinit+0x2c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d1f5      	bne.n	8008370 <__sinit+0xc>
 8008384:	f7ff ffc4 	bl	8008310 <global_stdio_init.part.0>
 8008388:	e7f2      	b.n	8008370 <__sinit+0xc>
 800838a:	bf00      	nop
 800838c:	080082d1 	.word	0x080082d1
 8008390:	20002e94 	.word	0x20002e94

08008394 <_fwalk_sglue>:
 8008394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008398:	4607      	mov	r7, r0
 800839a:	4688      	mov	r8, r1
 800839c:	4614      	mov	r4, r2
 800839e:	2600      	movs	r6, #0
 80083a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083a4:	f1b9 0901 	subs.w	r9, r9, #1
 80083a8:	d505      	bpl.n	80083b6 <_fwalk_sglue+0x22>
 80083aa:	6824      	ldr	r4, [r4, #0]
 80083ac:	2c00      	cmp	r4, #0
 80083ae:	d1f7      	bne.n	80083a0 <_fwalk_sglue+0xc>
 80083b0:	4630      	mov	r0, r6
 80083b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d907      	bls.n	80083cc <_fwalk_sglue+0x38>
 80083bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083c0:	3301      	adds	r3, #1
 80083c2:	d003      	beq.n	80083cc <_fwalk_sglue+0x38>
 80083c4:	4629      	mov	r1, r5
 80083c6:	4638      	mov	r0, r7
 80083c8:	47c0      	blx	r8
 80083ca:	4306      	orrs	r6, r0
 80083cc:	3568      	adds	r5, #104	; 0x68
 80083ce:	e7e9      	b.n	80083a4 <_fwalk_sglue+0x10>

080083d0 <__sread>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	460c      	mov	r4, r1
 80083d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d8:	f000 f868 	bl	80084ac <_read_r>
 80083dc:	2800      	cmp	r0, #0
 80083de:	bfab      	itete	ge
 80083e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083e2:	89a3      	ldrhlt	r3, [r4, #12]
 80083e4:	181b      	addge	r3, r3, r0
 80083e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083ea:	bfac      	ite	ge
 80083ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80083ee:	81a3      	strhlt	r3, [r4, #12]
 80083f0:	bd10      	pop	{r4, pc}

080083f2 <__swrite>:
 80083f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f6:	461f      	mov	r7, r3
 80083f8:	898b      	ldrh	r3, [r1, #12]
 80083fa:	4605      	mov	r5, r0
 80083fc:	05db      	lsls	r3, r3, #23
 80083fe:	460c      	mov	r4, r1
 8008400:	4616      	mov	r6, r2
 8008402:	d505      	bpl.n	8008410 <__swrite+0x1e>
 8008404:	2302      	movs	r3, #2
 8008406:	2200      	movs	r2, #0
 8008408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840c:	f000 f83c 	bl	8008488 <_lseek_r>
 8008410:	89a3      	ldrh	r3, [r4, #12]
 8008412:	4632      	mov	r2, r6
 8008414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	4628      	mov	r0, r5
 800841c:	463b      	mov	r3, r7
 800841e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008426:	f000 b853 	b.w	80084d0 <_write_r>

0800842a <__sseek>:
 800842a:	b510      	push	{r4, lr}
 800842c:	460c      	mov	r4, r1
 800842e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008432:	f000 f829 	bl	8008488 <_lseek_r>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	bf15      	itete	ne
 800843c:	6560      	strne	r0, [r4, #84]	; 0x54
 800843e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008442:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008446:	81a3      	strheq	r3, [r4, #12]
 8008448:	bf18      	it	ne
 800844a:	81a3      	strhne	r3, [r4, #12]
 800844c:	bd10      	pop	{r4, pc}

0800844e <__sclose>:
 800844e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008452:	f000 b809 	b.w	8008468 <_close_r>

08008456 <memset>:
 8008456:	4603      	mov	r3, r0
 8008458:	4402      	add	r2, r0
 800845a:	4293      	cmp	r3, r2
 800845c:	d100      	bne.n	8008460 <memset+0xa>
 800845e:	4770      	bx	lr
 8008460:	f803 1b01 	strb.w	r1, [r3], #1
 8008464:	e7f9      	b.n	800845a <memset+0x4>
	...

08008468 <_close_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	2300      	movs	r3, #0
 800846c:	4d05      	ldr	r5, [pc, #20]	; (8008484 <_close_r+0x1c>)
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7fa fb42 	bl	8002afc <_close>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_close_r+0x1a>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_close_r+0x1a>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20002e98 	.word	0x20002e98

08008488 <_lseek_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	2200      	movs	r2, #0
 8008492:	4d05      	ldr	r5, [pc, #20]	; (80084a8 <_lseek_r+0x20>)
 8008494:	602a      	str	r2, [r5, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	f7fa fb3a 	bl	8002b10 <_lseek>
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	d102      	bne.n	80084a6 <_lseek_r+0x1e>
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	b103      	cbz	r3, 80084a6 <_lseek_r+0x1e>
 80084a4:	6023      	str	r3, [r4, #0]
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	20002e98 	.word	0x20002e98

080084ac <_read_r>:
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	2200      	movs	r2, #0
 80084b6:	4d05      	ldr	r5, [pc, #20]	; (80084cc <_read_r+0x20>)
 80084b8:	602a      	str	r2, [r5, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	f7fa fb00 	bl	8002ac0 <_read>
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	d102      	bne.n	80084ca <_read_r+0x1e>
 80084c4:	682b      	ldr	r3, [r5, #0]
 80084c6:	b103      	cbz	r3, 80084ca <_read_r+0x1e>
 80084c8:	6023      	str	r3, [r4, #0]
 80084ca:	bd38      	pop	{r3, r4, r5, pc}
 80084cc:	20002e98 	.word	0x20002e98

080084d0 <_write_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	2200      	movs	r2, #0
 80084da:	4d05      	ldr	r5, [pc, #20]	; (80084f0 <_write_r+0x20>)
 80084dc:	602a      	str	r2, [r5, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	f7fa fafe 	bl	8002ae0 <_write>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_write_r+0x1e>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_write_r+0x1e>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	20002e98 	.word	0x20002e98

080084f4 <__errno>:
 80084f4:	4b01      	ldr	r3, [pc, #4]	; (80084fc <__errno+0x8>)
 80084f6:	6818      	ldr	r0, [r3, #0]
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20000910 	.word	0x20000910

08008500 <__libc_init_array>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	2600      	movs	r6, #0
 8008504:	4d0c      	ldr	r5, [pc, #48]	; (8008538 <__libc_init_array+0x38>)
 8008506:	4c0d      	ldr	r4, [pc, #52]	; (800853c <__libc_init_array+0x3c>)
 8008508:	1b64      	subs	r4, r4, r5
 800850a:	10a4      	asrs	r4, r4, #2
 800850c:	42a6      	cmp	r6, r4
 800850e:	d109      	bne.n	8008524 <__libc_init_array+0x24>
 8008510:	f000 fe62 	bl	80091d8 <_init>
 8008514:	2600      	movs	r6, #0
 8008516:	4d0a      	ldr	r5, [pc, #40]	; (8008540 <__libc_init_array+0x40>)
 8008518:	4c0a      	ldr	r4, [pc, #40]	; (8008544 <__libc_init_array+0x44>)
 800851a:	1b64      	subs	r4, r4, r5
 800851c:	10a4      	asrs	r4, r4, #2
 800851e:	42a6      	cmp	r6, r4
 8008520:	d105      	bne.n	800852e <__libc_init_array+0x2e>
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	f855 3b04 	ldr.w	r3, [r5], #4
 8008528:	4798      	blx	r3
 800852a:	3601      	adds	r6, #1
 800852c:	e7ee      	b.n	800850c <__libc_init_array+0xc>
 800852e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008532:	4798      	blx	r3
 8008534:	3601      	adds	r6, #1
 8008536:	e7f2      	b.n	800851e <__libc_init_array+0x1e>
 8008538:	08009ffc 	.word	0x08009ffc
 800853c:	08009ffc 	.word	0x08009ffc
 8008540:	08009ffc 	.word	0x08009ffc
 8008544:	0800a000 	.word	0x0800a000

08008548 <__retarget_lock_init_recursive>:
 8008548:	4770      	bx	lr

0800854a <__retarget_lock_acquire_recursive>:
 800854a:	4770      	bx	lr

0800854c <__retarget_lock_release_recursive>:
 800854c:	4770      	bx	lr

0800854e <strcpy>:
 800854e:	4603      	mov	r3, r0
 8008550:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008554:	f803 2b01 	strb.w	r2, [r3], #1
 8008558:	2a00      	cmp	r2, #0
 800855a:	d1f9      	bne.n	8008550 <strcpy+0x2>
 800855c:	4770      	bx	lr

0800855e <memcpy>:
 800855e:	440a      	add	r2, r1
 8008560:	4291      	cmp	r1, r2
 8008562:	f100 33ff 	add.w	r3, r0, #4294967295
 8008566:	d100      	bne.n	800856a <memcpy+0xc>
 8008568:	4770      	bx	lr
 800856a:	b510      	push	{r4, lr}
 800856c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008570:	4291      	cmp	r1, r2
 8008572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008576:	d1f9      	bne.n	800856c <memcpy+0xe>
 8008578:	bd10      	pop	{r4, pc}
	...

0800857c <__assert_func>:
 800857c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800857e:	4614      	mov	r4, r2
 8008580:	461a      	mov	r2, r3
 8008582:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <__assert_func+0x2c>)
 8008584:	4605      	mov	r5, r0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68d8      	ldr	r0, [r3, #12]
 800858a:	b14c      	cbz	r4, 80085a0 <__assert_func+0x24>
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <__assert_func+0x30>)
 800858e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008592:	9100      	str	r1, [sp, #0]
 8008594:	462b      	mov	r3, r5
 8008596:	4906      	ldr	r1, [pc, #24]	; (80085b0 <__assert_func+0x34>)
 8008598:	f000 f9b4 	bl	8008904 <fiprintf>
 800859c:	f000 f9d4 	bl	8008948 <abort>
 80085a0:	4b04      	ldr	r3, [pc, #16]	; (80085b4 <__assert_func+0x38>)
 80085a2:	461c      	mov	r4, r3
 80085a4:	e7f3      	b.n	800858e <__assert_func+0x12>
 80085a6:	bf00      	nop
 80085a8:	20000910 	.word	0x20000910
 80085ac:	08009f8c 	.word	0x08009f8c
 80085b0:	08009f99 	.word	0x08009f99
 80085b4:	08009fc7 	.word	0x08009fc7

080085b8 <_free_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4605      	mov	r5, r0
 80085bc:	2900      	cmp	r1, #0
 80085be:	d040      	beq.n	8008642 <_free_r+0x8a>
 80085c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085c4:	1f0c      	subs	r4, r1, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfb8      	it	lt
 80085ca:	18e4      	addlt	r4, r4, r3
 80085cc:	f000 f8e4 	bl	8008798 <__malloc_lock>
 80085d0:	4a1c      	ldr	r2, [pc, #112]	; (8008644 <_free_r+0x8c>)
 80085d2:	6813      	ldr	r3, [r2, #0]
 80085d4:	b933      	cbnz	r3, 80085e4 <_free_r+0x2c>
 80085d6:	6063      	str	r3, [r4, #4]
 80085d8:	6014      	str	r4, [r2, #0]
 80085da:	4628      	mov	r0, r5
 80085dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085e0:	f000 b8e0 	b.w	80087a4 <__malloc_unlock>
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	d908      	bls.n	80085fa <_free_r+0x42>
 80085e8:	6820      	ldr	r0, [r4, #0]
 80085ea:	1821      	adds	r1, r4, r0
 80085ec:	428b      	cmp	r3, r1
 80085ee:	bf01      	itttt	eq
 80085f0:	6819      	ldreq	r1, [r3, #0]
 80085f2:	685b      	ldreq	r3, [r3, #4]
 80085f4:	1809      	addeq	r1, r1, r0
 80085f6:	6021      	streq	r1, [r4, #0]
 80085f8:	e7ed      	b.n	80085d6 <_free_r+0x1e>
 80085fa:	461a      	mov	r2, r3
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	b10b      	cbz	r3, 8008604 <_free_r+0x4c>
 8008600:	42a3      	cmp	r3, r4
 8008602:	d9fa      	bls.n	80085fa <_free_r+0x42>
 8008604:	6811      	ldr	r1, [r2, #0]
 8008606:	1850      	adds	r0, r2, r1
 8008608:	42a0      	cmp	r0, r4
 800860a:	d10b      	bne.n	8008624 <_free_r+0x6c>
 800860c:	6820      	ldr	r0, [r4, #0]
 800860e:	4401      	add	r1, r0
 8008610:	1850      	adds	r0, r2, r1
 8008612:	4283      	cmp	r3, r0
 8008614:	6011      	str	r1, [r2, #0]
 8008616:	d1e0      	bne.n	80085da <_free_r+0x22>
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	4408      	add	r0, r1
 800861e:	6010      	str	r0, [r2, #0]
 8008620:	6053      	str	r3, [r2, #4]
 8008622:	e7da      	b.n	80085da <_free_r+0x22>
 8008624:	d902      	bls.n	800862c <_free_r+0x74>
 8008626:	230c      	movs	r3, #12
 8008628:	602b      	str	r3, [r5, #0]
 800862a:	e7d6      	b.n	80085da <_free_r+0x22>
 800862c:	6820      	ldr	r0, [r4, #0]
 800862e:	1821      	adds	r1, r4, r0
 8008630:	428b      	cmp	r3, r1
 8008632:	bf01      	itttt	eq
 8008634:	6819      	ldreq	r1, [r3, #0]
 8008636:	685b      	ldreq	r3, [r3, #4]
 8008638:	1809      	addeq	r1, r1, r0
 800863a:	6021      	streq	r1, [r4, #0]
 800863c:	6063      	str	r3, [r4, #4]
 800863e:	6054      	str	r4, [r2, #4]
 8008640:	e7cb      	b.n	80085da <_free_r+0x22>
 8008642:	bd38      	pop	{r3, r4, r5, pc}
 8008644:	20002ea0 	.word	0x20002ea0

08008648 <malloc>:
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <malloc+0xc>)
 800864a:	4601      	mov	r1, r0
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f000 b823 	b.w	8008698 <_malloc_r>
 8008652:	bf00      	nop
 8008654:	20000910 	.word	0x20000910

08008658 <sbrk_aligned>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4e0e      	ldr	r6, [pc, #56]	; (8008694 <sbrk_aligned+0x3c>)
 800865c:	460c      	mov	r4, r1
 800865e:	6831      	ldr	r1, [r6, #0]
 8008660:	4605      	mov	r5, r0
 8008662:	b911      	cbnz	r1, 800866a <sbrk_aligned+0x12>
 8008664:	f000 f960 	bl	8008928 <_sbrk_r>
 8008668:	6030      	str	r0, [r6, #0]
 800866a:	4621      	mov	r1, r4
 800866c:	4628      	mov	r0, r5
 800866e:	f000 f95b 	bl	8008928 <_sbrk_r>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d00a      	beq.n	800868c <sbrk_aligned+0x34>
 8008676:	1cc4      	adds	r4, r0, #3
 8008678:	f024 0403 	bic.w	r4, r4, #3
 800867c:	42a0      	cmp	r0, r4
 800867e:	d007      	beq.n	8008690 <sbrk_aligned+0x38>
 8008680:	1a21      	subs	r1, r4, r0
 8008682:	4628      	mov	r0, r5
 8008684:	f000 f950 	bl	8008928 <_sbrk_r>
 8008688:	3001      	adds	r0, #1
 800868a:	d101      	bne.n	8008690 <sbrk_aligned+0x38>
 800868c:	f04f 34ff 	mov.w	r4, #4294967295
 8008690:	4620      	mov	r0, r4
 8008692:	bd70      	pop	{r4, r5, r6, pc}
 8008694:	20002ea4 	.word	0x20002ea4

08008698 <_malloc_r>:
 8008698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800869c:	1ccd      	adds	r5, r1, #3
 800869e:	f025 0503 	bic.w	r5, r5, #3
 80086a2:	3508      	adds	r5, #8
 80086a4:	2d0c      	cmp	r5, #12
 80086a6:	bf38      	it	cc
 80086a8:	250c      	movcc	r5, #12
 80086aa:	2d00      	cmp	r5, #0
 80086ac:	4607      	mov	r7, r0
 80086ae:	db01      	blt.n	80086b4 <_malloc_r+0x1c>
 80086b0:	42a9      	cmp	r1, r5
 80086b2:	d905      	bls.n	80086c0 <_malloc_r+0x28>
 80086b4:	230c      	movs	r3, #12
 80086b6:	2600      	movs	r6, #0
 80086b8:	603b      	str	r3, [r7, #0]
 80086ba:	4630      	mov	r0, r6
 80086bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008794 <_malloc_r+0xfc>
 80086c4:	f000 f868 	bl	8008798 <__malloc_lock>
 80086c8:	f8d8 3000 	ldr.w	r3, [r8]
 80086cc:	461c      	mov	r4, r3
 80086ce:	bb5c      	cbnz	r4, 8008728 <_malloc_r+0x90>
 80086d0:	4629      	mov	r1, r5
 80086d2:	4638      	mov	r0, r7
 80086d4:	f7ff ffc0 	bl	8008658 <sbrk_aligned>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	4604      	mov	r4, r0
 80086dc:	d155      	bne.n	800878a <_malloc_r+0xf2>
 80086de:	f8d8 4000 	ldr.w	r4, [r8]
 80086e2:	4626      	mov	r6, r4
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	d145      	bne.n	8008774 <_malloc_r+0xdc>
 80086e8:	2c00      	cmp	r4, #0
 80086ea:	d048      	beq.n	800877e <_malloc_r+0xe6>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	4631      	mov	r1, r6
 80086f0:	4638      	mov	r0, r7
 80086f2:	eb04 0903 	add.w	r9, r4, r3
 80086f6:	f000 f917 	bl	8008928 <_sbrk_r>
 80086fa:	4581      	cmp	r9, r0
 80086fc:	d13f      	bne.n	800877e <_malloc_r+0xe6>
 80086fe:	6821      	ldr	r1, [r4, #0]
 8008700:	4638      	mov	r0, r7
 8008702:	1a6d      	subs	r5, r5, r1
 8008704:	4629      	mov	r1, r5
 8008706:	f7ff ffa7 	bl	8008658 <sbrk_aligned>
 800870a:	3001      	adds	r0, #1
 800870c:	d037      	beq.n	800877e <_malloc_r+0xe6>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	442b      	add	r3, r5
 8008712:	6023      	str	r3, [r4, #0]
 8008714:	f8d8 3000 	ldr.w	r3, [r8]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d038      	beq.n	800878e <_malloc_r+0xf6>
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	42a2      	cmp	r2, r4
 8008720:	d12b      	bne.n	800877a <_malloc_r+0xe2>
 8008722:	2200      	movs	r2, #0
 8008724:	605a      	str	r2, [r3, #4]
 8008726:	e00f      	b.n	8008748 <_malloc_r+0xb0>
 8008728:	6822      	ldr	r2, [r4, #0]
 800872a:	1b52      	subs	r2, r2, r5
 800872c:	d41f      	bmi.n	800876e <_malloc_r+0xd6>
 800872e:	2a0b      	cmp	r2, #11
 8008730:	d917      	bls.n	8008762 <_malloc_r+0xca>
 8008732:	1961      	adds	r1, r4, r5
 8008734:	42a3      	cmp	r3, r4
 8008736:	6025      	str	r5, [r4, #0]
 8008738:	bf18      	it	ne
 800873a:	6059      	strne	r1, [r3, #4]
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	bf08      	it	eq
 8008740:	f8c8 1000 	streq.w	r1, [r8]
 8008744:	5162      	str	r2, [r4, r5]
 8008746:	604b      	str	r3, [r1, #4]
 8008748:	4638      	mov	r0, r7
 800874a:	f104 060b 	add.w	r6, r4, #11
 800874e:	f000 f829 	bl	80087a4 <__malloc_unlock>
 8008752:	f026 0607 	bic.w	r6, r6, #7
 8008756:	1d23      	adds	r3, r4, #4
 8008758:	1af2      	subs	r2, r6, r3
 800875a:	d0ae      	beq.n	80086ba <_malloc_r+0x22>
 800875c:	1b9b      	subs	r3, r3, r6
 800875e:	50a3      	str	r3, [r4, r2]
 8008760:	e7ab      	b.n	80086ba <_malloc_r+0x22>
 8008762:	42a3      	cmp	r3, r4
 8008764:	6862      	ldr	r2, [r4, #4]
 8008766:	d1dd      	bne.n	8008724 <_malloc_r+0x8c>
 8008768:	f8c8 2000 	str.w	r2, [r8]
 800876c:	e7ec      	b.n	8008748 <_malloc_r+0xb0>
 800876e:	4623      	mov	r3, r4
 8008770:	6864      	ldr	r4, [r4, #4]
 8008772:	e7ac      	b.n	80086ce <_malloc_r+0x36>
 8008774:	4634      	mov	r4, r6
 8008776:	6876      	ldr	r6, [r6, #4]
 8008778:	e7b4      	b.n	80086e4 <_malloc_r+0x4c>
 800877a:	4613      	mov	r3, r2
 800877c:	e7cc      	b.n	8008718 <_malloc_r+0x80>
 800877e:	230c      	movs	r3, #12
 8008780:	4638      	mov	r0, r7
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	f000 f80e 	bl	80087a4 <__malloc_unlock>
 8008788:	e797      	b.n	80086ba <_malloc_r+0x22>
 800878a:	6025      	str	r5, [r4, #0]
 800878c:	e7dc      	b.n	8008748 <_malloc_r+0xb0>
 800878e:	605b      	str	r3, [r3, #4]
 8008790:	deff      	udf	#255	; 0xff
 8008792:	bf00      	nop
 8008794:	20002ea0 	.word	0x20002ea0

08008798 <__malloc_lock>:
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <__malloc_lock+0x8>)
 800879a:	f7ff bed6 	b.w	800854a <__retarget_lock_acquire_recursive>
 800879e:	bf00      	nop
 80087a0:	20002e9c 	.word	0x20002e9c

080087a4 <__malloc_unlock>:
 80087a4:	4801      	ldr	r0, [pc, #4]	; (80087ac <__malloc_unlock+0x8>)
 80087a6:	f7ff bed1 	b.w	800854c <__retarget_lock_release_recursive>
 80087aa:	bf00      	nop
 80087ac:	20002e9c 	.word	0x20002e9c

080087b0 <__sflush_r>:
 80087b0:	898a      	ldrh	r2, [r1, #12]
 80087b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b4:	4605      	mov	r5, r0
 80087b6:	0710      	lsls	r0, r2, #28
 80087b8:	460c      	mov	r4, r1
 80087ba:	d457      	bmi.n	800886c <__sflush_r+0xbc>
 80087bc:	684b      	ldr	r3, [r1, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dc04      	bgt.n	80087cc <__sflush_r+0x1c>
 80087c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dc01      	bgt.n	80087cc <__sflush_r+0x1c>
 80087c8:	2000      	movs	r0, #0
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	d0fa      	beq.n	80087c8 <__sflush_r+0x18>
 80087d2:	2300      	movs	r3, #0
 80087d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087d8:	682f      	ldr	r7, [r5, #0]
 80087da:	6a21      	ldr	r1, [r4, #32]
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	d032      	beq.n	8008846 <__sflush_r+0x96>
 80087e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	075a      	lsls	r2, r3, #29
 80087e6:	d505      	bpl.n	80087f4 <__sflush_r+0x44>
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	1ac0      	subs	r0, r0, r3
 80087ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ee:	b10b      	cbz	r3, 80087f4 <__sflush_r+0x44>
 80087f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f2:	1ac0      	subs	r0, r0, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	4602      	mov	r2, r0
 80087f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fa:	4628      	mov	r0, r5
 80087fc:	6a21      	ldr	r1, [r4, #32]
 80087fe:	47b0      	blx	r6
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	d106      	bne.n	8008814 <__sflush_r+0x64>
 8008806:	6829      	ldr	r1, [r5, #0]
 8008808:	291d      	cmp	r1, #29
 800880a:	d82b      	bhi.n	8008864 <__sflush_r+0xb4>
 800880c:	4a28      	ldr	r2, [pc, #160]	; (80088b0 <__sflush_r+0x100>)
 800880e:	410a      	asrs	r2, r1
 8008810:	07d6      	lsls	r6, r2, #31
 8008812:	d427      	bmi.n	8008864 <__sflush_r+0xb4>
 8008814:	2200      	movs	r2, #0
 8008816:	6062      	str	r2, [r4, #4]
 8008818:	6922      	ldr	r2, [r4, #16]
 800881a:	04d9      	lsls	r1, r3, #19
 800881c:	6022      	str	r2, [r4, #0]
 800881e:	d504      	bpl.n	800882a <__sflush_r+0x7a>
 8008820:	1c42      	adds	r2, r0, #1
 8008822:	d101      	bne.n	8008828 <__sflush_r+0x78>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b903      	cbnz	r3, 800882a <__sflush_r+0x7a>
 8008828:	6560      	str	r0, [r4, #84]	; 0x54
 800882a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800882c:	602f      	str	r7, [r5, #0]
 800882e:	2900      	cmp	r1, #0
 8008830:	d0ca      	beq.n	80087c8 <__sflush_r+0x18>
 8008832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008836:	4299      	cmp	r1, r3
 8008838:	d002      	beq.n	8008840 <__sflush_r+0x90>
 800883a:	4628      	mov	r0, r5
 800883c:	f7ff febc 	bl	80085b8 <_free_r>
 8008840:	2000      	movs	r0, #0
 8008842:	6360      	str	r0, [r4, #52]	; 0x34
 8008844:	e7c1      	b.n	80087ca <__sflush_r+0x1a>
 8008846:	2301      	movs	r3, #1
 8008848:	4628      	mov	r0, r5
 800884a:	47b0      	blx	r6
 800884c:	1c41      	adds	r1, r0, #1
 800884e:	d1c8      	bne.n	80087e2 <__sflush_r+0x32>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0c5      	beq.n	80087e2 <__sflush_r+0x32>
 8008856:	2b1d      	cmp	r3, #29
 8008858:	d001      	beq.n	800885e <__sflush_r+0xae>
 800885a:	2b16      	cmp	r3, #22
 800885c:	d101      	bne.n	8008862 <__sflush_r+0xb2>
 800885e:	602f      	str	r7, [r5, #0]
 8008860:	e7b2      	b.n	80087c8 <__sflush_r+0x18>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	e7ae      	b.n	80087ca <__sflush_r+0x1a>
 800886c:	690f      	ldr	r7, [r1, #16]
 800886e:	2f00      	cmp	r7, #0
 8008870:	d0aa      	beq.n	80087c8 <__sflush_r+0x18>
 8008872:	0793      	lsls	r3, r2, #30
 8008874:	bf18      	it	ne
 8008876:	2300      	movne	r3, #0
 8008878:	680e      	ldr	r6, [r1, #0]
 800887a:	bf08      	it	eq
 800887c:	694b      	ldreq	r3, [r1, #20]
 800887e:	1bf6      	subs	r6, r6, r7
 8008880:	600f      	str	r7, [r1, #0]
 8008882:	608b      	str	r3, [r1, #8]
 8008884:	2e00      	cmp	r6, #0
 8008886:	dd9f      	ble.n	80087c8 <__sflush_r+0x18>
 8008888:	4633      	mov	r3, r6
 800888a:	463a      	mov	r2, r7
 800888c:	4628      	mov	r0, r5
 800888e:	6a21      	ldr	r1, [r4, #32]
 8008890:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008894:	47e0      	blx	ip
 8008896:	2800      	cmp	r0, #0
 8008898:	dc06      	bgt.n	80088a8 <__sflush_r+0xf8>
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f04f 30ff 	mov.w	r0, #4294967295
 80088a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a4:	81a3      	strh	r3, [r4, #12]
 80088a6:	e790      	b.n	80087ca <__sflush_r+0x1a>
 80088a8:	4407      	add	r7, r0
 80088aa:	1a36      	subs	r6, r6, r0
 80088ac:	e7ea      	b.n	8008884 <__sflush_r+0xd4>
 80088ae:	bf00      	nop
 80088b0:	dfbffffe 	.word	0xdfbffffe

080088b4 <_fflush_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	690b      	ldr	r3, [r1, #16]
 80088b8:	4605      	mov	r5, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	b913      	cbnz	r3, 80088c4 <_fflush_r+0x10>
 80088be:	2500      	movs	r5, #0
 80088c0:	4628      	mov	r0, r5
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	b118      	cbz	r0, 80088ce <_fflush_r+0x1a>
 80088c6:	6a03      	ldr	r3, [r0, #32]
 80088c8:	b90b      	cbnz	r3, 80088ce <_fflush_r+0x1a>
 80088ca:	f7ff fd4b 	bl	8008364 <__sinit>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d0f3      	beq.n	80088be <_fflush_r+0xa>
 80088d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088d8:	07d0      	lsls	r0, r2, #31
 80088da:	d404      	bmi.n	80088e6 <_fflush_r+0x32>
 80088dc:	0599      	lsls	r1, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_fflush_r+0x32>
 80088e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e2:	f7ff fe32 	bl	800854a <__retarget_lock_acquire_recursive>
 80088e6:	4628      	mov	r0, r5
 80088e8:	4621      	mov	r1, r4
 80088ea:	f7ff ff61 	bl	80087b0 <__sflush_r>
 80088ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088f0:	4605      	mov	r5, r0
 80088f2:	07da      	lsls	r2, r3, #31
 80088f4:	d4e4      	bmi.n	80088c0 <_fflush_r+0xc>
 80088f6:	89a3      	ldrh	r3, [r4, #12]
 80088f8:	059b      	lsls	r3, r3, #22
 80088fa:	d4e1      	bmi.n	80088c0 <_fflush_r+0xc>
 80088fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fe:	f7ff fe25 	bl	800854c <__retarget_lock_release_recursive>
 8008902:	e7dd      	b.n	80088c0 <_fflush_r+0xc>

08008904 <fiprintf>:
 8008904:	b40e      	push	{r1, r2, r3}
 8008906:	b503      	push	{r0, r1, lr}
 8008908:	4601      	mov	r1, r0
 800890a:	ab03      	add	r3, sp, #12
 800890c:	4805      	ldr	r0, [pc, #20]	; (8008924 <fiprintf+0x20>)
 800890e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008912:	6800      	ldr	r0, [r0, #0]
 8008914:	9301      	str	r3, [sp, #4]
 8008916:	f000 f845 	bl	80089a4 <_vfiprintf_r>
 800891a:	b002      	add	sp, #8
 800891c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008920:	b003      	add	sp, #12
 8008922:	4770      	bx	lr
 8008924:	20000910 	.word	0x20000910

08008928 <_sbrk_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	2300      	movs	r3, #0
 800892c:	4d05      	ldr	r5, [pc, #20]	; (8008944 <_sbrk_r+0x1c>)
 800892e:	4604      	mov	r4, r0
 8008930:	4608      	mov	r0, r1
 8008932:	602b      	str	r3, [r5, #0]
 8008934:	f7fa f8ee 	bl	8002b14 <_sbrk>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_sbrk_r+0x1a>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	b103      	cbz	r3, 8008942 <_sbrk_r+0x1a>
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	20002e98 	.word	0x20002e98

08008948 <abort>:
 8008948:	2006      	movs	r0, #6
 800894a:	b508      	push	{r3, lr}
 800894c:	f000 fb96 	bl	800907c <raise>
 8008950:	2001      	movs	r0, #1
 8008952:	f7fa f8af 	bl	8002ab4 <_exit>

08008956 <__sfputc_r>:
 8008956:	6893      	ldr	r3, [r2, #8]
 8008958:	b410      	push	{r4}
 800895a:	3b01      	subs	r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	6093      	str	r3, [r2, #8]
 8008960:	da07      	bge.n	8008972 <__sfputc_r+0x1c>
 8008962:	6994      	ldr	r4, [r2, #24]
 8008964:	42a3      	cmp	r3, r4
 8008966:	db01      	blt.n	800896c <__sfputc_r+0x16>
 8008968:	290a      	cmp	r1, #10
 800896a:	d102      	bne.n	8008972 <__sfputc_r+0x1c>
 800896c:	bc10      	pop	{r4}
 800896e:	f000 bac7 	b.w	8008f00 <__swbuf_r>
 8008972:	6813      	ldr	r3, [r2, #0]
 8008974:	1c58      	adds	r0, r3, #1
 8008976:	6010      	str	r0, [r2, #0]
 8008978:	7019      	strb	r1, [r3, #0]
 800897a:	4608      	mov	r0, r1
 800897c:	bc10      	pop	{r4}
 800897e:	4770      	bx	lr

08008980 <__sfputs_r>:
 8008980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008982:	4606      	mov	r6, r0
 8008984:	460f      	mov	r7, r1
 8008986:	4614      	mov	r4, r2
 8008988:	18d5      	adds	r5, r2, r3
 800898a:	42ac      	cmp	r4, r5
 800898c:	d101      	bne.n	8008992 <__sfputs_r+0x12>
 800898e:	2000      	movs	r0, #0
 8008990:	e007      	b.n	80089a2 <__sfputs_r+0x22>
 8008992:	463a      	mov	r2, r7
 8008994:	4630      	mov	r0, r6
 8008996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899a:	f7ff ffdc 	bl	8008956 <__sfputc_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d1f3      	bne.n	800898a <__sfputs_r+0xa>
 80089a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089a4 <_vfiprintf_r>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	460d      	mov	r5, r1
 80089aa:	4614      	mov	r4, r2
 80089ac:	4698      	mov	r8, r3
 80089ae:	4606      	mov	r6, r0
 80089b0:	b09d      	sub	sp, #116	; 0x74
 80089b2:	b118      	cbz	r0, 80089bc <_vfiprintf_r+0x18>
 80089b4:	6a03      	ldr	r3, [r0, #32]
 80089b6:	b90b      	cbnz	r3, 80089bc <_vfiprintf_r+0x18>
 80089b8:	f7ff fcd4 	bl	8008364 <__sinit>
 80089bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089be:	07d9      	lsls	r1, r3, #31
 80089c0:	d405      	bmi.n	80089ce <_vfiprintf_r+0x2a>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	059a      	lsls	r2, r3, #22
 80089c6:	d402      	bmi.n	80089ce <_vfiprintf_r+0x2a>
 80089c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ca:	f7ff fdbe 	bl	800854a <__retarget_lock_acquire_recursive>
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	071b      	lsls	r3, r3, #28
 80089d2:	d501      	bpl.n	80089d8 <_vfiprintf_r+0x34>
 80089d4:	692b      	ldr	r3, [r5, #16]
 80089d6:	b99b      	cbnz	r3, 8008a00 <_vfiprintf_r+0x5c>
 80089d8:	4629      	mov	r1, r5
 80089da:	4630      	mov	r0, r6
 80089dc:	f000 face 	bl	8008f7c <__swsetup_r>
 80089e0:	b170      	cbz	r0, 8008a00 <_vfiprintf_r+0x5c>
 80089e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089e4:	07dc      	lsls	r4, r3, #31
 80089e6:	d504      	bpl.n	80089f2 <_vfiprintf_r+0x4e>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	b01d      	add	sp, #116	; 0x74
 80089ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f2:	89ab      	ldrh	r3, [r5, #12]
 80089f4:	0598      	lsls	r0, r3, #22
 80089f6:	d4f7      	bmi.n	80089e8 <_vfiprintf_r+0x44>
 80089f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089fa:	f7ff fda7 	bl	800854c <__retarget_lock_release_recursive>
 80089fe:	e7f3      	b.n	80089e8 <_vfiprintf_r+0x44>
 8008a00:	2300      	movs	r3, #0
 8008a02:	9309      	str	r3, [sp, #36]	; 0x24
 8008a04:	2320      	movs	r3, #32
 8008a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a0a:	2330      	movs	r3, #48	; 0x30
 8008a0c:	f04f 0901 	mov.w	r9, #1
 8008a10:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a14:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008bc4 <_vfiprintf_r+0x220>
 8008a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	469a      	mov	sl, r3
 8008a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a24:	b10a      	cbz	r2, 8008a2a <_vfiprintf_r+0x86>
 8008a26:	2a25      	cmp	r2, #37	; 0x25
 8008a28:	d1f9      	bne.n	8008a1e <_vfiprintf_r+0x7a>
 8008a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a2e:	d00b      	beq.n	8008a48 <_vfiprintf_r+0xa4>
 8008a30:	465b      	mov	r3, fp
 8008a32:	4622      	mov	r2, r4
 8008a34:	4629      	mov	r1, r5
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff ffa2 	bl	8008980 <__sfputs_r>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f000 80a9 	beq.w	8008b94 <_vfiprintf_r+0x1f0>
 8008a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a44:	445a      	add	r2, fp
 8008a46:	9209      	str	r2, [sp, #36]	; 0x24
 8008a48:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 80a1 	beq.w	8008b94 <_vfiprintf_r+0x1f0>
 8008a52:	2300      	movs	r3, #0
 8008a54:	f04f 32ff 	mov.w	r2, #4294967295
 8008a58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a5c:	f10a 0a01 	add.w	sl, sl, #1
 8008a60:	9304      	str	r3, [sp, #16]
 8008a62:	9307      	str	r3, [sp, #28]
 8008a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a68:	931a      	str	r3, [sp, #104]	; 0x68
 8008a6a:	4654      	mov	r4, sl
 8008a6c:	2205      	movs	r2, #5
 8008a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a72:	4854      	ldr	r0, [pc, #336]	; (8008bc4 <_vfiprintf_r+0x220>)
 8008a74:	f000 fb1e 	bl	80090b4 <memchr>
 8008a78:	9a04      	ldr	r2, [sp, #16]
 8008a7a:	b9d8      	cbnz	r0, 8008ab4 <_vfiprintf_r+0x110>
 8008a7c:	06d1      	lsls	r1, r2, #27
 8008a7e:	bf44      	itt	mi
 8008a80:	2320      	movmi	r3, #32
 8008a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a86:	0713      	lsls	r3, r2, #28
 8008a88:	bf44      	itt	mi
 8008a8a:	232b      	movmi	r3, #43	; 0x2b
 8008a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a90:	f89a 3000 	ldrb.w	r3, [sl]
 8008a94:	2b2a      	cmp	r3, #42	; 0x2a
 8008a96:	d015      	beq.n	8008ac4 <_vfiprintf_r+0x120>
 8008a98:	4654      	mov	r4, sl
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f04f 0c0a 	mov.w	ip, #10
 8008aa0:	9a07      	ldr	r2, [sp, #28]
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa8:	3b30      	subs	r3, #48	; 0x30
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d94d      	bls.n	8008b4a <_vfiprintf_r+0x1a6>
 8008aae:	b1b0      	cbz	r0, 8008ade <_vfiprintf_r+0x13a>
 8008ab0:	9207      	str	r2, [sp, #28]
 8008ab2:	e014      	b.n	8008ade <_vfiprintf_r+0x13a>
 8008ab4:	eba0 0308 	sub.w	r3, r0, r8
 8008ab8:	fa09 f303 	lsl.w	r3, r9, r3
 8008abc:	4313      	orrs	r3, r2
 8008abe:	46a2      	mov	sl, r4
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	e7d2      	b.n	8008a6a <_vfiprintf_r+0xc6>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	1d19      	adds	r1, r3, #4
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	9103      	str	r1, [sp, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bfbb      	ittet	lt
 8008ad0:	425b      	neglt	r3, r3
 8008ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ad6:	9307      	strge	r3, [sp, #28]
 8008ad8:	9307      	strlt	r3, [sp, #28]
 8008ada:	bfb8      	it	lt
 8008adc:	9204      	strlt	r2, [sp, #16]
 8008ade:	7823      	ldrb	r3, [r4, #0]
 8008ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8008ae2:	d10c      	bne.n	8008afe <_vfiprintf_r+0x15a>
 8008ae4:	7863      	ldrb	r3, [r4, #1]
 8008ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae8:	d134      	bne.n	8008b54 <_vfiprintf_r+0x1b0>
 8008aea:	9b03      	ldr	r3, [sp, #12]
 8008aec:	3402      	adds	r4, #2
 8008aee:	1d1a      	adds	r2, r3, #4
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	9203      	str	r2, [sp, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bfb8      	it	lt
 8008af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008afc:	9305      	str	r3, [sp, #20]
 8008afe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bc8 <_vfiprintf_r+0x224>
 8008b02:	2203      	movs	r2, #3
 8008b04:	4650      	mov	r0, sl
 8008b06:	7821      	ldrb	r1, [r4, #0]
 8008b08:	f000 fad4 	bl	80090b4 <memchr>
 8008b0c:	b138      	cbz	r0, 8008b1e <_vfiprintf_r+0x17a>
 8008b0e:	2240      	movs	r2, #64	; 0x40
 8008b10:	9b04      	ldr	r3, [sp, #16]
 8008b12:	eba0 000a 	sub.w	r0, r0, sl
 8008b16:	4082      	lsls	r2, r0
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	3401      	adds	r4, #1
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b22:	2206      	movs	r2, #6
 8008b24:	4829      	ldr	r0, [pc, #164]	; (8008bcc <_vfiprintf_r+0x228>)
 8008b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b2a:	f000 fac3 	bl	80090b4 <memchr>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d03f      	beq.n	8008bb2 <_vfiprintf_r+0x20e>
 8008b32:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <_vfiprintf_r+0x22c>)
 8008b34:	bb1b      	cbnz	r3, 8008b7e <_vfiprintf_r+0x1da>
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	3307      	adds	r3, #7
 8008b3a:	f023 0307 	bic.w	r3, r3, #7
 8008b3e:	3308      	adds	r3, #8
 8008b40:	9303      	str	r3, [sp, #12]
 8008b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b44:	443b      	add	r3, r7
 8008b46:	9309      	str	r3, [sp, #36]	; 0x24
 8008b48:	e768      	b.n	8008a1c <_vfiprintf_r+0x78>
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	2001      	movs	r0, #1
 8008b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b52:	e7a6      	b.n	8008aa2 <_vfiprintf_r+0xfe>
 8008b54:	2300      	movs	r3, #0
 8008b56:	f04f 0c0a 	mov.w	ip, #10
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	3401      	adds	r4, #1
 8008b5e:	9305      	str	r3, [sp, #20]
 8008b60:	4620      	mov	r0, r4
 8008b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b66:	3a30      	subs	r2, #48	; 0x30
 8008b68:	2a09      	cmp	r2, #9
 8008b6a:	d903      	bls.n	8008b74 <_vfiprintf_r+0x1d0>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0c6      	beq.n	8008afe <_vfiprintf_r+0x15a>
 8008b70:	9105      	str	r1, [sp, #20]
 8008b72:	e7c4      	b.n	8008afe <_vfiprintf_r+0x15a>
 8008b74:	4604      	mov	r4, r0
 8008b76:	2301      	movs	r3, #1
 8008b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b7c:	e7f0      	b.n	8008b60 <_vfiprintf_r+0x1bc>
 8008b7e:	ab03      	add	r3, sp, #12
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	462a      	mov	r2, r5
 8008b84:	4630      	mov	r0, r6
 8008b86:	4b13      	ldr	r3, [pc, #76]	; (8008bd4 <_vfiprintf_r+0x230>)
 8008b88:	a904      	add	r1, sp, #16
 8008b8a:	f3af 8000 	nop.w
 8008b8e:	4607      	mov	r7, r0
 8008b90:	1c78      	adds	r0, r7, #1
 8008b92:	d1d6      	bne.n	8008b42 <_vfiprintf_r+0x19e>
 8008b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	d405      	bmi.n	8008ba6 <_vfiprintf_r+0x202>
 8008b9a:	89ab      	ldrh	r3, [r5, #12]
 8008b9c:	059a      	lsls	r2, r3, #22
 8008b9e:	d402      	bmi.n	8008ba6 <_vfiprintf_r+0x202>
 8008ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ba2:	f7ff fcd3 	bl	800854c <__retarget_lock_release_recursive>
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	065b      	lsls	r3, r3, #25
 8008baa:	f53f af1d 	bmi.w	80089e8 <_vfiprintf_r+0x44>
 8008bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bb0:	e71c      	b.n	80089ec <_vfiprintf_r+0x48>
 8008bb2:	ab03      	add	r3, sp, #12
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4630      	mov	r0, r6
 8008bba:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <_vfiprintf_r+0x230>)
 8008bbc:	a904      	add	r1, sp, #16
 8008bbe:	f000 f87d 	bl	8008cbc <_printf_i>
 8008bc2:	e7e4      	b.n	8008b8e <_vfiprintf_r+0x1ea>
 8008bc4:	08009fc8 	.word	0x08009fc8
 8008bc8:	08009fce 	.word	0x08009fce
 8008bcc:	08009fd2 	.word	0x08009fd2
 8008bd0:	00000000 	.word	0x00000000
 8008bd4:	08008981 	.word	0x08008981

08008bd8 <_printf_common>:
 8008bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	4616      	mov	r6, r2
 8008bde:	4699      	mov	r9, r3
 8008be0:	688a      	ldr	r2, [r1, #8]
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	4607      	mov	r7, r0
 8008be6:	4293      	cmp	r3, r2
 8008be8:	bfb8      	it	lt
 8008bea:	4613      	movlt	r3, r2
 8008bec:	6033      	str	r3, [r6, #0]
 8008bee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf8:	b10a      	cbz	r2, 8008bfe <_printf_common+0x26>
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	6033      	str	r3, [r6, #0]
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	0699      	lsls	r1, r3, #26
 8008c02:	bf42      	ittt	mi
 8008c04:	6833      	ldrmi	r3, [r6, #0]
 8008c06:	3302      	addmi	r3, #2
 8008c08:	6033      	strmi	r3, [r6, #0]
 8008c0a:	6825      	ldr	r5, [r4, #0]
 8008c0c:	f015 0506 	ands.w	r5, r5, #6
 8008c10:	d106      	bne.n	8008c20 <_printf_common+0x48>
 8008c12:	f104 0a19 	add.w	sl, r4, #25
 8008c16:	68e3      	ldr	r3, [r4, #12]
 8008c18:	6832      	ldr	r2, [r6, #0]
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	42ab      	cmp	r3, r5
 8008c1e:	dc2b      	bgt.n	8008c78 <_printf_common+0xa0>
 8008c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c24:	1e13      	subs	r3, r2, #0
 8008c26:	6822      	ldr	r2, [r4, #0]
 8008c28:	bf18      	it	ne
 8008c2a:	2301      	movne	r3, #1
 8008c2c:	0692      	lsls	r2, r2, #26
 8008c2e:	d430      	bmi.n	8008c92 <_printf_common+0xba>
 8008c30:	4649      	mov	r1, r9
 8008c32:	4638      	mov	r0, r7
 8008c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c38:	47c0      	blx	r8
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d023      	beq.n	8008c86 <_printf_common+0xae>
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	6922      	ldr	r2, [r4, #16]
 8008c42:	f003 0306 	and.w	r3, r3, #6
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	bf14      	ite	ne
 8008c4a:	2500      	movne	r5, #0
 8008c4c:	6833      	ldreq	r3, [r6, #0]
 8008c4e:	f04f 0600 	mov.w	r6, #0
 8008c52:	bf08      	it	eq
 8008c54:	68e5      	ldreq	r5, [r4, #12]
 8008c56:	f104 041a 	add.w	r4, r4, #26
 8008c5a:	bf08      	it	eq
 8008c5c:	1aed      	subeq	r5, r5, r3
 8008c5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008c62:	bf08      	it	eq
 8008c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	bfc4      	itt	gt
 8008c6c:	1a9b      	subgt	r3, r3, r2
 8008c6e:	18ed      	addgt	r5, r5, r3
 8008c70:	42b5      	cmp	r5, r6
 8008c72:	d11a      	bne.n	8008caa <_printf_common+0xd2>
 8008c74:	2000      	movs	r0, #0
 8008c76:	e008      	b.n	8008c8a <_printf_common+0xb2>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	4652      	mov	r2, sl
 8008c7c:	4649      	mov	r1, r9
 8008c7e:	4638      	mov	r0, r7
 8008c80:	47c0      	blx	r8
 8008c82:	3001      	adds	r0, #1
 8008c84:	d103      	bne.n	8008c8e <_printf_common+0xb6>
 8008c86:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8e:	3501      	adds	r5, #1
 8008c90:	e7c1      	b.n	8008c16 <_printf_common+0x3e>
 8008c92:	2030      	movs	r0, #48	; 0x30
 8008c94:	18e1      	adds	r1, r4, r3
 8008c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca0:	4422      	add	r2, r4
 8008ca2:	3302      	adds	r3, #2
 8008ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ca8:	e7c2      	b.n	8008c30 <_printf_common+0x58>
 8008caa:	2301      	movs	r3, #1
 8008cac:	4622      	mov	r2, r4
 8008cae:	4649      	mov	r1, r9
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	47c0      	blx	r8
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d0e6      	beq.n	8008c86 <_printf_common+0xae>
 8008cb8:	3601      	adds	r6, #1
 8008cba:	e7d9      	b.n	8008c70 <_printf_common+0x98>

08008cbc <_printf_i>:
 8008cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc0:	7e0f      	ldrb	r7, [r1, #24]
 8008cc2:	4691      	mov	r9, r2
 8008cc4:	2f78      	cmp	r7, #120	; 0x78
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	460c      	mov	r4, r1
 8008cca:	469a      	mov	sl, r3
 8008ccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cd2:	d807      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cd4:	2f62      	cmp	r7, #98	; 0x62
 8008cd6:	d80a      	bhi.n	8008cee <_printf_i+0x32>
 8008cd8:	2f00      	cmp	r7, #0
 8008cda:	f000 80d5 	beq.w	8008e88 <_printf_i+0x1cc>
 8008cde:	2f58      	cmp	r7, #88	; 0x58
 8008ce0:	f000 80c1 	beq.w	8008e66 <_printf_i+0x1aa>
 8008ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cec:	e03a      	b.n	8008d64 <_printf_i+0xa8>
 8008cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cf2:	2b15      	cmp	r3, #21
 8008cf4:	d8f6      	bhi.n	8008ce4 <_printf_i+0x28>
 8008cf6:	a101      	add	r1, pc, #4	; (adr r1, 8008cfc <_printf_i+0x40>)
 8008cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cfc:	08008d55 	.word	0x08008d55
 8008d00:	08008d69 	.word	0x08008d69
 8008d04:	08008ce5 	.word	0x08008ce5
 8008d08:	08008ce5 	.word	0x08008ce5
 8008d0c:	08008ce5 	.word	0x08008ce5
 8008d10:	08008ce5 	.word	0x08008ce5
 8008d14:	08008d69 	.word	0x08008d69
 8008d18:	08008ce5 	.word	0x08008ce5
 8008d1c:	08008ce5 	.word	0x08008ce5
 8008d20:	08008ce5 	.word	0x08008ce5
 8008d24:	08008ce5 	.word	0x08008ce5
 8008d28:	08008e6f 	.word	0x08008e6f
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008e29 	.word	0x08008e29
 8008d34:	08008ce5 	.word	0x08008ce5
 8008d38:	08008ce5 	.word	0x08008ce5
 8008d3c:	08008e91 	.word	0x08008e91
 8008d40:	08008ce5 	.word	0x08008ce5
 8008d44:	08008d95 	.word	0x08008d95
 8008d48:	08008ce5 	.word	0x08008ce5
 8008d4c:	08008ce5 	.word	0x08008ce5
 8008d50:	08008e31 	.word	0x08008e31
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	602a      	str	r2, [r5, #0]
 8008d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d64:	2301      	movs	r3, #1
 8008d66:	e0a0      	b.n	8008eaa <_printf_i+0x1ee>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	682b      	ldr	r3, [r5, #0]
 8008d6c:	0607      	lsls	r7, r0, #24
 8008d6e:	f103 0104 	add.w	r1, r3, #4
 8008d72:	6029      	str	r1, [r5, #0]
 8008d74:	d501      	bpl.n	8008d7a <_printf_i+0xbe>
 8008d76:	681e      	ldr	r6, [r3, #0]
 8008d78:	e003      	b.n	8008d82 <_printf_i+0xc6>
 8008d7a:	0646      	lsls	r6, r0, #25
 8008d7c:	d5fb      	bpl.n	8008d76 <_printf_i+0xba>
 8008d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	da03      	bge.n	8008d8e <_printf_i+0xd2>
 8008d86:	232d      	movs	r3, #45	; 0x2d
 8008d88:	4276      	negs	r6, r6
 8008d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d8e:	230a      	movs	r3, #10
 8008d90:	4859      	ldr	r0, [pc, #356]	; (8008ef8 <_printf_i+0x23c>)
 8008d92:	e012      	b.n	8008dba <_printf_i+0xfe>
 8008d94:	682b      	ldr	r3, [r5, #0]
 8008d96:	6820      	ldr	r0, [r4, #0]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	6029      	str	r1, [r5, #0]
 8008d9c:	0605      	lsls	r5, r0, #24
 8008d9e:	d501      	bpl.n	8008da4 <_printf_i+0xe8>
 8008da0:	681e      	ldr	r6, [r3, #0]
 8008da2:	e002      	b.n	8008daa <_printf_i+0xee>
 8008da4:	0641      	lsls	r1, r0, #25
 8008da6:	d5fb      	bpl.n	8008da0 <_printf_i+0xe4>
 8008da8:	881e      	ldrh	r6, [r3, #0]
 8008daa:	2f6f      	cmp	r7, #111	; 0x6f
 8008dac:	bf0c      	ite	eq
 8008dae:	2308      	moveq	r3, #8
 8008db0:	230a      	movne	r3, #10
 8008db2:	4851      	ldr	r0, [pc, #324]	; (8008ef8 <_printf_i+0x23c>)
 8008db4:	2100      	movs	r1, #0
 8008db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dba:	6865      	ldr	r5, [r4, #4]
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	bfa8      	it	ge
 8008dc0:	6821      	ldrge	r1, [r4, #0]
 8008dc2:	60a5      	str	r5, [r4, #8]
 8008dc4:	bfa4      	itt	ge
 8008dc6:	f021 0104 	bicge.w	r1, r1, #4
 8008dca:	6021      	strge	r1, [r4, #0]
 8008dcc:	b90e      	cbnz	r6, 8008dd2 <_printf_i+0x116>
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	d04b      	beq.n	8008e6a <_printf_i+0x1ae>
 8008dd2:	4615      	mov	r5, r2
 8008dd4:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dd8:	fb03 6711 	mls	r7, r3, r1, r6
 8008ddc:	5dc7      	ldrb	r7, [r0, r7]
 8008dde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008de2:	4637      	mov	r7, r6
 8008de4:	42bb      	cmp	r3, r7
 8008de6:	460e      	mov	r6, r1
 8008de8:	d9f4      	bls.n	8008dd4 <_printf_i+0x118>
 8008dea:	2b08      	cmp	r3, #8
 8008dec:	d10b      	bne.n	8008e06 <_printf_i+0x14a>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	07de      	lsls	r6, r3, #31
 8008df2:	d508      	bpl.n	8008e06 <_printf_i+0x14a>
 8008df4:	6923      	ldr	r3, [r4, #16]
 8008df6:	6861      	ldr	r1, [r4, #4]
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	bfde      	ittt	le
 8008dfc:	2330      	movle	r3, #48	; 0x30
 8008dfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e06:	1b52      	subs	r2, r2, r5
 8008e08:	6122      	str	r2, [r4, #16]
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f8cd a000 	str.w	sl, [sp]
 8008e14:	aa03      	add	r2, sp, #12
 8008e16:	f7ff fedf 	bl	8008bd8 <_printf_common>
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d14a      	bne.n	8008eb4 <_printf_i+0x1f8>
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e22:	b004      	add	sp, #16
 8008e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	f043 0320 	orr.w	r3, r3, #32
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	2778      	movs	r7, #120	; 0x78
 8008e32:	4832      	ldr	r0, [pc, #200]	; (8008efc <_printf_i+0x240>)
 8008e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	6829      	ldr	r1, [r5, #0]
 8008e3c:	061f      	lsls	r7, r3, #24
 8008e3e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e42:	d402      	bmi.n	8008e4a <_printf_i+0x18e>
 8008e44:	065f      	lsls	r7, r3, #25
 8008e46:	bf48      	it	mi
 8008e48:	b2b6      	uxthmi	r6, r6
 8008e4a:	07df      	lsls	r7, r3, #31
 8008e4c:	bf48      	it	mi
 8008e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e52:	6029      	str	r1, [r5, #0]
 8008e54:	bf48      	it	mi
 8008e56:	6023      	strmi	r3, [r4, #0]
 8008e58:	b91e      	cbnz	r6, 8008e62 <_printf_i+0x1a6>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	f023 0320 	bic.w	r3, r3, #32
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	2310      	movs	r3, #16
 8008e64:	e7a6      	b.n	8008db4 <_printf_i+0xf8>
 8008e66:	4824      	ldr	r0, [pc, #144]	; (8008ef8 <_printf_i+0x23c>)
 8008e68:	e7e4      	b.n	8008e34 <_printf_i+0x178>
 8008e6a:	4615      	mov	r5, r2
 8008e6c:	e7bd      	b.n	8008dea <_printf_i+0x12e>
 8008e6e:	682b      	ldr	r3, [r5, #0]
 8008e70:	6826      	ldr	r6, [r4, #0]
 8008e72:	1d18      	adds	r0, r3, #4
 8008e74:	6961      	ldr	r1, [r4, #20]
 8008e76:	6028      	str	r0, [r5, #0]
 8008e78:	0635      	lsls	r5, r6, #24
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	d501      	bpl.n	8008e82 <_printf_i+0x1c6>
 8008e7e:	6019      	str	r1, [r3, #0]
 8008e80:	e002      	b.n	8008e88 <_printf_i+0x1cc>
 8008e82:	0670      	lsls	r0, r6, #25
 8008e84:	d5fb      	bpl.n	8008e7e <_printf_i+0x1c2>
 8008e86:	8019      	strh	r1, [r3, #0]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4615      	mov	r5, r2
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	e7bc      	b.n	8008e0a <_printf_i+0x14e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	2100      	movs	r1, #0
 8008e94:	1d1a      	adds	r2, r3, #4
 8008e96:	602a      	str	r2, [r5, #0]
 8008e98:	681d      	ldr	r5, [r3, #0]
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f909 	bl	80090b4 <memchr>
 8008ea2:	b108      	cbz	r0, 8008ea8 <_printf_i+0x1ec>
 8008ea4:	1b40      	subs	r0, r0, r5
 8008ea6:	6060      	str	r0, [r4, #4]
 8008ea8:	6863      	ldr	r3, [r4, #4]
 8008eaa:	6123      	str	r3, [r4, #16]
 8008eac:	2300      	movs	r3, #0
 8008eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb2:	e7aa      	b.n	8008e0a <_printf_i+0x14e>
 8008eb4:	462a      	mov	r2, r5
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4640      	mov	r0, r8
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	47d0      	blx	sl
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d0ad      	beq.n	8008e1e <_printf_i+0x162>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	079b      	lsls	r3, r3, #30
 8008ec6:	d413      	bmi.n	8008ef0 <_printf_i+0x234>
 8008ec8:	68e0      	ldr	r0, [r4, #12]
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	4298      	cmp	r0, r3
 8008ece:	bfb8      	it	lt
 8008ed0:	4618      	movlt	r0, r3
 8008ed2:	e7a6      	b.n	8008e22 <_printf_i+0x166>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	4649      	mov	r1, r9
 8008eda:	4640      	mov	r0, r8
 8008edc:	47d0      	blx	sl
 8008ede:	3001      	adds	r0, #1
 8008ee0:	d09d      	beq.n	8008e1e <_printf_i+0x162>
 8008ee2:	3501      	adds	r5, #1
 8008ee4:	68e3      	ldr	r3, [r4, #12]
 8008ee6:	9903      	ldr	r1, [sp, #12]
 8008ee8:	1a5b      	subs	r3, r3, r1
 8008eea:	42ab      	cmp	r3, r5
 8008eec:	dcf2      	bgt.n	8008ed4 <_printf_i+0x218>
 8008eee:	e7eb      	b.n	8008ec8 <_printf_i+0x20c>
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	f104 0619 	add.w	r6, r4, #25
 8008ef6:	e7f5      	b.n	8008ee4 <_printf_i+0x228>
 8008ef8:	08009fd9 	.word	0x08009fd9
 8008efc:	08009fea 	.word	0x08009fea

08008f00 <__swbuf_r>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	460e      	mov	r6, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	4605      	mov	r5, r0
 8008f08:	b118      	cbz	r0, 8008f12 <__swbuf_r+0x12>
 8008f0a:	6a03      	ldr	r3, [r0, #32]
 8008f0c:	b90b      	cbnz	r3, 8008f12 <__swbuf_r+0x12>
 8008f0e:	f7ff fa29 	bl	8008364 <__sinit>
 8008f12:	69a3      	ldr	r3, [r4, #24]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	071a      	lsls	r2, r3, #28
 8008f1a:	d525      	bpl.n	8008f68 <__swbuf_r+0x68>
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	b31b      	cbz	r3, 8008f68 <__swbuf_r+0x68>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	6922      	ldr	r2, [r4, #16]
 8008f24:	b2f6      	uxtb	r6, r6
 8008f26:	1a98      	subs	r0, r3, r2
 8008f28:	6963      	ldr	r3, [r4, #20]
 8008f2a:	4637      	mov	r7, r6
 8008f2c:	4283      	cmp	r3, r0
 8008f2e:	dc04      	bgt.n	8008f3a <__swbuf_r+0x3a>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4628      	mov	r0, r5
 8008f34:	f7ff fcbe 	bl	80088b4 <_fflush_r>
 8008f38:	b9e0      	cbnz	r0, 8008f74 <__swbuf_r+0x74>
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	60a3      	str	r3, [r4, #8]
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	701e      	strb	r6, [r3, #0]
 8008f48:	6962      	ldr	r2, [r4, #20]
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d004      	beq.n	8008f5a <__swbuf_r+0x5a>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	07db      	lsls	r3, r3, #31
 8008f54:	d506      	bpl.n	8008f64 <__swbuf_r+0x64>
 8008f56:	2e0a      	cmp	r6, #10
 8008f58:	d104      	bne.n	8008f64 <__swbuf_r+0x64>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7ff fca9 	bl	80088b4 <_fflush_r>
 8008f62:	b938      	cbnz	r0, 8008f74 <__swbuf_r+0x74>
 8008f64:	4638      	mov	r0, r7
 8008f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f806 	bl	8008f7c <__swsetup_r>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d0d5      	beq.n	8008f20 <__swbuf_r+0x20>
 8008f74:	f04f 37ff 	mov.w	r7, #4294967295
 8008f78:	e7f4      	b.n	8008f64 <__swbuf_r+0x64>
	...

08008f7c <__swsetup_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4b2a      	ldr	r3, [pc, #168]	; (8009028 <__swsetup_r+0xac>)
 8008f80:	4605      	mov	r5, r0
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	460c      	mov	r4, r1
 8008f86:	b118      	cbz	r0, 8008f90 <__swsetup_r+0x14>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <__swsetup_r+0x14>
 8008f8c:	f7ff f9ea 	bl	8008364 <__sinit>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f96:	0718      	lsls	r0, r3, #28
 8008f98:	d422      	bmi.n	8008fe0 <__swsetup_r+0x64>
 8008f9a:	06d9      	lsls	r1, r3, #27
 8008f9c:	d407      	bmi.n	8008fae <__swsetup_r+0x32>
 8008f9e:	2309      	movs	r3, #9
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	e034      	b.n	8009018 <__swsetup_r+0x9c>
 8008fae:	0758      	lsls	r0, r3, #29
 8008fb0:	d512      	bpl.n	8008fd8 <__swsetup_r+0x5c>
 8008fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb4:	b141      	cbz	r1, 8008fc8 <__swsetup_r+0x4c>
 8008fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fba:	4299      	cmp	r1, r3
 8008fbc:	d002      	beq.n	8008fc4 <__swsetup_r+0x48>
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7ff fafa 	bl	80085b8 <_free_r>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6363      	str	r3, [r4, #52]	; 0x34
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6063      	str	r3, [r4, #4]
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f043 0308 	orr.w	r3, r3, #8
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	b94b      	cbnz	r3, 8008ff8 <__swsetup_r+0x7c>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fee:	d003      	beq.n	8008ff8 <__swsetup_r+0x7c>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 f891 	bl	800911a <__smakebuf_r>
 8008ff8:	89a0      	ldrh	r0, [r4, #12]
 8008ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ffe:	f010 0301 	ands.w	r3, r0, #1
 8009002:	d00a      	beq.n	800901a <__swsetup_r+0x9e>
 8009004:	2300      	movs	r3, #0
 8009006:	60a3      	str	r3, [r4, #8]
 8009008:	6963      	ldr	r3, [r4, #20]
 800900a:	425b      	negs	r3, r3
 800900c:	61a3      	str	r3, [r4, #24]
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	b943      	cbnz	r3, 8009024 <__swsetup_r+0xa8>
 8009012:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009016:	d1c4      	bne.n	8008fa2 <__swsetup_r+0x26>
 8009018:	bd38      	pop	{r3, r4, r5, pc}
 800901a:	0781      	lsls	r1, r0, #30
 800901c:	bf58      	it	pl
 800901e:	6963      	ldrpl	r3, [r4, #20]
 8009020:	60a3      	str	r3, [r4, #8]
 8009022:	e7f4      	b.n	800900e <__swsetup_r+0x92>
 8009024:	2000      	movs	r0, #0
 8009026:	e7f7      	b.n	8009018 <__swsetup_r+0x9c>
 8009028:	20000910 	.word	0x20000910

0800902c <_raise_r>:
 800902c:	291f      	cmp	r1, #31
 800902e:	b538      	push	{r3, r4, r5, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	d904      	bls.n	8009040 <_raise_r+0x14>
 8009036:	2316      	movs	r3, #22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009042:	b112      	cbz	r2, 800904a <_raise_r+0x1e>
 8009044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009048:	b94b      	cbnz	r3, 800905e <_raise_r+0x32>
 800904a:	4620      	mov	r0, r4
 800904c:	f000 f830 	bl	80090b0 <_getpid_r>
 8009050:	462a      	mov	r2, r5
 8009052:	4601      	mov	r1, r0
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800905a:	f000 b817 	b.w	800908c <_kill_r>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d00a      	beq.n	8009078 <_raise_r+0x4c>
 8009062:	1c59      	adds	r1, r3, #1
 8009064:	d103      	bne.n	800906e <_raise_r+0x42>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	2001      	movs	r0, #1
 800906c:	e7e7      	b.n	800903e <_raise_r+0x12>
 800906e:	2400      	movs	r4, #0
 8009070:	4628      	mov	r0, r5
 8009072:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009076:	4798      	blx	r3
 8009078:	2000      	movs	r0, #0
 800907a:	e7e0      	b.n	800903e <_raise_r+0x12>

0800907c <raise>:
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <raise+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f7ff bfd3 	b.w	800902c <_raise_r>
 8009086:	bf00      	nop
 8009088:	20000910 	.word	0x20000910

0800908c <_kill_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	2300      	movs	r3, #0
 8009090:	4d06      	ldr	r5, [pc, #24]	; (80090ac <_kill_r+0x20>)
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f9 fd03 	bl	8002aa4 <_kill>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_kill_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_kill_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	20002e98 	.word	0x20002e98

080090b0 <_getpid_r>:
 80090b0:	f7f9 bcf6 	b.w	8002aa0 <_getpid>

080090b4 <memchr>:
 80090b4:	4603      	mov	r3, r0
 80090b6:	b510      	push	{r4, lr}
 80090b8:	b2c9      	uxtb	r1, r1
 80090ba:	4402      	add	r2, r0
 80090bc:	4293      	cmp	r3, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	d101      	bne.n	80090c6 <memchr+0x12>
 80090c2:	2000      	movs	r0, #0
 80090c4:	e003      	b.n	80090ce <memchr+0x1a>
 80090c6:	7804      	ldrb	r4, [r0, #0]
 80090c8:	3301      	adds	r3, #1
 80090ca:	428c      	cmp	r4, r1
 80090cc:	d1f6      	bne.n	80090bc <memchr+0x8>
 80090ce:	bd10      	pop	{r4, pc}

080090d0 <__swhatbuf_r>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	460c      	mov	r4, r1
 80090d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d8:	4615      	mov	r5, r2
 80090da:	2900      	cmp	r1, #0
 80090dc:	461e      	mov	r6, r3
 80090de:	b096      	sub	sp, #88	; 0x58
 80090e0:	da0c      	bge.n	80090fc <__swhatbuf_r+0x2c>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	2100      	movs	r1, #0
 80090e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090ea:	bf0c      	ite	eq
 80090ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80090f0:	2340      	movne	r3, #64	; 0x40
 80090f2:	2000      	movs	r0, #0
 80090f4:	6031      	str	r1, [r6, #0]
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	b016      	add	sp, #88	; 0x58
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	466a      	mov	r2, sp
 80090fe:	f000 f849 	bl	8009194 <_fstat_r>
 8009102:	2800      	cmp	r0, #0
 8009104:	dbed      	blt.n	80090e2 <__swhatbuf_r+0x12>
 8009106:	9901      	ldr	r1, [sp, #4]
 8009108:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800910c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009110:	4259      	negs	r1, r3
 8009112:	4159      	adcs	r1, r3
 8009114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009118:	e7eb      	b.n	80090f2 <__swhatbuf_r+0x22>

0800911a <__smakebuf_r>:
 800911a:	898b      	ldrh	r3, [r1, #12]
 800911c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800911e:	079d      	lsls	r5, r3, #30
 8009120:	4606      	mov	r6, r0
 8009122:	460c      	mov	r4, r1
 8009124:	d507      	bpl.n	8009136 <__smakebuf_r+0x1c>
 8009126:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	6123      	str	r3, [r4, #16]
 800912e:	2301      	movs	r3, #1
 8009130:	6163      	str	r3, [r4, #20]
 8009132:	b002      	add	sp, #8
 8009134:	bd70      	pop	{r4, r5, r6, pc}
 8009136:	466a      	mov	r2, sp
 8009138:	ab01      	add	r3, sp, #4
 800913a:	f7ff ffc9 	bl	80090d0 <__swhatbuf_r>
 800913e:	9900      	ldr	r1, [sp, #0]
 8009140:	4605      	mov	r5, r0
 8009142:	4630      	mov	r0, r6
 8009144:	f7ff faa8 	bl	8008698 <_malloc_r>
 8009148:	b948      	cbnz	r0, 800915e <__smakebuf_r+0x44>
 800914a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914e:	059a      	lsls	r2, r3, #22
 8009150:	d4ef      	bmi.n	8009132 <__smakebuf_r+0x18>
 8009152:	f023 0303 	bic.w	r3, r3, #3
 8009156:	f043 0302 	orr.w	r3, r3, #2
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	e7e3      	b.n	8009126 <__smakebuf_r+0xc>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	6020      	str	r0, [r4, #0]
 8009162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	9b00      	ldr	r3, [sp, #0]
 800916a:	6120      	str	r0, [r4, #16]
 800916c:	6163      	str	r3, [r4, #20]
 800916e:	9b01      	ldr	r3, [sp, #4]
 8009170:	b15b      	cbz	r3, 800918a <__smakebuf_r+0x70>
 8009172:	4630      	mov	r0, r6
 8009174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009178:	f000 f81e 	bl	80091b8 <_isatty_r>
 800917c:	b128      	cbz	r0, 800918a <__smakebuf_r+0x70>
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	f023 0303 	bic.w	r3, r3, #3
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	431d      	orrs	r5, r3
 800918e:	81a5      	strh	r5, [r4, #12]
 8009190:	e7cf      	b.n	8009132 <__smakebuf_r+0x18>
	...

08009194 <_fstat_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	2300      	movs	r3, #0
 8009198:	4d06      	ldr	r5, [pc, #24]	; (80091b4 <_fstat_r+0x20>)
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	f7f9 fcae 	bl	8002b02 <_fstat>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d102      	bne.n	80091b0 <_fstat_r+0x1c>
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	b103      	cbz	r3, 80091b0 <_fstat_r+0x1c>
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	bf00      	nop
 80091b4:	20002e98 	.word	0x20002e98

080091b8 <_isatty_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	2300      	movs	r3, #0
 80091bc:	4d05      	ldr	r5, [pc, #20]	; (80091d4 <_isatty_r+0x1c>)
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f9 fca2 	bl	8002b0c <_isatty>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_isatty_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_isatty_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	20002e98 	.word	0x20002e98

080091d8 <_init>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr

080091e4 <_fini>:
 80091e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e6:	bf00      	nop
 80091e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ea:	bc08      	pop	{r3}
 80091ec:	469e      	mov	lr, r3
 80091ee:	4770      	bx	lr
