
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009394  08009394  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08009394  08009394  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009394  08009394  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009398  08009398  00019398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800939c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002320  20000018  080093b4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002338  080093b4  00022338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a1af  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fbe  00000000  00000000  0003a233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  0003e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001318  00000000  00000000  0003fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019dfa  00000000  00000000  00040d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d917  00000000  00000000  0005ab92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aed2  00000000  00000000  000784a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006794  00000000  00000000  0011337c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00119b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08008928 	.word	0x08008928

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08008928 	.word	0x08008928

08000150 <getPlayer>:


extern dificultad_t dificultad;


player_t *getPlayer(){
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0

	return &Player;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getPlayer+0x10>)
}
 8000156:	4618      	mov	r0, r3
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000034 	.word	0x20000034

08000164 <getAlien>:

alien_t *getAlien(uint8_t fila, uint8_t columna){
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
 800016a:	4603      	mov	r3, r0
 800016c:	460a      	mov	r2, r1
 800016e:	71fb      	strb	r3, [r7, #7]
 8000170:	4613      	mov	r3, r2
 8000172:	71bb      	strb	r3, [r7, #6]
	return &Alien[fila][columna];
 8000174:	79f9      	ldrb	r1, [r7, #7]
 8000176:	79bb      	ldrb	r3, [r7, #6]
 8000178:	461a      	mov	r2, r3
 800017a:	0092      	lsls	r2, r2, #2
 800017c:	441a      	add	r2, r3
 800017e:	460b      	mov	r3, r1
 8000180:	009b      	lsls	r3, r3, #2
 8000182:	440b      	add	r3, r1
 8000184:	00d9      	lsls	r1, r3, #3
 8000186:	1ac9      	subs	r1, r1, r3
 8000188:	1853      	adds	r3, r2, r1
 800018a:	4a03      	ldr	r2, [pc, #12]	; (8000198 <getAlien+0x34>)
 800018c:	4413      	add	r3, r2
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000040 	.word	0x20000040

0800019c <getMovAliens>:

movimiento_aliens_t *getMovAliens(){
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0
	return &movimiento_Aliens;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <getMovAliens+0x10>)
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000003c 	.word	0x2000003c

080001b0 <getDisparo>:

disparo_t *getDisparo(){
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	return &Disparo;
 80001b4:	4b02      	ldr	r3, [pc, #8]	; (80001c0 <getDisparo+0x10>)
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	20000038 	.word	0x20000038

080001c4 <playerInit>:

void playerInit(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	Player.posicion_X = 64;
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <playerInit+0x14>)
 80001ca:	2240      	movs	r2, #64	; 0x40
 80001cc:	705a      	strb	r2, [r3, #1]

}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000034 	.word	0x20000034

080001dc <plotPlayer>:

void plotPlayer(uint8_t direccion, player_t *player){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af02      	add	r7, sp, #8
 80001e2:	4603      	mov	r3, r0
 80001e4:	6039      	str	r1, [r7, #0]
 80001e6:	71fb      	strb	r3, [r7, #7]

	if(direccion == derecha){
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	2b02      	cmp	r3, #2
 80001ec:	d10e      	bne.n	800020c <plotPlayer+0x30>

		if(player->posicion_X >= 120){
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	785b      	ldrb	r3, [r3, #1]
 80001f2:	2b77      	cmp	r3, #119	; 0x77
 80001f4:	d903      	bls.n	80001fe <plotPlayer+0x22>
			player->posicion_X = 120;
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	2278      	movs	r2, #120	; 0x78
 80001fa:	705a      	strb	r2, [r3, #1]
 80001fc:	e017      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X + 4;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	3304      	adds	r3, #4
 8000204:	b2da      	uxtb	r2, r3
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	705a      	strb	r2, [r3, #1]
 800020a:	e010      	b.n	800022e <plotPlayer+0x52>
		}

	}
	else if(direccion == izquierda){
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	2b03      	cmp	r3, #3
 8000210:	d10d      	bne.n	800022e <plotPlayer+0x52>

		if(player->posicion_X <= 0){
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d103      	bne.n	8000222 <plotPlayer+0x46>
			player->posicion_X = 0;
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	705a      	strb	r2, [r3, #1]
 8000220:	e005      	b.n	800022e <plotPlayer+0x52>
		}
		else{
			player->posicion_X = player->posicion_X - 4;
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	3b04      	subs	r3, #4
 8000228:	b2da      	uxtb	r2, r3
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	705a      	strb	r2, [r3, #1]
		}
	}

	SSD1306_DrawBitmap(player->posicion_X, 56, nave, 8,8,1);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	785b      	ldrb	r3, [r3, #1]
 8000232:	b218      	sxth	r0, r3
 8000234:	2301      	movs	r3, #1
 8000236:	9301      	str	r3, [sp, #4]
 8000238:	2308      	movs	r3, #8
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	2308      	movs	r3, #8
 800023e:	4a04      	ldr	r2, [pc, #16]	; (8000250 <plotPlayer+0x74>)
 8000240:	2138      	movs	r1, #56	; 0x38
 8000242:	f001 f8f5 	bl	8001430 <SSD1306_DrawBitmap>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	08009164 	.word	0x08009164

08000254 <InvaderInit>:



void InvaderInit(){
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0

	movimiento_Aliens.orientacion = mov_derecha;
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <InvaderInit+0xa0>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]

	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000260:	2300      	movs	r3, #0
 8000262:	71fb      	strb	r3, [r7, #7]
 8000264:	e03e      	b.n	80002e4 <InvaderInit+0x90>
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000266:	2300      	movs	r3, #0
 8000268:	71bb      	strb	r3, [r7, #6]
 800026a:	e035      	b.n	80002d8 <InvaderInit+0x84>
			getAlien(y,x)->posicion_X  =  OFFSET_INICIO + x*(TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS);
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	461a      	mov	r2, r3
 8000270:	0052      	lsls	r2, r2, #1
 8000272:	441a      	add	r2, r3
 8000274:	0092      	lsls	r2, r2, #2
 8000276:	4413      	add	r3, r2
 8000278:	b2dc      	uxtb	r4, r3
 800027a:	79ba      	ldrb	r2, [r7, #6]
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff6f 	bl	8000164 <getAlien>
 8000286:	4603      	mov	r3, r0
 8000288:	f104 020a 	add.w	r2, r4, #10
 800028c:	b2d2      	uxtb	r2, r2
 800028e:	701a      	strb	r2, [r3, #0]
			getAlien(y,x)->posicion_Y = y*(TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS);
 8000290:	79ba      	ldrb	r2, [r7, #6]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4611      	mov	r1, r2
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff64 	bl	8000164 <getAlien>
 800029c:	4602      	mov	r2, r0
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	0089      	lsls	r1, r1, #2
 80002a4:	4419      	add	r1, r3
 80002a6:	0049      	lsls	r1, r1, #1
 80002a8:	440b      	add	r3, r1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	7053      	strb	r3, [r2, #1]
			getAlien(y, x)->vivo = true;
 80002ae:	79ba      	ldrb	r2, [r7, #6]
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4611      	mov	r1, r2
 80002b4:	4618      	mov	r0, r3
 80002b6:	f7ff ff55 	bl	8000164 <getAlien>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2201      	movs	r2, #1
 80002be:	709a      	strb	r2, [r3, #2]
			getAlien(y, x)->conteo_explosion = 2;
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff4c 	bl	8000164 <getAlien>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2202      	movs	r2, #2
 80002d0:	711a      	strb	r2, [r3, #4]
		for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3301      	adds	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b06      	cmp	r3, #6
 80002dc:	d9c6      	bls.n	800026c <InvaderInit+0x18>
	for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	3301      	adds	r3, #1
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d9bd      	bls.n	8000266 <InvaderInit+0x12>
		}
	}

}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd90      	pop	{r4, r7, pc}
 80002f4:	2000003c 	.word	0x2000003c

080002f8 <plotAliens>:

void plotAliens(){
 80002f8:	b5b0      	push	{r4, r5, r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af02      	add	r7, sp, #8


	//Esta parte se encarga de ir moviendo los aliens de izquierda a derecha, derecha a izquierda.
	if(getMovAliens()->conteo_horizontal % dificultad.velocidad_horizontal == 0){
 80002fe:	f7ff ff4d 	bl	800019c <getMovAliens>
 8000302:	4603      	mov	r3, r0
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4aa9      	ldr	r2, [pc, #676]	; (80005ac <plotAliens+0x2b4>)
 8000308:	7812      	ldrb	r2, [r2, #0]
 800030a:	fbb3 f1f2 	udiv	r1, r3, r2
 800030e:	fb01 f202 	mul.w	r2, r1, r2
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 80a8 	bne.w	800046c <plotAliens+0x174>
			switch(getMovAliens()->orientacion){
 800031c:	f7ff ff3e 	bl	800019c <getMovAliens>
 8000320:	4603      	mov	r3, r0
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <plotAliens+0x36>
 8000328:	2b01      	cmp	r3, #1
 800032a:	d025      	beq.n	8000378 <plotAliens+0x80>
							}
						}

						break;
				default:
					break;
 800032c:	e049      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	e01d      	b.n	8000370 <plotAliens+0x78>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]
 8000338:	e014      	b.n	8000364 <plotAliens+0x6c>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X + 1;
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	4611      	mov	r1, r2
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff0f 	bl	8000164 <getAlien>
 8000346:	4603      	mov	r3, r0
 8000348:	781c      	ldrb	r4, [r3, #0]
 800034a:	79ba      	ldrb	r2, [r7, #6]
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	4611      	mov	r1, r2
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ff07 	bl	8000164 <getAlien>
 8000356:	4603      	mov	r3, r0
 8000358:	1c62      	adds	r2, r4, #1
 800035a:	b2d2      	uxtb	r2, r2
 800035c:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	3301      	adds	r3, #1
 8000362:	71bb      	strb	r3, [r7, #6]
 8000364:	79bb      	ldrb	r3, [r7, #6]
 8000366:	2b06      	cmp	r3, #6
 8000368:	d9e7      	bls.n	800033a <plotAliens+0x42>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	3301      	adds	r3, #1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d9de      	bls.n	8000334 <plotAliens+0x3c>
					break;
 8000376:	e024      	b.n	80003c2 <plotAliens+0xca>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000378:	2300      	movs	r3, #0
 800037a:	717b      	strb	r3, [r7, #5]
 800037c:	e01d      	b.n	80003ba <plotAliens+0xc2>
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800037e:	2300      	movs	r3, #0
 8000380:	713b      	strb	r3, [r7, #4]
 8000382:	e014      	b.n	80003ae <plotAliens+0xb6>
								getAlien(y,x)->posicion_X  = getAlien(y,x)->posicion_X - 1;
 8000384:	793a      	ldrb	r2, [r7, #4]
 8000386:	797b      	ldrb	r3, [r7, #5]
 8000388:	4611      	mov	r1, r2
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff feea 	bl	8000164 <getAlien>
 8000390:	4603      	mov	r3, r0
 8000392:	781c      	ldrb	r4, [r3, #0]
 8000394:	793a      	ldrb	r2, [r7, #4]
 8000396:	797b      	ldrb	r3, [r7, #5]
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff fee2 	bl	8000164 <getAlien>
 80003a0:	4603      	mov	r3, r0
 80003a2:	1e62      	subs	r2, r4, #1
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	701a      	strb	r2, [r3, #0]
							for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80003a8:	793b      	ldrb	r3, [r7, #4]
 80003aa:	3301      	adds	r3, #1
 80003ac:	713b      	strb	r3, [r7, #4]
 80003ae:	793b      	ldrb	r3, [r7, #4]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d9e7      	bls.n	8000384 <plotAliens+0x8c>
						for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80003b4:	797b      	ldrb	r3, [r7, #5]
 80003b6:	3301      	adds	r3, #1
 80003b8:	717b      	strb	r3, [r7, #5]
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d9de      	bls.n	800037e <plotAliens+0x86>
						break;
 80003c0:	bf00      	nop
		}


	//Aqui se cambia la orientacion de los aliens: cuando se llega al borde de la pantalla los aliens pasan a moverse hacia la derecha o hacia la izquierda.

			if( (getAlien(0,6)->posicion_X + TAMANO_ALIEN + 4) >= 127){
 80003c2:	2106      	movs	r1, #6
 80003c4:	2000      	movs	r0, #0
 80003c6:	f7ff fecd 	bl	8000164 <getAlien>
 80003ca:	4603      	mov	r3, r0
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2b72      	cmp	r3, #114	; 0x72
 80003d0:	d904      	bls.n	80003dc <plotAliens+0xe4>

				getMovAliens()->orientacion = mov_izquierda;
 80003d2:	f7ff fee3 	bl	800019c <getMovAliens>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]
			}
			if( (getAlien(0,0)->posicion_X) <= 0){
 80003dc:	2100      	movs	r1, #0
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff fec0 	bl	8000164 <getAlien>
 80003e4:	4603      	mov	r3, r0
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10e      	bne.n	800040a <plotAliens+0x112>
				getMovAliens()->orientacion = mov_derecha;
 80003ec:	f7ff fed6 	bl	800019c <getMovAliens>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
				getMovAliens()->conteo_bajada = getMovAliens()->conteo_bajada + 1;
 80003f6:	f7ff fed1 	bl	800019c <getMovAliens>
 80003fa:	4603      	mov	r3, r0
 80003fc:	789c      	ldrb	r4, [r3, #2]
 80003fe:	f7ff fecd 	bl	800019c <getMovAliens>
 8000402:	4603      	mov	r3, r0
 8000404:	1c62      	adds	r2, r4, #1
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	709a      	strb	r2, [r3, #2]
			}



		//Esta parte se encarga de ir bajando los aliens.
			if(getMovAliens()->conteo_bajada == 10){
 800040a:	f7ff fec7 	bl	800019c <getMovAliens>
 800040e:	4603      	mov	r3, r0
 8000410:	789b      	ldrb	r3, [r3, #2]
 8000412:	2b0a      	cmp	r3, #10
 8000414:	d12a      	bne.n	800046c <plotAliens+0x174>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
 800041a:	e024      	b.n	8000466 <plotAliens+0x16e>
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 800041c:	2300      	movs	r3, #0
 800041e:	70bb      	strb	r3, [r7, #2]
 8000420:	e01b      	b.n	800045a <plotAliens+0x162>

						getAlien(y,x)->posicion_Y  = getAlien(y,x)->posicion_Y + dificultad.velocidad_bajada;
 8000422:	78ba      	ldrb	r2, [r7, #2]
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	4611      	mov	r1, r2
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fe9b 	bl	8000164 <getAlien>
 800042e:	4603      	mov	r3, r0
 8000430:	785d      	ldrb	r5, [r3, #1]
 8000432:	4b5e      	ldr	r3, [pc, #376]	; (80005ac <plotAliens+0x2b4>)
 8000434:	785c      	ldrb	r4, [r3, #1]
 8000436:	78ba      	ldrb	r2, [r7, #2]
 8000438:	78fb      	ldrb	r3, [r7, #3]
 800043a:	4611      	mov	r1, r2
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff fe91 	bl	8000164 <getAlien>
 8000442:	4603      	mov	r3, r0
 8000444:	192a      	adds	r2, r5, r4
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	705a      	strb	r2, [r3, #1]
						getMovAliens()->conteo_bajada = 0;
 800044a:	f7ff fea7 	bl	800019c <getMovAliens>
 800044e:	4603      	mov	r3, r0
 8000450:	2200      	movs	r2, #0
 8000452:	709a      	strb	r2, [r3, #2]
					for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000454:	78bb      	ldrb	r3, [r7, #2]
 8000456:	3301      	adds	r3, #1
 8000458:	70bb      	strb	r3, [r7, #2]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	2b06      	cmp	r3, #6
 800045e:	d9e0      	bls.n	8000422 <plotAliens+0x12a>
				for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	3301      	adds	r3, #1
 8000464:	70fb      	strb	r3, [r7, #3]
 8000466:	78fb      	ldrb	r3, [r7, #3]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d9d7      	bls.n	800041c <plotAliens+0x124>
				}
			}

	}

	getMovAliens()->conteo_horizontal = getMovAliens()->conteo_horizontal + 1;
 800046c:	f7ff fe96 	bl	800019c <getMovAliens>
 8000470:	4603      	mov	r3, r0
 8000472:	785c      	ldrb	r4, [r3, #1]
 8000474:	f7ff fe92 	bl	800019c <getMovAliens>
 8000478:	4603      	mov	r3, r0
 800047a:	1c62      	adds	r2, r4, #1
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	705a      	strb	r2, [r3, #1]


	//Acá se grafican los aliens en la pantalla.
	//Se grafican los aliens que solo estan vivos.
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000480:	2300      	movs	r3, #0
 8000482:	707b      	strb	r3, [r7, #1]
 8000484:	e089      	b.n	800059a <plotAliens+0x2a2>
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000486:	2300      	movs	r3, #0
 8000488:	703b      	strb	r3, [r7, #0]
 800048a:	e07f      	b.n	800058c <plotAliens+0x294>

					switch(y){
 800048c:	787b      	ldrb	r3, [r7, #1]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <plotAliens+0x1a0>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d026      	beq.n	80004e4 <plotAliens+0x1ec>
 8000496:	e04b      	b.n	8000530 <plotAliens+0x238>

					case 0:
						if(getAlien(y,x)->vivo == true){
 8000498:	783a      	ldrb	r2, [r7, #0]
 800049a:	787b      	ldrb	r3, [r7, #1]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff fe60 	bl	8000164 <getAlien>
 80004a4:	4603      	mov	r3, r0
 80004a6:	789b      	ldrb	r3, [r3, #2]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d167      	bne.n	800057c <plotAliens+0x284>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004ac:	783a      	ldrb	r2, [r7, #0]
 80004ae:	787b      	ldrb	r3, [r7, #1]
 80004b0:	4611      	mov	r1, r2
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe56 	bl	8000164 <getAlien>
 80004b8:	4603      	mov	r3, r0
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b21c      	sxth	r4, r3
 80004be:	783a      	ldrb	r2, [r7, #0]
 80004c0:	787b      	ldrb	r3, [r7, #1]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe4d 	bl	8000164 <getAlien>
 80004ca:	4603      	mov	r3, r0
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	b219      	sxth	r1, r3
 80004d0:	2301      	movs	r3, #1
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2308      	movs	r3, #8
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2310      	movs	r3, #16
 80004da:	4a35      	ldr	r2, [pc, #212]	; (80005b0 <plotAliens+0x2b8>)
 80004dc:	4620      	mov	r0, r4
 80004de:	f000 ffa7 	bl	8001430 <SSD1306_DrawBitmap>
						}
						break;
 80004e2:	e04b      	b.n	800057c <plotAliens+0x284>
					case 1:
						if(getAlien(y,x)->vivo == true){
 80004e4:	783a      	ldrb	r2, [r7, #0]
 80004e6:	787b      	ldrb	r3, [r7, #1]
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe3a 	bl	8000164 <getAlien>
 80004f0:	4603      	mov	r3, r0
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d143      	bne.n	8000580 <plotAliens+0x288>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderMiddleGfx,16,8,1);
 80004f8:	783a      	ldrb	r2, [r7, #0]
 80004fa:	787b      	ldrb	r3, [r7, #1]
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe30 	bl	8000164 <getAlien>
 8000504:	4603      	mov	r3, r0
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b21c      	sxth	r4, r3
 800050a:	783a      	ldrb	r2, [r7, #0]
 800050c:	787b      	ldrb	r3, [r7, #1]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff fe27 	bl	8000164 <getAlien>
 8000516:	4603      	mov	r3, r0
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	b219      	sxth	r1, r3
 800051c:	2301      	movs	r3, #1
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2308      	movs	r3, #8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2310      	movs	r3, #16
 8000526:	4a22      	ldr	r2, [pc, #136]	; (80005b0 <plotAliens+0x2b8>)
 8000528:	4620      	mov	r0, r4
 800052a:	f000 ff81 	bl	8001430 <SSD1306_DrawBitmap>
						}
						break;
 800052e:	e027      	b.n	8000580 <plotAliens+0x288>
					default:
						if(getAlien(y,x)->vivo == true){
 8000530:	783a      	ldrb	r2, [r7, #0]
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe14 	bl	8000164 <getAlien>
 800053c:	4603      	mov	r3, r0
 800053e:	789b      	ldrb	r3, [r3, #2]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d11f      	bne.n	8000584 <plotAliens+0x28c>
							SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,InvaderBottomGfx,16,8,1);
 8000544:	783a      	ldrb	r2, [r7, #0]
 8000546:	787b      	ldrb	r3, [r7, #1]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe0a 	bl	8000164 <getAlien>
 8000550:	4603      	mov	r3, r0
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b21c      	sxth	r4, r3
 8000556:	783a      	ldrb	r2, [r7, #0]
 8000558:	787b      	ldrb	r3, [r7, #1]
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe01 	bl	8000164 <getAlien>
 8000562:	4603      	mov	r3, r0
 8000564:	785b      	ldrb	r3, [r3, #1]
 8000566:	b219      	sxth	r1, r3
 8000568:	2301      	movs	r3, #1
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2308      	movs	r3, #8
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	2310      	movs	r3, #16
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <plotAliens+0x2bc>)
 8000574:	4620      	mov	r0, r4
 8000576:	f000 ff5b 	bl	8001430 <SSD1306_DrawBitmap>
						}
						break;
 800057a:	e003      	b.n	8000584 <plotAliens+0x28c>
						break;
 800057c:	bf00      	nop
 800057e:	e002      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000580:	bf00      	nop
 8000582:	e000      	b.n	8000586 <plotAliens+0x28e>
						break;
 8000584:	bf00      	nop
			for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000586:	783b      	ldrb	r3, [r7, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	703b      	strb	r3, [r7, #0]
 800058c:	783b      	ldrb	r3, [r7, #0]
 800058e:	2b06      	cmp	r3, #6
 8000590:	f67f af7c 	bls.w	800048c <plotAliens+0x194>
		for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000594:	787b      	ldrb	r3, [r7, #1]
 8000596:	3301      	adds	r3, #1
 8000598:	707b      	strb	r3, [r7, #1]
 800059a:	787b      	ldrb	r3, [r7, #1]
 800059c:	2b02      	cmp	r3, #2
 800059e:	f67f af72 	bls.w	8000486 <plotAliens+0x18e>
					}
			}

		}

}
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bdb0      	pop	{r4, r5, r7, pc}
 80005ac:	200000ac 	.word	0x200000ac
 80005b0:	0800917c 	.word	0x0800917c
 80005b4:	0800918c 	.word	0x0800918c

080005b8 <disparoInit>:


void disparoInit(){
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

	Disparo.posicion_x = 0;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <disparoInit+0x20>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	Disparo.posicion_y = POSICION_INICIAL_DISPARO;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <disparoInit+0x20>)
 80005c4:	223c      	movs	r2, #60	; 0x3c
 80005c6:	705a      	strb	r2, [r3, #1]
	Disparo.disparo = false;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <disparoInit+0x20>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	709a      	strb	r2, [r3, #2]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000038 	.word	0x20000038

080005dc <disparar>:


void disparar(){
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af02      	add	r7, sp, #8


			if(getDisparo()->numero_disparos == 1){
 80005e2:	f7ff fde5 	bl	80001b0 <getDisparo>
 80005e6:	4603      	mov	r3, r0
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d10c      	bne.n	8000608 <disparar+0x2c>
				getDisparo()->disparo = true;
 80005ee:	f7ff fddf 	bl	80001b0 <getDisparo>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2201      	movs	r2, #1
 80005f6:	709a      	strb	r2, [r3, #2]
				getDisparo()->posicion_x = getPlayer()->posicion_X;
 80005f8:	f7ff fdaa 	bl	8000150 <getPlayer>
 80005fc:	4604      	mov	r4, r0
 80005fe:	f7ff fdd7 	bl	80001b0 <getDisparo>
 8000602:	4603      	mov	r3, r0
 8000604:	7862      	ldrb	r2, [r4, #1]
 8000606:	701a      	strb	r2, [r3, #0]
			}


			if(getDisparo()->disparo == true){
 8000608:	f7ff fdd2 	bl	80001b0 <getDisparo>
 800060c:	4603      	mov	r3, r0
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d145      	bne.n	80006a0 <disparar+0xc4>
				SSD1306_DrawLine(getDisparo()->posicion_x + 4, getDisparo()->posicion_y, getDisparo()->posicion_x + 4, getDisparo()->posicion_y + 3, 1);
 8000614:	f7ff fdcc 	bl	80001b0 <getDisparo>
 8000618:	4603      	mov	r3, r0
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b29b      	uxth	r3, r3
 800061e:	3304      	adds	r3, #4
 8000620:	b29c      	uxth	r4, r3
 8000622:	f7ff fdc5 	bl	80001b0 <getDisparo>
 8000626:	4603      	mov	r3, r0
 8000628:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800062c:	b29d      	uxth	r5, r3
 800062e:	f7ff fdbf 	bl	80001b0 <getDisparo>
 8000632:	4603      	mov	r3, r0
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	3304      	adds	r3, #4
 800063a:	b29e      	uxth	r6, r3
 800063c:	f7ff fdb8 	bl	80001b0 <getDisparo>
 8000640:	4603      	mov	r3, r0
 8000642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000646:	b29b      	uxth	r3, r3
 8000648:	3303      	adds	r3, #3
 800064a:	b29b      	uxth	r3, r3
 800064c:	2201      	movs	r2, #1
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	4632      	mov	r2, r6
 8000652:	4629      	mov	r1, r5
 8000654:	4620      	mov	r0, r4
 8000656:	f001 f976 	bl	8001946 <SSD1306_DrawLine>
				getDisparo()->posicion_y = getDisparo()->posicion_y - VELOCIDAD_DISPARO_PLAYER;
 800065a:	f7ff fda9 	bl	80001b0 <getDisparo>
 800065e:	4603      	mov	r3, r0
 8000660:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	3b06      	subs	r3, #6
 8000668:	b2dc      	uxtb	r4, r3
 800066a:	f7ff fda1 	bl	80001b0 <getDisparo>
 800066e:	4603      	mov	r3, r0
 8000670:	b262      	sxtb	r2, r4
 8000672:	705a      	strb	r2, [r3, #1]


				if(getDisparo()->posicion_y <= 0){
 8000674:	f7ff fd9c 	bl	80001b0 <getDisparo>
 8000678:	4603      	mov	r3, r0
 800067a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dc0e      	bgt.n	80006a0 <disparar+0xc4>
					//Se reinician los valores del disparo
					getDisparo()->disparo = false;
 8000682:	f7ff fd95 	bl	80001b0 <getDisparo>
 8000686:	4603      	mov	r3, r0
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
					getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800068c:	f7ff fd90 	bl	80001b0 <getDisparo>
 8000690:	4603      	mov	r3, r0
 8000692:	223c      	movs	r2, #60	; 0x3c
 8000694:	705a      	strb	r2, [r3, #1]
					getDisparo()->numero_disparos = 0;
 8000696:	f7ff fd8b 	bl	80001b0 <getDisparo>
 800069a:	4603      	mov	r3, r0
 800069c:	2200      	movs	r2, #0
 800069e:	70da      	strb	r2, [r3, #3]
				}
			}


			//Eliminar los aliens si se produce un disparo. Se fija si el disparo se encuentra en el area comprendido por cada alien.
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	e0c0      	b.n	8000828 <disparar+0x24c>
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	71bb      	strb	r3, [r7, #6]
 80006aa:	e0b6      	b.n	800081a <disparar+0x23e>

					if( (getDisparo()->posicion_x >= getAlien(y,x)->posicion_X) &&  (getDisparo()->posicion_x <= getAlien(y,x)->posicion_X + (TAMANO_ALIEN+ ESPACIO_ENTRE_COLUMNAS) )){
 80006ac:	f7ff fd80 	bl	80001b0 <getDisparo>
 80006b0:	4603      	mov	r3, r0
 80006b2:	781c      	ldrb	r4, [r3, #0]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4611      	mov	r1, r2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff fd52 	bl	8000164 <getAlien>
 80006c0:	4603      	mov	r3, r0
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	429c      	cmp	r4, r3
 80006c6:	d35b      	bcc.n	8000780 <disparar+0x1a4>
 80006c8:	f7ff fd72 	bl	80001b0 <getDisparo>
 80006cc:	4603      	mov	r3, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461c      	mov	r4, r3
 80006d2:	79ba      	ldrb	r2, [r7, #6]
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4611      	mov	r1, r2
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd43 	bl	8000164 <getAlien>
 80006de:	4603      	mov	r3, r0
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	330d      	adds	r3, #13
 80006e4:	429c      	cmp	r4, r3
 80006e6:	dc4b      	bgt.n	8000780 <disparar+0x1a4>
						if( (getDisparo()->posicion_y >= getAlien(y,x)->posicion_Y) && (getDisparo()->posicion_y <= getAlien(y,x)->posicion_Y + (TAMANO_ALIEN+ ESPACIO_ENTRE_FILAS)) ){
 80006e8:	f7ff fd62 	bl	80001b0 <getDisparo>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80006f2:	461c      	mov	r4, r3
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd32 	bl	8000164 <getAlien>
 8000700:	4603      	mov	r3, r0
 8000702:	785b      	ldrb	r3, [r3, #1]
 8000704:	429c      	cmp	r4, r3
 8000706:	db3b      	blt.n	8000780 <disparar+0x1a4>
 8000708:	f7ff fd52 	bl	80001b0 <getDisparo>
 800070c:	4603      	mov	r3, r0
 800070e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000712:	461c      	mov	r4, r3
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fd22 	bl	8000164 <getAlien>
 8000720:	4603      	mov	r3, r0
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	330b      	adds	r3, #11
 8000726:	429c      	cmp	r4, r3
 8000728:	dc2a      	bgt.n	8000780 <disparar+0x1a4>

								if(getAlien(y,x)->vivo == true){
 800072a:	79ba      	ldrb	r2, [r7, #6]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd17 	bl	8000164 <getAlien>
 8000736:	4603      	mov	r3, r0
 8000738:	789b      	ldrb	r3, [r3, #2]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d120      	bne.n	8000780 <disparar+0x1a4>
									getAlien(y,x)->vivo = false;
 800073e:	79ba      	ldrb	r2, [r7, #6]
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd0d 	bl	8000164 <getAlien>
 800074a:	4603      	mov	r3, r0
 800074c:	2200      	movs	r2, #0
 800074e:	709a      	strb	r2, [r3, #2]
									getAlien(y,x)->explosion = true;
 8000750:	79ba      	ldrb	r2, [r7, #6]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fd04 	bl	8000164 <getAlien>
 800075c:	4603      	mov	r3, r0
 800075e:	2201      	movs	r2, #1
 8000760:	70da      	strb	r2, [r3, #3]

									//Se reinician los valores del disparo
									getDisparo()->disparo = false;
 8000762:	f7ff fd25 	bl	80001b0 <getDisparo>
 8000766:	4603      	mov	r3, r0
 8000768:	2200      	movs	r2, #0
 800076a:	709a      	strb	r2, [r3, #2]
									getDisparo()->posicion_y = POSICION_INICIAL_DISPARO;
 800076c:	f7ff fd20 	bl	80001b0 <getDisparo>
 8000770:	4603      	mov	r3, r0
 8000772:	223c      	movs	r2, #60	; 0x3c
 8000774:	705a      	strb	r2, [r3, #1]
									getDisparo()->numero_disparos = 0;
 8000776:	f7ff fd1b 	bl	80001b0 <getDisparo>
 800077a:	4603      	mov	r3, r0
 800077c:	2200      	movs	r2, #0
 800077e:	70da      	strb	r2, [r3, #3]
					}

					//Se grafican las explosiones, como la pantalla se refresca muy rapido, las se utiliza una variable 'conteo_explosiones' para
					//que se grafique la explosion por mas tiempo y cuando conteo_explosiones = 0 ahi se deja de graficar las explosiones.
					//Tambien se definio una variable explosion, si es true se entra a este if y se decrementa conteo_explosiones.
					if(getAlien(y,x)->explosion == true){
 8000780:	79ba      	ldrb	r2, [r7, #6]
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fcec 	bl	8000164 <getAlien>
 800078c:	4603      	mov	r3, r0
 800078e:	78db      	ldrb	r3, [r3, #3]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d13f      	bne.n	8000814 <disparar+0x238>
						SSD1306_DrawBitmap(getAlien(y,x)->posicion_X, getAlien(y,x)->posicion_Y,explosion,16,8,1);
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fce2 	bl	8000164 <getAlien>
 80007a0:	4603      	mov	r3, r0
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b21c      	sxth	r4, r3
 80007a6:	79ba      	ldrb	r2, [r7, #6]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fcd9 	bl	8000164 <getAlien>
 80007b2:	4603      	mov	r3, r0
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	b219      	sxth	r1, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2308      	movs	r3, #8
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2310      	movs	r3, #16
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <disparar+0x260>)
 80007c4:	4620      	mov	r0, r4
 80007c6:	f000 fe33 	bl	8001430 <SSD1306_DrawBitmap>
						getAlien(y,x)->conteo_explosion = getAlien(y,x)->conteo_explosion - 1;
 80007ca:	79ba      	ldrb	r2, [r7, #6]
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fcc7 	bl	8000164 <getAlien>
 80007d6:	4603      	mov	r3, r0
 80007d8:	791c      	ldrb	r4, [r3, #4]
 80007da:	79ba      	ldrb	r2, [r7, #6]
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fcbf 	bl	8000164 <getAlien>
 80007e6:	4603      	mov	r3, r0
 80007e8:	1e62      	subs	r2, r4, #1
 80007ea:	b2d2      	uxtb	r2, r2
 80007ec:	711a      	strb	r2, [r3, #4]

						if(getAlien(y,x)->conteo_explosion == 0){
 80007ee:	79ba      	ldrb	r2, [r7, #6]
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fcb5 	bl	8000164 <getAlien>
 80007fa:	4603      	mov	r3, r0
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d108      	bne.n	8000814 <disparar+0x238>
							getAlien(y,x)->explosion = false;
 8000802:	79ba      	ldrb	r2, [r7, #6]
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fcab 	bl	8000164 <getAlien>
 800080e:	4603      	mov	r3, r0
 8000810:	2200      	movs	r2, #0
 8000812:	70da      	strb	r2, [r3, #3]
				for(uint8_t x=0; x<NUM_ALIEN_COLUMNA; x++){
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	3301      	adds	r3, #1
 8000818:	71bb      	strb	r3, [r7, #6]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	2b06      	cmp	r3, #6
 800081e:	f67f af45 	bls.w	80006ac <disparar+0xd0>
			for(uint8_t y=0; y<NUM_ALIEN_FILA ;y++){
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	3301      	adds	r3, #1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	f67f af3b 	bls.w	80006a6 <disparar+0xca>
						}
					}
				}
			}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800083a:	bf00      	nop
 800083c:	0800916c 	.word	0x0800916c

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 fce0 	bl	8002208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f850 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f98a 	bl	8000b64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000850:	f000 f8a8 	bl	80009a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000854:	f000 f922 	bl	8000a9c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000858:	f000 f94e 	bl	8000af8 <MX_SPI1_Init>
  MX_ADC2_Init();
 800085c:	f000 f8e0 	bl	8000a20 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000860:	f004 ff5c 	bl	800571c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutexPuntajes */
  mutexPuntajesHandle = osMutexNew(&mutexPuntajes_attributes);
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <main+0x78>)
 8000866:	f005 f897 	bl	8005998 <osMutexNew>
 800086a:	4603      	mov	r3, r0
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <main+0x7c>)
 800086e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueJoystPant */
  queueJoystPantHandle = osMessageQueueNew (10, sizeof(botones_t), &queueJoystPant_attributes);
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <main+0x80>)
 8000872:	2103      	movs	r1, #3
 8000874:	200a      	movs	r0, #10
 8000876:	f005 f929 	bl	8005acc <osMessageQueueNew>
 800087a:	4603      	mov	r3, r0
 800087c:	4a11      	ldr	r2, [pc, #68]	; (80008c4 <main+0x84>)
 800087e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of JoystickTask */
  JoystickTaskHandle = osThreadNew(entryJoystick, NULL, &JoystickTask_attributes);
 8000880:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <main+0x88>)
 8000882:	2100      	movs	r1, #0
 8000884:	4811      	ldr	r0, [pc, #68]	; (80008cc <main+0x8c>)
 8000886:	f004 ffaf 	bl	80057e8 <osThreadNew>
 800088a:	4603      	mov	r3, r0
 800088c:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <main+0x90>)
 800088e:	6013      	str	r3, [r2, #0]

  /* creation of PantallaTask */
  PantallaTaskHandle = osThreadNew(entryPantalla, NULL, &PantallaTask_attributes);
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <main+0x94>)
 8000892:	2100      	movs	r1, #0
 8000894:	4810      	ldr	r0, [pc, #64]	; (80008d8 <main+0x98>)
 8000896:	f004 ffa7 	bl	80057e8 <osThreadNew>
 800089a:	4603      	mov	r3, r0
 800089c:	4a0f      	ldr	r2, [pc, #60]	; (80008dc <main+0x9c>)
 800089e:	6013      	str	r3, [r2, #0]

  /* creation of MemoriaTask */
  MemoriaTaskHandle = osThreadNew(entryMemoria, NULL, &MemoriaTask_attributes);
 80008a0:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <main+0xa0>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	480f      	ldr	r0, [pc, #60]	; (80008e4 <main+0xa4>)
 80008a6:	f004 ff9f 	bl	80057e8 <osThreadNew>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <main+0xa8>)
 80008ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008b0:	f004 ff66 	bl	8005780 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0x74>
 80008b6:	bf00      	nop
 80008b8:	08009220 	.word	0x08009220
 80008bc:	200001cc 	.word	0x200001cc
 80008c0:	08009208 	.word	0x08009208
 80008c4:	200001c8 	.word	0x200001c8
 80008c8:	0800919c 	.word	0x0800919c
 80008cc:	08000c85 	.word	0x08000c85
 80008d0:	200001bc 	.word	0x200001bc
 80008d4:	080091c0 	.word	0x080091c0
 80008d8:	08000d71 	.word	0x08000d71
 80008dc:	200001c0 	.word	0x200001c0
 80008e0:	080091e4 	.word	0x080091e4
 80008e4:	08000ded 	.word	0x08000ded
 80008e8:	200001c4 	.word	0x200001c4

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b094      	sub	sp, #80	; 0x50
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f007 ffd2 	bl	80088a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000938:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000942:	4618      	mov	r0, r3
 8000944:	f003 f96c 	bl	8003c20 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800094e:	f000 fb65 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fbd8 	bl	8004124 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800097a:	f000 fb4f 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097e:	2302      	movs	r3, #2
 8000980:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000986:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f003 fd88 	bl	80044a0 <HAL_RCCEx_PeriphCLKConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000996:	f000 fb41 	bl	800101c <Error_Handler>
  }
}
 800099a:	bf00      	nop
 800099c:	3750      	adds	r7, #80	; 0x50
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <MX_ADC1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009dc:	2201      	movs	r2, #1
 80009de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_ADC1_Init+0x74>)
 80009e2:	f001 fc67 	bl	80022b4 <HAL_ADC_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009ec:	f000 fb16 	bl	800101c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_ADC1_Init+0x74>)
 8000a02:	f001 ff1b 	bl	800283c <HAL_ADC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a0c:	f000 fb06 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200000b0 	.word	0x200000b0
 8000a1c:	40012400 	.word	0x40012400

08000a20 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <MX_ADC2_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a5e:	f001 fc29 	bl	80022b4 <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fad8 	bl	800101c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC2_Init+0x74>)
 8000a7e:	f001 fedd 	bl	800283c <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 fac8 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000e0 	.word	0x200000e0
 8000a98:	40012800 	.word	0x40012800

08000a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa2:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <MX_I2C1_Init+0x54>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aa8:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_I2C1_Init+0x58>)
 8000aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_I2C1_Init+0x50>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_I2C1_Init+0x50>)
 8000ada:	f002 fad7 	bl	800308c <HAL_I2C_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ae4:	f000 fa9a 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000110 	.word	0x20000110
 8000af0:	40005400 	.word	0x40005400
 8000af4:	00061a80 	.word	0x00061a80

08000af8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_SPI1_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_SPI1_Init+0x64>)
 8000b4a:	f003 fe15 	bl	8004778 <HAL_SPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 fa62 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000164 	.word	0x20000164
 8000b60:	40013000 	.word	0x40013000

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b78:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b7e:	f043 0310 	orr.w	r3, r3, #16
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b90:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f003 0320 	and.w	r3, r3, #32
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a2b      	ldr	r2, [pc, #172]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_GPIO_Init+0x110>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0308 	and.w	r3, r3, #8
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bde:	4826      	ldr	r0, [pc, #152]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000be0:	f002 fa3b 	bl	800305a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	4824      	ldr	r0, [pc, #144]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000bec:	f002 fa35 	bl	800305a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2120      	movs	r1, #32
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000bf6:	f002 fa30 	bl	800305a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	4619      	mov	r1, r3
 8000c12:	4819      	ldr	r0, [pc, #100]	; (8000c78 <MX_GPIO_Init+0x114>)
 8000c14:	f002 f886 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4814      	ldr	r0, [pc, #80]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c2c:	f002 f87a 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <MX_GPIO_Init+0x118>)
 8000c4a:	f002 f86b 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <MX_GPIO_Init+0x11c>)
 8000c66:	f002 f85d 	bl	8002d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <entryJoystick>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_entryJoystick */
void entryJoystick(void *argument)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	botones_t joystick;
	uint16_t val_x, val_y;

	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8000c8c:	f006 fab8 	bl	8007200 <xTaskGetTickCount>
 8000c90:	4603      	mov	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
  for(;;)
  {

	  //Joystick eje X: derecha o izquierda.
	  //config_ADC_canal0();
	  HAL_ADC_Start(&hadc1);
 8000c94:	4831      	ldr	r0, [pc, #196]	; (8000d5c <entryJoystick+0xd8>)
 8000c96:	f001 fbe5 	bl	8002464 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 8000c9a:	210a      	movs	r1, #10
 8000c9c:	482f      	ldr	r0, [pc, #188]	; (8000d5c <entryJoystick+0xd8>)
 8000c9e:	f001 fcbb 	bl	8002618 <HAL_ADC_PollForConversion>
	  val_x = HAL_ADC_GetValue(&hadc1);
 8000ca2:	482e      	ldr	r0, [pc, #184]	; (8000d5c <entryJoystick+0xd8>)
 8000ca4:	f001 fdbe 	bl	8002824 <HAL_ADC_GetValue>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 8000cac:	482b      	ldr	r0, [pc, #172]	; (8000d5c <entryJoystick+0xd8>)
 8000cae:	f001 fc87 	bl	80025c0 <HAL_ADC_Stop>

	  //Joystick eje Y: arriba o abajo.
	  //config_ADC_canal1();
	  HAL_ADC_Start(&hadc2);
 8000cb2:	482b      	ldr	r0, [pc, #172]	; (8000d60 <entryJoystick+0xdc>)
 8000cb4:	f001 fbd6 	bl	8002464 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 10);
 8000cb8:	210a      	movs	r1, #10
 8000cba:	4829      	ldr	r0, [pc, #164]	; (8000d60 <entryJoystick+0xdc>)
 8000cbc:	f001 fcac 	bl	8002618 <HAL_ADC_PollForConversion>
	  val_y = HAL_ADC_GetValue(&hadc2);
 8000cc0:	4827      	ldr	r0, [pc, #156]	; (8000d60 <entryJoystick+0xdc>)
 8000cc2:	f001 fdaf 	bl	8002824 <HAL_ADC_GetValue>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	82bb      	strh	r3, [r7, #20]
	  HAL_ADC_Stop(&hadc2);
 8000cca:	4825      	ldr	r0, [pc, #148]	; (8000d60 <entryJoystick+0xdc>)
 8000ccc:	f001 fc78 	bl	80025c0 <HAL_ADC_Stop>

	  if(val_x > 2000){
 8000cd0:	8afb      	ldrh	r3, [r7, #22]
 8000cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cd6:	d902      	bls.n	8000cde <entryJoystick+0x5a>
		  joystick.x_value = derecha;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	733b      	strb	r3, [r7, #12]
 8000cdc:	e008      	b.n	8000cf0 <entryJoystick+0x6c>
	  }
	  else if(val_x < 1600){
 8000cde:	8afb      	ldrh	r3, [r7, #22]
 8000ce0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000ce4:	d202      	bcs.n	8000cec <entryJoystick+0x68>
		  joystick.x_value = izquierda;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	733b      	strb	r3, [r7, #12]
 8000cea:	e001      	b.n	8000cf0 <entryJoystick+0x6c>
	  }
	  else{
		  joystick.x_value = nulo;
 8000cec:	2304      	movs	r3, #4
 8000cee:	733b      	strb	r3, [r7, #12]
	  }


	  if(val_y > 2000){
 8000cf0:	8abb      	ldrh	r3, [r7, #20]
 8000cf2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cf6:	d902      	bls.n	8000cfe <entryJoystick+0x7a>
		  joystick.y_value = abajo;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	737b      	strb	r3, [r7, #13]
 8000cfc:	e008      	b.n	8000d10 <entryJoystick+0x8c>
	  }
	  else if(val_y < 1600){
 8000cfe:	8abb      	ldrh	r3, [r7, #20]
 8000d00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000d04:	d202      	bcs.n	8000d0c <entryJoystick+0x88>
		  joystick.y_value = arriba;
 8000d06:	2300      	movs	r3, #0
 8000d08:	737b      	strb	r3, [r7, #13]
 8000d0a:	e001      	b.n	8000d10 <entryJoystick+0x8c>
	  }
	  else{
		  joystick.y_value = nulo;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	737b      	strb	r3, [r7, #13]
	  }

	  //Boton del Joystick.

	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == GPIO_PIN_RESET){
 8000d10:	2104      	movs	r1, #4
 8000d12:	4814      	ldr	r0, [pc, #80]	; (8000d64 <entryJoystick+0xe0>)
 8000d14:	f002 f98a 	bl	800302c <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <entryJoystick+0xa0>
		  joystick.boton = true;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73bb      	strb	r3, [r7, #14]
 8000d22:	e001      	b.n	8000d28 <entryJoystick+0xa4>
	  }
	  else{
		  joystick.boton = false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]
	  }


	osStatus_t res = osMessageQueuePut(queueJoystPantHandle, &joystick, 0, 0);
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <entryJoystick+0xe4>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	f107 010c 	add.w	r1, r7, #12
 8000d30:	2300      	movs	r3, #0
 8000d32:	2200      	movs	r2, #0
 8000d34:	f004 ff50 	bl	8005bd8 <osMessageQueuePut>
 8000d38:	6138      	str	r0, [r7, #16]
	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d005      	beq.n	8000d4c <entryJoystick+0xc8>
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <entryJoystick+0xe8>)
 8000d48:	f002 f987 	bl	800305a <HAL_GPIO_WritePin>

	vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(50));
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2132      	movs	r1, #50	; 0x32
 8000d52:	4618      	mov	r0, r3
 8000d54:	f006 f890 	bl	8006e78 <vTaskDelayUntil>
  {
 8000d58:	e79c      	b.n	8000c94 <entryJoystick+0x10>
 8000d5a:	bf00      	nop
 8000d5c:	200000b0 	.word	0x200000b0
 8000d60:	200000e0 	.word	0x200000e0
 8000d64:	40010800 	.word	0x40010800
 8000d68:	200001c8 	.word	0x200001c8
 8000d6c:	40011000 	.word	0x40011000

08000d70 <entryPantalla>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryPantalla */
void entryPantalla(void *argument)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entryPantalla */
  /* Infinite loop */

	//Inicializacion de la pantalla.
	SSD1306_Init ();
 8000d78:	f000 fbc2 	bl	8001500 <SSD1306_Init>
	SSD1306_Clear();
 8000d7c:	f000 ffb2 	bl	8001ce4 <SSD1306_Clear>
	SSD1306_UpdateScreen();
 8000d80:	f000 fc82 	bl	8001688 <SSD1306_UpdateScreen>

	//Se inicializan los botones (eje y, eje x del joystick y boton)
	botones_t joystick;
	menuInit();
 8000d84:	f000 f9f6 	bl	8001174 <menuInit>


	//Se inicializan las dificultades
	dificultad.velocidad_horizontal = 1;
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <entryPantalla+0x70>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
	dificultad.velocidad_bajada = 1;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <entryPantalla+0x70>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	705a      	strb	r2, [r3, #1]

  for(;;)
  {
	osStatus_t res = osMessageQueueGet(queueJoystPantHandle, &joystick, 0 , osWaitForever);	//Se espera a recibir los valores de los botones del joystick
 8000d94:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <entryPantalla+0x74>)
 8000d96:	6818      	ldr	r0, [r3, #0]
 8000d98:	f107 0108 	add.w	r1, r7, #8
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	2200      	movs	r2, #0
 8000da2:	f004 ff8d 	bl	8005cc0 <osMessageQueueGet>
 8000da6:	60f8      	str	r0, [r7, #12]

	if(res != osOK) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Si no se recibio correctamente, prender led.
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <entryPantalla+0x4c>
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <entryPantalla+0x78>)
 8000db6:	f002 f950 	bl	800305a <HAL_GPIO_WritePin>
 8000dba:	e00b      	b.n	8000dd4 <entryPantalla+0x64>

	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);	//Si se recibio correctamente de la cola.
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <entryPantalla+0x78>)
 8000dc4:	f002 f949 	bl	800305a <HAL_GPIO_WritePin>


		menuActualizar(joystick.x_value, joystick.y_value, joystick.boton);
 8000dc8:	7a3b      	ldrb	r3, [r7, #8]
 8000dca:	7a79      	ldrb	r1, [r7, #9]
 8000dcc:	7aba      	ldrb	r2, [r7, #10]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f9e4 	bl	800119c <menuActualizar>

	}


    SSD1306_UpdateScreen(); // update screen
 8000dd4:	f000 fc58 	bl	8001688 <SSD1306_UpdateScreen>
    SSD1306_Fill(0);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 fc83 	bl	80016e4 <SSD1306_Fill>
  {
 8000dde:	e7d9      	b.n	8000d94 <entryPantalla+0x24>
 8000de0:	200000ac 	.word	0x200000ac
 8000de4:	200001c8 	.word	0x200001c8
 8000de8:	40011000 	.word	0x40011000

08000dec <entryMemoria>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entryMemoria */
void entryMemoria(void *argument)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b095      	sub	sp, #84	; 0x54
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]


		//Tengo que hacer un ordenamiento de un vector de 5 para acomodar los puntajes de mayor a menor.

		//------------------------------------------------------------
			uint16_t address = MEMORIA_ADDRESS + 8;
 8000df4:	2308      	movs	r3, #8
 8000df6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			char buffer[6];
			char buffer_retorno[40];
			//char buffer_retorno1[6];
			strcpy(buffer, "lindo");
 8000dfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ff4 <entryMemoria+0x208>)
 8000dfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e04:	6018      	str	r0, [r3, #0]
 8000e06:	3304      	adds	r3, #4
 8000e08:	8019      	strh	r1, [r3, #0]

			uint8_t error[10];
			uint16_t puntaje1 = 1000;
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			uint16_t puntajes;

			uint8_t i=0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

			error[i] = Write_Memoria(address, buffer[i]);
 8000e18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e1c:	3350      	adds	r3, #80	; 0x50
 8000e1e:	443b      	add	r3, r7
 8000e20:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000e24:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8000e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 f90a 	bl	8001048 <Write_Memoria>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000e3c:	443b      	add	r3, r7
 8000e3e:	f803 2c44 	strb.w	r2, [r3, #-68]

			do{

				if(i== 6){
 8000e42:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d113      	bne.n	8000e72 <entryMemoria+0x86>
					error[i] = Write_Memoria(address, puntaje1>>8);
 8000e4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8000e58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e5c:	4611      	mov	r1, r2
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f8f2 	bl	8001048 <Write_Memoria>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000e6c:	443b      	add	r3, r7
 8000e6e:	f803 2c44 	strb.w	r2, [r3, #-68]
				}
				if(i==7){
 8000e72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000e76:	2b07      	cmp	r3, #7
 8000e78:	d112      	bne.n	8000ea0 <entryMemoria+0xb4>
					error[i] = Write_Memoria(address, puntaje1);
 8000e7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8000e84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f8dc 	bl	8001048 <Write_Memoria>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000e98:	443b      	add	r3, r7
 8000e9a:	f803 2c44 	strb.w	r2, [r3, #-68]
 8000e9e:	e014      	b.n	8000eca <entryMemoria+0xde>
				}
				else{
					error[i] = Write_Memoria(address, buffer[i]);
 8000ea0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ea4:	3350      	adds	r3, #80	; 0x50
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000eac:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8000eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f8c6 	bl	8001048 <Write_Memoria>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000ec4:	443b      	add	r3, r7
 8000ec6:	f803 2c44 	strb.w	r2, [r3, #-68]
				}

				i++;
 8000eca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				address++;
 8000ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
				HAL_Delay(10);
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f001 f9c4 	bl	800226c <HAL_Delay>



			}while(i != 9);
 8000ee4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d1aa      	bne.n	8000e42 <entryMemoria+0x56>

			address = MEMORIA_ADDRESS + 8;
 8000eec:	2308      	movs	r3, #8
 8000eee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			i=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			//uint8_t puntaje[2];


			//osMutexAcquire(mutexPuntajesHandle, osWaitForever);

			buffer_retorno[i]  = Read_memoria(address);
 8000ef8:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8000efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f8fd 	bl	8001100 <Read_memoria>
 8000f06:	4603      	mov	r3, r0
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000f0e:	443b      	add	r3, r7
 8000f10:	f803 2c38 	strb.w	r2, [r3, #-56]

			do{

				if( (i>=0 && i<6) &&  (buffer_retorno[i] != '\0')){
 8000f14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d82c      	bhi.n	8000f76 <entryMemoria+0x18a>
 8000f1c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f20:	3350      	adds	r3, #80	; 0x50
 8000f22:	443b      	add	r3, r7
 8000f24:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d024      	beq.n	8000f76 <entryMemoria+0x18a>
					buffer_retorno[i]  = Read_memoria(address);
 8000f2c:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8000f30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f8e3 	bl	8001100 <Read_memoria>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000f42:	443b      	add	r3, r7
 8000f44:	f803 2c38 	strb.w	r2, [r3, #-56]
					HAL_Delay(10);
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f001 f98f 	bl	800226c <HAL_Delay>

					if(buffer_retorno[i] == '\0'){
 8000f4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f52:	3350      	adds	r3, #80	; 0x50
 8000f54:	443b      	add	r3, r7
 8000f56:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d135      	bne.n	8000fca <entryMemoria+0x1de>
						strcpy(getPuntajes(0)->nombre, buffer_retorno);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f862 	bl	8001028 <getPuntajes>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4610      	mov	r0, r2
 8000f70:	f007 fcc4 	bl	80088fc <strcpy>
					if(buffer_retorno[i] == '\0'){
 8000f74:	e029      	b.n	8000fca <entryMemoria+0x1de>
					}
				}
				else if(i>=6 && i<8){
 8000f76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f7a:	2b05      	cmp	r3, #5
 8000f7c:	d925      	bls.n	8000fca <entryMemoria+0x1de>
 8000f7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	d821      	bhi.n	8000fca <entryMemoria+0x1de>

					buffer_retorno[i] = Read_memoria(address);
 8000f86:	f897 404d 	ldrb.w	r4, [r7, #77]	; 0x4d
 8000f8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8b6 	bl	8001100 <Read_memoria>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	f104 0350 	add.w	r3, r4, #80	; 0x50
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f803 2c38 	strb.w	r2, [r3, #-56]

					if(i == 7){
 8000fa2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d10f      	bne.n	8000fca <entryMemoria+0x1de>
						puntajes = (buffer_retorno[6]<<8) + buffer_retorno[7];
 8000faa:	7fbb      	ldrb	r3, [r7, #30]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	7ffb      	ldrb	r3, [r7, #31]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
						getPuntajes(0)->puntaje = puntajes;
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f833 	bl	8001028 <getPuntajes>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000fc8:	80d3      	strh	r3, [r2, #6]
					}
				}

				i++;
 8000fca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				address++;
 8000fd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000fd8:	3301      	adds	r3, #1
 8000fda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			}while(i != 9);
 8000fde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000fe2:	2b09      	cmp	r3, #9
 8000fe4:	d196      	bne.n	8000f14 <entryMemoria+0x128>


			//osMutexRelease(mutexPuntajesHandle);


			i = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f004 fca5 	bl	800593c <osDelay>
 8000ff2:	e7fb      	b.n	8000fec <entryMemoria+0x200>
 8000ff4:	0800898c 	.word	0x0800898c

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100a:	f001 f913 	bl	8002234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40000800 	.word	0x40000800

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <getPuntajes>:


puntajes_t puntajes[5];


puntajes_t *getPuntajes(uint8_t indice){
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]

	//puntajes_t *(puntajes_Ptr) = malloc(sizeof(puntajes_t));
	return &puntajes[indice];
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	4a03      	ldr	r2, [pc, #12]	; (8001044 <getPuntajes+0x1c>)
 8001038:	4413      	add	r3, r2
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	200001d0 	.word	0x200001d0

08001048 <Write_Memoria>:

uint8_t Write_Memoria(uint16_t address, uint8_t value){
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	4613      	mov	r3, r2
 8001056:	717b      	strb	r3, [r7, #5]

	uint8_t data[3];
	data[0] = WRITE;
 8001058:	2302      	movs	r3, #2
 800105a:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	73bb      	strb	r3, [r7, #14]
	//data[4] = value;

	uint8_t wren = WREN;
 800106c:	2306      	movs	r3, #6
 800106e:	72fb      	strb	r3, [r7, #11]
	//uint8_t write = WRITE;

	uint8_t error;

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 8001070:	2200      	movs	r2, #0
 8001072:	2120      	movs	r1, #32
 8001074:	4820      	ldr	r0, [pc, #128]	; (80010f8 <Write_Memoria+0xb0>)
 8001076:	f001 fff0 	bl	800305a <HAL_GPIO_WritePin>
	error = HAL_SPI_Transmit (&hspi1, &wren, 1, 100);  // write data to register
 800107a:	f107 010b 	add.w	r1, r7, #11
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	481e      	ldr	r0, [pc, #120]	; (80010fc <Write_Memoria+0xb4>)
 8001084:	f003 fbfc 	bl	8004880 <HAL_SPI_Transmit>
 8001088:	4603      	mov	r3, r0
 800108a:	73fb      	strb	r3, [r7, #15]

	if(error != HAL_OK){
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <Write_Memoria+0x4e>
		return 1;
 8001092:	2301      	movs	r3, #1
 8001094:	e02c      	b.n	80010f0 <Write_Memoria+0xa8>
	}

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 8001096:	2201      	movs	r2, #1
 8001098:	2120      	movs	r1, #32
 800109a:	4817      	ldr	r0, [pc, #92]	; (80010f8 <Write_Memoria+0xb0>)
 800109c:	f001 ffdd 	bl	800305a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f001 f8e3 	bl	800226c <HAL_Delay>

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the cs pin low
 80010a6:	2200      	movs	r2, #0
 80010a8:	2120      	movs	r1, #32
 80010aa:	4813      	ldr	r0, [pc, #76]	; (80010f8 <Write_Memoria+0xb0>)
 80010ac:	f001 ffd5 	bl	800305a <HAL_GPIO_WritePin>

	error = HAL_SPI_Transmit (&hspi1, data, 3, 100);  // write data to register
 80010b0:	f107 010c 	add.w	r1, r7, #12
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	2203      	movs	r2, #3
 80010b8:	4810      	ldr	r0, [pc, #64]	; (80010fc <Write_Memoria+0xb4>)
 80010ba:	f003 fbe1 	bl	8004880 <HAL_SPI_Transmit>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
	if(error != HAL_OK){
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <Write_Memoria+0x84>
		return 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e011      	b.n	80010f0 <Write_Memoria+0xa8>
	}
	error = HAL_SPI_Transmit (&hspi1, &value, 1, 100);  // write data to register
 80010cc:	1d79      	adds	r1, r7, #5
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	480a      	ldr	r0, [pc, #40]	; (80010fc <Write_Memoria+0xb4>)
 80010d4:	f003 fbd4 	bl	8004880 <HAL_SPI_Transmit>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
	if(error != HAL_OK){
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <Write_Memoria+0x9e>
		return 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e004      	b.n	80010f0 <Write_Memoria+0xa8>
	}
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the cs pin high
 80010e6:	2201      	movs	r2, #1
 80010e8:	2120      	movs	r1, #32
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <Write_Memoria+0xb0>)
 80010ec:	f001 ffb5 	bl	800305a <HAL_GPIO_WritePin>


}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	20000164 	.word	0x20000164

08001100 <Read_memoria>:

uint8_t Read_memoria(uint16_t address)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	80fb      	strh	r3, [r7, #6]
	uint8_t data_rec;
	uint8_t data[3];
	data[0] = READ;
 800110a:	2303      	movs	r3, #3
 800110c:	733b      	strb	r3, [r7, #12]
	data[1] = address>>8;
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	b29b      	uxth	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	737b      	strb	r3, [r7, #13]
	data[2] = address;
 8001118:	88fb      	ldrh	r3, [r7, #6]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_RESET);  // pull the pin low
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <Read_memoria+0x58>)
 8001124:	f001 ff99 	bl	800305a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, data, 3, 100);  // send address
 8001128:	f107 010c 	add.w	r1, r7, #12
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	2203      	movs	r2, #3
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <Read_memoria+0x5c>)
 8001132:	f003 fba5 	bl	8004880 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, &data_rec, 1, 100);  // receive 6 bytes data
 8001136:	f107 010f 	add.w	r1, r7, #15
 800113a:	2364      	movs	r3, #100	; 0x64
 800113c:	2201      	movs	r2, #1
 800113e:	4807      	ldr	r0, [pc, #28]	; (800115c <Read_memoria+0x5c>)
 8001140:	f003 fce1 	bl	8004b06 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, PIN_CS, GPIO_PIN_SET);  // pull the pin high
 8001144:	2201      	movs	r2, #1
 8001146:	2120      	movs	r1, #32
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <Read_memoria+0x58>)
 800114a:	f001 ff86 	bl	800305a <HAL_GPIO_WritePin>

	return data_rec;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40010c00 	.word	0x40010c00
 800115c:	20000164 	.word	0x20000164

08001160 <getMenu>:
#include "menu.h"

menu_t menu;


menu_t *getMenu(){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

	return &menu;
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <getMenu+0x10>)
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200001f8 	.word	0x200001f8

08001174 <menuInit>:


void menuInit(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0

	//Se inicializan las posiciones iniciales del player y de los aliens.
	playerInit();
 8001178:	f7ff f824 	bl	80001c4 <playerInit>
	InvaderInit();
 800117c:	f7ff f86a 	bl	8000254 <InvaderInit>
	disparoInit();
 8001180:	f7ff fa1a 	bl	80005b8 <disparoInit>

	//Se inicializa el cursor de la pantalla principal.
	getMenu()->menuActual = menu_principal;
 8001184:	f7ff ffec 	bl	8001160 <getMenu>
 8001188:	4603      	mov	r3, r0
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
	getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 800118e:	f7ff ffe7 	bl	8001160 <getMenu>
 8001192:	4603      	mov	r3, r0
 8001194:	2226      	movs	r2, #38	; 0x26
 8001196:	705a      	strb	r2, [r3, #1]


}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <menuActualizar>:

void menuActualizar(uint8_t x, uint8_t y, uint8_t boton){
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b087      	sub	sp, #28
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
 80011a6:	460b      	mov	r3, r1
 80011a8:	71bb      	strb	r3, [r7, #6]
 80011aa:	4613      	mov	r3, r2
 80011ac:	717b      	strb	r3, [r7, #5]


	uint8_t buffer[2];

	switch(getMenu()->menuActual){
 80011ae:	f7ff ffd7 	bl	8001160 <getMenu>
 80011b2:	4603      	mov	r3, r0
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	f200 8119 	bhi.w	80013ee <menuActualizar+0x252>
 80011bc:	a201      	add	r2, pc, #4	; (adr r2, 80011c4 <menuActualizar+0x28>)
 80011be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c2:	bf00      	nop
 80011c4:	080011d9 	.word	0x080011d9
 80011c8:	0800128d 	.word	0x0800128d
 80011cc:	080012db 	.word	0x080012db
 80011d0:	080013ef 	.word	0x080013ef
 80011d4:	080013db 	.word	0x080013db

//--------------------------------------------------------------MENU PRINCIPAL-----------------------------------------------------------------------------
	case menu_principal:

		SSD1306_DrawBitmap(35, 0, SpaceInvaders, 64, 32, 1);
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2320      	movs	r3, #32
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	4a85      	ldr	r2, [pc, #532]	; (80013f8 <menuActualizar+0x25c>)
 80011e4:	2100      	movs	r1, #0
 80011e6:	2023      	movs	r0, #35	; 0x23
 80011e8:	f000 f922 	bl	8001430 <SSD1306_DrawBitmap>

		SSD1306_GotoXY(45, 35);
 80011ec:	2123      	movs	r1, #35	; 0x23
 80011ee:	202d      	movs	r0, #45	; 0x2d
 80011f0:	f000 faee 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("JUGAR", &Font_7x10, 1);
 80011f4:	2201      	movs	r2, #1
 80011f6:	4981      	ldr	r1, [pc, #516]	; (80013fc <menuActualizar+0x260>)
 80011f8:	4881      	ldr	r0, [pc, #516]	; (8001400 <menuActualizar+0x264>)
 80011fa:	f000 fb7f 	bl	80018fc <SSD1306_Puts>
		SSD1306_GotoXY(45, 45);
 80011fe:	212d      	movs	r1, #45	; 0x2d
 8001200:	202d      	movs	r0, #45	; 0x2d
 8001202:	f000 fae5 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 8001206:	2201      	movs	r2, #1
 8001208:	497c      	ldr	r1, [pc, #496]	; (80013fc <menuActualizar+0x260>)
 800120a:	487e      	ldr	r0, [pc, #504]	; (8001404 <menuActualizar+0x268>)
 800120c:	f000 fb76 	bl	80018fc <SSD1306_Puts>


		if(y == arriba){
 8001210:	79bb      	ldrb	r3, [r7, #6]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d105      	bne.n	8001222 <menuActualizar+0x86>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_JUGAR;
 8001216:	f7ff ffa3 	bl	8001160 <getMenu>
 800121a:	4603      	mov	r3, r0
 800121c:	2226      	movs	r2, #38	; 0x26
 800121e:	705a      	strb	r2, [r3, #1]
 8001220:	e007      	b.n	8001232 <menuActualizar+0x96>
		}
		else if(y == abajo){
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d104      	bne.n	8001232 <menuActualizar+0x96>
			getMenu()->posicion_MenuPrincipal = POSICION_CURSOR_PUNTAJES;
 8001228:	f7ff ff9a 	bl	8001160 <getMenu>
 800122c:	4603      	mov	r3, r0
 800122e:	2230      	movs	r2, #48	; 0x30
 8001230:	705a      	strb	r2, [r3, #1]
		}

		SSD1306_DrawCircle(POSICION_CURSOR_X, getMenu()->posicion_MenuPrincipal, 3, 1);
 8001232:	f7ff ff95 	bl	8001160 <getMenu>
 8001236:	4603      	mov	r3, r0
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	b219      	sxth	r1, r3
 800123c:	2301      	movs	r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	2027      	movs	r0, #39	; 0x27
 8001242:	f000 fc7b 	bl	8001b3c <SSD1306_DrawCircle>


		switch(boton){
 8001246:	797b      	ldrb	r3, [r7, #5]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d019      	beq.n	8001280 <menuActualizar+0xe4>
 800124c:	2b01      	cmp	r3, #1
 800124e:	d119      	bne.n	8001284 <menuActualizar+0xe8>
		case true:
			if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_JUGAR){
 8001250:	f7ff ff86 	bl	8001160 <getMenu>
 8001254:	4603      	mov	r3, r0
 8001256:	785b      	ldrb	r3, [r3, #1]
 8001258:	2b26      	cmp	r3, #38	; 0x26
 800125a:	d105      	bne.n	8001268 <menuActualizar+0xcc>
				getMenu()->menuActual = juego;
 800125c:	f7ff ff80 	bl	8001160 <getMenu>
 8001260:	4603      	mov	r3, r0
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
			}
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
				getMenu()->menuActual = puntajes;
			}
			break;
 8001266:	e00f      	b.n	8001288 <menuActualizar+0xec>
			else if(getMenu()->posicion_MenuPrincipal == POSICION_CURSOR_PUNTAJES){
 8001268:	f7ff ff7a 	bl	8001160 <getMenu>
 800126c:	4603      	mov	r3, r0
 800126e:	785b      	ldrb	r3, [r3, #1]
 8001270:	2b30      	cmp	r3, #48	; 0x30
 8001272:	d109      	bne.n	8001288 <menuActualizar+0xec>
				getMenu()->menuActual = puntajes;
 8001274:	f7ff ff74 	bl	8001160 <getMenu>
 8001278:	4603      	mov	r3, r0
 800127a:	2202      	movs	r2, #2
 800127c:	701a      	strb	r2, [r3, #0]
			break;
 800127e:	e003      	b.n	8001288 <menuActualizar+0xec>
		case false:
			break;
 8001280:	bf00      	nop
 8001282:	e0b5      	b.n	80013f0 <menuActualizar+0x254>
		default:
			break;
 8001284:	bf00      	nop
 8001286:	e0b3      	b.n	80013f0 <menuActualizar+0x254>
			break;
 8001288:	bf00      	nop
		}

		break;
 800128a:	e0b1      	b.n	80013f0 <menuActualizar+0x254>
//--------------------------------------------------------------  JUEGO -----------------------------------------------------------------------------

	case juego:

		//Se grafican el player, aliens y disparo.
		plotPlayer(x, getPlayer());
 800128c:	f7fe ff60 	bl	8000150 <getPlayer>
 8001290:	4602      	mov	r2, r0
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7fe ffa0 	bl	80001dc <plotPlayer>
		plotAliens();
 800129c:	f7ff f82c 	bl	80002f8 <plotAliens>

		disparar();
 80012a0:	f7ff f99c 	bl	80005dc <disparar>


		//Prender led si se apretó el boton
		if(boton == true){
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d110      	bne.n	80012cc <menuActualizar+0x130>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b0:	4855      	ldr	r0, [pc, #340]	; (8001408 <menuActualizar+0x26c>)
 80012b2:	f001 fed2 	bl	800305a <HAL_GPIO_WritePin>
			//boton_apretado = 1;
			getDisparo()->numero_disparos = getDisparo()->numero_disparos + 1;
 80012b6:	f7fe ff7b 	bl	80001b0 <getDisparo>
 80012ba:	4603      	mov	r3, r0
 80012bc:	78dc      	ldrb	r4, [r3, #3]
 80012be:	f7fe ff77 	bl	80001b0 <getDisparo>
 80012c2:	4603      	mov	r3, r0
 80012c4:	1c62      	adds	r2, r4, #1
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	70da      	strb	r2, [r3, #3]
		}
		else{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
		}

		break;
 80012ca:	e091      	b.n	80013f0 <menuActualizar+0x254>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d2:	484d      	ldr	r0, [pc, #308]	; (8001408 <menuActualizar+0x26c>)
 80012d4:	f001 fec1 	bl	800305a <HAL_GPIO_WritePin>
		break;
 80012d8:	e08a      	b.n	80013f0 <menuActualizar+0x254>

//-------------------------------------------------------------- PUNTAJES-----------------------------------------------------------------------------
	case puntajes:

		//Titulo 'Puntajes'
		SSD1306_GotoXY(35, 0);
 80012da:	2100      	movs	r1, #0
 80012dc:	2023      	movs	r0, #35	; 0x23
 80012de:	f000 fa77 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("PUNTAJES", &Font_7x10, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	4945      	ldr	r1, [pc, #276]	; (80013fc <menuActualizar+0x260>)
 80012e6:	4847      	ldr	r0, [pc, #284]	; (8001404 <menuActualizar+0x268>)
 80012e8:	f000 fb08 	bl	80018fc <SSD1306_Puts>

		//Nombres
		SSD1306_GotoXY(15, 13);
 80012ec:	210d      	movs	r1, #13
 80012ee:	200f      	movs	r0, #15
 80012f0:	f000 fa6e 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("eze", &Font_7x10, 1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4941      	ldr	r1, [pc, #260]	; (80013fc <menuActualizar+0x260>)
 80012f8:	4844      	ldr	r0, [pc, #272]	; (800140c <menuActualizar+0x270>)
 80012fa:	f000 faff 	bl	80018fc <SSD1306_Puts>

		SSD1306_GotoXY(15, 23);
 80012fe:	2117      	movs	r1, #23
 8001300:	200f      	movs	r0, #15
 8001302:	f000 fa65 	bl	80017d0 <SSD1306_GotoXY>
		//osMutexAcquire(mutexPuntajesHandle, osWaitForever);

		SSD1306_Puts(getPuntajes(0)->nombre, &Font_7x10, 1);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fe8e 	bl	8001028 <getPuntajes>
 800130c:	4603      	mov	r3, r0
 800130e:	2201      	movs	r2, #1
 8001310:	493a      	ldr	r1, [pc, #232]	; (80013fc <menuActualizar+0x260>)
 8001312:	4618      	mov	r0, r3
 8001314:	f000 faf2 	bl	80018fc <SSD1306_Puts>
		//osMutexRelease(mutexPuntajesHandle);


		SSD1306_GotoXY(15, 33);
 8001318:	2121      	movs	r1, #33	; 0x21
 800131a:	200f      	movs	r0, #15
 800131c:	f000 fa58 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("xd", &Font_7x10, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	4936      	ldr	r1, [pc, #216]	; (80013fc <menuActualizar+0x260>)
 8001324:	483a      	ldr	r0, [pc, #232]	; (8001410 <menuActualizar+0x274>)
 8001326:	f000 fae9 	bl	80018fc <SSD1306_Puts>
		SSD1306_GotoXY(15, 43);
 800132a:	212b      	movs	r1, #43	; 0x2b
 800132c:	200f      	movs	r0, #15
 800132e:	f000 fa4f 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("que onda", &Font_7x10, 1);
 8001332:	2201      	movs	r2, #1
 8001334:	4931      	ldr	r1, [pc, #196]	; (80013fc <menuActualizar+0x260>)
 8001336:	4837      	ldr	r0, [pc, #220]	; (8001414 <menuActualizar+0x278>)
 8001338:	f000 fae0 	bl	80018fc <SSD1306_Puts>
		SSD1306_GotoXY(15, 53);
 800133c:	2135      	movs	r1, #53	; 0x35
 800133e:	200f      	movs	r0, #15
 8001340:	f000 fa46 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("fiufiu", &Font_7x10, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	492d      	ldr	r1, [pc, #180]	; (80013fc <menuActualizar+0x260>)
 8001348:	4833      	ldr	r0, [pc, #204]	; (8001418 <menuActualizar+0x27c>)
 800134a:	f000 fad7 	bl	80018fc <SSD1306_Puts>

		//Puntuaciones
		SSD1306_GotoXY(90, 13);
 800134e:	210d      	movs	r1, #13
 8001350:	205a      	movs	r0, #90	; 0x5a
 8001352:	f000 fa3d 	bl	80017d0 <SSD1306_GotoXY>
		itoa(getPuntajes(0)->puntaje,(char*)buffer,10);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fe66 	bl	8001028 <getPuntajes>
 800135c:	4603      	mov	r3, r0
 800135e:	88db      	ldrh	r3, [r3, #6]
 8001360:	4618      	mov	r0, r3
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	220a      	movs	r2, #10
 8001368:	4619      	mov	r1, r3
 800136a:	f007 fa57 	bl	800881c <itoa>
		SSD1306_Puts((char *)buffer, &Font_7x10, 1);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2201      	movs	r2, #1
 8001374:	4921      	ldr	r1, [pc, #132]	; (80013fc <menuActualizar+0x260>)
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fac0 	bl	80018fc <SSD1306_Puts>
		SSD1306_GotoXY(90, 23);
 800137c:	2117      	movs	r1, #23
 800137e:	205a      	movs	r0, #90	; 0x5a
 8001380:	f000 fa26 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("100", &Font_7x10, 1);
 8001384:	2201      	movs	r2, #1
 8001386:	491d      	ldr	r1, [pc, #116]	; (80013fc <menuActualizar+0x260>)
 8001388:	4824      	ldr	r0, [pc, #144]	; (800141c <menuActualizar+0x280>)
 800138a:	f000 fab7 	bl	80018fc <SSD1306_Puts>
		SSD1306_GotoXY(90, 33);
 800138e:	2121      	movs	r1, #33	; 0x21
 8001390:	205a      	movs	r0, #90	; 0x5a
 8001392:	f000 fa1d 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("200", &Font_7x10, 1);
 8001396:	2201      	movs	r2, #1
 8001398:	4918      	ldr	r1, [pc, #96]	; (80013fc <menuActualizar+0x260>)
 800139a:	4821      	ldr	r0, [pc, #132]	; (8001420 <menuActualizar+0x284>)
 800139c:	f000 faae 	bl	80018fc <SSD1306_Puts>
		SSD1306_GotoXY(90, 43);
 80013a0:	212b      	movs	r1, #43	; 0x2b
 80013a2:	205a      	movs	r0, #90	; 0x5a
 80013a4:	f000 fa14 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("300", &Font_7x10, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	4914      	ldr	r1, [pc, #80]	; (80013fc <menuActualizar+0x260>)
 80013ac:	481d      	ldr	r0, [pc, #116]	; (8001424 <menuActualizar+0x288>)
 80013ae:	f000 faa5 	bl	80018fc <SSD1306_Puts>
		SSD1306_GotoXY(90, 53);
 80013b2:	2135      	movs	r1, #53	; 0x35
 80013b4:	205a      	movs	r0, #90	; 0x5a
 80013b6:	f000 fa0b 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("34", &Font_7x10, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	490f      	ldr	r1, [pc, #60]	; (80013fc <menuActualizar+0x260>)
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <menuActualizar+0x28c>)
 80013c0:	f000 fa9c 	bl	80018fc <SSD1306_Puts>


		switch(y){
 80013c4:	79bb      	ldrb	r3, [r7, #6]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d105      	bne.n	80013d6 <menuActualizar+0x23a>
		case arriba:
				getMenu()->menuActual = menu_principal;
 80013ca:	f7ff fec9 	bl	8001160 <getMenu>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
			break;
 80013d4:	e000      	b.n	80013d8 <menuActualizar+0x23c>
		default:
			break;
 80013d6:	bf00      	nop
		}
		break;
 80013d8:	e00a      	b.n	80013f0 <menuActualizar+0x254>


//-------------------------------------------------------------- GAME OVER -----------------------------------------------------------------------------
	case game_over:

		SSD1306_GotoXY(35, 25);
 80013da:	2119      	movs	r1, #25
 80013dc:	2023      	movs	r0, #35	; 0x23
 80013de:	f000 f9f7 	bl	80017d0 <SSD1306_GotoXY>
		SSD1306_Puts("GAME OVER", &Font_7x10, 1);
 80013e2:	2201      	movs	r2, #1
 80013e4:	4905      	ldr	r1, [pc, #20]	; (80013fc <menuActualizar+0x260>)
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <menuActualizar+0x290>)
 80013e8:	f000 fa88 	bl	80018fc <SSD1306_Puts>


		break;
 80013ec:	e000      	b.n	80013f0 <menuActualizar+0x254>
	default:
		break;
 80013ee:	bf00      	nop
	}

}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	08009230 	.word	0x08009230
 80013fc:	20000000 	.word	0x20000000
 8001400:	08008994 	.word	0x08008994
 8001404:	0800899c 	.word	0x0800899c
 8001408:	40010800 	.word	0x40010800
 800140c:	080089a8 	.word	0x080089a8
 8001410:	080089ac 	.word	0x080089ac
 8001414:	080089b0 	.word	0x080089b0
 8001418:	080089bc 	.word	0x080089bc
 800141c:	080089c4 	.word	0x080089c4
 8001420:	080089c8 	.word	0x080089c8
 8001424:	080089cc 	.word	0x080089cc
 8001428:	080089d0 	.word	0x080089d0
 800142c:	080089d4 	.word	0x080089d4

08001430 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	461a      	mov	r2, r3
 800143a:	4603      	mov	r3, r0
 800143c:	81fb      	strh	r3, [r7, #14]
 800143e:	460b      	mov	r3, r1
 8001440:	81bb      	strh	r3, [r7, #12]
 8001442:	4613      	mov	r3, r2
 8001444:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	3307      	adds	r3, #7
 800144c:	2b00      	cmp	r3, #0
 800144e:	da00      	bge.n	8001452 <SSD1306_DrawBitmap+0x22>
 8001450:	3307      	adds	r3, #7
 8001452:	10db      	asrs	r3, r3, #3
 8001454:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800145a:	2300      	movs	r3, #0
 800145c:	82bb      	strh	r3, [r7, #20]
 800145e:	e044      	b.n	80014ea <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8001460:	2300      	movs	r3, #0
 8001462:	827b      	strh	r3, [r7, #18]
 8001464:	e02f      	b.n	80014c6 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8001466:	8a7b      	ldrh	r3, [r7, #18]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	75fb      	strb	r3, [r7, #23]
 8001476:	e012      	b.n	800149e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001478:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800147c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001480:	fb03 f202 	mul.w	r2, r3, r2
 8001484:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da00      	bge.n	800148e <SSD1306_DrawBitmap+0x5e>
 800148c:	3307      	adds	r3, #7
 800148e:	10db      	asrs	r3, r3, #3
 8001490:	b21b      	sxth	r3, r3
 8001492:	4413      	add	r3, r2
 8001494:	461a      	mov	r2, r3
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800149e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da09      	bge.n	80014ba <SSD1306_DrawBitmap+0x8a>
 80014a6:	89fa      	ldrh	r2, [r7, #14]
 80014a8:	8a7b      	ldrh	r3, [r7, #18]
 80014aa:	4413      	add	r3, r2
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	89b9      	ldrh	r1, [r7, #12]
 80014b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f92d 	bl	8001714 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80014ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	827b      	strh	r3, [r7, #18]
 80014c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80014ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dbc9      	blt.n	8001466 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80014d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	3301      	adds	r3, #1
 80014da:	b29b      	uxth	r3, r3
 80014dc:	82bb      	strh	r3, [r7, #20]
 80014de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	81bb      	strh	r3, [r7, #12]
 80014ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80014ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dbb4      	blt.n	8001460 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001506:	f000 fbf7 	bl	8001cf8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800150a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800150e:	2201      	movs	r2, #1
 8001510:	2178      	movs	r1, #120	; 0x78
 8001512:	485b      	ldr	r0, [pc, #364]	; (8001680 <SSD1306_Init+0x180>)
 8001514:	f001 fffc 	bl	8003510 <HAL_I2C_IsDeviceReady>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800151e:	2300      	movs	r3, #0
 8001520:	e0a9      	b.n	8001676 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001522:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001526:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001528:	e002      	b.n	8001530 <SSD1306_Init+0x30>
		p--;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3b01      	subs	r3, #1
 800152e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001536:	22ae      	movs	r2, #174	; 0xae
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	; 0x78
 800153c:	f000 fc56 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001540:	2220      	movs	r2, #32
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	; 0x78
 8001546:	f000 fc51 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800154a:	2210      	movs	r2, #16
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	; 0x78
 8001550:	f000 fc4c 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001554:	22b0      	movs	r2, #176	; 0xb0
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	; 0x78
 800155a:	f000 fc47 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800155e:	22c8      	movs	r2, #200	; 0xc8
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	; 0x78
 8001564:	f000 fc42 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001568:	2200      	movs	r2, #0
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	; 0x78
 800156e:	f000 fc3d 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001572:	2210      	movs	r2, #16
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	; 0x78
 8001578:	f000 fc38 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800157c:	2240      	movs	r2, #64	; 0x40
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f000 fc33 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001586:	2281      	movs	r2, #129	; 0x81
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fc2e 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001590:	22ff      	movs	r2, #255	; 0xff
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 fc29 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800159a:	22a1      	movs	r2, #161	; 0xa1
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 fc24 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80015a4:	22a6      	movs	r2, #166	; 0xa6
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 fc1f 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80015ae:	22a8      	movs	r2, #168	; 0xa8
 80015b0:	2100      	movs	r1, #0
 80015b2:	2078      	movs	r0, #120	; 0x78
 80015b4:	f000 fc1a 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80015b8:	223f      	movs	r2, #63	; 0x3f
 80015ba:	2100      	movs	r1, #0
 80015bc:	2078      	movs	r0, #120	; 0x78
 80015be:	f000 fc15 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015c2:	22a4      	movs	r2, #164	; 0xa4
 80015c4:	2100      	movs	r1, #0
 80015c6:	2078      	movs	r0, #120	; 0x78
 80015c8:	f000 fc10 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015cc:	22d3      	movs	r2, #211	; 0xd3
 80015ce:	2100      	movs	r1, #0
 80015d0:	2078      	movs	r0, #120	; 0x78
 80015d2:	f000 fc0b 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2078      	movs	r0, #120	; 0x78
 80015dc:	f000 fc06 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015e0:	22d5      	movs	r2, #213	; 0xd5
 80015e2:	2100      	movs	r1, #0
 80015e4:	2078      	movs	r0, #120	; 0x78
 80015e6:	f000 fc01 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015ea:	22f0      	movs	r2, #240	; 0xf0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2078      	movs	r0, #120	; 0x78
 80015f0:	f000 fbfc 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015f4:	22d9      	movs	r2, #217	; 0xd9
 80015f6:	2100      	movs	r1, #0
 80015f8:	2078      	movs	r0, #120	; 0x78
 80015fa:	f000 fbf7 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015fe:	2222      	movs	r2, #34	; 0x22
 8001600:	2100      	movs	r1, #0
 8001602:	2078      	movs	r0, #120	; 0x78
 8001604:	f000 fbf2 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001608:	22da      	movs	r2, #218	; 0xda
 800160a:	2100      	movs	r1, #0
 800160c:	2078      	movs	r0, #120	; 0x78
 800160e:	f000 fbed 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001612:	2212      	movs	r2, #18
 8001614:	2100      	movs	r1, #0
 8001616:	2078      	movs	r0, #120	; 0x78
 8001618:	f000 fbe8 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800161c:	22db      	movs	r2, #219	; 0xdb
 800161e:	2100      	movs	r1, #0
 8001620:	2078      	movs	r0, #120	; 0x78
 8001622:	f000 fbe3 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001626:	2220      	movs	r2, #32
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 fbde 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001630:	228d      	movs	r2, #141	; 0x8d
 8001632:	2100      	movs	r1, #0
 8001634:	2078      	movs	r0, #120	; 0x78
 8001636:	f000 fbd9 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800163a:	2214      	movs	r2, #20
 800163c:	2100      	movs	r1, #0
 800163e:	2078      	movs	r0, #120	; 0x78
 8001640:	f000 fbd4 	bl	8001dec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001644:	22af      	movs	r2, #175	; 0xaf
 8001646:	2100      	movs	r1, #0
 8001648:	2078      	movs	r0, #120	; 0x78
 800164a:	f000 fbcf 	bl	8001dec <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800164e:	222e      	movs	r2, #46	; 0x2e
 8001650:	2100      	movs	r1, #0
 8001652:	2078      	movs	r0, #120	; 0x78
 8001654:	f000 fbca 	bl	8001dec <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001658:	2000      	movs	r0, #0
 800165a:	f000 f843 	bl	80016e4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800165e:	f000 f813 	bl	8001688 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <SSD1306_Init+0x184>)
 8001664:	2200      	movs	r2, #0
 8001666:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SSD1306_Init+0x184>)
 800166a:	2200      	movs	r2, #0
 800166c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <SSD1306_Init+0x184>)
 8001670:	2201      	movs	r2, #1
 8001672:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000110 	.word	0x20000110
 8001684:	200005fc 	.word	0x200005fc

08001688 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	e01d      	b.n	80016d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	3b50      	subs	r3, #80	; 0x50
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	2100      	movs	r1, #0
 800169e:	2078      	movs	r0, #120	; 0x78
 80016a0:	f000 fba4 	bl	8001dec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2078      	movs	r0, #120	; 0x78
 80016aa:	f000 fb9f 	bl	8001dec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80016ae:	2210      	movs	r2, #16
 80016b0:	2100      	movs	r1, #0
 80016b2:	2078      	movs	r0, #120	; 0x78
 80016b4:	f000 fb9a 	bl	8001dec <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	01db      	lsls	r3, r3, #7
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <SSD1306_UpdateScreen+0x58>)
 80016be:	441a      	add	r2, r3
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	2078      	movs	r0, #120	; 0x78
 80016c6:	f000 fb2b 	bl	8001d20 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	3301      	adds	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d9de      	bls.n	8001694 <SSD1306_UpdateScreen+0xc>
	}
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001fc 	.word	0x200001fc

080016e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <SSD1306_Fill+0x14>
 80016f4:	2300      	movs	r3, #0
 80016f6:	e000      	b.n	80016fa <SSD1306_Fill+0x16>
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fe:	4619      	mov	r1, r3
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <SSD1306_Fill+0x2c>)
 8001702:	f007 f8cf 	bl	80088a4 <memset>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001fc 	.word	0x200001fc

08001714 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
 800171e:	460b      	mov	r3, r1
 8001720:	80bb      	strh	r3, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	70fb      	strb	r3, [r7, #3]
	if (
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	2b7f      	cmp	r3, #127	; 0x7f
 800172a:	d848      	bhi.n	80017be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800172c:	88bb      	ldrh	r3, [r7, #4]
 800172e:	2b3f      	cmp	r3, #63	; 0x3f
 8001730:	d845      	bhi.n	80017be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <SSD1306_DrawPixel+0xb4>)
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d11a      	bne.n	8001784 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	88bb      	ldrh	r3, [r7, #4]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	b298      	uxth	r0, r3
 8001756:	4603      	mov	r3, r0
 8001758:	01db      	lsls	r3, r3, #7
 800175a:	4413      	add	r3, r2
 800175c:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <SSD1306_DrawPixel+0xb8>)
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	b25a      	sxtb	r2, r3
 8001762:	88bb      	ldrh	r3, [r7, #4]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	b25b      	sxtb	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b259      	sxtb	r1, r3
 8001774:	88fa      	ldrh	r2, [r7, #6]
 8001776:	4603      	mov	r3, r0
 8001778:	01db      	lsls	r3, r3, #7
 800177a:	4413      	add	r3, r2
 800177c:	b2c9      	uxtb	r1, r1
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <SSD1306_DrawPixel+0xb8>)
 8001780:	54d1      	strb	r1, [r2, r3]
 8001782:	e01d      	b.n	80017c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001784:	88fa      	ldrh	r2, [r7, #6]
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	b298      	uxth	r0, r3
 800178c:	4603      	mov	r3, r0
 800178e:	01db      	lsls	r3, r3, #7
 8001790:	4413      	add	r3, r2
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <SSD1306_DrawPixel+0xb8>)
 8001794:	5cd3      	ldrb	r3, [r2, r3]
 8001796:	b25a      	sxtb	r2, r3
 8001798:	88bb      	ldrh	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	4013      	ands	r3, r2
 80017ac:	b259      	sxtb	r1, r3
 80017ae:	88fa      	ldrh	r2, [r7, #6]
 80017b0:	4603      	mov	r3, r0
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	4413      	add	r3, r2
 80017b6:	b2c9      	uxtb	r1, r1
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <SSD1306_DrawPixel+0xb8>)
 80017ba:	54d1      	strb	r1, [r2, r3]
 80017bc:	e000      	b.n	80017c0 <SSD1306_DrawPixel+0xac>
		return;
 80017be:	bf00      	nop
	}
}
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	200005fc 	.word	0x200005fc
 80017cc:	200001fc 	.word	0x200001fc

080017d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	80fb      	strh	r3, [r7, #6]
 80017dc:	4613      	mov	r3, r2
 80017de:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017e0:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SSD1306_GotoXY+0x28>)
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <SSD1306_GotoXY+0x28>)
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	8053      	strh	r3, [r2, #2]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200005fc 	.word	0x200005fc

080017fc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	4613      	mov	r3, r2
 800180a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800180c:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <SSD1306_Putc+0xfc>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
	if (
 8001818:	2b7f      	cmp	r3, #127	; 0x7f
 800181a:	dc07      	bgt.n	800182c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <SSD1306_Putc+0xfc>)
 800181e:	885b      	ldrh	r3, [r3, #2]
 8001820:	461a      	mov	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	785b      	ldrb	r3, [r3, #1]
 8001826:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001828:	2b3f      	cmp	r3, #63	; 0x3f
 800182a:	dd01      	ble.n	8001830 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800182c:	2300      	movs	r3, #0
 800182e:	e05e      	b.n	80018ee <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e04b      	b.n	80018ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3b20      	subs	r3, #32
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	7849      	ldrb	r1, [r1, #1]
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4619      	mov	r1, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	440b      	add	r3, r1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	e030      	b.n	80018bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d010      	beq.n	800188c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <SSD1306_Putc+0xfc>)
 800186c:	881a      	ldrh	r2, [r3, #0]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b298      	uxth	r0, r3
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <SSD1306_Putc+0xfc>)
 8001878:	885a      	ldrh	r2, [r3, #2]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	b29b      	uxth	r3, r3
 800187e:	4413      	add	r3, r2
 8001880:	b29b      	uxth	r3, r3
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	4619      	mov	r1, r3
 8001886:	f7ff ff45 	bl	8001714 <SSD1306_DrawPixel>
 800188a:	e014      	b.n	80018b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <SSD1306_Putc+0xfc>)
 800188e:	881a      	ldrh	r2, [r3, #0]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4413      	add	r3, r2
 8001896:	b298      	uxth	r0, r3
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <SSD1306_Putc+0xfc>)
 800189a:	885a      	ldrh	r2, [r3, #2]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	b299      	uxth	r1, r3
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf0c      	ite	eq
 80018aa:	2301      	moveq	r3, #1
 80018ac:	2300      	movne	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	f7ff ff2f 	bl	8001714 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	3301      	adds	r3, #1
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d3c8      	bcc.n	800185a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	461a      	mov	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d3ad      	bcc.n	8001836 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <SSD1306_Putc+0xfc>)
 80018dc:	881a      	ldrh	r2, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <SSD1306_Putc+0xfc>)
 80018ea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200005fc 	.word	0x200005fc

080018fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800190a:	e012      	b.n	8001932 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	68b9      	ldr	r1, [r7, #8]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff71 	bl	80017fc <SSD1306_Putc>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d002      	beq.n	800192c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	e008      	b.n	800193e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	3301      	adds	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1e8      	bne.n	800190c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	781b      	ldrb	r3, [r3, #0]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001946:	b590      	push	{r4, r7, lr}
 8001948:	b087      	sub	sp, #28
 800194a:	af00      	add	r7, sp, #0
 800194c:	4604      	mov	r4, r0
 800194e:	4608      	mov	r0, r1
 8001950:	4611      	mov	r1, r2
 8001952:	461a      	mov	r2, r3
 8001954:	4623      	mov	r3, r4
 8001956:	80fb      	strh	r3, [r7, #6]
 8001958:	4603      	mov	r3, r0
 800195a:	80bb      	strh	r3, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001964:	88fb      	ldrh	r3, [r7, #6]
 8001966:	2b7f      	cmp	r3, #127	; 0x7f
 8001968:	d901      	bls.n	800196e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800196a:	237f      	movs	r3, #127	; 0x7f
 800196c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	2b7f      	cmp	r3, #127	; 0x7f
 8001972:	d901      	bls.n	8001978 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001974:	237f      	movs	r3, #127	; 0x7f
 8001976:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	2b3f      	cmp	r3, #63	; 0x3f
 800197c:	d901      	bls.n	8001982 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800197e:	233f      	movs	r3, #63	; 0x3f
 8001980:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001982:	883b      	ldrh	r3, [r7, #0]
 8001984:	2b3f      	cmp	r3, #63	; 0x3f
 8001986:	d901      	bls.n	800198c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001988:	233f      	movs	r3, #63	; 0x3f
 800198a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	429a      	cmp	r2, r3
 8001992:	d205      	bcs.n	80019a0 <SSD1306_DrawLine+0x5a>
 8001994:	887a      	ldrh	r2, [r7, #2]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	b21b      	sxth	r3, r3
 800199e:	e004      	b.n	80019aa <SSD1306_DrawLine+0x64>
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80019ac:	88ba      	ldrh	r2, [r7, #4]
 80019ae:	883b      	ldrh	r3, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d205      	bcs.n	80019c0 <SSD1306_DrawLine+0x7a>
 80019b4:	883a      	ldrh	r2, [r7, #0]
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b21b      	sxth	r3, r3
 80019be:	e004      	b.n	80019ca <SSD1306_DrawLine+0x84>
 80019c0:	88ba      	ldrh	r2, [r7, #4]
 80019c2:	883b      	ldrh	r3, [r7, #0]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80019cc:	88fa      	ldrh	r2, [r7, #6]
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d201      	bcs.n	80019d8 <SSD1306_DrawLine+0x92>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e001      	b.n	80019dc <SSD1306_DrawLine+0x96>
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
 80019dc:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80019de:	88ba      	ldrh	r2, [r7, #4]
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d201      	bcs.n	80019ea <SSD1306_DrawLine+0xa4>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e001      	b.n	80019ee <SSD1306_DrawLine+0xa8>
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80019f0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80019f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dd06      	ble.n	8001a0a <SSD1306_DrawLine+0xc4>
 80019fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a00:	0fda      	lsrs	r2, r3, #31
 8001a02:	4413      	add	r3, r2
 8001a04:	105b      	asrs	r3, r3, #1
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	e006      	b.n	8001a18 <SSD1306_DrawLine+0xd2>
 8001a0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a0e:	0fda      	lsrs	r2, r3, #31
 8001a10:	4413      	add	r3, r2
 8001a12:	105b      	asrs	r3, r3, #1
 8001a14:	425b      	negs	r3, r3
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001a1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d129      	bne.n	8001a76 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001a22:	883a      	ldrh	r2, [r7, #0]
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d205      	bcs.n	8001a36 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001a2a:	883b      	ldrh	r3, [r7, #0]
 8001a2c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a32:	893b      	ldrh	r3, [r7, #8]
 8001a34:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d205      	bcs.n	8001a4a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001a46:	893b      	ldrh	r3, [r7, #8]
 8001a48:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	82bb      	strh	r3, [r7, #20]
 8001a4e:	e00c      	b.n	8001a6a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001a50:	8ab9      	ldrh	r1, [r7, #20]
 8001a52:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fe5b 	bl	8001714 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001a5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	82bb      	strh	r3, [r7, #20]
 8001a6a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a6e:	883b      	ldrh	r3, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dded      	ble.n	8001a50 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001a74:	e05f      	b.n	8001b36 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001a76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d129      	bne.n	8001ad2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001a7e:	883a      	ldrh	r2, [r7, #0]
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d205      	bcs.n	8001a92 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001a86:	883b      	ldrh	r3, [r7, #0]
 8001a88:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001a8e:	893b      	ldrh	r3, [r7, #8]
 8001a90:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d205      	bcs.n	8001aa6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001aa2:	893b      	ldrh	r3, [r7, #8]
 8001aa4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	82bb      	strh	r3, [r7, #20]
 8001aaa:	e00c      	b.n	8001ac6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001aac:	8abb      	ldrh	r3, [r7, #20]
 8001aae:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ab2:	88b9      	ldrh	r1, [r7, #4]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe2d 	bl	8001714 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001aba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	82bb      	strh	r3, [r7, #20]
 8001ac6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dded      	ble.n	8001aac <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001ad0:	e031      	b.n	8001b36 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001ad2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001ad6:	88b9      	ldrh	r1, [r7, #4]
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe1a 	bl	8001714 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d103      	bne.n	8001af0 <SSD1306_DrawLine+0x1aa>
 8001ae8:	88ba      	ldrh	r2, [r7, #4]
 8001aea:	883b      	ldrh	r3, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d021      	beq.n	8001b34 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001af0:	8afb      	ldrh	r3, [r7, #22]
 8001af2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001af4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001af8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001afc:	425b      	negs	r3, r3
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dd08      	ble.n	8001b14 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001b02:	8afa      	ldrh	r2, [r7, #22]
 8001b04:	8a3b      	ldrh	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001b0c:	89fa      	ldrh	r2, [r7, #14]
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	4413      	add	r3, r2
 8001b12:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001b14:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dad8      	bge.n	8001ad2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001b20:	8afa      	ldrh	r2, [r7, #22]
 8001b22:	8a7b      	ldrh	r3, [r7, #18]
 8001b24:	4413      	add	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001b2a:	89ba      	ldrh	r2, [r7, #12]
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001b32:	e7ce      	b.n	8001ad2 <SSD1306_DrawLine+0x18c>
			break;
 8001b34:	bf00      	nop
		} 
	}
}
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4604      	mov	r4, r0
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	80fb      	strh	r3, [r7, #6]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80bb      	strh	r3, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	f1c3 0301 	rsb	r3, r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	03d2      	lsls	r2, r2, #15
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001b7a:	887b      	ldrh	r3, [r7, #2]
 8001b7c:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001b7e:	88f8      	ldrh	r0, [r7, #6]
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	4413      	add	r3, r2
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	787a      	ldrb	r2, [r7, #1]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff fdc2 	bl	8001714 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001b90:	88f8      	ldrh	r0, [r7, #6]
 8001b92:	88ba      	ldrh	r2, [r7, #4]
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	787a      	ldrb	r2, [r7, #1]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff fdb9 	bl	8001714 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	88b9      	ldrh	r1, [r7, #4]
 8001bac:	787a      	ldrb	r2, [r7, #1]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fdb0 	bl	8001714 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001bb4:	88fa      	ldrh	r2, [r7, #6]
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	88b9      	ldrh	r1, [r7, #4]
 8001bbe:	787a      	ldrb	r2, [r7, #1]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fda7 	bl	8001714 <SSD1306_DrawPixel>

    while (x < y) {
 8001bc6:	e081      	b.n	8001ccc <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 8001bc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	db0e      	blt.n	8001bee <SSD1306_DrawCircle+0xb2>
            y--;
 8001bd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001bdc:	8a7b      	ldrh	r3, [r7, #18]
 8001bde:	3302      	adds	r3, #2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001be4:	8afa      	ldrh	r2, [r7, #22]
 8001be6:	8a7b      	ldrh	r3, [r7, #18]
 8001be8:	4413      	add	r3, r2
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001bee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001bfa:	8abb      	ldrh	r3, [r7, #20]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001c02:	8afa      	ldrh	r2, [r7, #22]
 8001c04:	8abb      	ldrh	r3, [r7, #20]
 8001c06:	4413      	add	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	8a3b      	ldrh	r3, [r7, #16]
 8001c10:	4413      	add	r3, r2
 8001c12:	b298      	uxth	r0, r3
 8001c14:	88ba      	ldrh	r2, [r7, #4]
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	4413      	add	r3, r2
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	787a      	ldrb	r2, [r7, #1]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7ff fd78 	bl	8001714 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	8a3b      	ldrh	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	b298      	uxth	r0, r3
 8001c2c:	88ba      	ldrh	r2, [r7, #4]
 8001c2e:	89fb      	ldrh	r3, [r7, #14]
 8001c30:	4413      	add	r3, r2
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	787a      	ldrb	r2, [r7, #1]
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7ff fd6c 	bl	8001714 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8001c3c:	88fa      	ldrh	r2, [r7, #6]
 8001c3e:	8a3b      	ldrh	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	b298      	uxth	r0, r3
 8001c44:	88ba      	ldrh	r2, [r7, #4]
 8001c46:	89fb      	ldrh	r3, [r7, #14]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	787a      	ldrb	r2, [r7, #1]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7ff fd60 	bl	8001714 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	8a3b      	ldrh	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	b298      	uxth	r0, r3
 8001c5c:	88ba      	ldrh	r2, [r7, #4]
 8001c5e:	89fb      	ldrh	r3, [r7, #14]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	787a      	ldrb	r2, [r7, #1]
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7ff fd54 	bl	8001714 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	4413      	add	r3, r2
 8001c72:	b298      	uxth	r0, r3
 8001c74:	88ba      	ldrh	r2, [r7, #4]
 8001c76:	8a3b      	ldrh	r3, [r7, #16]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	787a      	ldrb	r2, [r7, #1]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7ff fd48 	bl	8001714 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001c84:	88fa      	ldrh	r2, [r7, #6]
 8001c86:	89fb      	ldrh	r3, [r7, #14]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	88ba      	ldrh	r2, [r7, #4]
 8001c8e:	8a3b      	ldrh	r3, [r7, #16]
 8001c90:	4413      	add	r3, r2
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	787a      	ldrb	r2, [r7, #1]
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7ff fd3c 	bl	8001714 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	88ba      	ldrh	r2, [r7, #4]
 8001ca6:	8a3b      	ldrh	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	787a      	ldrb	r2, [r7, #1]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7ff fd30 	bl	8001714 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001cb4:	88fa      	ldrh	r2, [r7, #6]
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	b298      	uxth	r0, r3
 8001cbc:	88ba      	ldrh	r2, [r7, #4]
 8001cbe:	8a3b      	ldrh	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	787a      	ldrb	r2, [r7, #1]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7ff fd24 	bl	8001714 <SSD1306_DrawPixel>
    while (x < y) {
 8001ccc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f6ff af77 	blt.w	8001bc8 <SSD1306_DrawCircle+0x8c>
    }
}
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}

08001ce4 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff fcfb 	bl	80016e4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001cee:	f7ff fccb 	bl	8001688 <SSD1306_UpdateScreen>
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <ssd1306_I2C_Init+0x24>)
 8001d00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d02:	e002      	b.n	8001d0a <ssd1306_I2C_Init+0x12>
		p--;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f9      	bne.n	8001d04 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	0003d090 	.word	0x0003d090

08001d20 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d20:	b590      	push	{r4, r7, lr}
 8001d22:	b0c7      	sub	sp, #284	; 0x11c
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	4604      	mov	r4, r0
 8001d28:	4608      	mov	r0, r1
 8001d2a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001d2e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001d32:	600a      	str	r2, [r1, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d3a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001d3e:	4622      	mov	r2, r4
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d46:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d52:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d56:	460a      	mov	r2, r1
 8001d58:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001d5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d62:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d66:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d74:	e015      	b.n	8001da2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001d76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d7a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d7e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	441a      	add	r2, r3
 8001d86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	7811      	ldrb	r1, [r2, #0]
 8001d8e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d92:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001d96:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d98:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001da2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001dac:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001db0:	8812      	ldrh	r2, [r2, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d8df      	bhi.n	8001d76 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dba:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b299      	uxth	r1, r3
 8001dc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001dc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	f107 020c 	add.w	r2, r7, #12
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	9000      	str	r0, [sp, #0]
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <ssd1306_I2C_WriteMulti+0xc8>)
 8001dda:	f001 fa9b 	bl	8003314 <HAL_I2C_Master_Transmit>
}
 8001dde:	bf00      	nop
 8001de0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	20000110 	.word	0x20000110

08001dec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
 8001df6:	460b      	mov	r3, r1
 8001df8:	71bb      	strb	r3, [r7, #6]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dfe:	79bb      	ldrb	r3, [r7, #6]
 8001e00:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e02:	797b      	ldrb	r3, [r7, #5]
 8001e04:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	f107 020c 	add.w	r2, r7, #12
 8001e0e:	230a      	movs	r3, #10
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2302      	movs	r3, #2
 8001e14:	4803      	ldr	r0, [pc, #12]	; (8001e24 <ssd1306_I2C_Write+0x38>)
 8001e16:	f001 fa7d 	bl	8003314 <HAL_I2C_Master_Transmit>
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000110 	.word	0x20000110

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_MspInit+0x68>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_MspInit+0x68>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6193      	str	r3, [r2, #24]
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_MspInit+0x68>)
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_MspInit+0x68>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_MspInit+0x68>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	61d3      	str	r3, [r2, #28]
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_MspInit+0x68>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	210f      	movs	r1, #15
 8001e62:	f06f 0001 	mvn.w	r0, #1
 8001e66:	f000 ff32 	bl	8002cce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_MspInit+0x6c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_MspInit+0x6c>)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010000 	.word	0x40010000

08001e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0318 	add.w	r3, r7, #24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_ADC_MspInit+0xbc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d122      	bne.n	8001efe <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001ee8:	2309      	movs	r3, #9
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eec:	2303      	movs	r3, #3
 8001eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <HAL_ADC_MspInit+0xc4>)
 8001ef8:	f000 ff14 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001efc:	e026      	b.n	8001f4c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_ADC_MspInit+0xc8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d121      	bne.n	8001f4c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_ADC_MspInit+0xc0>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	4619      	mov	r1, r3
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <HAL_ADC_MspInit+0xc4>)
 8001f48:	f000 feec 	bl	8002d24 <HAL_GPIO_Init>
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40012400 	.word	0x40012400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010800 	.word	0x40010800
 8001f60:	40012800 	.word	0x40012800

08001f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <HAL_I2C_MspInit+0x70>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d123      	bne.n	8001fcc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_I2C_MspInit+0x74>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_I2C_MspInit+0x74>)
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_I2C_MspInit+0x74>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f9c:	23c0      	movs	r3, #192	; 0xc0
 8001f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4619      	mov	r1, r3
 8001fae:	480b      	ldr	r0, [pc, #44]	; (8001fdc <HAL_I2C_MspInit+0x78>)
 8001fb0:	f000 feb8 	bl	8002d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_I2C_MspInit+0x74>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_I2C_MspInit+0x74>)
 8001fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fbe:	61d3      	str	r3, [r2, #28]
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_I2C_MspInit+0x74>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40005400 	.word	0x40005400
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010c00 	.word	0x40010c00

08001fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1b      	ldr	r2, [pc, #108]	; (8002068 <HAL_SPI_MspInit+0x88>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d12f      	bne.n	8002060 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002000:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_SPI_MspInit+0x8c>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_SPI_MspInit+0x8c>)
 8002006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_SPI_MspInit+0x8c>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	4b14      	ldr	r3, [pc, #80]	; (800206c <HAL_SPI_MspInit+0x8c>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_SPI_MspInit+0x8c>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_SPI_MspInit+0x8c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002030:	23a0      	movs	r3, #160	; 0xa0
 8002032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	4619      	mov	r1, r3
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <HAL_SPI_MspInit+0x90>)
 8002044:	f000 fe6e 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002048:	2340      	movs	r3, #64	; 0x40
 800204a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_SPI_MspInit+0x90>)
 800205c:	f000 fe62 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40013000 	.word	0x40013000
 800206c:	40021000 	.word	0x40021000
 8002070:	40010800 	.word	0x40010800

08002074 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_InitTick+0xe8>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4a33      	ldr	r2, [pc, #204]	; (800215c <HAL_InitTick+0xe8>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	61d3      	str	r3, [r2, #28]
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_InitTick+0xe8>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a2:	f107 0210 	add.w	r2, r7, #16
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 f9a9 	bl	8004404 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d103      	bne.n	80020c4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020bc:	f002 f97a 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 80020c0:	6378      	str	r0, [r7, #52]	; 0x34
 80020c2:	e004      	b.n	80020ce <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020c4:	f002 f976 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 80020c8:	4603      	mov	r3, r0
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_InitTick+0xec>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9b      	lsrs	r3, r3, #18
 80020d8:	3b01      	subs	r3, #1
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_InitTick+0xf0>)
 80020de:	4a22      	ldr	r2, [pc, #136]	; (8002168 <HAL_InitTick+0xf4>)
 80020e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_InitTick+0xf0>)
 80020e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020e8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_InitTick+0xf0>)
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_InitTick+0xf0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <HAL_InitTick+0xf0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_InitTick+0xf0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002102:	4818      	ldr	r0, [pc, #96]	; (8002164 <HAL_InitTick+0xf0>)
 8002104:	f003 f8c0 	bl	8005288 <HAL_TIM_Base_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800210e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002112:	2b00      	cmp	r3, #0
 8002114:	d11b      	bne.n	800214e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002116:	4813      	ldr	r0, [pc, #76]	; (8002164 <HAL_InitTick+0xf0>)
 8002118:	f003 f90e 	bl	8005338 <HAL_TIM_Base_Start_IT>
 800211c:	4603      	mov	r3, r0
 800211e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002122:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002126:	2b00      	cmp	r3, #0
 8002128:	d111      	bne.n	800214e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800212a:	201e      	movs	r0, #30
 800212c:	f000 fdeb 	bl	8002d06 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	d808      	bhi.n	8002148 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002136:	2200      	movs	r2, #0
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	201e      	movs	r0, #30
 800213c:	f000 fdc7 	bl	8002cce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002140:	4a0a      	ldr	r2, [pc, #40]	; (800216c <HAL_InitTick+0xf8>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e002      	b.n	800214e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800214e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002152:	4618      	mov	r0, r3
 8002154:	3738      	adds	r7, #56	; 0x38
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	431bde83 	.word	0x431bde83
 8002164:	20000604 	.word	0x20000604
 8002168:	40000800 	.word	0x40000800
 800216c:	2000000c 	.word	0x2000000c

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
	...

0800219c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <TIM4_IRQHandler+0x10>)
 80021a2:	f003 f91b 	bl	80053dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000604 	.word	0x20000604

080021b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80021bc:	f7ff fff8 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c0:	480b      	ldr	r0, [pc, #44]	; (80021f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021c2:	490c      	ldr	r1, [pc, #48]	; (80021f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021c4:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c8:	e002      	b.n	80021d0 <LoopCopyDataInit>

080021ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ce:	3304      	adds	r3, #4

080021d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d4:	d3f9      	bcc.n	80021ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021d6:	4a09      	ldr	r2, [pc, #36]	; (80021fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021d8:	4c09      	ldr	r4, [pc, #36]	; (8002200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021dc:	e001      	b.n	80021e2 <LoopFillZerobss>

080021de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e0:	3204      	adds	r2, #4

080021e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021e6:	f006 fb65 	bl	80088b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ea:	f7fe fb29 	bl	8000840 <main>
  bx lr
 80021ee:	4770      	bx	lr
  ldr r0, =_sdata
 80021f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80021f8:	0800939c 	.word	0x0800939c
  ldr r2, =_sbss
 80021fc:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002200:	20002338 	.word	0x20002338

08002204 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002204:	e7fe      	b.n	8002204 <ADC1_2_IRQHandler>
	...

08002208 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <HAL_Init+0x28>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a07      	ldr	r2, [pc, #28]	; (8002230 <HAL_Init+0x28>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002218:	2003      	movs	r0, #3
 800221a:	f000 fd4d 	bl	8002cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	200f      	movs	r0, #15
 8002220:	f7ff ff28 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002224:	f7ff fe00 	bl	8001e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x1c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x20>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x20>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	20000010 	.word	0x20000010
 8002254:	2000064c 	.word	0x2000064c

08002258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_GetTick+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	2000064c 	.word	0x2000064c

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fff0 	bl	8002258 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffe0 	bl	8002258 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000010 	.word	0x20000010

080022b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0be      	b.n	8002454 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fdd0 	bl	8001e98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fbf1 	bl	8002ae0 <ADC_ConversionStop_Disable>
 80022fe:	4603      	mov	r3, r0
 8002300:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8099 	bne.w	8002442 <HAL_ADC_Init+0x18e>
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8095 	bne.w	8002442 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002334:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800233c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4313      	orrs	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234c:	d003      	beq.n	8002356 <HAL_ADC_Init+0xa2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_ADC_Init+0xa8>
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	e000      	b.n	800235e <HAL_ADC_Init+0xaa>
 800235c:	2300      	movs	r3, #0
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7d1b      	ldrb	r3, [r3, #20]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d119      	bne.n	80023a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	3b01      	subs	r3, #1
 800237a:	035a      	lsls	r2, r3, #13
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_ADC_Init+0x1a8>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d0:	d003      	beq.n	80023da <HAL_ADC_Init+0x126>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d104      	bne.n	80023e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	3b01      	subs	r3, #1
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <HAL_ADC_Init+0x1ac>)
 8002400:	4013      	ands	r3, r2
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800241e:	e018      	b.n	8002452 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f023 0312 	bic.w	r3, r3, #18
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002440:	e007      	b.n	8002452 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	f043 0210 	orr.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	ffe1f7fd 	.word	0xffe1f7fd
 8002460:	ff1f0efe 	.word	0xff1f0efe

08002464 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_ADC_Start+0x1a>
 800247a:	2302      	movs	r3, #2
 800247c:	e098      	b.n	80025b0 <HAL_ADC_Start+0x14c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fad0 	bl	8002a2c <ADC_Enable>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8087 	bne.w	80025a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a41      	ldr	r2, [pc, #260]	; (80025b8 <HAL_ADC_Start+0x154>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d105      	bne.n	80024c2 <HAL_ADC_Start+0x5e>
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_ADC_Start+0x158>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d026      	beq.n	800252a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ec:	e01d      	b.n	800252a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_ADC_Start+0x158>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_ADC_Start+0xaa>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <HAL_ADC_Start+0x154>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10d      	bne.n	800252a <HAL_ADC_Start+0xc6>
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_ADC_Start+0x158>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f023 0206 	bic.w	r2, r3, #6
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
 8002542:	e002      	b.n	800254a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0202 	mvn.w	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002566:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800256a:	d113      	bne.n	8002594 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_ADC_Start+0x154>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d105      	bne.n	8002582 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_ADC_Start+0x158>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	e00c      	b.n	80025ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e003      	b.n	80025ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40012800 	.word	0x40012800
 80025bc:	40012400 	.word	0x40012400

080025c0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_ADC_Stop+0x1a>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e01a      	b.n	8002610 <HAL_ADC_Stop+0x50>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fa7c 	bl	8002ae0 <ADC_ConversionStop_Disable>
 80025e8:	4603      	mov	r3, r0
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	f043 0201 	orr.w	r2, r3, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800262e:	f7ff fe13 	bl	8002258 <HAL_GetTick>
 8002632:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e0d3      	b.n	8002802 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d131      	bne.n	80026cc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002672:	2b00      	cmp	r3, #0
 8002674:	d12a      	bne.n	80026cc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002676:	e021      	b.n	80026bc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d01d      	beq.n	80026bc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <HAL_ADC_PollForConversion+0x7e>
 8002686:	f7ff fde7 	bl	8002258 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d212      	bcs.n	80026bc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10b      	bne.n	80026bc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	f043 0204 	orr.w	r2, r3, #4
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0a2      	b.n	8002802 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0d6      	beq.n	8002678 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026ca:	e070      	b.n	80027ae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80026cc:	4b4f      	ldr	r3, [pc, #316]	; (800280c <HAL_ADC_PollForConversion+0x1f4>)
 80026ce:	681c      	ldr	r4, [r3, #0]
 80026d0:	2002      	movs	r0, #2
 80026d2:	f001 ff9b 	bl	800460c <HAL_RCCEx_GetPeriphCLKFreq>
 80026d6:	4603      	mov	r3, r0
 80026d8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6919      	ldr	r1, [r3, #16]
 80026e2:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_ADC_PollForConversion+0x1f8>)
 80026e4:	400b      	ands	r3, r1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d118      	bne.n	800271c <HAL_ADC_PollForConversion+0x104>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <HAL_ADC_PollForConversion+0x1fc>)
 80026f2:	400b      	ands	r3, r1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d111      	bne.n	800271c <HAL_ADC_PollForConversion+0x104>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_ADC_PollForConversion+0x200>)
 8002700:	400b      	ands	r3, r1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HAL_ADC_PollForConversion+0x100>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68d9      	ldr	r1, [r3, #12]
 800270c:	4b43      	ldr	r3, [pc, #268]	; (800281c <HAL_ADC_PollForConversion+0x204>)
 800270e:	400b      	ands	r3, r1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_ADC_PollForConversion+0x100>
 8002714:	2314      	movs	r3, #20
 8002716:	e020      	b.n	800275a <HAL_ADC_PollForConversion+0x142>
 8002718:	2329      	movs	r3, #41	; 0x29
 800271a:	e01e      	b.n	800275a <HAL_ADC_PollForConversion+0x142>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_ADC_PollForConversion+0x200>)
 8002724:	400b      	ands	r3, r1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_ADC_PollForConversion+0x120>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68d9      	ldr	r1, [r3, #12]
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_ADC_PollForConversion+0x204>)
 8002732:	400b      	ands	r3, r1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00d      	beq.n	8002754 <HAL_ADC_PollForConversion+0x13c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6919      	ldr	r1, [r3, #16]
 800273e:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_ADC_PollForConversion+0x208>)
 8002740:	400b      	ands	r3, r1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d108      	bne.n	8002758 <HAL_ADC_PollForConversion+0x140>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68d9      	ldr	r1, [r3, #12]
 800274c:	4b34      	ldr	r3, [pc, #208]	; (8002820 <HAL_ADC_PollForConversion+0x208>)
 800274e:	400b      	ands	r3, r1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_PollForConversion+0x140>
 8002754:	2354      	movs	r3, #84	; 0x54
 8002756:	e000      	b.n	800275a <HAL_ADC_PollForConversion+0x142>
 8002758:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002760:	e021      	b.n	80027a6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d01a      	beq.n	80027a0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d007      	beq.n	8002780 <HAL_ADC_PollForConversion+0x168>
 8002770:	f7ff fd72 	bl	8002258 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d20f      	bcs.n	80027a0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d90b      	bls.n	80027a0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f043 0204 	orr.w	r2, r3, #4
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e030      	b.n	8002802 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d8d9      	bhi.n	8002762 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f06f 0212 	mvn.w	r2, #18
 80027b6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027d2:	d115      	bne.n	8002800 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d111      	bne.n	8002800 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	20000008 	.word	0x20000008
 8002810:	24924924 	.word	0x24924924
 8002814:	00924924 	.word	0x00924924
 8002818:	12492492 	.word	0x12492492
 800281c:	00492492 	.word	0x00492492
 8002820:	00249249 	.word	0x00249249

08002824 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_ADC_ConfigChannel+0x20>
 8002858:	2302      	movs	r3, #2
 800285a:	e0dc      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x1da>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d81c      	bhi.n	80028a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b05      	subs	r3, #5
 800287e:	221f      	movs	r2, #31
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	4019      	ands	r1, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b05      	subs	r3, #5
 8002898:	fa00 f203 	lsl.w	r2, r0, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34
 80028a4:	e03c      	b.n	8002920 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d81c      	bhi.n	80028e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	3b23      	subs	r3, #35	; 0x23
 80028c0:	221f      	movs	r2, #31
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	4019      	ands	r1, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3b23      	subs	r3, #35	; 0x23
 80028da:	fa00 f203 	lsl.w	r2, r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
 80028e6:	e01b      	b.n	8002920 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b41      	subs	r3, #65	; 0x41
 80028fa:	221f      	movs	r2, #31
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	4019      	ands	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b41      	subs	r3, #65	; 0x41
 8002914:	fa00 f203 	lsl.w	r2, r0, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b09      	cmp	r3, #9
 8002926:	d91c      	bls.n	8002962 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	3b1e      	subs	r3, #30
 800293a:	2207      	movs	r2, #7
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	4019      	ands	r1, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6898      	ldr	r0, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	3b1e      	subs	r3, #30
 8002954:	fa00 f203 	lsl.w	r2, r0, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]
 8002960:	e019      	b.n	8002996 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6919      	ldr	r1, [r3, #16]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	2207      	movs	r2, #7
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	4019      	ands	r1, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6898      	ldr	r0, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b10      	cmp	r3, #16
 800299c:	d003      	beq.n	80029a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029a2:	2b11      	cmp	r3, #17
 80029a4:	d132      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_ADC_ConfigChannel+0x1e4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d125      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d126      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d11a      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_ADC_ConfigChannel+0x1e8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <HAL_ADC_ConfigChannel+0x1ec>)
 80029dc:	fba2 2303 	umull	r2, r3, r2, r3
 80029e0:	0c9a      	lsrs	r2, r3, #18
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029ec:	e002      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f9      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x1b2>
 80029fa:	e007      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	40012400 	.word	0x40012400
 8002a24:	20000008 	.word	0x20000008
 8002a28:	431bde83 	.word	0x431bde83

08002a2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d040      	beq.n	8002acc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <ADC_Enable+0xac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <ADC_Enable+0xb0>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	0c9b      	lsrs	r3, r3, #18
 8002a66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a68:	e002      	b.n	8002a70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a76:	f7ff fbef 	bl	8002258 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a7c:	e01f      	b.n	8002abe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a7e:	f7ff fbeb 	bl	8002258 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d918      	bls.n	8002abe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d011      	beq.n	8002abe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e007      	b.n	8002ace <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d1d8      	bne.n	8002a7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	431bde83 	.word	0x431bde83

08002ae0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d12e      	bne.n	8002b58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b0a:	f7ff fba5 	bl	8002258 <HAL_GetTick>
 8002b0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b10:	e01b      	b.n	8002b4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b12:	f7ff fba1 	bl	8002258 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d914      	bls.n	8002b4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10d      	bne.n	8002b4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f043 0210 	orr.w	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e007      	b.n	8002b5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d0dc      	beq.n	8002b12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
	...

08002b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4906      	ldr	r1, [pc, #24]	; (8002bfc <__NVIC_EnableIRQ+0x34>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff4f 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce0:	f7ff ff64 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	6978      	ldr	r0, [r7, #20]
 8002cec:	f7ff ffb2 	bl	8002c54 <NVIC_EncodePriority>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff81 	bl	8002c00 <__NVIC_SetPriority>
}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff57 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b08b      	sub	sp, #44	; 0x2c
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d36:	e169      	b.n	800300c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d38:	2201      	movs	r2, #1
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	f040 8158 	bne.w	8003006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a9a      	ldr	r2, [pc, #616]	; (8002fc4 <HAL_GPIO_Init+0x2a0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d05e      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d60:	4a98      	ldr	r2, [pc, #608]	; (8002fc4 <HAL_GPIO_Init+0x2a0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d875      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d66:	4a98      	ldr	r2, [pc, #608]	; (8002fc8 <HAL_GPIO_Init+0x2a4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d058      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d6c:	4a96      	ldr	r2, [pc, #600]	; (8002fc8 <HAL_GPIO_Init+0x2a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d86f      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d72:	4a96      	ldr	r2, [pc, #600]	; (8002fcc <HAL_GPIO_Init+0x2a8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d052      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d78:	4a94      	ldr	r2, [pc, #592]	; (8002fcc <HAL_GPIO_Init+0x2a8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d869      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d7e:	4a94      	ldr	r2, [pc, #592]	; (8002fd0 <HAL_GPIO_Init+0x2ac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d04c      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d84:	4a92      	ldr	r2, [pc, #584]	; (8002fd0 <HAL_GPIO_Init+0x2ac>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d863      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d8a:	4a92      	ldr	r2, [pc, #584]	; (8002fd4 <HAL_GPIO_Init+0x2b0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d046      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
 8002d90:	4a90      	ldr	r2, [pc, #576]	; (8002fd4 <HAL_GPIO_Init+0x2b0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d85d      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d96:	2b12      	cmp	r3, #18
 8002d98:	d82a      	bhi.n	8002df0 <HAL_GPIO_Init+0xcc>
 8002d9a:	2b12      	cmp	r3, #18
 8002d9c:	d859      	bhi.n	8002e52 <HAL_GPIO_Init+0x12e>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <HAL_GPIO_Init+0x80>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002e1f 	.word	0x08002e1f
 8002da8:	08002df9 	.word	0x08002df9
 8002dac:	08002e0b 	.word	0x08002e0b
 8002db0:	08002e4d 	.word	0x08002e4d
 8002db4:	08002e53 	.word	0x08002e53
 8002db8:	08002e53 	.word	0x08002e53
 8002dbc:	08002e53 	.word	0x08002e53
 8002dc0:	08002e53 	.word	0x08002e53
 8002dc4:	08002e53 	.word	0x08002e53
 8002dc8:	08002e53 	.word	0x08002e53
 8002dcc:	08002e53 	.word	0x08002e53
 8002dd0:	08002e53 	.word	0x08002e53
 8002dd4:	08002e53 	.word	0x08002e53
 8002dd8:	08002e53 	.word	0x08002e53
 8002ddc:	08002e53 	.word	0x08002e53
 8002de0:	08002e53 	.word	0x08002e53
 8002de4:	08002e53 	.word	0x08002e53
 8002de8:	08002e01 	.word	0x08002e01
 8002dec:	08002e15 	.word	0x08002e15
 8002df0:	4a79      	ldr	r2, [pc, #484]	; (8002fd8 <HAL_GPIO_Init+0x2b4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002df6:	e02c      	b.n	8002e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	623b      	str	r3, [r7, #32]
          break;
 8002dfe:	e029      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	3304      	adds	r3, #4
 8002e06:	623b      	str	r3, [r7, #32]
          break;
 8002e08:	e024      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	623b      	str	r3, [r7, #32]
          break;
 8002e12:	e01f      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	623b      	str	r3, [r7, #32]
          break;
 8002e1c:	e01a      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e26:	2304      	movs	r3, #4
 8002e28:	623b      	str	r3, [r7, #32]
          break;
 8002e2a:	e013      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e34:	2308      	movs	r3, #8
 8002e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	611a      	str	r2, [r3, #16]
          break;
 8002e3e:	e009      	b.n	8002e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e40:	2308      	movs	r3, #8
 8002e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69fa      	ldr	r2, [r7, #28]
 8002e48:	615a      	str	r2, [r3, #20]
          break;
 8002e4a:	e003      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
          break;
 8002e50:	e000      	b.n	8002e54 <HAL_GPIO_Init+0x130>
          break;
 8002e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d801      	bhi.n	8002e5e <HAL_GPIO_Init+0x13a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	e001      	b.n	8002e62 <HAL_GPIO_Init+0x13e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2bff      	cmp	r3, #255	; 0xff
 8002e68:	d802      	bhi.n	8002e70 <HAL_GPIO_Init+0x14c>
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	e002      	b.n	8002e76 <HAL_GPIO_Init+0x152>
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	3b08      	subs	r3, #8
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	431a      	orrs	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80b1 	beq.w	8003006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ea4:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4a4c      	ldr	r2, [pc, #304]	; (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6193      	str	r3, [r2, #24]
 8002eb0:	4b4a      	ldr	r3, [pc, #296]	; (8002fdc <HAL_GPIO_Init+0x2b8>)
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ebc:	4a48      	ldr	r2, [pc, #288]	; (8002fe0 <HAL_GPIO_Init+0x2bc>)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	089b      	lsrs	r3, r3, #2
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <HAL_GPIO_Init+0x2c0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <HAL_GPIO_Init+0x1ec>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3f      	ldr	r2, [pc, #252]	; (8002fe8 <HAL_GPIO_Init+0x2c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00d      	beq.n	8002f0c <HAL_GPIO_Init+0x1e8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3e      	ldr	r2, [pc, #248]	; (8002fec <HAL_GPIO_Init+0x2c8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <HAL_GPIO_Init+0x1e4>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <HAL_GPIO_Init+0x2cc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_GPIO_Init+0x1e0>
 8002f00:	2303      	movs	r3, #3
 8002f02:	e006      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e004      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e002      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_GPIO_Init+0x1ee>
 8002f10:	2300      	movs	r3, #0
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	f002 0203 	and.w	r2, r2, #3
 8002f18:	0092      	lsls	r2, r2, #2
 8002f1a:	4093      	lsls	r3, r2
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f22:	492f      	ldr	r1, [pc, #188]	; (8002fe0 <HAL_GPIO_Init+0x2bc>)
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	492c      	ldr	r1, [pc, #176]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
 8002f48:	e006      	b.n	8002f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	4928      	ldr	r1, [pc, #160]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	4922      	ldr	r1, [pc, #136]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60cb      	str	r3, [r1, #12]
 8002f70:	e006      	b.n	8002f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f72:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	491e      	ldr	r1, [pc, #120]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	4918      	ldr	r1, [pc, #96]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	4914      	ldr	r1, [pc, #80]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d021      	beq.n	8002ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_GPIO_Init+0x2d0>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	e021      	b.n	8003006 <HAL_GPIO_Init+0x2e2>
 8002fc2:	bf00      	nop
 8002fc4:	10320000 	.word	0x10320000
 8002fc8:	10310000 	.word	0x10310000
 8002fcc:	10220000 	.word	0x10220000
 8002fd0:	10210000 	.word	0x10210000
 8002fd4:	10120000 	.word	0x10120000
 8002fd8:	10110000 	.word	0x10110000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40010800 	.word	0x40010800
 8002fe8:	40010c00 	.word	0x40010c00
 8002fec:	40011000 	.word	0x40011000
 8002ff0:	40011400 	.word	0x40011400
 8002ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	4909      	ldr	r1, [pc, #36]	; (8003028 <HAL_GPIO_Init+0x304>)
 8003002:	4013      	ands	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	fa22 f303 	lsr.w	r3, r2, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	f47f ae8e 	bne.w	8002d38 <HAL_GPIO_Init+0x14>
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	372c      	adds	r7, #44	; 0x2c
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	40010400 	.word	0x40010400

0800302c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e001      	b.n	800304e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr

0800305a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	460b      	mov	r3, r1
 8003064:	807b      	strh	r3, [r7, #2]
 8003066:	4613      	mov	r3, r2
 8003068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800306a:	787b      	ldrb	r3, [r7, #1]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003070:	887a      	ldrh	r2, [r7, #2]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003076:	e003      	b.n	8003080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	041a      	lsls	r2, r3, #16
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	611a      	str	r2, [r3, #16]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
	...

0800308c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e12b      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe ff56 	bl	8001f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2224      	movs	r2, #36	; 0x24
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f0:	f001 f960 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a81      	ldr	r2, [pc, #516]	; (8003300 <HAL_I2C_Init+0x274>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d807      	bhi.n	8003110 <HAL_I2C_Init+0x84>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4a80      	ldr	r2, [pc, #512]	; (8003304 <HAL_I2C_Init+0x278>)
 8003104:	4293      	cmp	r3, r2
 8003106:	bf94      	ite	ls
 8003108:	2301      	movls	r3, #1
 800310a:	2300      	movhi	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	e006      	b.n	800311e <HAL_I2C_Init+0x92>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a7d      	ldr	r2, [pc, #500]	; (8003308 <HAL_I2C_Init+0x27c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	bf94      	ite	ls
 8003118:	2301      	movls	r3, #1
 800311a:	2300      	movhi	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e0e7      	b.n	80032f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a78      	ldr	r2, [pc, #480]	; (800330c <HAL_I2C_Init+0x280>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9b      	lsrs	r3, r3, #18
 8003130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a6a      	ldr	r2, [pc, #424]	; (8003300 <HAL_I2C_Init+0x274>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d802      	bhi.n	8003160 <HAL_I2C_Init+0xd4>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	e009      	b.n	8003174 <HAL_I2C_Init+0xe8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_I2C_Init+0x284>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	3301      	adds	r3, #1
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	430b      	orrs	r3, r1
 800317a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	495c      	ldr	r1, [pc, #368]	; (8003300 <HAL_I2C_Init+0x274>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d819      	bhi.n	80031c8 <HAL_I2C_Init+0x13c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1e59      	subs	r1, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a2:	1c59      	adds	r1, r3, #1
 80031a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a8:	400b      	ands	r3, r1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_I2C_Init+0x138>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1e59      	subs	r1, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031bc:	3301      	adds	r3, #1
 80031be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c2:	e051      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c4:	2304      	movs	r3, #4
 80031c6:	e04f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d111      	bne.n	80031f4 <HAL_I2C_Init+0x168>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e012      	b.n	800321a <HAL_I2C_Init+0x18e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1e58      	subs	r0, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	460b      	mov	r3, r1
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	fbb0 f3f3 	udiv	r3, r0, r3
 800320a:	3301      	adds	r3, #1
 800320c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Init+0x196>
 800321e:	2301      	movs	r3, #1
 8003220:	e022      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <HAL_I2C_Init+0x1bc>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1e58      	subs	r0, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6859      	ldr	r1, [r3, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	440b      	add	r3, r1
 8003238:	fbb0 f3f3 	udiv	r3, r0, r3
 800323c:	3301      	adds	r3, #1
 800323e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	e00f      	b.n	8003268 <HAL_I2C_Init+0x1dc>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	6809      	ldr	r1, [r1, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6911      	ldr	r1, [r2, #16]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2220      	movs	r2, #32
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	000186a0 	.word	0x000186a0
 8003304:	001e847f 	.word	0x001e847f
 8003308:	003d08ff 	.word	0x003d08ff
 800330c:	431bde83 	.word	0x431bde83
 8003310:	10624dd3 	.word	0x10624dd3

08003314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	817b      	strh	r3, [r7, #10]
 8003324:	4613      	mov	r3, r2
 8003326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003328:	f7fe ff96 	bl	8002258 <HAL_GetTick>
 800332c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 80e0 	bne.w	80034fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2319      	movs	r3, #25
 8003342:	2201      	movs	r2, #1
 8003344:	4970      	ldr	r1, [pc, #448]	; (8003508 <HAL_I2C_Master_Transmit+0x1f4>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fa92 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	e0d3      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_I2C_Master_Transmit+0x50>
 8003360:	2302      	movs	r3, #2
 8003362:	e0cc      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b01      	cmp	r3, #1
 8003378:	d007      	beq.n	800338a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2221      	movs	r2, #33	; 0x21
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a50      	ldr	r2, [pc, #320]	; (800350c <HAL_I2C_Master_Transmit+0x1f8>)
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f9ca 	bl	800376c <I2C_MasterRequestWrite>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e08d      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033f8:	e066      	b.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fb50 	bl	8003aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00d      	beq.n	8003426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b04      	cmp	r3, #4
 8003410:	d107      	bne.n	8003422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e06b      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b04      	cmp	r3, #4
 8003462:	d11b      	bne.n	800349c <HAL_I2C_Master_Transmit+0x188>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d017      	beq.n	800349c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	6a39      	ldr	r1, [r7, #32]
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fb47 	bl	8003b34 <I2C_WaitOnBTFFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d107      	bne.n	80034c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e01a      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d194      	bne.n	80033fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	00100002 	.word	0x00100002
 800350c:	ffff0000 	.word	0xffff0000

08003510 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003520:	f7fe fe9a 	bl	8002258 <HAL_GetTick>
 8003524:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 8111 	bne.w	800375a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2319      	movs	r3, #25
 800353e:	2201      	movs	r2, #1
 8003540:	4988      	ldr	r1, [pc, #544]	; (8003764 <HAL_I2C_IsDeviceReady+0x254>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f994 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	e104      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_I2C_IsDeviceReady+0x50>
 800355c:	2302      	movs	r3, #2
 800355e:	e0fd      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d007      	beq.n	8003586 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2224      	movs	r2, #36	; 0x24
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a70      	ldr	r2, [pc, #448]	; (8003768 <HAL_I2C_IsDeviceReady+0x258>)
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f952 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e0:	d103      	bne.n	80035ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0b6      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fe2b 	bl	8002258 <HAL_GetTick>
 8003602:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003632:	e025      	b.n	8003680 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003634:	f7fe fe10 	bl	8002258 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <HAL_I2C_IsDeviceReady+0x13a>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	22a0      	movs	r2, #160	; 0xa0
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2ba0      	cmp	r3, #160	; 0xa0
 800368a:	d005      	beq.n	8003698 <HAL_I2C_IsDeviceReady+0x188>
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <HAL_I2C_IsDeviceReady+0x188>
 8003692:	7dbb      	ldrb	r3, [r7, #22]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0cd      	beq.n	8003634 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d129      	bne.n	8003702 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	2319      	movs	r3, #25
 80036da:	2201      	movs	r2, #1
 80036dc:	4921      	ldr	r1, [pc, #132]	; (8003764 <HAL_I2C_IsDeviceReady+0x254>)
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f8c6 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e036      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e02c      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800371a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2319      	movs	r3, #25
 8003722:	2201      	movs	r2, #1
 8003724:	490f      	ldr	r1, [pc, #60]	; (8003764 <HAL_I2C_IsDeviceReady+0x254>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f8a2 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e012      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	3301      	adds	r3, #1
 800373a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	f4ff af32 	bcc.w	80035aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800375a:	2302      	movs	r3, #2
  }
}
 800375c:	4618      	mov	r0, r3
 800375e:	3720      	adds	r7, #32
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000

0800376c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	460b      	mov	r3, r1
 800377a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d006      	beq.n	8003796 <I2C_MasterRequestWrite+0x2a>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d003      	beq.n	8003796 <I2C_MasterRequestWrite+0x2a>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003794:	d108      	bne.n	80037a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	e00b      	b.n	80037c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	2b12      	cmp	r3, #18
 80037ae:	d107      	bne.n	80037c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f84f 	bl	8003870 <I2C_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00d      	beq.n	80037f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e6:	d103      	bne.n	80037f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e035      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037fc:	d108      	bne.n	8003810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037fe:	897b      	ldrh	r3, [r7, #10]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	e01b      	b.n	8003848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003810:	897b      	ldrh	r3, [r7, #10]
 8003812:	11db      	asrs	r3, r3, #7
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f003 0306 	and.w	r3, r3, #6
 800381a:	b2db      	uxtb	r3, r3
 800381c:	f063 030f 	orn	r3, r3, #15
 8003820:	b2da      	uxtb	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <I2C_MasterRequestWrite+0xfc>)
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f898 	bl	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e010      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4907      	ldr	r1, [pc, #28]	; (800386c <I2C_MasterRequestWrite+0x100>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f888 	bl	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	00010008 	.word	0x00010008
 800386c:	00010002 	.word	0x00010002

08003870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003880:	e048      	b.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d044      	beq.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe fce5 	bl	8002258 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d139      	bne.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d10d      	bne.n	80038c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	43da      	mvns	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4013      	ands	r3, r2
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	e00c      	b.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	43da      	mvns	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d116      	bne.n	8003914 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e023      	b.n	800395c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10d      	bne.n	800393a <I2C_WaitOnFlagUntilTimeout+0xca>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	43da      	mvns	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	461a      	mov	r2, r3
 8003938:	e00c      	b.n	8003954 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	43da      	mvns	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	429a      	cmp	r2, r3
 8003958:	d093      	beq.n	8003882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003972:	e071      	b.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d123      	bne.n	80039cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003992:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800399c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f043 0204 	orr.w	r2, r3, #4
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e067      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d2:	d041      	beq.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d4:	f7fe fc40 	bl	8002258 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d302      	bcc.n	80039ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d136      	bne.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10c      	bne.n	8003a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	e00b      	b.n	8003a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	43da      	mvns	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	f043 0220 	orr.w	r2, r3, #32
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e021      	b.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	0c1b      	lsrs	r3, r3, #16
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10c      	bne.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	bf14      	ite	ne
 8003a74:	2301      	movne	r3, #1
 8003a76:	2300      	moveq	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e00b      	b.n	8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	43da      	mvns	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f af6d 	bne.w	8003974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab0:	e034      	b.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f886 	bl	8003bc4 <I2C_IsAcknowledgeFailed>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e034      	b.n	8003b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d028      	beq.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aca:	f7fe fbc5 	bl	8002258 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d302      	bcc.n	8003ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d11d      	bne.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aea:	2b80      	cmp	r3, #128	; 0x80
 8003aec:	d016      	beq.n	8003b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d1c3      	bne.n	8003ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b40:	e034      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f83e 	bl	8003bc4 <I2C_IsAcknowledgeFailed>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e034      	b.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d028      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5a:	f7fe fb7d 	bl	8002258 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d302      	bcc.n	8003b70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11d      	bne.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f003 0304 	and.w	r3, r3, #4
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d016      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e007      	b.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d1c3      	bne.n	8003b42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d11b      	bne.n	8003c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr

08003c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e272      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 8087 	beq.w	8003d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c40:	4b92      	ldr	r3, [pc, #584]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d00c      	beq.n	8003c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c4c:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 030c 	and.w	r3, r3, #12
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d112      	bne.n	8003c7e <HAL_RCC_OscConfig+0x5e>
 8003c58:	4b8c      	ldr	r3, [pc, #560]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d10b      	bne.n	8003c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c66:	4b89      	ldr	r3, [pc, #548]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d06c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x12c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d168      	bne.n	8003d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e24c      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d106      	bne.n	8003c96 <HAL_RCC_OscConfig+0x76>
 8003c88:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7f      	ldr	r2, [pc, #508]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	e02e      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x98>
 8003c9e:	4b7b      	ldr	r3, [pc, #492]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7a      	ldr	r2, [pc, #488]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a77      	ldr	r2, [pc, #476]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e01d      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCC_OscConfig+0xbc>
 8003cc2:	4b72      	ldr	r3, [pc, #456]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a71      	ldr	r2, [pc, #452]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	4b6f      	ldr	r3, [pc, #444]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6e      	ldr	r2, [pc, #440]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCC_OscConfig+0xd4>
 8003cdc:	4b6b      	ldr	r3, [pc, #428]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6a      	ldr	r2, [pc, #424]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b68      	ldr	r3, [pc, #416]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a67      	ldr	r2, [pc, #412]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d013      	beq.n	8003d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fe faac 	bl	8002258 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d04:	f7fe faa8 	bl	8002258 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b64      	cmp	r3, #100	; 0x64
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e200      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b5d      	ldr	r3, [pc, #372]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0xe4>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fa98 	bl	8002258 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d2c:	f7fe fa94 	bl	8002258 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1ec      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3e:	4b53      	ldr	r3, [pc, #332]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x10c>
 8003d4a:	e000      	b.n	8003d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d063      	beq.n	8003e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d5a:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d66:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d11c      	bne.n	8003dac <HAL_RCC_OscConfig+0x18c>
 8003d72:	4b46      	ldr	r3, [pc, #280]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d116      	bne.n	8003dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d005      	beq.n	8003d96 <HAL_RCC_OscConfig+0x176>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d001      	beq.n	8003d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e1c0      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d96:	4b3d      	ldr	r3, [pc, #244]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4939      	ldr	r1, [pc, #228]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003daa:	e03a      	b.n	8003e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003db4:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <HAL_RCC_OscConfig+0x270>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fa4d 	bl	8002258 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc2:	f7fe fa49 	bl	8002258 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e1a1      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4927      	ldr	r1, [pc, #156]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]
 8003df4:	e015      	b.n	8003e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df6:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_RCC_OscConfig+0x270>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fa2c 	bl	8002258 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe fa28 	bl	8002258 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e180      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d03a      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d019      	beq.n	8003e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e36:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <HAL_RCC_OscConfig+0x274>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fe fa0c 	bl	8002258 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fe fa08 	bl	8002258 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e160      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCC_OscConfig+0x26c>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e62:	2001      	movs	r0, #1
 8003e64:	f000 fafe 	bl	8004464 <RCC_Delay>
 8003e68:	e01c      	b.n	8003ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e70:	f7fe f9f2 	bl	8002258 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e76:	e00f      	b.n	8003e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e78:	f7fe f9ee 	bl	8002258 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d908      	bls.n	8003e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e146      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	42420000 	.word	0x42420000
 8003e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b92      	ldr	r3, [pc, #584]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e9      	bne.n	8003e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a6 	beq.w	8003ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b8b      	ldr	r3, [pc, #556]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10d      	bne.n	8003ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	4a87      	ldr	r2, [pc, #540]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ecc:	61d3      	str	r3, [r2, #28]
 8003ece:	4b85      	ldr	r3, [pc, #532]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	4b82      	ldr	r3, [pc, #520]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d118      	bne.n	8003f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eea:	4b7f      	ldr	r3, [pc, #508]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a7e      	ldr	r2, [pc, #504]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ef6:	f7fe f9af 	bl	8002258 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fe f9ab 	bl	8002258 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	; 0x64
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e103      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b75      	ldr	r3, [pc, #468]	; (80040e8 <HAL_RCC_OscConfig+0x4c8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d106      	bne.n	8003f32 <HAL_RCC_OscConfig+0x312>
 8003f24:	4b6f      	ldr	r3, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6213      	str	r3, [r2, #32]
 8003f30:	e02d      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x334>
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4a69      	ldr	r2, [pc, #420]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6213      	str	r3, [r2, #32]
 8003f46:	4b67      	ldr	r3, [pc, #412]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4a66      	ldr	r2, [pc, #408]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	6213      	str	r3, [r2, #32]
 8003f52:	e01c      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x356>
 8003f5c:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4a60      	ldr	r2, [pc, #384]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	6213      	str	r3, [r2, #32]
 8003f68:	4b5e      	ldr	r3, [pc, #376]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6213      	str	r3, [r2, #32]
 8003f74:	e00b      	b.n	8003f8e <HAL_RCC_OscConfig+0x36e>
 8003f76:	4b5b      	ldr	r3, [pc, #364]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6213      	str	r3, [r2, #32]
 8003f82:	4b58      	ldr	r3, [pc, #352]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d015      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7fe f95f 	bl	8002258 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9e:	f7fe f95b 	bl	8002258 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e0b1      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb4:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0ee      	beq.n	8003f9e <HAL_RCC_OscConfig+0x37e>
 8003fc0:	e014      	b.n	8003fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fe f949 	bl	8002258 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc8:	e00a      	b.n	8003fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fe f945 	bl	8002258 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e09b      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe0:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff2:	4b3c      	ldr	r3, [pc, #240]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8087 	beq.w	8004116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004008:	4b36      	ldr	r3, [pc, #216]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d061      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d146      	bne.n	80040aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_RCC_OscConfig+0x4cc>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fe f919 	bl	8002258 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800402a:	f7fe f915 	bl	8002258 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e06d      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d108      	bne.n	8004064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	4921      	ldr	r1, [pc, #132]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004064:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a19      	ldr	r1, [r3, #32]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	430b      	orrs	r3, r1
 8004076:	491b      	ldr	r1, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x4cc>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004082:	f7fe f8e9 	bl	8002258 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408a:	f7fe f8e5 	bl	8002258 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e03d      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800409c:	4b11      	ldr	r3, [pc, #68]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x46a>
 80040a8:	e035      	b.n	8004116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_RCC_OscConfig+0x4cc>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe f8d2 	bl	8002258 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fe f8ce 	bl	8002258 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e026      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0x498>
 80040d6:	e01e      	b.n	8004116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d107      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e019      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
 80040ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <HAL_RCC_OscConfig+0x500>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	429a      	cmp	r2, r3
 8004102:	d106      	bne.n	8004112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d001      	beq.n	8004116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000

08004124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0d0      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004138:	4b6a      	ldr	r3, [pc, #424]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d910      	bls.n	8004168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004146:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 0207 	bic.w	r2, r3, #7
 800414e:	4965      	ldr	r1, [pc, #404]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004156:	4b63      	ldr	r3, [pc, #396]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0307 	and.w	r3, r3, #7
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	429a      	cmp	r2, r3
 8004162:	d001      	beq.n	8004168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0b8      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d020      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004180:	4b59      	ldr	r3, [pc, #356]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a58      	ldr	r2, [pc, #352]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800418a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004198:	4b53      	ldr	r3, [pc, #332]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4a52      	ldr	r2, [pc, #328]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800419e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a4:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	494d      	ldr	r1, [pc, #308]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d040      	beq.n	8004244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d107      	bne.n	80041da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d115      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e07f      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d107      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e2:	4b41      	ldr	r3, [pc, #260]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e073      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f2:	4b3d      	ldr	r3, [pc, #244]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e06b      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004202:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f023 0203 	bic.w	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4936      	ldr	r1, [pc, #216]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004214:	f7fe f820 	bl	8002258 <HAL_GetTick>
 8004218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421a:	e00a      	b.n	8004232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421c:	f7fe f81c 	bl	8002258 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	f241 3288 	movw	r2, #5000	; 0x1388
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e053      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 020c 	and.w	r2, r3, #12
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	429a      	cmp	r2, r3
 8004242:	d1eb      	bne.n	800421c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d210      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 0207 	bic.w	r2, r3, #7
 800425a:	4922      	ldr	r1, [pc, #136]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e032      	b.n	80042da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4916      	ldr	r1, [pc, #88]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d009      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800429e:	4b12      	ldr	r3, [pc, #72]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	490e      	ldr	r1, [pc, #56]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042b2:	f000 f821 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 80042b6:	4602      	mov	r2, r0
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	490a      	ldr	r1, [pc, #40]	; (80042ec <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	5ccb      	ldrb	r3, [r1, r3]
 80042c6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ca:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1cc>)
 80042cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ce:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCC_ClockConfig+0x1d0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fd fece 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40022000 	.word	0x40022000
 80042e8:	40021000 	.word	0x40021000
 80042ec:	08009330 	.word	0x08009330
 80042f0:	20000008 	.word	0x20000008
 80042f4:	2000000c 	.word	0x2000000c

080042f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	2300      	movs	r3, #0
 800430c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCC_GetSysClockFreq+0x94>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b04      	cmp	r3, #4
 8004320:	d002      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x30>
 8004322:	2b08      	cmp	r3, #8
 8004324:	d003      	beq.n	800432e <HAL_RCC_GetSysClockFreq+0x36>
 8004326:	e027      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCC_GetSysClockFreq+0x98>)
 800432a:	613b      	str	r3, [r7, #16]
      break;
 800432c:	e027      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	0c9b      	lsrs	r3, r3, #18
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	4a17      	ldr	r2, [pc, #92]	; (8004394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004338:	5cd3      	ldrb	r3, [r2, r3]
 800433a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d010      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_RCC_GetSysClockFreq+0x94>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	0c5b      	lsrs	r3, r3, #17
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004352:	5cd3      	ldrb	r3, [r2, r3]
 8004354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a0d      	ldr	r2, [pc, #52]	; (8004390 <HAL_RCC_GetSysClockFreq+0x98>)
 800435a:	fb03 f202 	mul.w	r2, r3, r2
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	fbb2 f3f3 	udiv	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e004      	b.n	8004372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <HAL_RCC_GetSysClockFreq+0xa4>)
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	613b      	str	r3, [r7, #16]
      break;
 8004376:	e002      	b.n	800437e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCC_GetSysClockFreq+0x98>)
 800437a:	613b      	str	r3, [r7, #16]
      break;
 800437c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800437e:	693b      	ldr	r3, [r7, #16]
}
 8004380:	4618      	mov	r0, r3
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	007a1200 	.word	0x007a1200
 8004394:	08009348 	.word	0x08009348
 8004398:	08009358 	.word	0x08009358
 800439c:	003d0900 	.word	0x003d0900

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr
 80043b0:	20000008 	.word	0x20000008

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b8:	f7ff fff2 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4903      	ldr	r1, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000
 80043d8:	08009340 	.word	0x08009340

080043dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e0:	f7ff ffde 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0adb      	lsrs	r3, r3, #11
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4903      	ldr	r1, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f2:	5ccb      	ldrb	r3, [r1, r3]
 80043f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000
 8004400:	08009340 	.word	0x08009340

08004404 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	220f      	movs	r2, #15
 8004412:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCC_GetClockConfig+0x58>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <HAL_RCC_GetClockConfig+0x58>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_GetClockConfig+0x58>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004438:	4b08      	ldr	r3, [pc, #32]	; (800445c <HAL_RCC_GetClockConfig+0x58>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	08db      	lsrs	r3, r3, #3
 800443e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCC_GetClockConfig+0x5c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0207 	and.w	r2, r3, #7
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40021000 	.word	0x40021000
 8004460:	40022000 	.word	0x40022000

08004464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <RCC_Delay+0x34>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <RCC_Delay+0x38>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	0a5b      	lsrs	r3, r3, #9
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004480:	bf00      	nop
  }
  while (Delay --);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1e5a      	subs	r2, r3, #1
 8004486:	60fa      	str	r2, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1f9      	bne.n	8004480 <RCC_Delay+0x1c>
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr
 8004498:	20000008 	.word	0x20000008
 800449c:	10624dd3 	.word	0x10624dd3

080044a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d07d      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c0:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044cc:	4b4c      	ldr	r3, [pc, #304]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	4a4b      	ldr	r2, [pc, #300]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	61d3      	str	r3, [r2, #28]
 80044d8:	4b49      	ldr	r3, [pc, #292]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e4:	2301      	movs	r3, #1
 80044e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	4b46      	ldr	r3, [pc, #280]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d118      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f4:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a42      	ldr	r2, [pc, #264]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004500:	f7fd feaa 	bl	8002258 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	e008      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004508:	f7fd fea6 	bl	8002258 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e06d      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004526:	4b36      	ldr	r3, [pc, #216]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02e      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d027      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004544:	4b2e      	ldr	r3, [pc, #184]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800454e:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004550:	2201      	movs	r2, #1
 8004552:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004554:	4b2c      	ldr	r3, [pc, #176]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d014      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456a:	f7fd fe75 	bl	8002258 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd fe71 	bl	8002258 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e036      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ee      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4917      	ldr	r1, [pc, #92]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d105      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	4a13      	ldr	r2, [pc, #76]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	490b      	ldr	r1, [pc, #44]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	4904      	ldr	r1, [pc, #16]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	40007000 	.word	0x40007000
 8004608:	42420440 	.word	0x42420440

0800460c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	2300      	movs	r3, #0
 8004626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b10      	cmp	r3, #16
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b10      	cmp	r3, #16
 8004632:	f200 808a 	bhi.w	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d045      	beq.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d075      	beq.n	800472e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004642:	e082      	b.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004644:	4b46      	ldr	r3, [pc, #280]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800464a:	4b45      	ldr	r3, [pc, #276]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d07b      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	0c9b      	lsrs	r3, r3, #18
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	4a41      	ldr	r2, [pc, #260]	; (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004660:	5cd3      	ldrb	r3, [r2, r3]
 8004662:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800466e:	4b3c      	ldr	r3, [pc, #240]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	0c5b      	lsrs	r3, r3, #17
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	4a3b      	ldr	r2, [pc, #236]	; (8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800467a:	5cd3      	ldrb	r3, [r2, r3]
 800467c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004688:	4a38      	ldr	r2, [pc, #224]	; (800476c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e004      	b.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4a34      	ldr	r2, [pc, #208]	; (8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046a4:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b0:	d102      	bne.n	80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	61bb      	str	r3, [r7, #24]
      break;
 80046b6:	e04a      	b.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
      break;
 80046c6:	e042      	b.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80046c8:	4b25      	ldr	r3, [pc, #148]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046d8:	d108      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80046e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	e01f      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f6:	d109      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80046f8:	4b19      	ldr	r3, [pc, #100]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004704:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	e00f      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d11c      	bne.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004718:	4b11      	ldr	r3, [pc, #68]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d016      	beq.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004724:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004728:	61bb      	str	r3, [r7, #24]
      break;
 800472a:	e012      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800472c:	e011      	b.n	8004752 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800472e:	f7ff fe55 	bl	80043dc <HAL_RCC_GetPCLK2Freq>
 8004732:	4602      	mov	r2, r0
 8004734:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	0b9b      	lsrs	r3, r3, #14
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	3301      	adds	r3, #1
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	61bb      	str	r3, [r7, #24]
      break;
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800474a:	bf00      	nop
 800474c:	e002      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004752:	bf00      	nop
    }
  }
  return (frequency);
 8004754:	69bb      	ldr	r3, [r7, #24]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	0800935c 	.word	0x0800935c
 8004768:	0800936c 	.word	0x0800936c
 800476c:	007a1200 	.word	0x007a1200
 8004770:	003d0900 	.word	0x003d0900
 8004774:	aaaaaaab 	.word	0xaaaaaaab

08004778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e076      	b.n	8004878 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	2b00      	cmp	r3, #0
 8004790:	d108      	bne.n	80047a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800479a:	d009      	beq.n	80047b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	61da      	str	r2, [r3, #28]
 80047a2:	e005      	b.n	80047b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fd fc08 	bl	8001fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	ea42 0103 	orr.w	r1, r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	0c1a      	lsrs	r2, r3, #16
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f002 0204 	and.w	r2, r2, #4
 8004856:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004866:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_SPI_Transmit+0x22>
 800489e:	2302      	movs	r3, #2
 80048a0:	e12d      	b.n	8004afe <HAL_SPI_Transmit+0x27e>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048aa:	f7fd fcd5 	bl	8002258 <HAL_GetTick>
 80048ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048c0:	2302      	movs	r3, #2
 80048c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048c4:	e116      	b.n	8004af4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_SPI_Transmit+0x52>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048d6:	e10d      	b.n	8004af4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2203      	movs	r2, #3
 80048dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491e:	d10f      	bne.n	8004940 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800493e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800494a:	2b40      	cmp	r3, #64	; 0x40
 800494c:	d007      	beq.n	800495e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004966:	d14f      	bne.n	8004a08 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_SPI_Transmit+0xf6>
 8004970:	8afb      	ldrh	r3, [r7, #22]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d142      	bne.n	80049fc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	1c9a      	adds	r2, r3, #2
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800499a:	e02f      	b.n	80049fc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d112      	bne.n	80049d0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	881a      	ldrh	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	1c9a      	adds	r2, r3, #2
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80049ce:	e015      	b.n	80049fc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049d0:	f7fd fc42 	bl	8002258 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d803      	bhi.n	80049e8 <HAL_SPI_Transmit+0x168>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d102      	bne.n	80049ee <HAL_SPI_Transmit+0x16e>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80049fa:	e07b      	b.n	8004af4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ca      	bne.n	800499c <HAL_SPI_Transmit+0x11c>
 8004a06:	e050      	b.n	8004aaa <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_SPI_Transmit+0x196>
 8004a10:	8afb      	ldrh	r3, [r7, #22]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d144      	bne.n	8004aa0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a3c:	e030      	b.n	8004aa0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d113      	bne.n	8004a74 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	7812      	ldrb	r2, [r2, #0]
 8004a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a72:	e015      	b.n	8004aa0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a74:	f7fd fbf0 	bl	8002258 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d803      	bhi.n	8004a8c <HAL_SPI_Transmit+0x20c>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d102      	bne.n	8004a92 <HAL_SPI_Transmit+0x212>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a9e:	e029      	b.n	8004af4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1c9      	bne.n	8004a3e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fbcc 	bl	800524c <SPI_EndRxTxTransaction>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e003      	b.n	8004af4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3720      	adds	r7, #32
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b088      	sub	sp, #32
 8004b0a:	af02      	add	r7, sp, #8
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004b26:	2302      	movs	r3, #2
 8004b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b2a:	e0fb      	b.n	8004d24 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b34:	d112      	bne.n	8004b5c <HAL_SPI_Receive+0x56>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10e      	bne.n	8004b5c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2204      	movs	r2, #4
 8004b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f8ef 	bl	8004d36 <HAL_SPI_TransmitReceive>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	e0e8      	b.n	8004d2e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_SPI_Receive+0x64>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e0e1      	b.n	8004d2e <HAL_SPI_Receive+0x228>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b72:	f7fd fb71 	bl	8002258 <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_SPI_Receive+0x7e>
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b88:	e0cc      	b.n	8004d24 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d10f      	bne.n	8004bf2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d007      	beq.n	8004c10 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d16a      	bne.n	8004cee <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c18:	e032      	b.n	8004c80 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d115      	bne.n	8004c54 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f103 020c 	add.w	r2, r3, #12
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	7812      	ldrb	r2, [r2, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c52:	e015      	b.n	8004c80 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c54:	f7fd fb00 	bl	8002258 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d803      	bhi.n	8004c6c <HAL_SPI_Receive+0x166>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d102      	bne.n	8004c72 <HAL_SPI_Receive+0x16c>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c7e:	e051      	b.n	8004d24 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1c7      	bne.n	8004c1a <HAL_SPI_Receive+0x114>
 8004c8a:	e035      	b.n	8004cf8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d113      	bne.n	8004cc2 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	b292      	uxth	r2, r2
 8004ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	1c9a      	adds	r2, r3, #2
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cc0:	e015      	b.n	8004cee <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc2:	f7fd fac9 	bl	8002258 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d803      	bhi.n	8004cda <HAL_SPI_Receive+0x1d4>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d102      	bne.n	8004ce0 <HAL_SPI_Receive+0x1da>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004cec:	e01a      	b.n	8004d24 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1c9      	bne.n	8004c8c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fa53 	bl	80051a8 <SPI_EndRxTransaction>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
 8004d1a:	e003      	b.n	8004d24 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b08c      	sub	sp, #48	; 0x30
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d44:	2301      	movs	r3, #1
 8004d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_SPI_TransmitReceive+0x26>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e198      	b.n	800508e <HAL_SPI_TransmitReceive+0x358>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d64:	f7fd fa78 	bl	8002258 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d7a:	887b      	ldrh	r3, [r7, #2]
 8004d7c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d00f      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x70>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8c:	d107      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x68>
 8004d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d003      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004da4:	e16d      	b.n	8005082 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x82>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x82>
 8004db2:	887b      	ldrh	r3, [r7, #2]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dbe:	e160      	b.n	8005082 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d003      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2205      	movs	r2, #5
 8004dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	887a      	ldrh	r2, [r7, #2]
 8004dea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	887a      	ldrh	r2, [r7, #2]
 8004df6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d007      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e30:	d17c      	bne.n	8004f2c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_TransmitReceive+0x10a>
 8004e3a:	8b7b      	ldrh	r3, [r7, #26]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d16a      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	881a      	ldrh	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e64:	e057      	b.n	8004f16 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d11b      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x176>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_SPI_TransmitReceive+0x176>
 8004e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d113      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	1c9a      	adds	r2, r3, #2
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d119      	bne.n	8004eee <HAL_SPI_TransmitReceive+0x1b8>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d014      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	b292      	uxth	r2, r2
 8004ed0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	1c9a      	adds	r2, r3, #2
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eea:	2301      	movs	r3, #1
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004eee:	f7fd f9b3 	bl	8002258 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d80b      	bhi.n	8004f16 <HAL_SPI_TransmitReceive+0x1e0>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d007      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f14:	e0b5      	b.n	8005082 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1a2      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x130>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d19d      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x130>
 8004f2a:	e080      	b.n	800502e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x204>
 8004f34:	8b7b      	ldrh	r3, [r7, #26]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d16f      	bne.n	800501a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	330c      	adds	r3, #12
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f60:	e05b      	b.n	800501a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d11c      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x274>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d017      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x274>
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d114      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	330c      	adds	r3, #12
 8004f8a:	7812      	ldrb	r2, [r2, #0]
 8004f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d119      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x2b6>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d014      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fec:	f7fd f934 	bl	8002258 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d803      	bhi.n	8005004 <HAL_SPI_TransmitReceive+0x2ce>
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d102      	bne.n	800500a <HAL_SPI_TransmitReceive+0x2d4>
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	2b00      	cmp	r3, #0
 8005008:	d107      	bne.n	800501a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005018:	e033      	b.n	8005082 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d19e      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x22c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d199      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800502e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005030:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f90a 	bl	800524c <SPI_EndRxTxTransaction>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800504a:	e01a      	b.n	8005082 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	617b      	str	r3, [r7, #20]
 8005068:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005078:	e003      	b.n	8005082 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800508a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800508e:	4618      	mov	r0, r3
 8005090:	3730      	adds	r7, #48	; 0x30
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050a8:	f7fd f8d6 	bl	8002258 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	1a9b      	subs	r3, r3, r2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050b8:	f7fd f8ce 	bl	8002258 <HAL_GetTick>
 80050bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050be:	4b39      	ldr	r3, [pc, #228]	; (80051a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	015b      	lsls	r3, r3, #5
 80050c4:	0d1b      	lsrs	r3, r3, #20
 80050c6:	69fa      	ldr	r2, [r7, #28]
 80050c8:	fb02 f303 	mul.w	r3, r2, r3
 80050cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ce:	e054      	b.n	800517a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d050      	beq.n	800517a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050d8:	f7fd f8be 	bl	8002258 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d902      	bls.n	80050ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d13d      	bne.n	800516a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005106:	d111      	bne.n	800512c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005110:	d004      	beq.n	800511c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800511a:	d107      	bne.n	800512c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005134:	d10f      	bne.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005154:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e017      	b.n	800519a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	3b01      	subs	r3, #1
 8005178:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4013      	ands	r3, r2
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	429a      	cmp	r2, r3
 8005196:	d19b      	bne.n	80050d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	20000008 	.word	0x20000008

080051a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051bc:	d111      	bne.n	80051e2 <SPI_EndRxTransaction+0x3a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c6:	d004      	beq.n	80051d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d0:	d107      	bne.n	80051e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ea:	d117      	bne.n	800521c <SPI_EndRxTransaction+0x74>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f4:	d112      	bne.n	800521c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2101      	movs	r1, #1
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff ff49 	bl	8005098 <SPI_WaitFlagStateUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e013      	b.n	8005244 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2200      	movs	r2, #0
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff ff36 	bl	8005098 <SPI_WaitFlagStateUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d007      	beq.n	8005242 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005236:	f043 0220 	orr.w	r2, r3, #32
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e000      	b.n	8005244 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2200      	movs	r2, #0
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7ff ff18 	bl	8005098 <SPI_WaitFlagStateUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e000      	b.n	8005280 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e041      	b.n	800531e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f839 	bl	8005326 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 f9b4 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d001      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e03a      	b.n	80053c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	; (80053d0 <HAL_TIM_Base_Start_IT+0x98>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00e      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x58>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d009      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x58>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIM_Base_Start_IT+0x58>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a13      	ldr	r2, [pc, #76]	; (80053d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d111      	bne.n	80053b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b06      	cmp	r3, #6
 80053a0:	d010      	beq.n	80053c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0201 	orr.w	r2, r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b2:	e007      	b.n	80053c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800

080053dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d122      	bne.n	8005438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d11b      	bne.n	8005438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0202 	mvn.w	r2, #2
 8005408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f8ed 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 8005424:	e005      	b.n	8005432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8e0 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8ef 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b04      	cmp	r3, #4
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b04      	cmp	r3, #4
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0204 	mvn.w	r2, #4
 800545c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f8c3 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f8b6 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f8c5 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b08      	cmp	r3, #8
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0208 	mvn.w	r2, #8
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2204      	movs	r2, #4
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f899 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f88c 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f89b 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0310 	and.w	r3, r3, #16
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0210 	mvn.w	r2, #16
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2208      	movs	r2, #8
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f86f 	bl	80055fe <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f862 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f871 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b01      	cmp	r3, #1
 8005540:	d10e      	bne.n	8005560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d107      	bne.n	8005560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0201 	mvn.w	r2, #1
 8005558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fb fd4c 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d10e      	bne.n	800558c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d107      	bne.n	800558c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f8bf 	bl	800570a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f835 	bl	8005622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0220 	mvn.w	r2, #32
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f88a 	bl	80056f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a29      	ldr	r2, [pc, #164]	; (80056ec <TIM_Base_SetConfig+0xb8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_Base_SetConfig+0x30>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0x30>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <TIM_Base_SetConfig+0xbc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0x30>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <TIM_Base_SetConfig+0xc0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d108      	bne.n	8005676 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800566a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	4313      	orrs	r3, r2
 8005674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <TIM_Base_SetConfig+0xb8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00b      	beq.n	8005696 <TIM_Base_SetConfig+0x62>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005684:	d007      	beq.n	8005696 <TIM_Base_SetConfig+0x62>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <TIM_Base_SetConfig+0xbc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_Base_SetConfig+0x62>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <TIM_Base_SetConfig+0xc0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d108      	bne.n	80056a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a07      	ldr	r2, [pc, #28]	; (80056ec <TIM_Base_SetConfig+0xb8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d103      	bne.n	80056dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	615a      	str	r2, [r3, #20]
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00
 80056f0:	40000400 	.word	0x40000400
 80056f4:	40000800 	.word	0x40000800

080056f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005722:	f3ef 8305 	mrs	r3, IPSR
 8005726:	60bb      	str	r3, [r7, #8]
  return(result);
 8005728:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800572e:	f3ef 8310 	mrs	r3, PRIMASK
 8005732:	607b      	str	r3, [r7, #4]
  return(result);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <osKernelInitialize+0x32>
 800573a:	4b10      	ldr	r3, [pc, #64]	; (800577c <osKernelInitialize+0x60>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d109      	bne.n	8005756 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005742:	f3ef 8311 	mrs	r3, BASEPRI
 8005746:	603b      	str	r3, [r7, #0]
  return(result);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800574e:	f06f 0305 	mvn.w	r3, #5
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e00c      	b.n	8005770 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <osKernelInitialize+0x60>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <osKernelInitialize+0x60>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e002      	b.n	8005770 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800576a:	f04f 33ff 	mov.w	r3, #4294967295
 800576e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005770:	68fb      	ldr	r3, [r7, #12]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	20000650 	.word	0x20000650

08005780 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005786:	f3ef 8305 	mrs	r3, IPSR
 800578a:	60bb      	str	r3, [r7, #8]
  return(result);
 800578c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005792:	f3ef 8310 	mrs	r3, PRIMASK
 8005796:	607b      	str	r3, [r7, #4]
  return(result);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d109      	bne.n	80057b2 <osKernelStart+0x32>
 800579e:	4b11      	ldr	r3, [pc, #68]	; (80057e4 <osKernelStart+0x64>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d109      	bne.n	80057ba <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057a6:	f3ef 8311 	mrs	r3, BASEPRI
 80057aa:	603b      	str	r3, [r7, #0]
  return(result);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80057b2:	f06f 0305 	mvn.w	r3, #5
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e00e      	b.n	80057d8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80057ba:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <osKernelStart+0x64>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d107      	bne.n	80057d2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80057c2:	4b08      	ldr	r3, [pc, #32]	; (80057e4 <osKernelStart+0x64>)
 80057c4:	2202      	movs	r2, #2
 80057c6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80057c8:	f001 fc08 	bl	8006fdc <vTaskStartScheduler>
      stat = osOK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	e002      	b.n	80057d8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80057d8:	68fb      	ldr	r3, [r7, #12]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000650 	.word	0x20000650

080057e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b092      	sub	sp, #72	; 0x48
 80057ec:	af04      	add	r7, sp, #16
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f8:	f3ef 8305 	mrs	r3, IPSR
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 8094 	bne.w	800592e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005806:	f3ef 8310 	mrs	r3, PRIMASK
 800580a:	623b      	str	r3, [r7, #32]
  return(result);
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 808d 	bne.w	800592e <osThreadNew+0x146>
 8005814:	4b48      	ldr	r3, [pc, #288]	; (8005938 <osThreadNew+0x150>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d106      	bne.n	800582a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800581c:	f3ef 8311 	mrs	r3, BASEPRI
 8005820:	61fb      	str	r3, [r7, #28]
  return(result);
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f040 8082 	bne.w	800592e <osThreadNew+0x146>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d07e      	beq.n	800592e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005834:	2318      	movs	r3, #24
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005838:	2300      	movs	r3, #0
 800583a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800583c:	f107 031b 	add.w	r3, r7, #27
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d045      	beq.n	80058da <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <osThreadNew+0x74>
        name = attr->name;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <osThreadNew+0x9a>
 8005870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005872:	2b38      	cmp	r3, #56	; 0x38
 8005874:	d805      	bhi.n	8005882 <osThreadNew+0x9a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <osThreadNew+0x9e>
        return (NULL);
 8005882:	2300      	movs	r3, #0
 8005884:	e054      	b.n	8005930 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	089b      	lsrs	r3, r3, #2
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00e      	beq.n	80058bc <osThreadNew+0xd4>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	2b5b      	cmp	r3, #91	; 0x5b
 80058a4:	d90a      	bls.n	80058bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d006      	beq.n	80058bc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <osThreadNew+0xd4>
        mem = 1;
 80058b6:	2301      	movs	r3, #1
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ba:	e010      	b.n	80058de <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10c      	bne.n	80058de <osThreadNew+0xf6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <osThreadNew+0xf6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <osThreadNew+0xf6>
          mem = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d8:	e001      	b.n	80058de <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80058da:	2300      	movs	r3, #0
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d110      	bne.n	8005906 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80058ec:	9202      	str	r2, [sp, #8]
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f001 f924 	bl	8006b48 <xTaskCreateStatic>
 8005900:	4603      	mov	r3, r0
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	e013      	b.n	800592e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	d110      	bne.n	800592e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	b29a      	uxth	r2, r3
 8005910:	f107 0314 	add.w	r3, r7, #20
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f001 f96e 	bl	8006c00 <xTaskCreate>
 8005924:	4603      	mov	r3, r0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d001      	beq.n	800592e <osThreadNew+0x146>
          hTask = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800592e:	697b      	ldr	r3, [r7, #20]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3738      	adds	r7, #56	; 0x38
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20000650 	.word	0x20000650

0800593c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005944:	f3ef 8305 	mrs	r3, IPSR
 8005948:	613b      	str	r3, [r7, #16]
  return(result);
 800594a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10f      	bne.n	8005970 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005950:	f3ef 8310 	mrs	r3, PRIMASK
 8005954:	60fb      	str	r3, [r7, #12]
  return(result);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <osDelay+0x34>
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <osDelay+0x58>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2b02      	cmp	r3, #2
 8005962:	d109      	bne.n	8005978 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005964:	f3ef 8311 	mrs	r3, BASEPRI
 8005968:	60bb      	str	r3, [r7, #8]
  return(result);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <osDelay+0x3c>
    stat = osErrorISR;
 8005970:	f06f 0305 	mvn.w	r3, #5
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e007      	b.n	8005988 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 faf6 	bl	8006f74 <vTaskDelay>
    }
  }

  return (stat);
 8005988:	697b      	ldr	r3, [r7, #20]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	20000650 	.word	0x20000650

08005998 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059a4:	f3ef 8305 	mrs	r3, IPSR
 80059a8:	613b      	str	r3, [r7, #16]
  return(result);
 80059aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 8085 	bne.w	8005abc <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b2:	f3ef 8310 	mrs	r3, PRIMASK
 80059b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d17e      	bne.n	8005abc <osMutexNew+0x124>
 80059be:	4b42      	ldr	r3, [pc, #264]	; (8005ac8 <osMutexNew+0x130>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d105      	bne.n	80059d2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059c6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d174      	bne.n	8005abc <osMutexNew+0x124>
    if (attr != NULL) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	e001      	b.n	80059e4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <osMutexNew+0x5c>
      rmtx = 1U;
 80059ee:	2301      	movs	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	e001      	b.n	80059f8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d15c      	bne.n	8005abc <osMutexNew+0x124>
      mem = -1;
 8005a02:	f04f 33ff 	mov.w	r3, #4294967295
 8005a06:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d015      	beq.n	8005a3a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <osMutexNew+0x8c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	2b4f      	cmp	r3, #79	; 0x4f
 8005a1c:	d902      	bls.n	8005a24 <osMutexNew+0x8c>
          mem = 1;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e00c      	b.n	8005a3e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d108      	bne.n	8005a3e <osMutexNew+0xa6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d104      	bne.n	8005a3e <osMutexNew+0xa6>
            mem = 0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61bb      	str	r3, [r7, #24]
 8005a38:	e001      	b.n	8005a3e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d112      	bne.n	8005a6a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	2004      	movs	r0, #4
 8005a52:	f000 fbfb 	bl	800624c <xQueueCreateMutexStatic>
 8005a56:	6278      	str	r0, [r7, #36]	; 0x24
 8005a58:	e016      	b.n	8005a88 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	2001      	movs	r0, #1
 8005a62:	f000 fbf3 	bl	800624c <xQueueCreateMutexStatic>
 8005a66:	6278      	str	r0, [r7, #36]	; 0x24
 8005a68:	e00e      	b.n	8005a88 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10b      	bne.n	8005a88 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d004      	beq.n	8005a80 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8005a76:	2004      	movs	r0, #4
 8005a78:	f000 fbd0 	bl	800621c <xQueueCreateMutex>
 8005a7c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a7e:	e003      	b.n	8005a88 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8005a80:	2001      	movs	r0, #1
 8005a82:	f000 fbcb 	bl	800621c <xQueueCreateMutex>
 8005a86:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00c      	beq.n	8005aa8 <osMutexNew+0x110>
        if (attr != NULL) {
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <osMutexNew+0x104>
          name = attr->name;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e001      	b.n	8005aa0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8005aa0:	6979      	ldr	r1, [r7, #20]
 8005aa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aa4:	f000 fff4 	bl	8006a90 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <osMutexNew+0x124>
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000650 	.word	0x20000650

08005acc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08c      	sub	sp, #48	; 0x30
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005adc:	f3ef 8305 	mrs	r3, IPSR
 8005ae0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ae2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d16f      	bne.n	8005bc8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8005aec:	617b      	str	r3, [r7, #20]
  return(result);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d169      	bne.n	8005bc8 <osMessageQueueNew+0xfc>
 8005af4:	4b37      	ldr	r3, [pc, #220]	; (8005bd4 <osMessageQueueNew+0x108>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d105      	bne.n	8005b08 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005afc:	f3ef 8311 	mrs	r3, BASEPRI
 8005b00:	613b      	str	r3, [r7, #16]
  return(result);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d15f      	bne.n	8005bc8 <osMessageQueueNew+0xfc>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d05c      	beq.n	8005bc8 <osMessageQueueNew+0xfc>
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d059      	beq.n	8005bc8 <osMessageQueueNew+0xfc>
    mem = -1;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
 8005b18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d029      	beq.n	8005b74 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d012      	beq.n	8005b4e <osMessageQueueNew+0x82>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	2b4f      	cmp	r3, #79	; 0x4f
 8005b2e:	d90e      	bls.n	8005b4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00a      	beq.n	8005b4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68b9      	ldr	r1, [r7, #8]
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d302      	bcc.n	8005b4e <osMessageQueueNew+0x82>
        mem = 1;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	623b      	str	r3, [r7, #32]
 8005b4c:	e014      	b.n	8005b78 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d110      	bne.n	8005b78 <osMessageQueueNew+0xac>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10c      	bne.n	8005b78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d108      	bne.n	8005b78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d104      	bne.n	8005b78 <osMessageQueueNew+0xac>
          mem = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	e001      	b.n	8005b78 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d10b      	bne.n	8005b96 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2100      	movs	r1, #0
 8005b88:	9100      	str	r1, [sp, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fa53 	bl	8006038 <xQueueGenericCreateStatic>
 8005b92:	6278      	str	r0, [r7, #36]	; 0x24
 8005b94:	e008      	b.n	8005ba8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 fac0 	bl	8006126 <xQueueGenericCreate>
 8005ba6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <osMessageQueueNew+0xf0>
        name = attr->name;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e001      	b.n	8005bc0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005bc0:	69f9      	ldr	r1, [r7, #28]
 8005bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bc4:	f000 ff64 	bl	8006a90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3728      	adds	r7, #40	; 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000650 	.word	0x20000650

08005bd8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	; 0x28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf0:	f3ef 8305 	mrs	r3, IPSR
 8005bf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8005bf6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10f      	bne.n	8005c1c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005c00:	61bb      	str	r3, [r7, #24]
  return(result);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <osMessageQueuePut+0x44>
 8005c08:	4b2b      	ldr	r3, [pc, #172]	; (8005cb8 <osMessageQueuePut+0xe0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d12e      	bne.n	8005c6e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c10:	f3ef 8311 	mrs	r3, BASEPRI
 8005c14:	617b      	str	r3, [r7, #20]
  return(result);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d028      	beq.n	8005c6e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <osMessageQueuePut+0x56>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <osMessageQueuePut+0x56>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005c2e:	f06f 0303 	mvn.w	r3, #3
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c34:	e039      	b.n	8005caa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005c3a:	f107 0210 	add.w	r2, r7, #16
 8005c3e:	2300      	movs	r3, #0
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	6a38      	ldr	r0, [r7, #32]
 8005c44:	f000 fc1c 	bl	8006480 <xQueueGenericSendFromISR>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d003      	beq.n	8005c56 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005c4e:	f06f 0302 	mvn.w	r3, #2
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c54:	e029      	b.n	8005caa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d026      	beq.n	8005caa <osMessageQueuePut+0xd2>
 8005c5c:	4b17      	ldr	r3, [pc, #92]	; (8005cbc <osMessageQueuePut+0xe4>)
 8005c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c6c:	e01d      	b.n	8005caa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <osMessageQueuePut+0xa2>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005c7a:	f06f 0303 	mvn.w	r3, #3
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c80:	e014      	b.n	8005cac <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c82:	2300      	movs	r3, #0
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	6a38      	ldr	r0, [r7, #32]
 8005c8a:	f000 fafb 	bl	8006284 <xQueueGenericSend>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d00b      	beq.n	8005cac <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005c9a:	f06f 0301 	mvn.w	r3, #1
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca0:	e004      	b.n	8005cac <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005ca2:	f06f 0302 	mvn.w	r3, #2
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca8:	e000      	b.n	8005cac <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005caa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3728      	adds	r7, #40	; 0x28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000650 	.word	0x20000650
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cd6:	f3ef 8305 	mrs	r3, IPSR
 8005cda:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cdc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10f      	bne.n	8005d02 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <osMessageQueueGet+0x42>
 8005cee:	4b2b      	ldr	r3, [pc, #172]	; (8005d9c <osMessageQueueGet+0xdc>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d12e      	bne.n	8005d54 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8005cfa:	617b      	str	r3, [r7, #20]
  return(result);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d028      	beq.n	8005d54 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <osMessageQueueGet+0x54>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <osMessageQueueGet+0x54>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005d14:	f06f 0303 	mvn.w	r3, #3
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d1a:	e038      	b.n	8005d8e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d20:	f107 0310 	add.w	r3, r7, #16
 8005d24:	461a      	mov	r2, r3
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	6a38      	ldr	r0, [r7, #32]
 8005d2a:	f000 fd21 	bl	8006770 <xQueueReceiveFromISR>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d003      	beq.n	8005d3c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005d34:	f06f 0302 	mvn.w	r3, #2
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d3a:	e028      	b.n	8005d8e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d025      	beq.n	8005d8e <osMessageQueueGet+0xce>
 8005d42:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <osMessageQueueGet+0xe0>)
 8005d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d52:	e01c      	b.n	8005d8e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <osMessageQueueGet+0xa0>
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005d60:	f06f 0303 	mvn.w	r3, #3
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
 8005d66:	e013      	b.n	8005d90 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	6a38      	ldr	r0, [r7, #32]
 8005d6e:	f000 fc1f 	bl	80065b0 <xQueueReceive>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d00b      	beq.n	8005d90 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005d7e:	f06f 0301 	mvn.w	r3, #1
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
 8005d84:	e004      	b.n	8005d90 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005d86:	f06f 0302 	mvn.w	r3, #2
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8c:	e000      	b.n	8005d90 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d8e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3728      	adds	r7, #40	; 0x28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000650 	.word	0x20000650
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a06      	ldr	r2, [pc, #24]	; (8005dcc <vApplicationGetIdleTaskMemory+0x28>)
 8005db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4a05      	ldr	r2, [pc, #20]	; (8005dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2280      	movs	r2, #128	; 0x80
 8005dc0:	601a      	str	r2, [r3, #0]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr
 8005dcc:	20000654 	.word	0x20000654
 8005dd0:	200006b0 	.word	0x200006b0

08005dd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a07      	ldr	r2, [pc, #28]	; (8005e00 <vApplicationGetTimerTaskMemory+0x2c>)
 8005de4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a06      	ldr	r2, [pc, #24]	; (8005e04 <vApplicationGetTimerTaskMemory+0x30>)
 8005dea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	200008b0 	.word	0x200008b0
 8005e04:	2000090c 	.word	0x2000090c

08005e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f103 0208 	add.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f103 0208 	add.w	r2, r3, #8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f103 0208 	add.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr

08005e46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bc80      	pop	{r7}
 8005e5c:	4770      	bx	lr

08005e5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	689a      	ldr	r2, [r3, #8]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	683a      	ldr	r2, [r7, #0]
 8005e82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eba:	d103      	bne.n	8005ec4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e00c      	b.n	8005ede <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3308      	adds	r3, #8
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e002      	b.n	8005ed2 <vListInsert+0x2e>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d2f6      	bcs.n	8005ecc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	601a      	str	r2, [r3, #0]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	6892      	ldr	r2, [r2, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6852      	ldr	r2, [r2, #4]
 8005f34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d103      	bne.n	8005f48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr
	...

08005f68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f92:	f002 f953 	bl	800823c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9e:	68f9      	ldr	r1, [r7, #12]
 8005fa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	22ff      	movs	r2, #255	; 0xff
 8005fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d114      	bne.n	8006012 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01a      	beq.n	8006026 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3310      	adds	r3, #16
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 fa7b 	bl	80074f0 <xTaskRemoveFromEventList>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <xQueueGenericReset+0xcc>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	e009      	b.n	8006026 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3310      	adds	r3, #16
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fef6 	bl	8005e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3324      	adds	r3, #36	; 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fef1 	bl	8005e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006026:	f002 f939 	bl	800829c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800602a:	2301      	movs	r3, #1
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08e      	sub	sp, #56	; 0x38
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <xQueueGenericCreateStatic+0x52>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <xQueueGenericCreateStatic+0x56>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueGenericCreateStatic+0x58>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	623b      	str	r3, [r7, #32]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d102      	bne.n	80060b6 <xQueueGenericCreateStatic+0x7e>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <xQueueGenericCreateStatic+0x82>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <xQueueGenericCreateStatic+0x84>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	61fb      	str	r3, [r7, #28]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060d6:	2350      	movs	r3, #80	; 0x50
 80060d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b50      	cmp	r3, #80	; 0x50
 80060de:	d00a      	beq.n	80060f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00d      	beq.n	800611c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006108:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f843 	bl	80061a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800611e:	4618      	mov	r0, r3
 8006120:	3730      	adds	r7, #48	; 0x30
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006126:	b580      	push	{r7, lr}
 8006128:	b08a      	sub	sp, #40	; 0x28
 800612a:	af02      	add	r7, sp, #8
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	4613      	mov	r3, r2
 8006132:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10a      	bne.n	8006150 <xQueueGenericCreate+0x2a>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	613b      	str	r3, [r7, #16]
}
 800614c:	bf00      	nop
 800614e:	e7fe      	b.n	800614e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	e004      	b.n	8006166 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	fb02 f303 	mul.w	r3, r2, r3
 8006164:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	3350      	adds	r3, #80	; 0x50
 800616a:	4618      	mov	r0, r3
 800616c:	f002 f966 	bl	800843c <pvPortMalloc>
 8006170:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00f      	beq.n	8006198 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	3350      	adds	r3, #80	; 0x50
 800617c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006186:	79fa      	ldrb	r2, [r7, #7]
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f805 	bl	80061a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006198:	69bb      	ldr	r3, [r7, #24]
	}
 800619a:	4618      	mov	r0, r3
 800619c:	3720      	adds	r7, #32
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e002      	b.n	80061c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061d0:	2101      	movs	r1, #1
 80061d2:	69b8      	ldr	r0, [r7, #24]
 80061d4:	f7ff fec8 	bl	8005f68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	78fa      	ldrb	r2, [r7, #3]
 80061dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00e      	beq.n	8006214 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006208:	2300      	movs	r3, #0
 800620a:	2200      	movs	r2, #0
 800620c:	2100      	movs	r1, #0
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f838 	bl	8006284 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006226:	2301      	movs	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	461a      	mov	r2, r3
 8006232:	6939      	ldr	r1, [r7, #16]
 8006234:	6978      	ldr	r0, [r7, #20]
 8006236:	f7ff ff76 	bl	8006126 <xQueueGenericCreate>
 800623a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f7ff ffd3 	bl	80061e8 <prvInitialiseMutex>

		return pxNewQueue;
 8006242:	68fb      	ldr	r3, [r7, #12]
	}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af02      	add	r7, sp, #8
 8006252:	4603      	mov	r3, r0
 8006254:	6039      	str	r1, [r7, #0]
 8006256:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	6939      	ldr	r1, [r7, #16]
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f7ff fee4 	bl	8006038 <xQueueGenericCreateStatic>
 8006270:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff ffb8 	bl	80061e8 <prvInitialiseMutex>

		return pxNewQueue;
 8006278:	68fb      	ldr	r3, [r7, #12]
	}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006292:	2300      	movs	r3, #0
 8006294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10a      	bne.n	80062b6 <xQueueGenericSend+0x32>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062b2:	bf00      	nop
 80062b4:	e7fe      	b.n	80062b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <xQueueGenericSend+0x40>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <xQueueGenericSend+0x44>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <xQueueGenericSend+0x46>
 80062c8:	2300      	movs	r3, #0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <xQueueGenericSend+0x60>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d103      	bne.n	80062f2 <xQueueGenericSend+0x6e>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d101      	bne.n	80062f6 <xQueueGenericSend+0x72>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueGenericSend+0x74>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xQueueGenericSend+0x8e>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	623b      	str	r3, [r7, #32]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006312:	f001 faaf 	bl	8007874 <xTaskGetSchedulerState>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d102      	bne.n	8006322 <xQueueGenericSend+0x9e>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <xQueueGenericSend+0xa2>
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <xQueueGenericSend+0xa4>
 8006326:	2300      	movs	r3, #0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <xQueueGenericSend+0xbe>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61fb      	str	r3, [r7, #28]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006342:	f001 ff7b 	bl	800823c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <xQueueGenericSend+0xd4>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d129      	bne.n	80063ac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800635e:	f000 fa87 	bl	8006870 <prvCopyDataToQueue>
 8006362:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d010      	beq.n	800638e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	3324      	adds	r3, #36	; 0x24
 8006370:	4618      	mov	r0, r3
 8006372:	f001 f8bd 	bl	80074f0 <xTaskRemoveFromEventList>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d013      	beq.n	80063a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800637c:	4b3f      	ldr	r3, [pc, #252]	; (800647c <xQueueGenericSend+0x1f8>)
 800637e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	e00a      	b.n	80063a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006394:	4b39      	ldr	r3, [pc, #228]	; (800647c <xQueueGenericSend+0x1f8>)
 8006396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063a4:	f001 ff7a 	bl	800829c <vPortExitCritical>
				return pdPASS;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e063      	b.n	8006474 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063b2:	f001 ff73 	bl	800829c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	e05c      	b.n	8006474 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d106      	bne.n	80063ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063c0:	f107 0314 	add.w	r3, r7, #20
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 f8f7 	bl	80075b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063ca:	2301      	movs	r3, #1
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063ce:	f001 ff65 	bl	800829c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063d2:	f000 fe69 	bl	80070a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063d6:	f001 ff31 	bl	800823c <vPortEnterCritical>
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e0:	b25b      	sxtb	r3, r3
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d103      	bne.n	80063f0 <xQueueGenericSend+0x16c>
 80063e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f6:	b25b      	sxtb	r3, r3
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d103      	bne.n	8006406 <xQueueGenericSend+0x182>
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006406:	f001 ff49 	bl	800829c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800640a:	1d3a      	adds	r2, r7, #4
 800640c:	f107 0314 	add.w	r3, r7, #20
 8006410:	4611      	mov	r1, r2
 8006412:	4618      	mov	r0, r3
 8006414:	f001 f8e6 	bl	80075e4 <xTaskCheckForTimeOut>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d124      	bne.n	8006468 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800641e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006420:	f000 fb1e 	bl	8006a60 <prvIsQueueFull>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d018      	beq.n	800645c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	3310      	adds	r3, #16
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f001 f80c 	bl	8007450 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643a:	f000 faa9 	bl	8006990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800643e:	f000 fe41 	bl	80070c4 <xTaskResumeAll>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	f47f af7c 	bne.w	8006342 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <xQueueGenericSend+0x1f8>)
 800644c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	e772      	b.n	8006342 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800645c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800645e:	f000 fa97 	bl	8006990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006462:	f000 fe2f 	bl	80070c4 <xTaskResumeAll>
 8006466:	e76c      	b.n	8006342 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800646a:	f000 fa91 	bl	8006990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800646e:	f000 fe29 	bl	80070c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006472:	2300      	movs	r3, #0
		}
	}
}
 8006474:	4618      	mov	r0, r3
 8006476:	3738      	adds	r7, #56	; 0x38
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08e      	sub	sp, #56	; 0x38
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d103      	bne.n	80064bc <xQueueGenericSendFromISR+0x3c>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <xQueueGenericSendFromISR+0x40>
 80064bc:	2301      	movs	r3, #1
 80064be:	e000      	b.n	80064c2 <xQueueGenericSendFromISR+0x42>
 80064c0:	2300      	movs	r3, #0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	623b      	str	r3, [r7, #32]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d103      	bne.n	80064ea <xQueueGenericSendFromISR+0x6a>
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d101      	bne.n	80064ee <xQueueGenericSendFromISR+0x6e>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <xQueueGenericSendFromISR+0x70>
 80064ee:	2300      	movs	r3, #0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	61fb      	str	r3, [r7, #28]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800650a:	f001 ff59 	bl	80083c0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800650e:	f3ef 8211 	mrs	r2, BASEPRI
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61ba      	str	r2, [r7, #24]
 8006524:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006526:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	429a      	cmp	r2, r3
 8006534:	d302      	bcc.n	800653c <xQueueGenericSendFromISR+0xbc>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d12c      	bne.n	8006596 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800654c:	f000 f990 	bl	8006870 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006550:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006558:	d112      	bne.n	8006580 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	2b00      	cmp	r3, #0
 8006560:	d016      	beq.n	8006590 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	3324      	adds	r3, #36	; 0x24
 8006566:	4618      	mov	r0, r3
 8006568:	f000 ffc2 	bl	80074f0 <xTaskRemoveFromEventList>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00e      	beq.n	8006590 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e007      	b.n	8006590 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006580:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006584:	3301      	adds	r3, #1
 8006586:	b2db      	uxtb	r3, r3
 8006588:	b25a      	sxtb	r2, r3
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006590:	2301      	movs	r3, #1
 8006592:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006594:	e001      	b.n	800659a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006596:	2300      	movs	r3, #0
 8006598:	637b      	str	r3, [r7, #52]	; 0x34
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80065a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3738      	adds	r7, #56	; 0x38
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <xQueueReceive+0x30>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	623b      	str	r3, [r7, #32]
}
 80065dc:	bf00      	nop
 80065de:	e7fe      	b.n	80065de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d103      	bne.n	80065ee <xQueueReceive+0x3e>
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <xQueueReceive+0x42>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <xQueueReceive+0x44>
 80065f2:	2300      	movs	r3, #0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <xQueueReceive+0x5e>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	61fb      	str	r3, [r7, #28]
}
 800660a:	bf00      	nop
 800660c:	e7fe      	b.n	800660c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800660e:	f001 f931 	bl	8007874 <xTaskGetSchedulerState>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d102      	bne.n	800661e <xQueueReceive+0x6e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <xQueueReceive+0x72>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xQueueReceive+0x74>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10a      	bne.n	800663e <xQueueReceive+0x8e>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	61bb      	str	r3, [r7, #24]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800663e:	f001 fdfd 	bl	800823c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	2b00      	cmp	r3, #0
 800664c:	d01f      	beq.n	800668e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006652:	f000 f977 	bl	8006944 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00f      	beq.n	8006686 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	3310      	adds	r3, #16
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ff40 	bl	80074f0 <xTaskRemoveFromEventList>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006676:	4b3d      	ldr	r3, [pc, #244]	; (800676c <xQueueReceive+0x1bc>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006686:	f001 fe09 	bl	800829c <vPortExitCritical>
				return pdPASS;
 800668a:	2301      	movs	r3, #1
 800668c:	e069      	b.n	8006762 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d103      	bne.n	800669c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006694:	f001 fe02 	bl	800829c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006698:	2300      	movs	r3, #0
 800669a:	e062      	b.n	8006762 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80066a2:	f107 0310 	add.w	r3, r7, #16
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 ff86 	bl	80075b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066b0:	f001 fdf4 	bl	800829c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066b4:	f000 fcf8 	bl	80070a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066b8:	f001 fdc0 	bl	800823c <vPortEnterCritical>
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066c2:	b25b      	sxtb	r3, r3
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d103      	bne.n	80066d2 <xQueueReceive+0x122>
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066de:	d103      	bne.n	80066e8 <xQueueReceive+0x138>
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e8:	f001 fdd8 	bl	800829c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066ec:	1d3a      	adds	r2, r7, #4
 80066ee:	f107 0310 	add.w	r3, r7, #16
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 ff75 	bl	80075e4 <xTaskCheckForTimeOut>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d123      	bne.n	8006748 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006702:	f000 f997 	bl	8006a34 <prvIsQueueEmpty>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d017      	beq.n	800673c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	3324      	adds	r3, #36	; 0x24
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fe9b 	bl	8007450 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800671a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800671c:	f000 f938 	bl	8006990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006720:	f000 fcd0 	bl	80070c4 <xTaskResumeAll>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d189      	bne.n	800663e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800672a:	4b10      	ldr	r3, [pc, #64]	; (800676c <xQueueReceive+0x1bc>)
 800672c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	e780      	b.n	800663e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800673c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800673e:	f000 f927 	bl	8006990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006742:	f000 fcbf 	bl	80070c4 <xTaskResumeAll>
 8006746:	e77a      	b.n	800663e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674a:	f000 f921 	bl	8006990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800674e:	f000 fcb9 	bl	80070c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006752:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006754:	f000 f96e 	bl	8006a34 <prvIsQueueEmpty>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	f43f af6f 	beq.w	800663e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006762:	4618      	mov	r0, r3
 8006764:	3730      	adds	r7, #48	; 0x30
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08e      	sub	sp, #56	; 0x38
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	623b      	str	r3, [r7, #32]
}
 8006798:	bf00      	nop
 800679a:	e7fe      	b.n	800679a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <xQueueReceiveFromISR+0x3a>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <xQueueReceiveFromISR+0x3e>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <xQueueReceiveFromISR+0x40>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	61fb      	str	r3, [r7, #28]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067ca:	f001 fdf9 	bl	80083c0 <vPortValidateInterruptPriority>
	__asm volatile
 80067ce:	f3ef 8211 	mrs	r2, BASEPRI
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	61ba      	str	r2, [r7, #24]
 80067e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80067e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d02f      	beq.n	8006856 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006804:	f000 f89e 	bl	8006944 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006810:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006818:	d112      	bne.n	8006840 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d016      	beq.n	8006850 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	3310      	adds	r3, #16
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fe62 	bl	80074f0 <xTaskRemoveFromEventList>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00e      	beq.n	8006850 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e007      	b.n	8006850 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006844:	3301      	adds	r3, #1
 8006846:	b2db      	uxtb	r3, r3
 8006848:	b25a      	sxtb	r2, r3
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006850:	2301      	movs	r3, #1
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
 8006854:	e001      	b.n	800685a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006856:	2300      	movs	r3, #0
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f383 8811 	msr	BASEPRI, r3
}
 8006864:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006868:	4618      	mov	r0, r3
 800686a:	3738      	adds	r7, #56	; 0x38
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10d      	bne.n	80068aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d14d      	bne.n	8006932 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4618      	mov	r0, r3
 800689c:	f001 f808 	bl	80078b0 <xTaskPriorityDisinherit>
 80068a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]
 80068a8:	e043      	b.n	8006932 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d119      	bne.n	80068e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6898      	ldr	r0, [r3, #8]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	461a      	mov	r2, r3
 80068ba:	68b9      	ldr	r1, [r7, #8]
 80068bc:	f002 f826 	bl	800890c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d32b      	bcc.n	8006932 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	609a      	str	r2, [r3, #8]
 80068e2:	e026      	b.n	8006932 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68d8      	ldr	r0, [r3, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	461a      	mov	r2, r3
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	f002 f80c 	bl	800890c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fc:	425b      	negs	r3, r3
 80068fe:	441a      	add	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d207      	bcs.n	8006920 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006918:	425b      	negs	r3, r3
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b02      	cmp	r3, #2
 8006924:	d105      	bne.n	8006932 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	3b01      	subs	r3, #1
 8006930:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800693a:	697b      	ldr	r3, [r7, #20]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3718      	adds	r7, #24
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	2b00      	cmp	r3, #0
 8006954:	d018      	beq.n	8006988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	441a      	add	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d303      	bcc.n	8006978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68d9      	ldr	r1, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006980:	461a      	mov	r2, r3
 8006982:	6838      	ldr	r0, [r7, #0]
 8006984:	f001 ffc2 	bl	800890c <memcpy>
	}
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006998:	f001 fc50 	bl	800823c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069a4:	e011      	b.n	80069ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d012      	beq.n	80069d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	3324      	adds	r3, #36	; 0x24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fd9c 	bl	80074f0 <xTaskRemoveFromEventList>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069be:	f000 fe73 	bl	80076a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dce9      	bgt.n	80069a6 <prvUnlockQueue+0x16>
 80069d2:	e000      	b.n	80069d6 <prvUnlockQueue+0x46>
					break;
 80069d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	22ff      	movs	r2, #255	; 0xff
 80069da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069de:	f001 fc5d 	bl	800829c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069e2:	f001 fc2b 	bl	800823c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069ee:	e011      	b.n	8006a14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d012      	beq.n	8006a1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3310      	adds	r3, #16
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fd77 	bl	80074f0 <xTaskRemoveFromEventList>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a08:	f000 fe4e 	bl	80076a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	dce9      	bgt.n	80069f0 <prvUnlockQueue+0x60>
 8006a1c:	e000      	b.n	8006a20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	22ff      	movs	r2, #255	; 0xff
 8006a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a28:	f001 fc38 	bl	800829c <vPortExitCritical>
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a3c:	f001 fbfe 	bl	800823c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e001      	b.n	8006a52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a52:	f001 fc23 	bl	800829c <vPortExitCritical>

	return xReturn;
 8006a56:	68fb      	ldr	r3, [r7, #12]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a68:	f001 fbe8 	bl	800823c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d102      	bne.n	8006a7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e001      	b.n	8006a82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a82:	f001 fc0b 	bl	800829c <vPortExitCritical>

	return xReturn;
 8006a86:	68fb      	ldr	r3, [r7, #12]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e014      	b.n	8006aca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006aa0:	4a0e      	ldr	r2, [pc, #56]	; (8006adc <vQueueAddToRegistry+0x4c>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10b      	bne.n	8006ac4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aac:	490b      	ldr	r1, [pc, #44]	; (8006adc <vQueueAddToRegistry+0x4c>)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006ab6:	4a09      	ldr	r2, [pc, #36]	; (8006adc <vQueueAddToRegistry+0x4c>)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	4413      	add	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ac2:	e006      	b.n	8006ad2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b07      	cmp	r3, #7
 8006ace:	d9e7      	bls.n	8006aa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr
 8006adc:	20000d0c 	.word	0x20000d0c

08006ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006af0:	f001 fba4 	bl	800823c <vPortEnterCritical>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d103      	bne.n	8006b0a <vQueueWaitForMessageRestricted+0x2a>
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d103      	bne.n	8006b20 <vQueueWaitForMessageRestricted+0x40>
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b20:	f001 fbbc 	bl	800829c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d106      	bne.n	8006b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3324      	adds	r3, #36	; 0x24
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	68b9      	ldr	r1, [r7, #8]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fcaf 	bl	8007498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b3a:	6978      	ldr	r0, [r7, #20]
 8006b3c:	f7ff ff28 	bl	8006990 <prvUnlockQueue>
	}
 8006b40:	bf00      	nop
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08e      	sub	sp, #56	; 0x38
 8006b4c:	af04      	add	r7, sp, #16
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	623b      	str	r3, [r7, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	e7fe      	b.n	8006b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <xTaskCreateStatic+0x46>
	__asm volatile
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	61fb      	str	r3, [r7, #28]
}
 8006b8a:	bf00      	nop
 8006b8c:	e7fe      	b.n	8006b8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b8e:	235c      	movs	r3, #92	; 0x5c
 8006b90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	2b5c      	cmp	r3, #92	; 0x5c
 8006b96:	d00a      	beq.n	8006bae <xTaskCreateStatic+0x66>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	61bb      	str	r3, [r7, #24]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d01e      	beq.n	8006bf2 <xTaskCreateStatic+0xaa>
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01b      	beq.n	8006bf2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9303      	str	r3, [sp, #12]
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	9302      	str	r3, [sp, #8]
 8006bd4:	f107 0314 	add.w	r3, r7, #20
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 f850 	bl	8006c8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bec:	f000 f8d4 	bl	8006d98 <prvAddNewTaskToReadyList>
 8006bf0:	e001      	b.n	8006bf6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bf6:	697b      	ldr	r3, [r7, #20]
	}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3728      	adds	r7, #40	; 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	; 0x30
 8006c04:	af04      	add	r7, sp, #16
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fc11 	bl	800843c <pvPortMalloc>
 8006c1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00e      	beq.n	8006c40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c22:	205c      	movs	r0, #92	; 0x5c
 8006c24:	f001 fc0a 	bl	800843c <pvPortMalloc>
 8006c28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
 8006c36:	e005      	b.n	8006c44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c38:	6978      	ldr	r0, [r7, #20]
 8006c3a:	f001 fcc3 	bl	80085c4 <vPortFree>
 8006c3e:	e001      	b.n	8006c44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d017      	beq.n	8006c7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c52:	88fa      	ldrh	r2, [r7, #6]
 8006c54:	2300      	movs	r3, #0
 8006c56:	9303      	str	r3, [sp, #12]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	9302      	str	r3, [sp, #8]
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	9301      	str	r3, [sp, #4]
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f80e 	bl	8006c8a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c6e:	69f8      	ldr	r0, [r7, #28]
 8006c70:	f000 f892 	bl	8006d98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c74:	2301      	movs	r3, #1
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e002      	b.n	8006c80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c80:	69bb      	ldr	r3, [r7, #24]
	}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3720      	adds	r7, #32
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b088      	sub	sp, #32
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
 8006c96:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	21a5      	movs	r1, #165	; 0xa5
 8006ca4:	f001 fdfe 	bl	80088a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f023 0307 	bic.w	r3, r3, #7
 8006cc0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00a      	beq.n	8006ce2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	617b      	str	r3, [r7, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	e012      	b.n	8006d0e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	7819      	ldrb	r1, [r3, #0]
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3334      	adds	r3, #52	; 0x34
 8006cf8:	460a      	mov	r2, r1
 8006cfa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	2b0f      	cmp	r3, #15
 8006d12:	d9e9      	bls.n	8006ce8 <prvInitialiseNewTask+0x5e>
 8006d14:	e000      	b.n	8006d18 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006d16:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d22:	2b37      	cmp	r3, #55	; 0x37
 8006d24:	d901      	bls.n	8006d2a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d26:	2337      	movs	r3, #55	; 0x37
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d2e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d34:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2200      	movs	r2, #0
 8006d3a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	3304      	adds	r3, #4
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff f880 	bl	8005e46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	3318      	adds	r3, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff f87b 	bl	8005e46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d64:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	2200      	movs	r2, #0
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	69b8      	ldr	r0, [r7, #24]
 8006d7a:	f001 f96d 	bl	8008058 <pxPortInitialiseStack>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d90:	bf00      	nop
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006da0:	f001 fa4c 	bl	800823c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006da4:	4b2d      	ldr	r3, [pc, #180]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006dac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006dae:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d109      	bne.n	8006dca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006db6:	4a2a      	ldr	r2, [pc, #168]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006dbc:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <prvAddNewTaskToReadyList+0xc4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d110      	bne.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006dc4:	f000 fc94 	bl	80076f0 <prvInitialiseTaskLists>
 8006dc8:	e00d      	b.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006dca:	4b26      	ldr	r3, [pc, #152]	; (8006e64 <prvAddNewTaskToReadyList+0xcc>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006dd2:	4b23      	ldr	r3, [pc, #140]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d802      	bhi.n	8006de6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006de0:	4a1f      	ldr	r2, [pc, #124]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006de6:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	4a1e      	ldr	r2, [pc, #120]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006dee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <prvAddNewTaskToReadyList+0xd0>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <prvAddNewTaskToReadyList+0xd4>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d903      	bls.n	8006e0c <prvAddNewTaskToReadyList+0x74>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	4a18      	ldr	r2, [pc, #96]	; (8006e6c <prvAddNewTaskToReadyList+0xd4>)
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <prvAddNewTaskToReadyList+0xd8>)
 8006e1a:	441a      	add	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f7ff f81b 	bl	8005e5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e28:	f001 fa38 	bl	800829c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <prvAddNewTaskToReadyList+0xcc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00e      	beq.n	8006e52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <prvAddNewTaskToReadyList+0xc8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d207      	bcs.n	8006e52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <prvAddNewTaskToReadyList+0xdc>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20001220 	.word	0x20001220
 8006e60:	20000d4c 	.word	0x20000d4c
 8006e64:	2000122c 	.word	0x2000122c
 8006e68:	2000123c 	.word	0x2000123c
 8006e6c:	20001228 	.word	0x20001228
 8006e70:	20000d50 	.word	0x20000d50
 8006e74:	e000ed04 	.word	0xe000ed04

08006e78 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	617b      	str	r3, [r7, #20]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10a      	bne.n	8006ebe <vTaskDelayUntil+0x46>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	613b      	str	r3, [r7, #16]
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006ebe:	4b2a      	ldr	r3, [pc, #168]	; (8006f68 <vTaskDelayUntil+0xf0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00a      	beq.n	8006edc <vTaskDelayUntil+0x64>
	__asm volatile
 8006ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	60fb      	str	r3, [r7, #12]
}
 8006ed8:	bf00      	nop
 8006eda:	e7fe      	b.n	8006eda <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006edc:	f000 f8e4 	bl	80070a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006ee0:	4b22      	ldr	r3, [pc, #136]	; (8006f6c <vTaskDelayUntil+0xf4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	4413      	add	r3, r2
 8006eee:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d20b      	bcs.n	8006f12 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d211      	bcs.n	8006f28 <vTaskDelayUntil+0xb0>
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d90d      	bls.n	8006f28 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f10:	e00a      	b.n	8006f28 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d303      	bcc.n	8006f24 <vTaskDelayUntil+0xac>
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d901      	bls.n	8006f28 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d006      	beq.n	8006f42 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006f34:	69fa      	ldr	r2, [r7, #28]
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fd25 	bl	800798c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006f42:	f000 f8bf 	bl	80070c4 <xTaskResumeAll>
 8006f46:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006f4e:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <vTaskDelayUntil+0xf8>)
 8006f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f5e:	bf00      	nop
 8006f60:	3728      	adds	r7, #40	; 0x28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20001248 	.word	0x20001248
 8006f6c:	20001224 	.word	0x20001224
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d017      	beq.n	8006fb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f86:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <vTaskDelay+0x60>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <vTaskDelay+0x30>
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	60bb      	str	r3, [r7, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	e7fe      	b.n	8006fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006fa4:	f000 f880 	bl	80070a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fcee 	bl	800798c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fb0:	f000 f888 	bl	80070c4 <xTaskResumeAll>
 8006fb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006fbc:	4b06      	ldr	r3, [pc, #24]	; (8006fd8 <vTaskDelay+0x64>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20001248 	.word	0x20001248
 8006fd8:	e000ed04 	.word	0xe000ed04

08006fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fea:	463a      	mov	r2, r7
 8006fec:	1d39      	adds	r1, r7, #4
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fed6 	bl	8005da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	9202      	str	r2, [sp, #8]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	2300      	movs	r3, #0
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	2300      	movs	r3, #0
 8007008:	460a      	mov	r2, r1
 800700a:	4921      	ldr	r1, [pc, #132]	; (8007090 <vTaskStartScheduler+0xb4>)
 800700c:	4821      	ldr	r0, [pc, #132]	; (8007094 <vTaskStartScheduler+0xb8>)
 800700e:	f7ff fd9b 	bl	8006b48 <xTaskCreateStatic>
 8007012:	4603      	mov	r3, r0
 8007014:	4a20      	ldr	r2, [pc, #128]	; (8007098 <vTaskStartScheduler+0xbc>)
 8007016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007018:	4b1f      	ldr	r3, [pc, #124]	; (8007098 <vTaskStartScheduler+0xbc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e001      	b.n	800702a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d102      	bne.n	8007036 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007030:	f000 fd00 	bl	8007a34 <xTimerCreateTimerTask>
 8007034:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d116      	bne.n	800706a <vTaskStartScheduler+0x8e>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	613b      	str	r3, [r7, #16]
}
 800704e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007050:	4b12      	ldr	r3, [pc, #72]	; (800709c <vTaskStartScheduler+0xc0>)
 8007052:	f04f 32ff 	mov.w	r2, #4294967295
 8007056:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007058:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <vTaskStartScheduler+0xc4>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <vTaskStartScheduler+0xc8>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007064:	f001 f878 	bl	8008158 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007068:	e00e      	b.n	8007088 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d10a      	bne.n	8007088 <vTaskStartScheduler+0xac>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60fb      	str	r3, [r7, #12]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <vTaskStartScheduler+0xaa>
}
 8007088:	bf00      	nop
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	080089e0 	.word	0x080089e0
 8007094:	080076c1 	.word	0x080076c1
 8007098:	20001244 	.word	0x20001244
 800709c:	20001240 	.word	0x20001240
 80070a0:	2000122c 	.word	0x2000122c
 80070a4:	20001224 	.word	0x20001224

080070a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070ac:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <vTaskSuspendAll+0x18>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3301      	adds	r3, #1
 80070b2:	4a03      	ldr	r2, [pc, #12]	; (80070c0 <vTaskSuspendAll+0x18>)
 80070b4:	6013      	str	r3, [r2, #0]
}
 80070b6:	bf00      	nop
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20001248 	.word	0x20001248

080070c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070d2:	4b42      	ldr	r3, [pc, #264]	; (80071dc <xTaskResumeAll+0x118>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10a      	bne.n	80070f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	603b      	str	r3, [r7, #0]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070f0:	f001 f8a4 	bl	800823c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070f4:	4b39      	ldr	r3, [pc, #228]	; (80071dc <xTaskResumeAll+0x118>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	4a38      	ldr	r2, [pc, #224]	; (80071dc <xTaskResumeAll+0x118>)
 80070fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070fe:	4b37      	ldr	r3, [pc, #220]	; (80071dc <xTaskResumeAll+0x118>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d162      	bne.n	80071cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007106:	4b36      	ldr	r3, [pc, #216]	; (80071e0 <xTaskResumeAll+0x11c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d05e      	beq.n	80071cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800710e:	e02f      	b.n	8007170 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007110:	4b34      	ldr	r3, [pc, #208]	; (80071e4 <xTaskResumeAll+0x120>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3318      	adds	r3, #24
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe fef9 	bl	8005f14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3304      	adds	r3, #4
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fef4 	bl	8005f14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007130:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <xTaskResumeAll+0x124>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d903      	bls.n	8007140 <xTaskResumeAll+0x7c>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <xTaskResumeAll+0x124>)
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	4613      	mov	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4413      	add	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4a27      	ldr	r2, [pc, #156]	; (80071ec <xTaskResumeAll+0x128>)
 800714e:	441a      	add	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f7fe fe81 	bl	8005e5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <xTaskResumeAll+0x12c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	429a      	cmp	r2, r3
 8007168:	d302      	bcc.n	8007170 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800716a:	4b22      	ldr	r3, [pc, #136]	; (80071f4 <xTaskResumeAll+0x130>)
 800716c:	2201      	movs	r2, #1
 800716e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007170:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <xTaskResumeAll+0x120>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1cb      	bne.n	8007110 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800717e:	f000 fb55 	bl	800782c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007182:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <xTaskResumeAll+0x134>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800718e:	f000 f845 	bl	800721c <xTaskIncrementTick>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007198:	4b16      	ldr	r3, [pc, #88]	; (80071f4 <xTaskResumeAll+0x130>)
 800719a:	2201      	movs	r2, #1
 800719c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f1      	bne.n	800718e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <xTaskResumeAll+0x134>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <xTaskResumeAll+0x130>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <xTaskResumeAll+0x138>)
 80071be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071cc:	f001 f866 	bl	800829c <vPortExitCritical>

	return xAlreadyYielded;
 80071d0:	68bb      	ldr	r3, [r7, #8]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20001248 	.word	0x20001248
 80071e0:	20001220 	.word	0x20001220
 80071e4:	200011e0 	.word	0x200011e0
 80071e8:	20001228 	.word	0x20001228
 80071ec:	20000d50 	.word	0x20000d50
 80071f0:	20000d4c 	.word	0x20000d4c
 80071f4:	20001234 	.word	0x20001234
 80071f8:	20001230 	.word	0x20001230
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007206:	4b04      	ldr	r3, [pc, #16]	; (8007218 <xTaskGetTickCount+0x18>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800720c:	687b      	ldr	r3, [r7, #4]
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr
 8007218:	20001224 	.word	0x20001224

0800721c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007222:	2300      	movs	r3, #0
 8007224:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007226:	4b51      	ldr	r3, [pc, #324]	; (800736c <xTaskIncrementTick+0x150>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	f040 808e 	bne.w	800734c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007230:	4b4f      	ldr	r3, [pc, #316]	; (8007370 <xTaskIncrementTick+0x154>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007238:	4a4d      	ldr	r2, [pc, #308]	; (8007370 <xTaskIncrementTick+0x154>)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d120      	bne.n	8007286 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007244:	4b4b      	ldr	r3, [pc, #300]	; (8007374 <xTaskIncrementTick+0x158>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <xTaskIncrementTick+0x48>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	603b      	str	r3, [r7, #0]
}
 8007260:	bf00      	nop
 8007262:	e7fe      	b.n	8007262 <xTaskIncrementTick+0x46>
 8007264:	4b43      	ldr	r3, [pc, #268]	; (8007374 <xTaskIncrementTick+0x158>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	4b43      	ldr	r3, [pc, #268]	; (8007378 <xTaskIncrementTick+0x15c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a41      	ldr	r2, [pc, #260]	; (8007374 <xTaskIncrementTick+0x158>)
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	4a41      	ldr	r2, [pc, #260]	; (8007378 <xTaskIncrementTick+0x15c>)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	4b40      	ldr	r3, [pc, #256]	; (800737c <xTaskIncrementTick+0x160>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3301      	adds	r3, #1
 800727e:	4a3f      	ldr	r2, [pc, #252]	; (800737c <xTaskIncrementTick+0x160>)
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	f000 fad3 	bl	800782c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007286:	4b3e      	ldr	r3, [pc, #248]	; (8007380 <xTaskIncrementTick+0x164>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	d34e      	bcc.n	800732e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007290:	4b38      	ldr	r3, [pc, #224]	; (8007374 <xTaskIncrementTick+0x158>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <xTaskIncrementTick+0x82>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <xTaskIncrementTick+0x84>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d004      	beq.n	80072ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a4:	4b36      	ldr	r3, [pc, #216]	; (8007380 <xTaskIncrementTick+0x164>)
 80072a6:	f04f 32ff 	mov.w	r2, #4294967295
 80072aa:	601a      	str	r2, [r3, #0]
					break;
 80072ac:	e03f      	b.n	800732e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072ae:	4b31      	ldr	r3, [pc, #196]	; (8007374 <xTaskIncrementTick+0x158>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d203      	bcs.n	80072ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072c6:	4a2e      	ldr	r2, [pc, #184]	; (8007380 <xTaskIncrementTick+0x164>)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6013      	str	r3, [r2, #0]
						break;
 80072cc:	e02f      	b.n	800732e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	3304      	adds	r3, #4
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fe1e 	bl	8005f14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d004      	beq.n	80072ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3318      	adds	r3, #24
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fe15 	bl	8005f14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ee:	4b25      	ldr	r3, [pc, #148]	; (8007384 <xTaskIncrementTick+0x168>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d903      	bls.n	80072fe <xTaskIncrementTick+0xe2>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	4a22      	ldr	r2, [pc, #136]	; (8007384 <xTaskIncrementTick+0x168>)
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007302:	4613      	mov	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4a1f      	ldr	r2, [pc, #124]	; (8007388 <xTaskIncrementTick+0x16c>)
 800730c:	441a      	add	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	3304      	adds	r3, #4
 8007312:	4619      	mov	r1, r3
 8007314:	4610      	mov	r0, r2
 8007316:	f7fe fda2 	bl	8005e5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731e:	4b1b      	ldr	r3, [pc, #108]	; (800738c <xTaskIncrementTick+0x170>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	429a      	cmp	r2, r3
 8007326:	d3b3      	bcc.n	8007290 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007328:	2301      	movs	r3, #1
 800732a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800732c:	e7b0      	b.n	8007290 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800732e:	4b17      	ldr	r3, [pc, #92]	; (800738c <xTaskIncrementTick+0x170>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	4914      	ldr	r1, [pc, #80]	; (8007388 <xTaskIncrementTick+0x16c>)
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	440b      	add	r3, r1
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d907      	bls.n	8007356 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007346:	2301      	movs	r3, #1
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	e004      	b.n	8007356 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800734c:	4b10      	ldr	r3, [pc, #64]	; (8007390 <xTaskIncrementTick+0x174>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3301      	adds	r3, #1
 8007352:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <xTaskIncrementTick+0x174>)
 8007354:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007356:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <xTaskIncrementTick+0x178>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800735e:	2301      	movs	r3, #1
 8007360:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007362:	697b      	ldr	r3, [r7, #20]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20001248 	.word	0x20001248
 8007370:	20001224 	.word	0x20001224
 8007374:	200011d8 	.word	0x200011d8
 8007378:	200011dc 	.word	0x200011dc
 800737c:	20001238 	.word	0x20001238
 8007380:	20001240 	.word	0x20001240
 8007384:	20001228 	.word	0x20001228
 8007388:	20000d50 	.word	0x20000d50
 800738c:	20000d4c 	.word	0x20000d4c
 8007390:	20001230 	.word	0x20001230
 8007394:	20001234 	.word	0x20001234

08007398 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800739e:	4b27      	ldr	r3, [pc, #156]	; (800743c <vTaskSwitchContext+0xa4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073a6:	4b26      	ldr	r3, [pc, #152]	; (8007440 <vTaskSwitchContext+0xa8>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073ac:	e041      	b.n	8007432 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80073ae:	4b24      	ldr	r3, [pc, #144]	; (8007440 <vTaskSwitchContext+0xa8>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80073b4:	4b23      	ldr	r3, [pc, #140]	; (8007444 <vTaskSwitchContext+0xac>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	e010      	b.n	80073de <vTaskSwitchContext+0x46>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	607b      	str	r3, [r7, #4]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vTaskSwitchContext+0x3e>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3b01      	subs	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	491a      	ldr	r1, [pc, #104]	; (8007448 <vTaskSwitchContext+0xb0>)
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0e4      	beq.n	80073bc <vTaskSwitchContext+0x24>
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4a12      	ldr	r2, [pc, #72]	; (8007448 <vTaskSwitchContext+0xb0>)
 80073fe:	4413      	add	r3, r2
 8007400:	60bb      	str	r3, [r7, #8]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	685a      	ldr	r2, [r3, #4]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	3308      	adds	r3, #8
 8007414:	429a      	cmp	r2, r3
 8007416:	d104      	bne.n	8007422 <vTaskSwitchContext+0x8a>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4a08      	ldr	r2, [pc, #32]	; (800744c <vTaskSwitchContext+0xb4>)
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	4a05      	ldr	r2, [pc, #20]	; (8007444 <vTaskSwitchContext+0xac>)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6013      	str	r3, [r2, #0]
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	bc80      	pop	{r7}
 800743a:	4770      	bx	lr
 800743c:	20001248 	.word	0x20001248
 8007440:	20001234 	.word	0x20001234
 8007444:	20001228 	.word	0x20001228
 8007448:	20000d50 	.word	0x20000d50
 800744c:	20000d4c 	.word	0x20000d4c

08007450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	60fb      	str	r3, [r7, #12]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <vTaskPlaceOnEventList+0x44>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3318      	adds	r3, #24
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fe fd10 	bl	8005ea4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007484:	2101      	movs	r1, #1
 8007486:	6838      	ldr	r0, [r7, #0]
 8007488:	f000 fa80 	bl	800798c <prvAddCurrentTaskToDelayedList>
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000d4c 	.word	0x20000d4c

08007498 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10a      	bne.n	80074c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	617b      	str	r3, [r7, #20]
}
 80074bc:	bf00      	nop
 80074be:	e7fe      	b.n	80074be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <vTaskPlaceOnEventListRestricted+0x54>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3318      	adds	r3, #24
 80074c6:	4619      	mov	r1, r3
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7fe fcc8 	bl	8005e5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	68b8      	ldr	r0, [r7, #8]
 80074de:	f000 fa55 	bl	800798c <prvAddCurrentTaskToDelayedList>
	}
 80074e2:	bf00      	nop
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000d4c 	.word	0x20000d4c

080074f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10a      	bne.n	800751c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	60fb      	str	r3, [r7, #12]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	3318      	adds	r3, #24
 8007520:	4618      	mov	r0, r3
 8007522:	f7fe fcf7 	bl	8005f14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007526:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <xTaskRemoveFromEventList+0xb0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d11d      	bne.n	800756a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3304      	adds	r3, #4
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fcee 	bl	8005f14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	4b19      	ldr	r3, [pc, #100]	; (80075a4 <xTaskRemoveFromEventList+0xb4>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	429a      	cmp	r2, r3
 8007542:	d903      	bls.n	800754c <xTaskRemoveFromEventList+0x5c>
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <xTaskRemoveFromEventList+0xb4>)
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007550:	4613      	mov	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <xTaskRemoveFromEventList+0xb8>)
 800755a:	441a      	add	r2, r3
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	3304      	adds	r3, #4
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fe fc7b 	bl	8005e5e <vListInsertEnd>
 8007568:	e005      	b.n	8007576 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3318      	adds	r3, #24
 800756e:	4619      	mov	r1, r3
 8007570:	480e      	ldr	r0, [pc, #56]	; (80075ac <xTaskRemoveFromEventList+0xbc>)
 8007572:	f7fe fc74 	bl	8005e5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <xTaskRemoveFromEventList+0xc0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d905      	bls.n	8007590 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007588:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <xTaskRemoveFromEventList+0xc4>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e001      	b.n	8007594 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007594:	697b      	ldr	r3, [r7, #20]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20001248 	.word	0x20001248
 80075a4:	20001228 	.word	0x20001228
 80075a8:	20000d50 	.word	0x20000d50
 80075ac:	200011e0 	.word	0x200011e0
 80075b0:	20000d4c 	.word	0x20000d4c
 80075b4:	20001234 	.word	0x20001234

080075b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <vTaskInternalSetTimeOutState+0x24>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <vTaskInternalSetTimeOutState+0x28>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20001238 	.word	0x20001238
 80075e0:	20001224 	.word	0x20001224

080075e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	613b      	str	r3, [r7, #16]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	60fb      	str	r3, [r7, #12]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007626:	f000 fe09 	bl	800823c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800762a:	4b1d      	ldr	r3, [pc, #116]	; (80076a0 <xTaskCheckForTimeOut+0xbc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d102      	bne.n	800764a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007644:	2300      	movs	r3, #0
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	e023      	b.n	8007692 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b15      	ldr	r3, [pc, #84]	; (80076a4 <xTaskCheckForTimeOut+0xc0>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d007      	beq.n	8007666 <xTaskCheckForTimeOut+0x82>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	e015      	b.n	8007692 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	429a      	cmp	r2, r3
 800766e:	d20b      	bcs.n	8007688 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	1ad2      	subs	r2, r2, r3
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff ff9b 	bl	80075b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007682:	2300      	movs	r3, #0
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	e004      	b.n	8007692 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800768e:	2301      	movs	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007692:	f000 fe03 	bl	800829c <vPortExitCritical>

	return xReturn;
 8007696:	69fb      	ldr	r3, [r7, #28]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	20001224 	.word	0x20001224
 80076a4:	20001238 	.word	0x20001238

080076a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <vTaskMissedYield+0x14>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	601a      	str	r2, [r3, #0]
}
 80076b2:	bf00      	nop
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20001234 	.word	0x20001234

080076c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076c8:	f000 f852 	bl	8007770 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <prvIdleTask+0x28>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d9f9      	bls.n	80076c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <prvIdleTask+0x2c>)
 80076d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076e4:	e7f0      	b.n	80076c8 <prvIdleTask+0x8>
 80076e6:	bf00      	nop
 80076e8:	20000d50 	.word	0x20000d50
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076f6:	2300      	movs	r3, #0
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	e00c      	b.n	8007716 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a12      	ldr	r2, [pc, #72]	; (8007750 <prvInitialiseTaskLists+0x60>)
 8007708:	4413      	add	r3, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe fb7c 	bl	8005e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3301      	adds	r3, #1
 8007714:	607b      	str	r3, [r7, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b37      	cmp	r3, #55	; 0x37
 800771a:	d9ef      	bls.n	80076fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800771c:	480d      	ldr	r0, [pc, #52]	; (8007754 <prvInitialiseTaskLists+0x64>)
 800771e:	f7fe fb73 	bl	8005e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007722:	480d      	ldr	r0, [pc, #52]	; (8007758 <prvInitialiseTaskLists+0x68>)
 8007724:	f7fe fb70 	bl	8005e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007728:	480c      	ldr	r0, [pc, #48]	; (800775c <prvInitialiseTaskLists+0x6c>)
 800772a:	f7fe fb6d 	bl	8005e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800772e:	480c      	ldr	r0, [pc, #48]	; (8007760 <prvInitialiseTaskLists+0x70>)
 8007730:	f7fe fb6a 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007734:	480b      	ldr	r0, [pc, #44]	; (8007764 <prvInitialiseTaskLists+0x74>)
 8007736:	f7fe fb67 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <prvInitialiseTaskLists+0x78>)
 800773c:	4a05      	ldr	r2, [pc, #20]	; (8007754 <prvInitialiseTaskLists+0x64>)
 800773e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007740:	4b0a      	ldr	r3, [pc, #40]	; (800776c <prvInitialiseTaskLists+0x7c>)
 8007742:	4a05      	ldr	r2, [pc, #20]	; (8007758 <prvInitialiseTaskLists+0x68>)
 8007744:	601a      	str	r2, [r3, #0]
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000d50 	.word	0x20000d50
 8007754:	200011b0 	.word	0x200011b0
 8007758:	200011c4 	.word	0x200011c4
 800775c:	200011e0 	.word	0x200011e0
 8007760:	200011f4 	.word	0x200011f4
 8007764:	2000120c 	.word	0x2000120c
 8007768:	200011d8 	.word	0x200011d8
 800776c:	200011dc 	.word	0x200011dc

08007770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007776:	e019      	b.n	80077ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007778:	f000 fd60 	bl	800823c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800777c:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <prvCheckTasksWaitingTermination+0x50>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fbc3 	bl	8005f14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <prvCheckTasksWaitingTermination+0x54>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3b01      	subs	r3, #1
 8007794:	4a0b      	ldr	r2, [pc, #44]	; (80077c4 <prvCheckTasksWaitingTermination+0x54>)
 8007796:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <prvCheckTasksWaitingTermination+0x58>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3b01      	subs	r3, #1
 800779e:	4a0a      	ldr	r2, [pc, #40]	; (80077c8 <prvCheckTasksWaitingTermination+0x58>)
 80077a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077a2:	f000 fd7b 	bl	800829c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f810 	bl	80077cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <prvCheckTasksWaitingTermination+0x58>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e1      	bne.n	8007778 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200011f4 	.word	0x200011f4
 80077c4:	20001220 	.word	0x20001220
 80077c8:	20001208 	.word	0x20001208

080077cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d108      	bne.n	80077f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 feee 	bl	80085c4 <vPortFree>
				vPortFree( pxTCB );
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 feeb 	bl	80085c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077ee:	e018      	b.n	8007822 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d103      	bne.n	8007802 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fee2 	bl	80085c4 <vPortFree>
	}
 8007800:	e00f      	b.n	8007822 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007808:	2b02      	cmp	r3, #2
 800780a:	d00a      	beq.n	8007822 <prvDeleteTCB+0x56>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	60fb      	str	r3, [r7, #12]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <prvDeleteTCB+0x54>
	}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007832:	4b0e      	ldr	r3, [pc, #56]	; (800786c <prvResetNextTaskUnblockTime+0x40>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <prvResetNextTaskUnblockTime+0x14>
 800783c:	2301      	movs	r3, #1
 800783e:	e000      	b.n	8007842 <prvResetNextTaskUnblockTime+0x16>
 8007840:	2300      	movs	r3, #0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007846:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <prvResetNextTaskUnblockTime+0x44>)
 8007848:	f04f 32ff 	mov.w	r2, #4294967295
 800784c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800784e:	e008      	b.n	8007862 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <prvResetNextTaskUnblockTime+0x40>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	4a04      	ldr	r2, [pc, #16]	; (8007870 <prvResetNextTaskUnblockTime+0x44>)
 8007860:	6013      	str	r3, [r2, #0]
}
 8007862:	bf00      	nop
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	bc80      	pop	{r7}
 800786a:	4770      	bx	lr
 800786c:	200011d8 	.word	0x200011d8
 8007870:	20001240 	.word	0x20001240

08007874 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <xTaskGetSchedulerState+0x34>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007882:	2301      	movs	r3, #1
 8007884:	607b      	str	r3, [r7, #4]
 8007886:	e008      	b.n	800789a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <xTaskGetSchedulerState+0x38>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007890:	2302      	movs	r3, #2
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	e001      	b.n	800789a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007896:	2300      	movs	r3, #0
 8007898:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800789a:	687b      	ldr	r3, [r7, #4]
	}
 800789c:	4618      	mov	r0, r3
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	2000122c 	.word	0x2000122c
 80078ac:	20001248 	.word	0x20001248

080078b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d056      	beq.n	8007974 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078c6:	4b2e      	ldr	r3, [pc, #184]	; (8007980 <xTaskPriorityDisinherit+0xd0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d00a      	beq.n	80078e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60fb      	str	r3, [r7, #12]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	f383 8811 	msr	BASEPRI, r3
 80078f6:	f3bf 8f6f 	isb	sy
 80078fa:	f3bf 8f4f 	dsb	sy
 80078fe:	60bb      	str	r3, [r7, #8]
}
 8007900:	bf00      	nop
 8007902:	e7fe      	b.n	8007902 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007908:	1e5a      	subs	r2, r3, #1
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007916:	429a      	cmp	r2, r3
 8007918:	d02c      	beq.n	8007974 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	d128      	bne.n	8007974 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	3304      	adds	r3, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe faf4 	bl	8005f14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <xTaskPriorityDisinherit+0xd4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d903      	bls.n	8007954 <xTaskPriorityDisinherit+0xa4>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <xTaskPriorityDisinherit+0xd4>)
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4a09      	ldr	r2, [pc, #36]	; (8007988 <xTaskPriorityDisinherit+0xd8>)
 8007962:	441a      	add	r2, r3
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fe fa77 	bl	8005e5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007970:	2301      	movs	r3, #1
 8007972:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007974:	697b      	ldr	r3, [r7, #20]
	}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000d4c 	.word	0x20000d4c
 8007984:	20001228 	.word	0x20001228
 8007988:	20000d50 	.word	0x20000d50

0800798c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007996:	4b21      	ldr	r3, [pc, #132]	; (8007a1c <prvAddCurrentTaskToDelayedList+0x90>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800799c:	4b20      	ldr	r3, [pc, #128]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3304      	adds	r3, #4
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fab6 	bl	8005f14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d10a      	bne.n	80079c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079b6:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3304      	adds	r3, #4
 80079bc:	4619      	mov	r1, r3
 80079be:	4819      	ldr	r0, [pc, #100]	; (8007a24 <prvAddCurrentTaskToDelayedList+0x98>)
 80079c0:	f7fe fa4d 	bl	8005e5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079c4:	e026      	b.n	8007a14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4413      	add	r3, r2
 80079cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079ce:	4b14      	ldr	r3, [pc, #80]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d209      	bcs.n	80079f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079de:	4b12      	ldr	r3, [pc, #72]	; (8007a28 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f7fe fa5a 	bl	8005ea4 <vListInsert>
}
 80079f0:	e010      	b.n	8007a14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f2:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <prvAddCurrentTaskToDelayedList+0xa0>)
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x94>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4619      	mov	r1, r3
 80079fe:	4610      	mov	r0, r2
 8007a00:	f7fe fa50 	bl	8005ea4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a04:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d202      	bcs.n	8007a14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a0e:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6013      	str	r3, [r2, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20001224 	.word	0x20001224
 8007a20:	20000d4c 	.word	0x20000d4c
 8007a24:	2000120c 	.word	0x2000120c
 8007a28:	200011dc 	.word	0x200011dc
 8007a2c:	200011d8 	.word	0x200011d8
 8007a30:	20001240 	.word	0x20001240

08007a34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a3e:	f000 facb 	bl	8007fd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a42:	4b1c      	ldr	r3, [pc, #112]	; (8007ab4 <xTimerCreateTimerTask+0x80>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d021      	beq.n	8007a8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a52:	1d3a      	adds	r2, r7, #4
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	f107 030c 	add.w	r3, r7, #12
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe f9b9 	bl	8005dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	9202      	str	r2, [sp, #8]
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	2300      	movs	r3, #0
 8007a72:	460a      	mov	r2, r1
 8007a74:	4910      	ldr	r1, [pc, #64]	; (8007ab8 <xTimerCreateTimerTask+0x84>)
 8007a76:	4811      	ldr	r0, [pc, #68]	; (8007abc <xTimerCreateTimerTask+0x88>)
 8007a78:	f7ff f866 	bl	8006b48 <xTaskCreateStatic>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <xTimerCreateTimerTask+0x8c>)
 8007a80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a82:	4b0f      	ldr	r3, [pc, #60]	; (8007ac0 <xTimerCreateTimerTask+0x8c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	613b      	str	r3, [r7, #16]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007aaa:	697b      	ldr	r3, [r7, #20]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	2000127c 	.word	0x2000127c
 8007ab8:	080089e8 	.word	0x080089e8
 8007abc:	08007be1 	.word	0x08007be1
 8007ac0:	20001280 	.word	0x20001280

08007ac4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	; 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	623b      	str	r3, [r7, #32]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007af2:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <xTimerGenericCommand+0x98>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02a      	beq.n	8007b50 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b05      	cmp	r3, #5
 8007b0a:	dc18      	bgt.n	8007b3e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b0c:	f7ff feb2 	bl	8007874 <xTaskGetSchedulerState>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d109      	bne.n	8007b2a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b16:	4b11      	ldr	r3, [pc, #68]	; (8007b5c <xTimerGenericCommand+0x98>)
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f107 0110 	add.w	r1, r7, #16
 8007b1e:	2300      	movs	r3, #0
 8007b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b22:	f7fe fbaf 	bl	8006284 <xQueueGenericSend>
 8007b26:	6278      	str	r0, [r7, #36]	; 0x24
 8007b28:	e012      	b.n	8007b50 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b2a:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <xTimerGenericCommand+0x98>)
 8007b2c:	6818      	ldr	r0, [r3, #0]
 8007b2e:	f107 0110 	add.w	r1, r7, #16
 8007b32:	2300      	movs	r3, #0
 8007b34:	2200      	movs	r2, #0
 8007b36:	f7fe fba5 	bl	8006284 <xQueueGenericSend>
 8007b3a:	6278      	str	r0, [r7, #36]	; 0x24
 8007b3c:	e008      	b.n	8007b50 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b3e:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <xTimerGenericCommand+0x98>)
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	f107 0110 	add.w	r1, r7, #16
 8007b46:	2300      	movs	r3, #0
 8007b48:	683a      	ldr	r2, [r7, #0]
 8007b4a:	f7fe fc99 	bl	8006480 <xQueueGenericSendFromISR>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3728      	adds	r7, #40	; 0x28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000127c 	.word	0x2000127c

08007b60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <prvProcessExpiredTimer+0x7c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe f9cb 	bl	8005f14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d122      	bne.n	8007bcc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	18d1      	adds	r1, r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	6978      	ldr	r0, [r7, #20]
 8007b94:	f000 f8c8 	bl	8007d28 <prvInsertTimerInActiveList>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d016      	beq.n	8007bcc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	6978      	ldr	r0, [r7, #20]
 8007baa:	f7ff ff8b 	bl	8007ac4 <xTimerGenericCommand>
 8007bae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10a      	bne.n	8007bcc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60fb      	str	r3, [r7, #12]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd0:	6978      	ldr	r0, [r7, #20]
 8007bd2:	4798      	blx	r3
}
 8007bd4:	bf00      	nop
 8007bd6:	3718      	adds	r7, #24
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20001274 	.word	0x20001274

08007be0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007be8:	f107 0308 	add.w	r3, r7, #8
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 f857 	bl	8007ca0 <prvGetNextExpireTime>
 8007bf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f803 	bl	8007c04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007bfe:	f000 f8d5 	bl	8007dac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c02:	e7f1      	b.n	8007be8 <prvTimerTask+0x8>

08007c04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c0e:	f7ff fa4b 	bl	80070a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c12:	f107 0308 	add.w	r3, r7, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f866 	bl	8007ce8 <prvSampleTimeNow>
 8007c1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d130      	bne.n	8007c86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <prvProcessTimerOrBlockTask+0x3c>
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d806      	bhi.n	8007c40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c32:	f7ff fa47 	bl	80070c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7ff ff91 	bl	8007b60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c3e:	e024      	b.n	8007c8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c46:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <prvProcessTimerOrBlockTask+0x90>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf0c      	ite	eq
 8007c50:	2301      	moveq	r3, #1
 8007c52:	2300      	movne	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c58:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <prvProcessTimerOrBlockTask+0x94>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	4619      	mov	r1, r3
 8007c66:	f7fe ff3b 	bl	8006ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c6a:	f7ff fa2b 	bl	80070c4 <xTaskResumeAll>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c74:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <prvProcessTimerOrBlockTask+0x98>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
}
 8007c84:	e001      	b.n	8007c8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c86:	f7ff fa1d 	bl	80070c4 <xTaskResumeAll>
}
 8007c8a:	bf00      	nop
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20001278 	.word	0x20001278
 8007c98:	2000127c 	.word	0x2000127c
 8007c9c:	e000ed04 	.word	0xe000ed04

08007ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ca8:	4b0e      	ldr	r3, [pc, #56]	; (8007ce4 <prvGetNextExpireTime+0x44>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bf0c      	ite	eq
 8007cb2:	2301      	moveq	r3, #1
 8007cb4:	2300      	movne	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cc6:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <prvGetNextExpireTime+0x44>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	e001      	b.n	8007cd6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20001274 	.word	0x20001274

08007ce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007cf0:	f7ff fa86 	bl	8007200 <xTaskGetTickCount>
 8007cf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <prvSampleTimeNow+0x3c>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d205      	bcs.n	8007d0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d00:	f000 f908 	bl	8007f14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e002      	b.n	8007d12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d12:	4a04      	ldr	r2, [pc, #16]	; (8007d24 <prvSampleTimeNow+0x3c>)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20001284 	.word	0x20001284

08007d28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
 8007d34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d812      	bhi.n	8007d74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	1ad2      	subs	r2, r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d302      	bcc.n	8007d62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e01b      	b.n	8007d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d62:	4b10      	ldr	r3, [pc, #64]	; (8007da4 <prvInsertTimerInActiveList+0x7c>)
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f7fe f899 	bl	8005ea4 <vListInsert>
 8007d72:	e012      	b.n	8007d9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d206      	bcs.n	8007d8a <prvInsertTimerInActiveList+0x62>
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d302      	bcc.n	8007d8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	e007      	b.n	8007d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <prvInsertTimerInActiveList+0x80>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3304      	adds	r3, #4
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f7fe f885 	bl	8005ea4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d9a:	697b      	ldr	r3, [r7, #20]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20001278 	.word	0x20001278
 8007da8:	20001274 	.word	0x20001274

08007dac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08e      	sub	sp, #56	; 0x38
 8007db0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007db2:	e09d      	b.n	8007ef0 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da18      	bge.n	8007dec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dba:	1d3b      	adds	r3, r7, #4
 8007dbc:	3304      	adds	r3, #4
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10a      	bne.n	8007ddc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	61fb      	str	r3, [r7, #28]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de2:	6850      	ldr	r0, [r2, #4]
 8007de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de6:	6892      	ldr	r2, [r2, #8]
 8007de8:	4611      	mov	r1, r2
 8007dea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	db7e      	blt.n	8007ef0 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	3304      	adds	r3, #4
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe f886 	bl	8005f14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e08:	463b      	mov	r3, r7
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff ff6c 	bl	8007ce8 <prvSampleTimeNow>
 8007e10:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b09      	cmp	r3, #9
 8007e16:	d86a      	bhi.n	8007eee <prvProcessReceivedCommands+0x142>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <prvProcessReceivedCommands+0x74>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e49 	.word	0x08007e49
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e49 	.word	0x08007e49
 8007e2c:	08007ef1 	.word	0x08007ef1
 8007e30:	08007ea5 	.word	0x08007ea5
 8007e34:	08007edd 	.word	0x08007edd
 8007e38:	08007e49 	.word	0x08007e49
 8007e3c:	08007e49 	.word	0x08007e49
 8007e40:	08007ef1 	.word	0x08007ef1
 8007e44:	08007ea5 	.word	0x08007ea5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e48:	68ba      	ldr	r2, [r7, #8]
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	18d1      	adds	r1, r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e56:	f7ff ff67 	bl	8007d28 <prvInsertTimerInActiveList>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d047      	beq.n	8007ef0 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e66:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d13f      	bne.n	8007ef0 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007e70:	68ba      	ldr	r2, [r7, #8]
 8007e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	441a      	add	r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e82:	f7ff fe1f 	bl	8007ac4 <xTimerGenericCommand>
 8007e86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d130      	bne.n	8007ef0 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	61bb      	str	r3, [r7, #24]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	617b      	str	r3, [r7, #20]
}
 8007ec4:	bf00      	nop
 8007ec6:	e7fe      	b.n	8007ec6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	699a      	ldr	r2, [r3, #24]
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	18d1      	adds	r1, r2, r3
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ed6:	f7ff ff27 	bl	8007d28 <prvInsertTimerInActiveList>
					break;
 8007eda:	e009      	b.n	8007ef0 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ee8:	f000 fb6c 	bl	80085c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007eec:	e000      	b.n	8007ef0 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007eee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ef0:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <prvProcessReceivedCommands+0x164>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	1d39      	adds	r1, r7, #4
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fe fb59 	bl	80065b0 <xQueueReceive>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f47f af57 	bne.w	8007db4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	3730      	adds	r7, #48	; 0x30
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	2000127c 	.word	0x2000127c

08007f14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f1a:	e045      	b.n	8007fa8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f1c:	4b2c      	ldr	r3, [pc, #176]	; (8007fd0 <prvSwitchTimerLists+0xbc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f26:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <prvSwitchTimerLists+0xbc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fd ffed 	bl	8005f14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d12e      	bne.n	8007fa8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d90e      	bls.n	8007f7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f68:	4b19      	ldr	r3, [pc, #100]	; (8007fd0 <prvSwitchTimerLists+0xbc>)
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7fd ff96 	bl	8005ea4 <vListInsert>
 8007f78:	e016      	b.n	8007fa8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	2100      	movs	r1, #0
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff fd9d 	bl	8007ac4 <xTimerGenericCommand>
 8007f8a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10a      	bne.n	8007fa8 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	603b      	str	r3, [r7, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fa8:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <prvSwitchTimerLists+0xbc>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1b4      	bne.n	8007f1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007fb2:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <prvSwitchTimerLists+0xbc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007fb8:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a04      	ldr	r2, [pc, #16]	; (8007fd0 <prvSwitchTimerLists+0xbc>)
 8007fbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007fc0:	4a04      	ldr	r2, [pc, #16]	; (8007fd4 <prvSwitchTimerLists+0xc0>)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	6013      	str	r3, [r2, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20001274 	.word	0x20001274
 8007fd4:	20001278 	.word	0x20001278

08007fd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007fde:	f000 f92d 	bl	800823c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <prvCheckForValidListAndQueue+0x60>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d120      	bne.n	800802c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007fea:	4814      	ldr	r0, [pc, #80]	; (800803c <prvCheckForValidListAndQueue+0x64>)
 8007fec:	f7fd ff0c 	bl	8005e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ff0:	4813      	ldr	r0, [pc, #76]	; (8008040 <prvCheckForValidListAndQueue+0x68>)
 8007ff2:	f7fd ff09 	bl	8005e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ff6:	4b13      	ldr	r3, [pc, #76]	; (8008044 <prvCheckForValidListAndQueue+0x6c>)
 8007ff8:	4a10      	ldr	r2, [pc, #64]	; (800803c <prvCheckForValidListAndQueue+0x64>)
 8007ffa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ffc:	4b12      	ldr	r3, [pc, #72]	; (8008048 <prvCheckForValidListAndQueue+0x70>)
 8007ffe:	4a10      	ldr	r2, [pc, #64]	; (8008040 <prvCheckForValidListAndQueue+0x68>)
 8008000:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008002:	2300      	movs	r3, #0
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	4b11      	ldr	r3, [pc, #68]	; (800804c <prvCheckForValidListAndQueue+0x74>)
 8008008:	4a11      	ldr	r2, [pc, #68]	; (8008050 <prvCheckForValidListAndQueue+0x78>)
 800800a:	2110      	movs	r1, #16
 800800c:	200a      	movs	r0, #10
 800800e:	f7fe f813 	bl	8006038 <xQueueGenericCreateStatic>
 8008012:	4603      	mov	r3, r0
 8008014:	4a08      	ldr	r2, [pc, #32]	; (8008038 <prvCheckForValidListAndQueue+0x60>)
 8008016:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008018:	4b07      	ldr	r3, [pc, #28]	; (8008038 <prvCheckForValidListAndQueue+0x60>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d005      	beq.n	800802c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <prvCheckForValidListAndQueue+0x60>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	490b      	ldr	r1, [pc, #44]	; (8008054 <prvCheckForValidListAndQueue+0x7c>)
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fd32 	bl	8006a90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800802c:	f000 f936 	bl	800829c <vPortExitCritical>
}
 8008030:	bf00      	nop
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	2000127c 	.word	0x2000127c
 800803c:	2000124c 	.word	0x2000124c
 8008040:	20001260 	.word	0x20001260
 8008044:	20001274 	.word	0x20001274
 8008048:	20001278 	.word	0x20001278
 800804c:	20001328 	.word	0x20001328
 8008050:	20001288 	.word	0x20001288
 8008054:	080089f0 	.word	0x080089f0

08008058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	3b04      	subs	r3, #4
 8008068:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3b04      	subs	r3, #4
 8008076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f023 0201 	bic.w	r2, r3, #1
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3b04      	subs	r3, #4
 8008086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008088:	4a08      	ldr	r2, [pc, #32]	; (80080ac <pxPortInitialiseStack+0x54>)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3b14      	subs	r3, #20
 8008092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3b20      	subs	r3, #32
 800809e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080a0:	68fb      	ldr	r3, [r7, #12]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	080080b1 	.word	0x080080b1

080080b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080ba:	4b12      	ldr	r3, [pc, #72]	; (8008104 <prvTaskExitError+0x54>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c2:	d00a      	beq.n	80080da <prvTaskExitError+0x2a>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	60fb      	str	r3, [r7, #12]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <prvTaskExitError+0x28>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	60bb      	str	r3, [r7, #8]
}
 80080ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080ee:	bf00      	nop
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d0fc      	beq.n	80080f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000014 	.word	0x20000014
	...

08008110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008110:	4b07      	ldr	r3, [pc, #28]	; (8008130 <pxCurrentTCBConst2>)
 8008112:	6819      	ldr	r1, [r3, #0]
 8008114:	6808      	ldr	r0, [r1, #0]
 8008116:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800811a:	f380 8809 	msr	PSP, r0
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8811 	msr	BASEPRI, r0
 800812a:	f04e 0e0d 	orr.w	lr, lr, #13
 800812e:	4770      	bx	lr

08008130 <pxCurrentTCBConst2>:
 8008130:	20000d4c 	.word	0x20000d4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop

08008138 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008138:	4806      	ldr	r0, [pc, #24]	; (8008154 <prvPortStartFirstTask+0x1c>)
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	6800      	ldr	r0, [r0, #0]
 800813e:	f380 8808 	msr	MSP, r0
 8008142:	b662      	cpsie	i
 8008144:	b661      	cpsie	f
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	df00      	svc	0
 8008150:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008152:	bf00      	nop
 8008154:	e000ed08 	.word	0xe000ed08

08008158 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800815e:	4b32      	ldr	r3, [pc, #200]	; (8008228 <xPortStartScheduler+0xd0>)
 8008160:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	22ff      	movs	r2, #255	; 0xff
 800816e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008178:	78fb      	ldrb	r3, [r7, #3]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008180:	b2da      	uxtb	r2, r3
 8008182:	4b2a      	ldr	r3, [pc, #168]	; (800822c <xPortStartScheduler+0xd4>)
 8008184:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008186:	4b2a      	ldr	r3, [pc, #168]	; (8008230 <xPortStartScheduler+0xd8>)
 8008188:	2207      	movs	r2, #7
 800818a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800818c:	e009      	b.n	80081a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800818e:	4b28      	ldr	r3, [pc, #160]	; (8008230 <xPortStartScheduler+0xd8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3b01      	subs	r3, #1
 8008194:	4a26      	ldr	r2, [pc, #152]	; (8008230 <xPortStartScheduler+0xd8>)
 8008196:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081aa:	2b80      	cmp	r3, #128	; 0x80
 80081ac:	d0ef      	beq.n	800818e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081ae:	4b20      	ldr	r3, [pc, #128]	; (8008230 <xPortStartScheduler+0xd8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f1c3 0307 	rsb	r3, r3, #7
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d00a      	beq.n	80081d0 <xPortStartScheduler+0x78>
	__asm volatile
 80081ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	60bb      	str	r3, [r7, #8]
}
 80081cc:	bf00      	nop
 80081ce:	e7fe      	b.n	80081ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081d0:	4b17      	ldr	r3, [pc, #92]	; (8008230 <xPortStartScheduler+0xd8>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	4a16      	ldr	r2, [pc, #88]	; (8008230 <xPortStartScheduler+0xd8>)
 80081d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081da:	4b15      	ldr	r3, [pc, #84]	; (8008230 <xPortStartScheduler+0xd8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081e2:	4a13      	ldr	r2, [pc, #76]	; (8008230 <xPortStartScheduler+0xd8>)
 80081e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081ee:	4b11      	ldr	r3, [pc, #68]	; (8008234 <xPortStartScheduler+0xdc>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a10      	ldr	r2, [pc, #64]	; (8008234 <xPortStartScheduler+0xdc>)
 80081f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081fa:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <xPortStartScheduler+0xdc>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a0d      	ldr	r2, [pc, #52]	; (8008234 <xPortStartScheduler+0xdc>)
 8008200:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008204:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008206:	f000 f8b9 	bl	800837c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800820a:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <xPortStartScheduler+0xe0>)
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008210:	f7ff ff92 	bl	8008138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008214:	f7ff f8c0 	bl	8007398 <vTaskSwitchContext>
	prvTaskExitError();
 8008218:	f7ff ff4a 	bl	80080b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	e000e400 	.word	0xe000e400
 800822c:	20001378 	.word	0x20001378
 8008230:	2000137c 	.word	0x2000137c
 8008234:	e000ed20 	.word	0xe000ed20
 8008238:	20000014 	.word	0x20000014

0800823c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	607b      	str	r3, [r7, #4]
}
 8008254:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008256:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <vPortEnterCritical+0x58>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	4a0d      	ldr	r2, [pc, #52]	; (8008294 <vPortEnterCritical+0x58>)
 800825e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <vPortEnterCritical+0x58>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10f      	bne.n	8008288 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008268:	4b0b      	ldr	r3, [pc, #44]	; (8008298 <vPortEnterCritical+0x5c>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00a      	beq.n	8008288 <vPortEnterCritical+0x4c>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	603b      	str	r3, [r7, #0]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vPortEnterCritical+0x4a>
	}
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000014 	.word	0x20000014
 8008298:	e000ed04 	.word	0xe000ed04

0800829c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082a2:	4b11      	ldr	r3, [pc, #68]	; (80082e8 <vPortExitCritical+0x4c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10a      	bne.n	80082c0 <vPortExitCritical+0x24>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	607b      	str	r3, [r7, #4]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082c0:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <vPortExitCritical+0x4c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	4a08      	ldr	r2, [pc, #32]	; (80082e8 <vPortExitCritical+0x4c>)
 80082c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082ca:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <vPortExitCritical+0x4c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d105      	bne.n	80082de <vPortExitCritical+0x42>
 80082d2:	2300      	movs	r3, #0
 80082d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	f383 8811 	msr	BASEPRI, r3
}
 80082dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr
 80082e8:	20000014 	.word	0x20000014
 80082ec:	00000000 	.word	0x00000000

080082f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082f0:	f3ef 8009 	mrs	r0, PSP
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <pxCurrentTCBConst>)
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008300:	6010      	str	r0, [r2, #0]
 8008302:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008306:	f04f 0050 	mov.w	r0, #80	; 0x50
 800830a:	f380 8811 	msr	BASEPRI, r0
 800830e:	f7ff f843 	bl	8007398 <vTaskSwitchContext>
 8008312:	f04f 0000 	mov.w	r0, #0
 8008316:	f380 8811 	msr	BASEPRI, r0
 800831a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	6808      	ldr	r0, [r1, #0]
 8008322:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008326:	f380 8809 	msr	PSP, r0
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	4770      	bx	lr

08008330 <pxCurrentTCBConst>:
 8008330:	20000d4c 	.word	0x20000d4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008352:	f7fe ff63 	bl	800721c <xTaskIncrementTick>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <SysTick_Handler+0x40>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f383 8811 	msr	BASEPRI, r3
}
 800836e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008380:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <vPortSetupTimerInterrupt+0x30>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <vPortSetupTimerInterrupt+0x34>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <vPortSetupTimerInterrupt+0x38>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a09      	ldr	r2, [pc, #36]	; (80083b8 <vPortSetupTimerInterrupt+0x3c>)
 8008392:	fba2 2303 	umull	r2, r3, r2, r3
 8008396:	099b      	lsrs	r3, r3, #6
 8008398:	4a08      	ldr	r2, [pc, #32]	; (80083bc <vPortSetupTimerInterrupt+0x40>)
 800839a:	3b01      	subs	r3, #1
 800839c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800839e:	4b03      	ldr	r3, [pc, #12]	; (80083ac <vPortSetupTimerInterrupt+0x30>)
 80083a0:	2207      	movs	r2, #7
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	e000e010 	.word	0xe000e010
 80083b0:	e000e018 	.word	0xe000e018
 80083b4:	20000008 	.word	0x20000008
 80083b8:	10624dd3 	.word	0x10624dd3
 80083bc:	e000e014 	.word	0xe000e014

080083c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083c6:	f3ef 8305 	mrs	r3, IPSR
 80083ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b0f      	cmp	r3, #15
 80083d0:	d914      	bls.n	80083fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083d2:	4a16      	ldr	r2, [pc, #88]	; (800842c <vPortValidateInterruptPriority+0x6c>)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083dc:	4b14      	ldr	r3, [pc, #80]	; (8008430 <vPortValidateInterruptPriority+0x70>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	7afa      	ldrb	r2, [r7, #11]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d20a      	bcs.n	80083fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	607b      	str	r3, [r7, #4]
}
 80083f8:	bf00      	nop
 80083fa:	e7fe      	b.n	80083fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083fc:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <vPortValidateInterruptPriority+0x74>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <vPortValidateInterruptPriority+0x78>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d90a      	bls.n	8008422 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	603b      	str	r3, [r7, #0]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <vPortValidateInterruptPriority+0x60>
	}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr
 800842c:	e000e3f0 	.word	0xe000e3f0
 8008430:	20001378 	.word	0x20001378
 8008434:	e000ed0c 	.word	0xe000ed0c
 8008438:	2000137c 	.word	0x2000137c

0800843c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	; 0x28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008444:	2300      	movs	r3, #0
 8008446:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008448:	f7fe fe2e 	bl	80070a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800844c:	4b58      	ldr	r3, [pc, #352]	; (80085b0 <pvPortMalloc+0x174>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008454:	f000 f910 	bl	8008678 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008458:	4b56      	ldr	r3, [pc, #344]	; (80085b4 <pvPortMalloc+0x178>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4013      	ands	r3, r2
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 808e 	bne.w	8008582 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d01d      	beq.n	80084a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800846c:	2208      	movs	r2, #8
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4413      	add	r3, r2
 8008472:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b00      	cmp	r3, #0
 800847c:	d014      	beq.n	80084a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f023 0307 	bic.w	r3, r3, #7
 8008484:	3308      	adds	r3, #8
 8008486:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f003 0307 	and.w	r3, r3, #7
 800848e:	2b00      	cmp	r3, #0
 8008490:	d00a      	beq.n	80084a8 <pvPortMalloc+0x6c>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	617b      	str	r3, [r7, #20]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d069      	beq.n	8008582 <pvPortMalloc+0x146>
 80084ae:	4b42      	ldr	r3, [pc, #264]	; (80085b8 <pvPortMalloc+0x17c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d864      	bhi.n	8008582 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084b8:	4b40      	ldr	r3, [pc, #256]	; (80085bc <pvPortMalloc+0x180>)
 80084ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084bc:	4b3f      	ldr	r3, [pc, #252]	; (80085bc <pvPortMalloc+0x180>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084c2:	e004      	b.n	80084ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d903      	bls.n	80084e0 <pvPortMalloc+0xa4>
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1f1      	bne.n	80084c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084e0:	4b33      	ldr	r3, [pc, #204]	; (80085b0 <pvPortMalloc+0x174>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d04b      	beq.n	8008582 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2208      	movs	r2, #8
 80084f0:	4413      	add	r3, r2
 80084f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	2308      	movs	r3, #8
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	429a      	cmp	r2, r3
 800850a:	d91f      	bls.n	800854c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800850c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4413      	add	r3, r2
 8008512:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <pvPortMalloc+0xf8>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	613b      	str	r3, [r7, #16]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	1ad2      	subs	r2, r2, r3
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008546:	69b8      	ldr	r0, [r7, #24]
 8008548:	f000 f8f8 	bl	800873c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800854c:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <pvPortMalloc+0x17c>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <pvPortMalloc+0x17c>)
 8008558:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <pvPortMalloc+0x17c>)
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4b18      	ldr	r3, [pc, #96]	; (80085c0 <pvPortMalloc+0x184>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d203      	bcs.n	800856e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <pvPortMalloc+0x17c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <pvPortMalloc+0x184>)
 800856c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	685a      	ldr	r2, [r3, #4]
 8008572:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <pvPortMalloc+0x178>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	431a      	orrs	r2, r3
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008582:	f7fe fd9f 	bl	80070c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	f003 0307 	and.w	r3, r3, #7
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <pvPortMalloc+0x16a>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	60fb      	str	r3, [r7, #12]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <pvPortMalloc+0x168>
	return pvReturn;
 80085a6:	69fb      	ldr	r3, [r7, #28]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3728      	adds	r7, #40	; 0x28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20002328 	.word	0x20002328
 80085b4:	20002334 	.word	0x20002334
 80085b8:	2000232c 	.word	0x2000232c
 80085bc:	20002320 	.word	0x20002320
 80085c0:	20002330 	.word	0x20002330

080085c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d048      	beq.n	8008668 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085d6:	2308      	movs	r3, #8
 80085d8:	425b      	negs	r3, r3
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	4413      	add	r3, r2
 80085de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	685a      	ldr	r2, [r3, #4]
 80085e8:	4b21      	ldr	r3, [pc, #132]	; (8008670 <vPortFree+0xac>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4013      	ands	r3, r2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d10a      	bne.n	8008608 <vPortFree+0x44>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	60fb      	str	r3, [r7, #12]
}
 8008604:	bf00      	nop
 8008606:	e7fe      	b.n	8008606 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <vPortFree+0x62>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	60bb      	str	r3, [r7, #8]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	4b11      	ldr	r3, [pc, #68]	; (8008670 <vPortFree+0xac>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4013      	ands	r3, r2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d019      	beq.n	8008668 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d115      	bne.n	8008668 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	685a      	ldr	r2, [r3, #4]
 8008640:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <vPortFree+0xac>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	43db      	mvns	r3, r3
 8008646:	401a      	ands	r2, r3
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800864c:	f7fe fd2c 	bl	80070a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <vPortFree+0xb0>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4413      	add	r3, r2
 800865a:	4a06      	ldr	r2, [pc, #24]	; (8008674 <vPortFree+0xb0>)
 800865c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800865e:	6938      	ldr	r0, [r7, #16]
 8008660:	f000 f86c 	bl	800873c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008664:	f7fe fd2e 	bl	80070c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008668:	bf00      	nop
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20002334 	.word	0x20002334
 8008674:	2000232c 	.word	0x2000232c

08008678 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800867e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008682:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008684:	4b27      	ldr	r3, [pc, #156]	; (8008724 <prvHeapInit+0xac>)
 8008686:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f003 0307 	and.w	r3, r3, #7
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00c      	beq.n	80086ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3307      	adds	r3, #7
 8008696:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0307 	bic.w	r3, r3, #7
 800869e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	4a1f      	ldr	r2, [pc, #124]	; (8008724 <prvHeapInit+0xac>)
 80086a8:	4413      	add	r3, r2
 80086aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086b0:	4a1d      	ldr	r2, [pc, #116]	; (8008728 <prvHeapInit+0xb0>)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086b6:	4b1c      	ldr	r3, [pc, #112]	; (8008728 <prvHeapInit+0xb0>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4413      	add	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086c4:	2208      	movs	r2, #8
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f023 0307 	bic.w	r3, r3, #7
 80086d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4a15      	ldr	r2, [pc, #84]	; (800872c <prvHeapInit+0xb4>)
 80086d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80086da:	4b14      	ldr	r3, [pc, #80]	; (800872c <prvHeapInit+0xb4>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2200      	movs	r2, #0
 80086e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80086e2:	4b12      	ldr	r3, [pc, #72]	; (800872c <prvHeapInit+0xb4>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	1ad2      	subs	r2, r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <prvHeapInit+0xb4>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <prvHeapInit+0xb8>)
 8008706:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	4a09      	ldr	r2, [pc, #36]	; (8008734 <prvHeapInit+0xbc>)
 800870e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008710:	4b09      	ldr	r3, [pc, #36]	; (8008738 <prvHeapInit+0xc0>)
 8008712:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008716:	601a      	str	r2, [r3, #0]
}
 8008718:	bf00      	nop
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20001380 	.word	0x20001380
 8008728:	20002320 	.word	0x20002320
 800872c:	20002328 	.word	0x20002328
 8008730:	20002330 	.word	0x20002330
 8008734:	2000232c 	.word	0x2000232c
 8008738:	20002334 	.word	0x20002334

0800873c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008744:	4b27      	ldr	r3, [pc, #156]	; (80087e4 <prvInsertBlockIntoFreeList+0xa8>)
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	e002      	b.n	8008750 <prvInsertBlockIntoFreeList+0x14>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	429a      	cmp	r2, r3
 8008758:	d8f7      	bhi.n	800874a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4413      	add	r3, r2
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	d108      	bne.n	800877e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	441a      	add	r2, r3
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	441a      	add	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d118      	bne.n	80087c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <prvInsertBlockIntoFreeList+0xac>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d00d      	beq.n	80087ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	441a      	add	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	e008      	b.n	80087cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <prvInsertBlockIntoFreeList+0xac>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e003      	b.n	80087cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d002      	beq.n	80087da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087da:	bf00      	nop
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	bc80      	pop	{r7}
 80087e2:	4770      	bx	lr
 80087e4:	20002320 	.word	0x20002320
 80087e8:	20002328 	.word	0x20002328

080087ec <__itoa>:
 80087ec:	1e93      	subs	r3, r2, #2
 80087ee:	2b22      	cmp	r3, #34	; 0x22
 80087f0:	b510      	push	{r4, lr}
 80087f2:	460c      	mov	r4, r1
 80087f4:	d904      	bls.n	8008800 <__itoa+0x14>
 80087f6:	2300      	movs	r3, #0
 80087f8:	461c      	mov	r4, r3
 80087fa:	700b      	strb	r3, [r1, #0]
 80087fc:	4620      	mov	r0, r4
 80087fe:	bd10      	pop	{r4, pc}
 8008800:	2a0a      	cmp	r2, #10
 8008802:	d109      	bne.n	8008818 <__itoa+0x2c>
 8008804:	2800      	cmp	r0, #0
 8008806:	da07      	bge.n	8008818 <__itoa+0x2c>
 8008808:	232d      	movs	r3, #45	; 0x2d
 800880a:	700b      	strb	r3, [r1, #0]
 800880c:	2101      	movs	r1, #1
 800880e:	4240      	negs	r0, r0
 8008810:	4421      	add	r1, r4
 8008812:	f000 f805 	bl	8008820 <__utoa>
 8008816:	e7f1      	b.n	80087fc <__itoa+0x10>
 8008818:	2100      	movs	r1, #0
 800881a:	e7f9      	b.n	8008810 <__itoa+0x24>

0800881c <itoa>:
 800881c:	f7ff bfe6 	b.w	80087ec <__itoa>

08008820 <__utoa>:
 8008820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008822:	b08b      	sub	sp, #44	; 0x2c
 8008824:	4605      	mov	r5, r0
 8008826:	460b      	mov	r3, r1
 8008828:	466e      	mov	r6, sp
 800882a:	4c1d      	ldr	r4, [pc, #116]	; (80088a0 <__utoa+0x80>)
 800882c:	f104 0c20 	add.w	ip, r4, #32
 8008830:	4637      	mov	r7, r6
 8008832:	6820      	ldr	r0, [r4, #0]
 8008834:	6861      	ldr	r1, [r4, #4]
 8008836:	3408      	adds	r4, #8
 8008838:	c703      	stmia	r7!, {r0, r1}
 800883a:	4564      	cmp	r4, ip
 800883c:	463e      	mov	r6, r7
 800883e:	d1f7      	bne.n	8008830 <__utoa+0x10>
 8008840:	7921      	ldrb	r1, [r4, #4]
 8008842:	6820      	ldr	r0, [r4, #0]
 8008844:	7139      	strb	r1, [r7, #4]
 8008846:	1e91      	subs	r1, r2, #2
 8008848:	2922      	cmp	r1, #34	; 0x22
 800884a:	6038      	str	r0, [r7, #0]
 800884c:	f04f 0100 	mov.w	r1, #0
 8008850:	d904      	bls.n	800885c <__utoa+0x3c>
 8008852:	7019      	strb	r1, [r3, #0]
 8008854:	460b      	mov	r3, r1
 8008856:	4618      	mov	r0, r3
 8008858:	b00b      	add	sp, #44	; 0x2c
 800885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885c:	1e58      	subs	r0, r3, #1
 800885e:	4684      	mov	ip, r0
 8008860:	fbb5 f7f2 	udiv	r7, r5, r2
 8008864:	fb02 5617 	mls	r6, r2, r7, r5
 8008868:	3628      	adds	r6, #40	; 0x28
 800886a:	446e      	add	r6, sp
 800886c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008870:	460c      	mov	r4, r1
 8008872:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008876:	462e      	mov	r6, r5
 8008878:	42b2      	cmp	r2, r6
 800887a:	463d      	mov	r5, r7
 800887c:	f101 0101 	add.w	r1, r1, #1
 8008880:	d9ee      	bls.n	8008860 <__utoa+0x40>
 8008882:	2200      	movs	r2, #0
 8008884:	545a      	strb	r2, [r3, r1]
 8008886:	1919      	adds	r1, r3, r4
 8008888:	1aa5      	subs	r5, r4, r2
 800888a:	42aa      	cmp	r2, r5
 800888c:	dae3      	bge.n	8008856 <__utoa+0x36>
 800888e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008892:	780e      	ldrb	r6, [r1, #0]
 8008894:	3201      	adds	r2, #1
 8008896:	7006      	strb	r6, [r0, #0]
 8008898:	f801 5901 	strb.w	r5, [r1], #-1
 800889c:	e7f4      	b.n	8008888 <__utoa+0x68>
 800889e:	bf00      	nop
 80088a0:	0800936e 	.word	0x0800936e

080088a4 <memset>:
 80088a4:	4603      	mov	r3, r0
 80088a6:	4402      	add	r2, r0
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d100      	bne.n	80088ae <memset+0xa>
 80088ac:	4770      	bx	lr
 80088ae:	f803 1b01 	strb.w	r1, [r3], #1
 80088b2:	e7f9      	b.n	80088a8 <memset+0x4>

080088b4 <__libc_init_array>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	2600      	movs	r6, #0
 80088b8:	4d0c      	ldr	r5, [pc, #48]	; (80088ec <__libc_init_array+0x38>)
 80088ba:	4c0d      	ldr	r4, [pc, #52]	; (80088f0 <__libc_init_array+0x3c>)
 80088bc:	1b64      	subs	r4, r4, r5
 80088be:	10a4      	asrs	r4, r4, #2
 80088c0:	42a6      	cmp	r6, r4
 80088c2:	d109      	bne.n	80088d8 <__libc_init_array+0x24>
 80088c4:	f000 f830 	bl	8008928 <_init>
 80088c8:	2600      	movs	r6, #0
 80088ca:	4d0a      	ldr	r5, [pc, #40]	; (80088f4 <__libc_init_array+0x40>)
 80088cc:	4c0a      	ldr	r4, [pc, #40]	; (80088f8 <__libc_init_array+0x44>)
 80088ce:	1b64      	subs	r4, r4, r5
 80088d0:	10a4      	asrs	r4, r4, #2
 80088d2:	42a6      	cmp	r6, r4
 80088d4:	d105      	bne.n	80088e2 <__libc_init_array+0x2e>
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088dc:	4798      	blx	r3
 80088de:	3601      	adds	r6, #1
 80088e0:	e7ee      	b.n	80088c0 <__libc_init_array+0xc>
 80088e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088e6:	4798      	blx	r3
 80088e8:	3601      	adds	r6, #1
 80088ea:	e7f2      	b.n	80088d2 <__libc_init_array+0x1e>
 80088ec:	08009394 	.word	0x08009394
 80088f0:	08009394 	.word	0x08009394
 80088f4:	08009394 	.word	0x08009394
 80088f8:	08009398 	.word	0x08009398

080088fc <strcpy>:
 80088fc:	4603      	mov	r3, r0
 80088fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008902:	f803 2b01 	strb.w	r2, [r3], #1
 8008906:	2a00      	cmp	r2, #0
 8008908:	d1f9      	bne.n	80088fe <strcpy+0x2>
 800890a:	4770      	bx	lr

0800890c <memcpy>:
 800890c:	440a      	add	r2, r1
 800890e:	4291      	cmp	r1, r2
 8008910:	f100 33ff 	add.w	r3, r0, #4294967295
 8008914:	d100      	bne.n	8008918 <memcpy+0xc>
 8008916:	4770      	bx	lr
 8008918:	b510      	push	{r4, lr}
 800891a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800891e:	4291      	cmp	r1, r2
 8008920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008924:	d1f9      	bne.n	800891a <memcpy+0xe>
 8008926:	bd10      	pop	{r4, pc}

08008928 <_init>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr

08008934 <_fini>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr
